
../gcc/redboard_artemis_atp/bin/SD_svl.axf:     file format elf32-littlearm


Disassembly of section .text:

00010000 <g_am_pfnVectors>:
   10000:	f8 ff 05 10 75 07 01 00 f9 07 01 00 49 08 01 00     ....u.......I...
   10010:	ff 07 01 00 ff 07 01 00 ff 07 01 00 00 00 00 00     ................
	...
   1002c:	05 08 01 00 05 08 01 00 00 00 00 00 05 08 01 00     ................
   1003c:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   1004c:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   1005c:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   1006c:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   1007c:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   1008c:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   1009c:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   100ac:	05 08 01 00 05 08 01 00 05 08 01 00 05 08 01 00     ................
   100bc:	05 08 01 00                                         ....

000100c0 <__Patchable>:
	...

00010100 <__aeabi_d2f>:
   10100:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10104:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10108:	bf24      	itt	cs
   1010a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1010e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10112:	d90d      	bls.n	10130 <__aeabi_d2f+0x30>
   10114:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10118:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1011c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10120:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10124:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10128:	bf08      	it	eq
   1012a:	f020 0001 	biceq.w	r0, r0, #1
   1012e:	4770      	bx	lr
   10130:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10134:	d121      	bne.n	1017a <__aeabi_d2f+0x7a>
   10136:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1013a:	bfbc      	itt	lt
   1013c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10140:	4770      	bxlt	lr
   10142:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10146:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1014a:	f1c2 0218 	rsb	r2, r2, #24
   1014e:	f1c2 0c20 	rsb	ip, r2, #32
   10152:	fa10 f30c 	lsls.w	r3, r0, ip
   10156:	fa20 f002 	lsr.w	r0, r0, r2
   1015a:	bf18      	it	ne
   1015c:	f040 0001 	orrne.w	r0, r0, #1
   10160:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10164:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10168:	fa03 fc0c 	lsl.w	ip, r3, ip
   1016c:	ea40 000c 	orr.w	r0, r0, ip
   10170:	fa23 f302 	lsr.w	r3, r3, r2
   10174:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10178:	e7cc      	b.n	10114 <__aeabi_d2f+0x14>
   1017a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1017e:	d107      	bne.n	10190 <__aeabi_d2f+0x90>
   10180:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10184:	bf1e      	ittt	ne
   10186:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1018a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1018e:	4770      	bxne	lr
   10190:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10194:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10198:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1019c:	4770      	bx	lr
   1019e:	bf00      	nop

000101a0 <__aeabi_uldivmod>:
   101a0:	b953      	cbnz	r3, 101b8 <__aeabi_uldivmod+0x18>
   101a2:	b94a      	cbnz	r2, 101b8 <__aeabi_uldivmod+0x18>
   101a4:	2900      	cmp	r1, #0
   101a6:	bf08      	it	eq
   101a8:	2800      	cmpeq	r0, #0
   101aa:	bf1c      	itt	ne
   101ac:	f04f 31ff 	movne.w	r1, #4294967295
   101b0:	f04f 30ff 	movne.w	r0, #4294967295
   101b4:	f000 b974 	b.w	104a0 <__aeabi_idiv0>
   101b8:	f1ad 0c08 	sub.w	ip, sp, #8
   101bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   101c0:	f000 f806 	bl	101d0 <__udivmoddi4>
   101c4:	f8dd e004 	ldr.w	lr, [sp, #4]
   101c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   101cc:	b004      	add	sp, #16
   101ce:	4770      	bx	lr

000101d0 <__udivmoddi4>:
   101d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101d4:	9e08      	ldr	r6, [sp, #32]
   101d6:	4604      	mov	r4, r0
   101d8:	4688      	mov	r8, r1
   101da:	2b00      	cmp	r3, #0
   101dc:	f040 8085 	bne.w	102ea <__udivmoddi4+0x11a>
   101e0:	428a      	cmp	r2, r1
   101e2:	4615      	mov	r5, r2
   101e4:	d948      	bls.n	10278 <__udivmoddi4+0xa8>
   101e6:	fab2 f282 	clz	r2, r2
   101ea:	b14a      	cbz	r2, 10200 <__udivmoddi4+0x30>
   101ec:	f1c2 0720 	rsb	r7, r2, #32
   101f0:	fa01 f302 	lsl.w	r3, r1, r2
   101f4:	fa20 f707 	lsr.w	r7, r0, r7
   101f8:	4095      	lsls	r5, r2
   101fa:	ea47 0803 	orr.w	r8, r7, r3
   101fe:	4094      	lsls	r4, r2
   10200:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10204:	0c23      	lsrs	r3, r4, #16
   10206:	fbb8 f7fe 	udiv	r7, r8, lr
   1020a:	fa1f fc85 	uxth.w	ip, r5
   1020e:	fb0e 8817 	mls	r8, lr, r7, r8
   10212:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   10216:	fb07 f10c 	mul.w	r1, r7, ip
   1021a:	4299      	cmp	r1, r3
   1021c:	d909      	bls.n	10232 <__udivmoddi4+0x62>
   1021e:	18eb      	adds	r3, r5, r3
   10220:	f107 30ff 	add.w	r0, r7, #4294967295
   10224:	f080 80e3 	bcs.w	103ee <__udivmoddi4+0x21e>
   10228:	4299      	cmp	r1, r3
   1022a:	f240 80e0 	bls.w	103ee <__udivmoddi4+0x21e>
   1022e:	3f02      	subs	r7, #2
   10230:	442b      	add	r3, r5
   10232:	1a5b      	subs	r3, r3, r1
   10234:	b2a4      	uxth	r4, r4
   10236:	fbb3 f0fe 	udiv	r0, r3, lr
   1023a:	fb0e 3310 	mls	r3, lr, r0, r3
   1023e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10242:	fb00 fc0c 	mul.w	ip, r0, ip
   10246:	45a4      	cmp	ip, r4
   10248:	d909      	bls.n	1025e <__udivmoddi4+0x8e>
   1024a:	192c      	adds	r4, r5, r4
   1024c:	f100 33ff 	add.w	r3, r0, #4294967295
   10250:	f080 80cb 	bcs.w	103ea <__udivmoddi4+0x21a>
   10254:	45a4      	cmp	ip, r4
   10256:	f240 80c8 	bls.w	103ea <__udivmoddi4+0x21a>
   1025a:	3802      	subs	r0, #2
   1025c:	442c      	add	r4, r5
   1025e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   10262:	eba4 040c 	sub.w	r4, r4, ip
   10266:	2700      	movs	r7, #0
   10268:	b11e      	cbz	r6, 10272 <__udivmoddi4+0xa2>
   1026a:	40d4      	lsrs	r4, r2
   1026c:	2300      	movs	r3, #0
   1026e:	e9c6 4300 	strd	r4, r3, [r6]
   10272:	4639      	mov	r1, r7
   10274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10278:	2a00      	cmp	r2, #0
   1027a:	d053      	beq.n	10324 <__udivmoddi4+0x154>
   1027c:	fab2 f282 	clz	r2, r2
   10280:	2a00      	cmp	r2, #0
   10282:	f040 80b6 	bne.w	103f2 <__udivmoddi4+0x222>
   10286:	1b49      	subs	r1, r1, r5
   10288:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1028c:	fa1f f885 	uxth.w	r8, r5
   10290:	2701      	movs	r7, #1
   10292:	fbb1 fcfe 	udiv	ip, r1, lr
   10296:	0c23      	lsrs	r3, r4, #16
   10298:	fb0e 111c 	mls	r1, lr, ip, r1
   1029c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   102a0:	fb08 f10c 	mul.w	r1, r8, ip
   102a4:	4299      	cmp	r1, r3
   102a6:	d907      	bls.n	102b8 <__udivmoddi4+0xe8>
   102a8:	18eb      	adds	r3, r5, r3
   102aa:	f10c 30ff 	add.w	r0, ip, #4294967295
   102ae:	d202      	bcs.n	102b6 <__udivmoddi4+0xe6>
   102b0:	4299      	cmp	r1, r3
   102b2:	f200 80ec 	bhi.w	1048e <__udivmoddi4+0x2be>
   102b6:	4684      	mov	ip, r0
   102b8:	1a59      	subs	r1, r3, r1
   102ba:	b2a3      	uxth	r3, r4
   102bc:	fbb1 f0fe 	udiv	r0, r1, lr
   102c0:	fb0e 1410 	mls	r4, lr, r0, r1
   102c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   102c8:	fb08 f800 	mul.w	r8, r8, r0
   102cc:	45a0      	cmp	r8, r4
   102ce:	d907      	bls.n	102e0 <__udivmoddi4+0x110>
   102d0:	192c      	adds	r4, r5, r4
   102d2:	f100 33ff 	add.w	r3, r0, #4294967295
   102d6:	d202      	bcs.n	102de <__udivmoddi4+0x10e>
   102d8:	45a0      	cmp	r8, r4
   102da:	f200 80dc 	bhi.w	10496 <__udivmoddi4+0x2c6>
   102de:	4618      	mov	r0, r3
   102e0:	eba4 0408 	sub.w	r4, r4, r8
   102e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   102e8:	e7be      	b.n	10268 <__udivmoddi4+0x98>
   102ea:	428b      	cmp	r3, r1
   102ec:	d908      	bls.n	10300 <__udivmoddi4+0x130>
   102ee:	2e00      	cmp	r6, #0
   102f0:	d078      	beq.n	103e4 <__udivmoddi4+0x214>
   102f2:	2700      	movs	r7, #0
   102f4:	e9c6 0100 	strd	r0, r1, [r6]
   102f8:	4638      	mov	r0, r7
   102fa:	4639      	mov	r1, r7
   102fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10300:	fab3 f783 	clz	r7, r3
   10304:	b97f      	cbnz	r7, 10326 <__udivmoddi4+0x156>
   10306:	428b      	cmp	r3, r1
   10308:	d302      	bcc.n	10310 <__udivmoddi4+0x140>
   1030a:	4282      	cmp	r2, r0
   1030c:	f200 80bd 	bhi.w	1048a <__udivmoddi4+0x2ba>
   10310:	1a84      	subs	r4, r0, r2
   10312:	eb61 0303 	sbc.w	r3, r1, r3
   10316:	2001      	movs	r0, #1
   10318:	4698      	mov	r8, r3
   1031a:	2e00      	cmp	r6, #0
   1031c:	d0a9      	beq.n	10272 <__udivmoddi4+0xa2>
   1031e:	e9c6 4800 	strd	r4, r8, [r6]
   10322:	e7a6      	b.n	10272 <__udivmoddi4+0xa2>
   10324:	deff      	udf	#255	; 0xff
   10326:	f1c7 0520 	rsb	r5, r7, #32
   1032a:	40bb      	lsls	r3, r7
   1032c:	fa22 fc05 	lsr.w	ip, r2, r5
   10330:	ea4c 0c03 	orr.w	ip, ip, r3
   10334:	fa01 f407 	lsl.w	r4, r1, r7
   10338:	fa20 f805 	lsr.w	r8, r0, r5
   1033c:	fa21 f305 	lsr.w	r3, r1, r5
   10340:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   10344:	ea48 0404 	orr.w	r4, r8, r4
   10348:	fbb3 f9fe 	udiv	r9, r3, lr
   1034c:	0c21      	lsrs	r1, r4, #16
   1034e:	fb0e 3319 	mls	r3, lr, r9, r3
   10352:	fa1f f88c 	uxth.w	r8, ip
   10356:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   1035a:	fb09 fa08 	mul.w	sl, r9, r8
   1035e:	459a      	cmp	sl, r3
   10360:	fa02 f207 	lsl.w	r2, r2, r7
   10364:	fa00 f107 	lsl.w	r1, r0, r7
   10368:	d90b      	bls.n	10382 <__udivmoddi4+0x1b2>
   1036a:	eb1c 0303 	adds.w	r3, ip, r3
   1036e:	f109 30ff 	add.w	r0, r9, #4294967295
   10372:	f080 8088 	bcs.w	10486 <__udivmoddi4+0x2b6>
   10376:	459a      	cmp	sl, r3
   10378:	f240 8085 	bls.w	10486 <__udivmoddi4+0x2b6>
   1037c:	f1a9 0902 	sub.w	r9, r9, #2
   10380:	4463      	add	r3, ip
   10382:	eba3 030a 	sub.w	r3, r3, sl
   10386:	b2a4      	uxth	r4, r4
   10388:	fbb3 f0fe 	udiv	r0, r3, lr
   1038c:	fb0e 3310 	mls	r3, lr, r0, r3
   10390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10394:	fb00 f808 	mul.w	r8, r0, r8
   10398:	45a0      	cmp	r8, r4
   1039a:	d908      	bls.n	103ae <__udivmoddi4+0x1de>
   1039c:	eb1c 0404 	adds.w	r4, ip, r4
   103a0:	f100 33ff 	add.w	r3, r0, #4294967295
   103a4:	d26b      	bcs.n	1047e <__udivmoddi4+0x2ae>
   103a6:	45a0      	cmp	r8, r4
   103a8:	d969      	bls.n	1047e <__udivmoddi4+0x2ae>
   103aa:	3802      	subs	r0, #2
   103ac:	4464      	add	r4, ip
   103ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   103b2:	eba4 0408 	sub.w	r4, r4, r8
   103b6:	fba0 8902 	umull	r8, r9, r0, r2
   103ba:	454c      	cmp	r4, r9
   103bc:	46c6      	mov	lr, r8
   103be:	464b      	mov	r3, r9
   103c0:	d354      	bcc.n	1046c <__udivmoddi4+0x29c>
   103c2:	d051      	beq.n	10468 <__udivmoddi4+0x298>
   103c4:	2e00      	cmp	r6, #0
   103c6:	d069      	beq.n	1049c <__udivmoddi4+0x2cc>
   103c8:	ebb1 020e 	subs.w	r2, r1, lr
   103cc:	eb64 0403 	sbc.w	r4, r4, r3
   103d0:	fa04 f505 	lsl.w	r5, r4, r5
   103d4:	fa22 f307 	lsr.w	r3, r2, r7
   103d8:	40fc      	lsrs	r4, r7
   103da:	431d      	orrs	r5, r3
   103dc:	e9c6 5400 	strd	r5, r4, [r6]
   103e0:	2700      	movs	r7, #0
   103e2:	e746      	b.n	10272 <__udivmoddi4+0xa2>
   103e4:	4637      	mov	r7, r6
   103e6:	4630      	mov	r0, r6
   103e8:	e743      	b.n	10272 <__udivmoddi4+0xa2>
   103ea:	4618      	mov	r0, r3
   103ec:	e737      	b.n	1025e <__udivmoddi4+0x8e>
   103ee:	4607      	mov	r7, r0
   103f0:	e71f      	b.n	10232 <__udivmoddi4+0x62>
   103f2:	f1c2 0320 	rsb	r3, r2, #32
   103f6:	fa20 f703 	lsr.w	r7, r0, r3
   103fa:	4095      	lsls	r5, r2
   103fc:	fa01 f002 	lsl.w	r0, r1, r2
   10400:	fa21 f303 	lsr.w	r3, r1, r3
   10404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10408:	4338      	orrs	r0, r7
   1040a:	0c01      	lsrs	r1, r0, #16
   1040c:	fbb3 f7fe 	udiv	r7, r3, lr
   10410:	fa1f f885 	uxth.w	r8, r5
   10414:	fb0e 3317 	mls	r3, lr, r7, r3
   10418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1041c:	fb07 f308 	mul.w	r3, r7, r8
   10420:	428b      	cmp	r3, r1
   10422:	fa04 f402 	lsl.w	r4, r4, r2
   10426:	d907      	bls.n	10438 <__udivmoddi4+0x268>
   10428:	1869      	adds	r1, r5, r1
   1042a:	f107 3cff 	add.w	ip, r7, #4294967295
   1042e:	d228      	bcs.n	10482 <__udivmoddi4+0x2b2>
   10430:	428b      	cmp	r3, r1
   10432:	d926      	bls.n	10482 <__udivmoddi4+0x2b2>
   10434:	3f02      	subs	r7, #2
   10436:	4429      	add	r1, r5
   10438:	1acb      	subs	r3, r1, r3
   1043a:	b281      	uxth	r1, r0
   1043c:	fbb3 f0fe 	udiv	r0, r3, lr
   10440:	fb0e 3310 	mls	r3, lr, r0, r3
   10444:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   10448:	fb00 f308 	mul.w	r3, r0, r8
   1044c:	428b      	cmp	r3, r1
   1044e:	d907      	bls.n	10460 <__udivmoddi4+0x290>
   10450:	1869      	adds	r1, r5, r1
   10452:	f100 3cff 	add.w	ip, r0, #4294967295
   10456:	d210      	bcs.n	1047a <__udivmoddi4+0x2aa>
   10458:	428b      	cmp	r3, r1
   1045a:	d90e      	bls.n	1047a <__udivmoddi4+0x2aa>
   1045c:	3802      	subs	r0, #2
   1045e:	4429      	add	r1, r5
   10460:	1ac9      	subs	r1, r1, r3
   10462:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   10466:	e714      	b.n	10292 <__udivmoddi4+0xc2>
   10468:	4541      	cmp	r1, r8
   1046a:	d2ab      	bcs.n	103c4 <__udivmoddi4+0x1f4>
   1046c:	ebb8 0e02 	subs.w	lr, r8, r2
   10470:	eb69 020c 	sbc.w	r2, r9, ip
   10474:	3801      	subs	r0, #1
   10476:	4613      	mov	r3, r2
   10478:	e7a4      	b.n	103c4 <__udivmoddi4+0x1f4>
   1047a:	4660      	mov	r0, ip
   1047c:	e7f0      	b.n	10460 <__udivmoddi4+0x290>
   1047e:	4618      	mov	r0, r3
   10480:	e795      	b.n	103ae <__udivmoddi4+0x1de>
   10482:	4667      	mov	r7, ip
   10484:	e7d8      	b.n	10438 <__udivmoddi4+0x268>
   10486:	4681      	mov	r9, r0
   10488:	e77b      	b.n	10382 <__udivmoddi4+0x1b2>
   1048a:	4638      	mov	r0, r7
   1048c:	e745      	b.n	1031a <__udivmoddi4+0x14a>
   1048e:	f1ac 0c02 	sub.w	ip, ip, #2
   10492:	442b      	add	r3, r5
   10494:	e710      	b.n	102b8 <__udivmoddi4+0xe8>
   10496:	3802      	subs	r0, #2
   10498:	442c      	add	r4, r5
   1049a:	e721      	b.n	102e0 <__udivmoddi4+0x110>
   1049c:	4637      	mov	r7, r6
   1049e:	e6e8      	b.n	10272 <__udivmoddi4+0xa2>

000104a0 <__aeabi_idiv0>:
   104a0:	4770      	bx	lr
   104a2:	bf00      	nop

000104a4 <init_system>:
#include "SD_SPI.h"
//#include "SD.h"
#include "ff.h"

void init_system(void)
{
   104a4:	b580      	push	{r7, lr}
   104a6:	af00      	add	r7, sp, #0
  
    am_bsp_uart_printf_enable();
   104a8:	f007 fe4c 	bl	18144 <am_bsp_uart_printf_enable>
    //
    // Print the banner.
    //	
	spi_initialize();
   104ac:	f001 fa12 	bl	118d4 <spi_initialize>
	// SD_init();
    am_util_stdio_terminal_clear();
   104b0:	f001 f926 	bl	11700 <am_util_stdio_terminal_clear>
    am_util_stdio_printf("PDM FFT example.\n\n");
   104b4:	4802      	ldr	r0, [pc, #8]	; (104c0 <init_system+0x1c>)
   104b6:	f001 f8ff 	bl	116b8 <am_util_stdio_printf>

}
   104ba:	bf00      	nop
   104bc:	bd80      	pop	{r7, pc}
   104be:	bf00      	nop
   104c0:	00019cc8 	.word	0x00019cc8

000104c4 <test_card>:
UINT fnum; //Number of files successfully read and written
BYTE ReadBuffer[1024] = {0};
BYTE WriteBuffer[] = "Successfully transplanted the FatFs file system!\r\n"; //Write buffer

int test_card()
{
   104c4:	b580      	push	{r7, lr}
   104c6:	af00      	add	r7, sp, #0
	spi_initialize();
   104c8:	f001 fa04 	bl	118d4 <spi_initialize>
	
	if(SD_init() == 0)
   104cc:	f001 fbee 	bl	11cac <SD_init>
   104d0:	4603      	mov	r3, r0
   104d2:	2b00      	cmp	r3, #0
   104d4:	d102      	bne.n	104dc <test_card+0x18>
	{
		 am_util_stdio_printf("SD card initialization is successful, SD card will be mounted soon.\r\n");
   104d6:	4860      	ldr	r0, [pc, #384]	; (10658 <test_card+0x194>)
   104d8:	f001 f8ee 	bl	116b8 <am_util_stdio_printf>
	}
	
	// first unmount 
	f_mount(NULL, "0:", 1);
   104dc:	2201      	movs	r2, #1
   104de:	495f      	ldr	r1, [pc, #380]	; (1065c <test_card+0x198>)
   104e0:	2000      	movs	r0, #0
   104e2:	f005 fa5f 	bl	159a4 <f_mount>
	
	 //Mount SD card
	res_sd = f_mount(&fs, "0:", 1);
   104e6:	2201      	movs	r2, #1
   104e8:	495c      	ldr	r1, [pc, #368]	; (1065c <test_card+0x198>)
   104ea:	485d      	ldr	r0, [pc, #372]	; (10660 <test_card+0x19c>)
   104ec:	f005 fa5a 	bl	159a4 <f_mount>
   104f0:	4603      	mov	r3, r0
   104f2:	461a      	mov	r2, r3
   104f4:	4b5b      	ldr	r3, [pc, #364]	; (10664 <test_card+0x1a0>)
   104f6:	701a      	strb	r2, [r3, #0]

	am_util_stdio_printf("Respnse to mount is %d \n", res_sd);
   104f8:	4b5a      	ldr	r3, [pc, #360]	; (10664 <test_card+0x1a0>)
   104fa:	781b      	ldrb	r3, [r3, #0]
   104fc:	4619      	mov	r1, r3
   104fe:	485a      	ldr	r0, [pc, #360]	; (10668 <test_card+0x1a4>)
   10500:	f001 f8da 	bl	116b8 <am_util_stdio_printf>
	 //***********************Formatting test********************** ******
	if(res_sd == FR_NO_FILESYSTEM)
   10504:	4b57      	ldr	r3, [pc, #348]	; (10664 <test_card+0x1a0>)
   10506:	781b      	ldrb	r3, [r3, #0]
   10508:	2b0d      	cmp	r3, #13
   1050a:	d12e      	bne.n	1056a <test_card+0xa6>
	{
		 am_util_stdio_printf("SD card has no file system and will be formatted soon...\r\n");
   1050c:	4857      	ldr	r0, [pc, #348]	; (1066c <test_card+0x1a8>)
   1050e:	f001 f8d3 	bl	116b8 <am_util_stdio_printf>
		 //Format
		res_sd = f_mkfs("0:", 0, 0, 1024);
   10512:	f44f 6380 	mov.w	r3, #1024	; 0x400
   10516:	2200      	movs	r2, #0
   10518:	2100      	movs	r1, #0
   1051a:	4850      	ldr	r0, [pc, #320]	; (1065c <test_card+0x198>)
   1051c:	f006 fa42 	bl	169a4 <f_mkfs>
   10520:	4603      	mov	r3, r0
   10522:	461a      	mov	r2, r3
   10524:	4b4f      	ldr	r3, [pc, #316]	; (10664 <test_card+0x1a0>)
   10526:	701a      	strb	r2, [r3, #0]
		
		if(res_sd == FR_OK)
   10528:	4b4e      	ldr	r3, [pc, #312]	; (10664 <test_card+0x1a0>)
   1052a:	781b      	ldrb	r3, [r3, #0]
   1052c:	2b00      	cmp	r3, #0
   1052e:	d115      	bne.n	1055c <test_card+0x98>
		{
			 am_util_stdio_printf("SD card formatted successfully!\r\n");
   10530:	484f      	ldr	r0, [pc, #316]	; (10670 <test_card+0x1ac>)
   10532:	f001 f8c1 	bl	116b8 <am_util_stdio_printf>
			 //Unmount first after formatting
			res_sd = f_mount(NULL, "0:", 1);
   10536:	2201      	movs	r2, #1
   10538:	4948      	ldr	r1, [pc, #288]	; (1065c <test_card+0x198>)
   1053a:	2000      	movs	r0, #0
   1053c:	f005 fa32 	bl	159a4 <f_mount>
   10540:	4603      	mov	r3, r0
   10542:	461a      	mov	r2, r3
   10544:	4b47      	ldr	r3, [pc, #284]	; (10664 <test_card+0x1a0>)
   10546:	701a      	strb	r2, [r3, #0]
			 //Remount
			res_sd = f_mount(&fs, "0:", 1);
   10548:	2201      	movs	r2, #1
   1054a:	4944      	ldr	r1, [pc, #272]	; (1065c <test_card+0x198>)
   1054c:	4844      	ldr	r0, [pc, #272]	; (10660 <test_card+0x19c>)
   1054e:	f005 fa29 	bl	159a4 <f_mount>
   10552:	4603      	mov	r3, r0
   10554:	461a      	mov	r2, r3
   10556:	4b43      	ldr	r3, [pc, #268]	; (10664 <test_card+0x1a0>)
   10558:	701a      	strb	r2, [r3, #0]
   1055a:	e014      	b.n	10586 <test_card+0xc2>
		}
		else
		{
			 am_util_stdio_printf("File formatting failed! Error code: %d\r\n",res_sd);
   1055c:	4b41      	ldr	r3, [pc, #260]	; (10664 <test_card+0x1a0>)
   1055e:	781b      	ldrb	r3, [r3, #0]
   10560:	4619      	mov	r1, r3
   10562:	4844      	ldr	r0, [pc, #272]	; (10674 <test_card+0x1b0>)
   10564:	f001 f8a8 	bl	116b8 <am_util_stdio_printf>
			while(1);
   10568:	e7fe      	b.n	10568 <test_card+0xa4>
		}
	}
	else if(res_sd != FR_OK)
   1056a:	4b3e      	ldr	r3, [pc, #248]	; (10664 <test_card+0x1a0>)
   1056c:	781b      	ldrb	r3, [r3, #0]
   1056e:	2b00      	cmp	r3, #0
   10570:	d006      	beq.n	10580 <test_card+0xbc>
	{
		 am_util_stdio_printf("Failed to mount the file system! It may be because the file initialization failed! Error code: %d\r\n", res_sd);
   10572:	4b3c      	ldr	r3, [pc, #240]	; (10664 <test_card+0x1a0>)
   10574:	781b      	ldrb	r3, [r3, #0]
   10576:	4619      	mov	r1, r3
   10578:	483f      	ldr	r0, [pc, #252]	; (10678 <test_card+0x1b4>)
   1057a:	f001 f89d 	bl	116b8 <am_util_stdio_printf>
   1057e:	e002      	b.n	10586 <test_card+0xc2>
	}
	else
	{
		 am_util_stdio_printf("The file system is successfully mounted, read and write tests can be performed!\r\n");
   10580:	483e      	ldr	r0, [pc, #248]	; (1067c <test_card+0x1b8>)
   10582:	f001 f899 	bl	116b8 <am_util_stdio_printf>
	}
	
	 //***********************Write test*********************** *****
	 //Open the file, if the file does not exist, create it
	 am_util_stdio_printf("File writing test is about to be carried out...\r\n");
   10586:	483e      	ldr	r0, [pc, #248]	; (10680 <test_card+0x1bc>)
   10588:	f001 f896 	bl	116b8 <am_util_stdio_printf>
	 //Open the file, create it if it does not exist
	 res_sd = f_open(&fnew, "0: FatFs read and write test file.txt", FA_CREATE_ALWAYS | FA_WRITE);
   1058c:	220a      	movs	r2, #10
   1058e:	493d      	ldr	r1, [pc, #244]	; (10684 <test_card+0x1c0>)
   10590:	483d      	ldr	r0, [pc, #244]	; (10688 <test_card+0x1c4>)
   10592:	f005 fa47 	bl	15a24 <f_open>
   10596:	4603      	mov	r3, r0
   10598:	461a      	mov	r2, r3
   1059a:	4b32      	ldr	r3, [pc, #200]	; (10664 <test_card+0x1a0>)
   1059c:	701a      	strb	r2, [r3, #0]
	//File opened successfully
	if(res_sd == FR_OK)
   1059e:	4b31      	ldr	r3, [pc, #196]	; (10664 <test_card+0x1a0>)
   105a0:	781b      	ldrb	r3, [r3, #0]
   105a2:	2b00      	cmp	r3, #0
   105a4:	d121      	bne.n	105ea <test_card+0x126>
	{
		 am_util_stdio_printf("Open the file successfully! Start writing data!\r\n");
   105a6:	4839      	ldr	r0, [pc, #228]	; (1068c <test_card+0x1c8>)
   105a8:	f001 f886 	bl	116b8 <am_util_stdio_printf>
		res_sd= f_write(&fnew, WriteBuffer, sizeof(WriteBuffer), &fnum);
   105ac:	4b38      	ldr	r3, [pc, #224]	; (10690 <test_card+0x1cc>)
   105ae:	2233      	movs	r2, #51	; 0x33
   105b0:	4938      	ldr	r1, [pc, #224]	; (10694 <test_card+0x1d0>)
   105b2:	4835      	ldr	r0, [pc, #212]	; (10688 <test_card+0x1c4>)
   105b4:	f005 fdd7 	bl	16166 <f_write>
   105b8:	4603      	mov	r3, r0
   105ba:	461a      	mov	r2, r3
   105bc:	4b29      	ldr	r3, [pc, #164]	; (10664 <test_card+0x1a0>)
   105be:	701a      	strb	r2, [r3, #0]
		
		if(res_sd == FR_OK)
   105c0:	4b28      	ldr	r3, [pc, #160]	; (10664 <test_card+0x1a0>)
   105c2:	781b      	ldrb	r3, [r3, #0]
   105c4:	2b00      	cmp	r3, #0
   105c6:	d10a      	bne.n	105de <test_card+0x11a>
		{
			 am_util_stdio_printf("Data written successfully!\r\n");
   105c8:	4833      	ldr	r0, [pc, #204]	; (10698 <test_card+0x1d4>)
   105ca:	f001 f875 	bl	116b8 <am_util_stdio_printf>
			 am_util_stdio_printf("Data: %s. Write a total of %d characters\r\n", WriteBuffer, fnum);
   105ce:	4b30      	ldr	r3, [pc, #192]	; (10690 <test_card+0x1cc>)
   105d0:	681b      	ldr	r3, [r3, #0]
   105d2:	461a      	mov	r2, r3
   105d4:	492f      	ldr	r1, [pc, #188]	; (10694 <test_card+0x1d0>)
   105d6:	4831      	ldr	r0, [pc, #196]	; (1069c <test_card+0x1d8>)
   105d8:	f001 f86e 	bl	116b8 <am_util_stdio_printf>
   105dc:	e002      	b.n	105e4 <test_card+0x120>
		}
		else
		{
			 am_util_stdio_printf("Failed to write data!\r\n");
   105de:	4830      	ldr	r0, [pc, #192]	; (106a0 <test_card+0x1dc>)
   105e0:	f001 f86a 	bl	116b8 <am_util_stdio_printf>
		}
		
		 //Close the file
		f_close(&fnew);
   105e4:	4828      	ldr	r0, [pc, #160]	; (10688 <test_card+0x1c4>)
   105e6:	f006 f898 	bl	1671a <f_close>
	}
	
	 //*********************** Reading test ************************* *****
	 //Open the file, if the file does not exist, create it
	 am_util_stdio_printf("File reading test is about to be performed...\r\n");
   105ea:	482e      	ldr	r0, [pc, #184]	; (106a4 <test_card+0x1e0>)
   105ec:	f001 f864 	bl	116b8 <am_util_stdio_printf>
	 //Open the file, create it if it does not exist
	 res_sd = f_open(&fnew, "0: FatFs read and write test file.txt", FA_OPEN_EXISTING | FA_READ);
   105f0:	2201      	movs	r2, #1
   105f2:	4924      	ldr	r1, [pc, #144]	; (10684 <test_card+0x1c0>)
   105f4:	4824      	ldr	r0, [pc, #144]	; (10688 <test_card+0x1c4>)
   105f6:	f005 fa15 	bl	15a24 <f_open>
   105fa:	4603      	mov	r3, r0
   105fc:	461a      	mov	r2, r3
   105fe:	4b19      	ldr	r3, [pc, #100]	; (10664 <test_card+0x1a0>)
   10600:	701a      	strb	r2, [r3, #0]
	 //File opened successfully
	if(res_sd == FR_OK)
   10602:	4b18      	ldr	r3, [pc, #96]	; (10664 <test_card+0x1a0>)
   10604:	781b      	ldrb	r3, [r3, #0]
   10606:	2b00      	cmp	r3, #0
   10608:	d11f      	bne.n	1064a <test_card+0x186>
	{
		 am_util_stdio_printf("Open the file successfully! Start reading data!\r\n");
   1060a:	4827      	ldr	r0, [pc, #156]	; (106a8 <test_card+0x1e4>)
   1060c:	f001 f854 	bl	116b8 <am_util_stdio_printf>
		res_sd= f_read(&fnew, ReadBuffer, sizeof(ReadBuffer), &fnum);
   10610:	4b1f      	ldr	r3, [pc, #124]	; (10690 <test_card+0x1cc>)
   10612:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10616:	4925      	ldr	r1, [pc, #148]	; (106ac <test_card+0x1e8>)
   10618:	481b      	ldr	r0, [pc, #108]	; (10688 <test_card+0x1c4>)
   1061a:	f005 fc2e 	bl	15e7a <f_read>
   1061e:	4603      	mov	r3, r0
   10620:	461a      	mov	r2, r3
   10622:	4b10      	ldr	r3, [pc, #64]	; (10664 <test_card+0x1a0>)
   10624:	701a      	strb	r2, [r3, #0]
		
		if(res_sd == FR_OK)
   10626:	4b0f      	ldr	r3, [pc, #60]	; (10664 <test_card+0x1a0>)
   10628:	781b      	ldrb	r3, [r3, #0]
   1062a:	2b00      	cmp	r3, #0
   1062c:	d107      	bne.n	1063e <test_card+0x17a>
		{
			 am_util_stdio_printf("Data read successfully!\r\n");
   1062e:	4820      	ldr	r0, [pc, #128]	; (106b0 <test_card+0x1ec>)
   10630:	f001 f842 	bl	116b8 <am_util_stdio_printf>
			 am_util_stdio_printf("Data: %s\r\n", ReadBuffer);
   10634:	491d      	ldr	r1, [pc, #116]	; (106ac <test_card+0x1e8>)
   10636:	481f      	ldr	r0, [pc, #124]	; (106b4 <test_card+0x1f0>)
   10638:	f001 f83e 	bl	116b8 <am_util_stdio_printf>
   1063c:	e002      	b.n	10644 <test_card+0x180>
		}
		else
		{
			 am_util_stdio_printf("Failed to read data!\r\n");
   1063e:	481e      	ldr	r0, [pc, #120]	; (106b8 <test_card+0x1f4>)
   10640:	f001 f83a 	bl	116b8 <am_util_stdio_printf>
		}
		
		 //Close the file
		f_close(&fnew);
   10644:	4810      	ldr	r0, [pc, #64]	; (10688 <test_card+0x1c4>)
   10646:	f006 f868 	bl	1671a <f_close>
	
	 //Multiple functional tests
	// miscellaneous();
	
	 //Unmount the file system
	f_mount(NULL, "0:", 1);
   1064a:	2201      	movs	r2, #1
   1064c:	4903      	ldr	r1, [pc, #12]	; (1065c <test_card+0x198>)
   1064e:	2000      	movs	r0, #0
   10650:	f005 f9a8 	bl	159a4 <f_mount>
	
	while(1);
   10654:	e7fe      	b.n	10654 <test_card+0x190>
   10656:	bf00      	nop
   10658:	00019cdc 	.word	0x00019cdc
   1065c:	00019d24 	.word	0x00019d24
   10660:	10000b40 	.word	0x10000b40
   10664:	10000fdc 	.word	0x10000fdc
   10668:	00019d28 	.word	0x00019d28
   1066c:	00019d44 	.word	0x00019d44
   10670:	00019d80 	.word	0x00019d80
   10674:	00019da4 	.word	0x00019da4
   10678:	00019dd0 	.word	0x00019dd0
   1067c:	00019e34 	.word	0x00019e34
   10680:	00019e88 	.word	0x00019e88
   10684:	00019ebc 	.word	0x00019ebc
   10688:	10000d80 	.word	0x10000d80
   1068c:	00019ee4 	.word	0x00019ee4
   10690:	10000fd8 	.word	0x10000fd8
   10694:	10000000 	.word	0x10000000
   10698:	00019f18 	.word	0x00019f18
   1069c:	00019f38 	.word	0x00019f38
   106a0:	00019f64 	.word	0x00019f64
   106a4:	00019f7c 	.word	0x00019f7c
   106a8:	00019fac 	.word	0x00019fac
   106ac:	10000040 	.word	0x10000040
   106b0:	00019fe0 	.word	0x00019fe0
   106b4:	00019ffc 	.word	0x00019ffc
   106b8:	0001a008 	.word	0x0001a008

000106bc <read>:
}

void read()
{
   106bc:	b580      	push	{r7, lr}
   106be:	b086      	sub	sp, #24
   106c0:	af00      	add	r7, sp, #0
	
	//init_system();
	
	FIL *filw;
	int check=0;
   106c2:	2300      	movs	r3, #0
   106c4:	617b      	str	r3, [r7, #20]
		 // am_util_stdio_printf("File can not open");
	 // }
	 
	//FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW	
		
	check = f_open(filw,"hello.txt",FA_WRITE|FA_CREATE_NEW);
   106c6:	2206      	movs	r2, #6
   106c8:	491c      	ldr	r1, [pc, #112]	; (1073c <read+0x80>)
   106ca:	6938      	ldr	r0, [r7, #16]
   106cc:	f005 f9aa 	bl	15a24 <f_open>
   106d0:	4603      	mov	r3, r0
   106d2:	617b      	str	r3, [r7, #20]
	
	if(check )// Open the file in read-only mode
   106d4:	697b      	ldr	r3, [r7, #20]
   106d6:	2b00      	cmp	r3, #0
   106d8:	d004      	beq.n	106e4 <read+0x28>
	{
		am_util_stdio_printf("File Error %d\n",check); 
   106da:	6979      	ldr	r1, [r7, #20]
   106dc:	4818      	ldr	r0, [pc, #96]	; (10740 <read+0x84>)
   106de:	f000 ffeb 	bl	116b8 <am_util_stdio_printf>
   106e2:	e002      	b.n	106ea <read+0x2e>
	}
	else
	{
		am_util_stdio_printf("File open successfully...\n");
   106e4:	4817      	ldr	r0, [pc, #92]	; (10744 <read+0x88>)
   106e6:	f000 ffe7 	bl	116b8 <am_util_stdio_printf>
	}
	
	int br;
	char buff[] = "hello";
   106ea:	4a17      	ldr	r2, [pc, #92]	; (10748 <read+0x8c>)
   106ec:	1d3b      	adds	r3, r7, #4
   106ee:	e892 0003 	ldmia.w	r2, {r0, r1}
   106f2:	6018      	str	r0, [r3, #0]
   106f4:	3304      	adds	r3, #4
   106f6:	8019      	strh	r1, [r3, #0]
	//int check=0; 

	check = f_write(filw, buff, sizeof(buff), &br);
   106f8:	f107 030c 	add.w	r3, r7, #12
   106fc:	1d39      	adds	r1, r7, #4
   106fe:	2206      	movs	r2, #6
   10700:	6938      	ldr	r0, [r7, #16]
   10702:	f005 fd30 	bl	16166 <f_write>
   10706:	4603      	mov	r3, r0
   10708:	617b      	str	r3, [r7, #20]
	//am_util_stdio_printf("\nBytes read %d\n",check);     // send through the serial port
	//am_util_stdio_printf("Data %d\n",check); 
	if(!check)
   1070a:	697b      	ldr	r3, [r7, #20]
   1070c:	2b00      	cmp	r3, #0
   1070e:	d103      	bne.n	10718 <read+0x5c>
		am_util_stdio_printf("File write successfull \n"); 
   10710:	480e      	ldr	r0, [pc, #56]	; (1074c <read+0x90>)
   10712:	f000 ffd1 	bl	116b8 <am_util_stdio_printf>
		am_util_stdio_printf("File write status: %d\n",check); 
	}
	
			
  
}
   10716:	e00c      	b.n	10732 <read+0x76>
		check = f_read ( filw, &buff, sizeof(buff), &br);
   10718:	f107 030c 	add.w	r3, r7, #12
   1071c:	1d39      	adds	r1, r7, #4
   1071e:	2206      	movs	r2, #6
   10720:	6938      	ldr	r0, [r7, #16]
   10722:	f005 fbaa 	bl	15e7a <f_read>
   10726:	4603      	mov	r3, r0
   10728:	617b      	str	r3, [r7, #20]
		am_util_stdio_printf("File write status: %d\n",check); 
   1072a:	6979      	ldr	r1, [r7, #20]
   1072c:	4808      	ldr	r0, [pc, #32]	; (10750 <read+0x94>)
   1072e:	f000 ffc3 	bl	116b8 <am_util_stdio_printf>
}
   10732:	bf00      	nop
   10734:	3718      	adds	r7, #24
   10736:	46bd      	mov	sp, r7
   10738:	bd80      	pop	{r7, pc}
   1073a:	bf00      	nop
   1073c:	0001a020 	.word	0x0001a020
   10740:	0001a02c 	.word	0x0001a02c
   10744:	0001a03c 	.word	0x0001a03c
   10748:	0001a08c 	.word	0x0001a08c
   1074c:	0001a058 	.word	0x0001a058
   10750:	0001a074 	.word	0x0001a074

00010754 <main>:
{
	
}

int main(void)
{
   10754:	b580      	push	{r7, lr}
   10756:	af00      	add	r7, sp, #0
	am_bsp_uart_printf_enable();
   10758:	f007 fcf4 	bl	18144 <am_bsp_uart_printf_enable>
	init_system();
   1075c:	f7ff fea2 	bl	104a4 <init_system>
	spi_cs_set();
   10760:	f001 f97a 	bl	11a58 <spi_cs_set>
	// SD_init();
	test_card();
   10764:	f7ff feae 	bl	104c4 <test_card>
	read();
   10768:	f7ff ffa8 	bl	106bc <read>
   1076c:	2300      	movs	r3, #0
}
   1076e:	4618      	mov	r0, r3
   10770:	bd80      	pop	{r7, pc}
	...

00010774 <Reset_Handler>:
Reset_Handler(void)
{
    //
    // Set the vector table pointer.
    //
    __asm("    ldr    r0, =0xE000ED08\n"
   10774:	4818      	ldr	r0, [pc, #96]	; (107d8 <zero_loop+0x2c>)
   10776:	4919      	ldr	r1, [pc, #100]	; (107dc <zero_loop+0x30>)
   10778:	6001      	str	r1, [r0, #0]
          "    str    r1, [r0]");

    //
    // Set the stack pointer.
    //
    __asm("    ldr    sp, [r1]");
   1077a:	f8d1 d000 	ldr.w	sp, [r1]

#ifndef NOFPU
    //
    // Enable the FPU.
    //
    __asm("ldr  r0, =0xE000ED88\n"
   1077e:	4818      	ldr	r0, [pc, #96]	; (107e0 <zero_loop+0x34>)
   10780:	6801      	ldr	r1, [r0, #0]
   10782:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10786:	6001      	str	r1, [r0, #0]
   10788:	f3bf 8f4f 	dsb	sy
   1078c:	f3bf 8f6f 	isb	sy
          "isb\n");
#endif
    //
    // Copy the data segment initializers from flash to SRAM.
    //
    __asm("    ldr     r0, =_init_data\n"
   10790:	4814      	ldr	r0, [pc, #80]	; (107e4 <zero_loop+0x38>)
   10792:	4915      	ldr	r1, [pc, #84]	; (107e8 <zero_loop+0x3c>)
   10794:	4a15      	ldr	r2, [pc, #84]	; (107ec <zero_loop+0x40>)

00010796 <copy_loop>:
   10796:	4291      	cmp	r1, r2
   10798:	d004      	beq.n	107a4 <copy_end>
   1079a:	f850 3b04 	ldr.w	r3, [r0], #4
   1079e:	f841 3b04 	str.w	r3, [r1], #4
   107a2:	e7f8      	b.n	10796 <copy_loop>

000107a4 <copy_end>:
          "copy_end:\n");
    
    //
    // Zero fill the bss segment.
    //
    __asm("    ldr     r0, =_sbss\n"
   107a4:	4812      	ldr	r0, [pc, #72]	; (107f0 <zero_loop+0x44>)
   107a6:	4913      	ldr	r1, [pc, #76]	; (107f4 <zero_loop+0x48>)
   107a8:	f04f 0200 	mov.w	r2, #0

000107ac <zero_loop>:
   107ac:	4288      	cmp	r0, r1
   107ae:	bfb8      	it	lt
   107b0:	f840 2b04 	strlt.w	r2, [r0], #4
   107b4:	dbfa      	blt.n	107ac <zero_loop>
    //
    // Call Global Static Constructors for C++ support
    //
    extern void (*__init_array_start)(void);    // symbols must be
    extern void (*__init_array_end)(void);      // provided by linker
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
   107b6:	4c06      	ldr	r4, [pc, #24]	; (107d0 <zero_loop+0x24>)
   107b8:	e002      	b.n	107c0 <zero_loop+0x14>
        (*p)();                                 // Call each function in the list
   107ba:	6823      	ldr	r3, [r4, #0]
   107bc:	4798      	blx	r3
    for (void (**p)() = &__init_array_start; p < &__init_array_end; ++p) {  
   107be:	3404      	adds	r4, #4
   107c0:	4b04      	ldr	r3, [pc, #16]	; (107d4 <zero_loop+0x28>)
   107c2:	429c      	cmp	r4, r3
   107c4:	d3f9      	bcc.n	107ba <zero_loop+0xe>
    }

    //
    // Call the application's entry point.
    //
    main();
   107c6:	f7ff ffc5 	bl	10754 <main>

    //
    // If main returns then execute a break point instruction
    //
    __asm("    bkpt     ");
   107ca:	be00      	bkpt	0x0000
}
   107cc:	bf00      	nop
   107ce:	bf00      	nop
   107d0:	00019cc8 	.word	0x00019cc8
   107d4:	00019cc8 	.word	0x00019cc8
   107d8:	e000ed08 	.word	0xe000ed08
   107dc:	00010000 	.word	0x00010000
   107e0:	e000ed88 	.word	0xe000ed88
   107e4:	0002905c 	.word	0x0002905c
   107e8:	10000000 	.word	0x10000000
   107ec:	10000040 	.word	0x10000040
   107f0:	10000040 	.word	0x10000040
   107f4:	100048a4 	.word	0x100048a4

000107f8 <NMI_Handler>:
// by a debugger.
//
//*****************************************************************************
void
NMI_Handler(void)
{
   107f8:	b480      	push	{r7}
   107fa:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   107fc:	e7fe      	b.n	107fc <NMI_Handler+0x4>

000107fe <BusFault_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
HardFault_Handler(void)
{
   107fe:	b480      	push	{r7}
   10800:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   10802:	e7fe      	b.n	10802 <BusFault_Handler+0x4>

00010804 <DebugMon_Handler>:
// for examination by a debugger.
//
//*****************************************************************************
void
am_default_isr(void)
{
   10804:	b480      	push	{r7}
   10806:	af00      	add	r7, sp, #0
    //
    // Go into an infinite loop.
    //
    while(1)
   10808:	e7fe      	b.n	10808 <DebugMon_Handler+0x4>
	...

0001080c <am_util_delay_us>:
//! @returns None
//
//*****************************************************************************
void
am_util_delay_us(uint32_t ui32MicroSeconds)
{
   1080c:	b580      	push	{r7, lr}
   1080e:	b088      	sub	sp, #32
   10810:	af00      	add	r7, sp, #0
   10812:	6078      	str	r0, [r7, #4]
    uint32_t ui32Loops, ui32HFRC;

#if AM_APOLLO3_CLKGEN
    am_hal_clkgen_status_t sClkgenStatus;
    am_hal_clkgen_status_get(&sClkgenStatus);
   10814:	f107 030c 	add.w	r3, r7, #12
   10818:	4618      	mov	r0, r3
   1081a:	f007 fcc1 	bl	181a0 <am_hal_clkgen_status_get>
    ui32HFRC = sClkgenStatus.ui32SysclkFreq;
   1081e:	68fb      	ldr	r3, [r7, #12]
   10820:	61fb      	str	r3, [r7, #28]
#else // AM_APOLLO3_CLKGEN
    ui32HFRC = am_hal_clkgen_sysclk_get();
#endif // AM_APOLLO3_CLKGEN
    ui32Loops = ui32MicroSeconds * (ui32HFRC / 3000000);
   10822:	69fb      	ldr	r3, [r7, #28]
   10824:	4a07      	ldr	r2, [pc, #28]	; (10844 <am_util_delay_us+0x38>)
   10826:	fba2 2303 	umull	r2, r3, r2, r3
   1082a:	0c9a      	lsrs	r2, r3, #18
   1082c:	687b      	ldr	r3, [r7, #4]
   1082e:	fb02 f303 	mul.w	r3, r2, r3
   10832:	61bb      	str	r3, [r7, #24]

    //
    // Call the BOOTROM cycle delay function
    //
    am_hal_flash_delay(ui32Loops);
   10834:	69b8      	ldr	r0, [r7, #24]
   10836:	f007 fcd1 	bl	181dc <am_hal_flash_delay>
}
   1083a:	bf00      	nop
   1083c:	3720      	adds	r7, #32
   1083e:	46bd      	mov	sp, r7
   10840:	bd80      	pop	{r7, pc}
   10842:	bf00      	nop
   10844:	165e9f81 	.word	0x165e9f81

00010848 <HardFault_Handler>:
HardFault_Handler(void)
#else // AM_CMSIS_REGS
am_fault_isr(void)
#endif // AM_CMSIS_REGS
{
    __asm("    push    {r0,lr}");       // Always pushes to MSP stack
   10848:	b501      	push	{r0, lr}
    __asm("    tst     lr, #4");        // Check if we should use MSP or PSP
   1084a:	f01e 0f04 	tst.w	lr, #4
    __asm("    itet    eq");            // Instrs executed when: eq,ne,eq
   1084e:	bf0a      	itet	eq
    __asm("    mrseq   r0, msp");       //    bit2=0 indicating MSP stack
   10850:	f3ef 8008 	mrseq	r0, MSP
    __asm("    mrsne   r0, psp");       // e: bit2=1 indicating PSP stack
   10854:	f3ef 8009 	mrsne	r0, PSP
    __asm("    addseq  r0, r0, #8");    // t: bit2=0, adjust for pushes to MSP stack
   10858:	f110 0008 	addseq.w	r0, r0, #8
    __asm("    bl      am_util_faultisr_collect_data");
   1085c:	f000 f80a 	bl	10874 <am_util_faultisr_collect_data>
    __asm("    pop     {r0,pc}");       // Restore from MSP stack
   10860:	bd01      	pop	{r0, pc}
}
   10862:	bf00      	nop
   10864:	4618      	mov	r0, r3

00010866 <getStackedReg>:

uint32_t __attribute__((naked))
getStackedReg(uint32_t regnum, uint32_t u32SP)
{
    __asm("    lsls    r0, r0, #2");
   10866:	0080      	lsls	r0, r0, #2
    __asm("    adds    r0, r1");
   10868:	1840      	adds	r0, r0, r1
    __asm("    ldr     r0, [r0]");
   1086a:	6800      	ldr	r0, [r0, #0]
    __asm("    bx      lr");
   1086c:	4770      	bx	lr
}
   1086e:	bf00      	nop
   10870:	4618      	mov	r0, r3
	...

00010874 <am_util_faultisr_collect_data>:
// HardFault_Handler() was called.
//
//*****************************************************************************
void
am_util_faultisr_collect_data(uint32_t u32IsrSP)
{
   10874:	b580      	push	{r7, lr}
   10876:	b096      	sub	sp, #88	; 0x58
   10878:	af00      	add	r7, sp, #0
   1087a:	6078      	str	r0, [r7, #4]
    volatile am_fault_t sFaultData;
    am_hal_mcuctrl_fault_t sHalFaultData = {0};
   1087c:	f107 030c 	add.w	r3, r7, #12
   10880:	2200      	movs	r2, #0
   10882:	601a      	str	r2, [r3, #0]
   10884:	605a      	str	r2, [r3, #4]
   10886:	609a      	str	r2, [r3, #8]
   10888:	60da      	str	r2, [r3, #12]
   1088a:	611a      	str	r2, [r3, #16]
   1088c:	615a      	str	r2, [r3, #20]

    uint32_t u32Mask = 0;
   1088e:	2300      	movs	r3, #0
   10890:	657b      	str	r3, [r7, #84]	; 0x54
    // u32Mask is used for 2 things: 1) in the print loop, 2) as a spot to set
    // a breakpoint at the end of the routine.  If the printing is not used,
    // we'll get a compiler warning; so to avoid that warning, we'll use it
    // in a dummy assignment here.
    //
    sFaultData.u32CFSR = u32Mask;       // Avoid compiler warning
   10892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10894:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u32CFSR = AM_REGVAL(AM_REG_SYSCTRL_CFSR_O);
   10896:	4b2e      	ldr	r3, [pc, #184]	; (10950 <am_util_faultisr_collect_data+0xdc>)
   10898:	681b      	ldr	r3, [r3, #0]
   1089a:	64fb      	str	r3, [r7, #76]	; 0x4c
    sFaultData.u8MMSR  = (sFaultData.u32CFSR >> 0)  & 0xff;
   1089c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1089e:	b2db      	uxtb	r3, r3
   108a0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
    sFaultData.u8BFSR  = (sFaultData.u32CFSR >> 8)  & 0xff;
   108a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   108a6:	0a1b      	lsrs	r3, r3, #8
   108a8:	b2db      	uxtb	r3, r3
   108aa:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    sFaultData.u16UFSR = (sFaultData.u32CFSR >> 16) & 0xffff;
   108ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   108b0:	0c1b      	lsrs	r3, r3, #16
   108b2:	b29b      	uxth	r3, r3
   108b4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    //
    // The address of the location that caused the fault.  e.g. if accessing an
    // invalid data location caused the fault, that address will appear here.
    //
    sFaultData.u32BFAR = AM_REGVAL(AM_REG_SYSCTRL_BFAR_O);
   108b8:	4b26      	ldr	r3, [pc, #152]	; (10954 <am_util_faultisr_collect_data+0xe0>)
   108ba:	681b      	ldr	r3, [r3, #0]
   108bc:	64bb      	str	r3, [r7, #72]	; 0x48

    //
    // The address of the instruction that caused the fault is the stacked PC
    // if BFSR bit1 is set.
    //
    sFaultData.u32FaultAddr = (sFaultData.u8BFSR & 0x02) ? getStackedReg(6, u32IsrSP) : 0xffffffff;
   108be:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   108c2:	b2db      	uxtb	r3, r3
   108c4:	f003 0302 	and.w	r3, r3, #2
   108c8:	2b00      	cmp	r3, #0
   108ca:	d005      	beq.n	108d8 <am_util_faultisr_collect_data+0x64>
   108cc:	6879      	ldr	r1, [r7, #4]
   108ce:	2006      	movs	r0, #6
   108d0:	f7ff ffc9 	bl	10866 <getStackedReg>
   108d4:	4603      	mov	r3, r0
   108d6:	e001      	b.n	108dc <am_util_faultisr_collect_data+0x68>
   108d8:	f04f 33ff 	mov.w	r3, #4294967295
   108dc:	647b      	str	r3, [r7, #68]	; 0x44

    //
    // Get the stacked registers.
    // Note - the address of the instruction that caused the fault is u32PC.
    //
    sFaultData.u32R0  = getStackedReg(0, u32IsrSP);
   108de:	6879      	ldr	r1, [r7, #4]
   108e0:	2000      	movs	r0, #0
   108e2:	f7ff ffc0 	bl	10866 <getStackedReg>
   108e6:	4603      	mov	r3, r0
   108e8:	627b      	str	r3, [r7, #36]	; 0x24
    sFaultData.u32R1  = getStackedReg(1, u32IsrSP);
   108ea:	6879      	ldr	r1, [r7, #4]
   108ec:	2001      	movs	r0, #1
   108ee:	f7ff ffba 	bl	10866 <getStackedReg>
   108f2:	4603      	mov	r3, r0
   108f4:	62bb      	str	r3, [r7, #40]	; 0x28
    sFaultData.u32R2  = getStackedReg(2, u32IsrSP);
   108f6:	6879      	ldr	r1, [r7, #4]
   108f8:	2002      	movs	r0, #2
   108fa:	f7ff ffb4 	bl	10866 <getStackedReg>
   108fe:	4603      	mov	r3, r0
   10900:	62fb      	str	r3, [r7, #44]	; 0x2c
    sFaultData.u32R3  = getStackedReg(3, u32IsrSP);
   10902:	6879      	ldr	r1, [r7, #4]
   10904:	2003      	movs	r0, #3
   10906:	f7ff ffae 	bl	10866 <getStackedReg>
   1090a:	4603      	mov	r3, r0
   1090c:	633b      	str	r3, [r7, #48]	; 0x30
    sFaultData.u32R12 = getStackedReg(4, u32IsrSP);
   1090e:	6879      	ldr	r1, [r7, #4]
   10910:	2004      	movs	r0, #4
   10912:	f7ff ffa8 	bl	10866 <getStackedReg>
   10916:	4603      	mov	r3, r0
   10918:	637b      	str	r3, [r7, #52]	; 0x34
    sFaultData.u32LR  = getStackedReg(5, u32IsrSP);
   1091a:	6879      	ldr	r1, [r7, #4]
   1091c:	2005      	movs	r0, #5
   1091e:	f7ff ffa2 	bl	10866 <getStackedReg>
   10922:	4603      	mov	r3, r0
   10924:	63bb      	str	r3, [r7, #56]	; 0x38
    sFaultData.u32PC  = getStackedReg(6, u32IsrSP);
   10926:	6879      	ldr	r1, [r7, #4]
   10928:	2006      	movs	r0, #6
   1092a:	f7ff ff9c 	bl	10866 <getStackedReg>
   1092e:	4603      	mov	r3, r0
   10930:	63fb      	str	r3, [r7, #60]	; 0x3c
    sFaultData.u32PSR = getStackedReg(7, u32IsrSP);
   10932:	6879      	ldr	r1, [r7, #4]
   10934:	2007      	movs	r0, #7
   10936:	f7ff ff96 	bl	10866 <getStackedReg>
   1093a:	4603      	mov	r3, r0
   1093c:	643b      	str	r3, [r7, #64]	; 0x40

    //
    // Use the HAL MCUCTRL functions to read the fault data.
    //
#if AM_APOLLO3_MCUCTRL
    am_hal_mcuctrl_info_get(AM_HAL_MCUCTRL_INFO_FAULT_STATUS, &sHalFaultData);
   1093e:	f107 030c 	add.w	r3, r7, #12
   10942:	4619      	mov	r1, r3
   10944:	2002      	movs	r0, #2
   10946:	f008 fbdf 	bl	19108 <am_hal_mcuctrl_info_get>
      am_util_stdio_printf("   SYS Fault Address: 0x%08X\n", sHalFaultData.ui32SYS);
    }

#endif

    u32Mask = 0;
   1094a:	2300      	movs	r3, #0
   1094c:	657b      	str	r3, [r7, #84]	; 0x54
    //
    // Spin in an infinite loop.
    // We need to spin here inside the function so that we have access to
    // local data, i.e. sFaultData.
    //
    while(1)
   1094e:	e7fe      	b.n	1094e <am_util_faultisr_collect_data+0xda>
   10950:	e000ed28 	.word	0xe000ed28
   10954:	e000ed38 	.word	0xe000ed38

00010958 <am_util_stdio_printf_init>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_printf_init(am_util_stdio_print_char_t pfnCharPrint)
{
   10958:	b480      	push	{r7}
   1095a:	b083      	sub	sp, #12
   1095c:	af00      	add	r7, sp, #0
   1095e:	6078      	str	r0, [r7, #4]
    g_pfnCharPrint = pfnCharPrint;
   10960:	4a04      	ldr	r2, [pc, #16]	; (10974 <am_util_stdio_printf_init+0x1c>)
   10962:	687b      	ldr	r3, [r7, #4]
   10964:	6013      	str	r3, [r2, #0]
}
   10966:	bf00      	nop
   10968:	370c      	adds	r7, #12
   1096a:	46bd      	mov	sp, r7
   1096c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10970:	4770      	bx	lr
   10972:	bf00      	nop
   10974:	10000fe0 	.word	0x10000fe0

00010978 <divu64_10>:
//  Note: Adapted from Ch10 of Hackers Delight (hackersdelight.org).
//
//*****************************************************************************
static uint64_t
divu64_10(uint64_t ui64Val)
{
   10978:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1097c:	b098      	sub	sp, #96	; 0x60
   1097e:	af00      	add	r7, sp, #0
   10980:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    uint32_t q32, r32, ui32Val;

    //
    // If a 32-bit value, use the more optimal 32-bit routine.
    //
    if ( ui64Val >> 32 )
   10984:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
   10988:	f04f 0100 	mov.w	r1, #0
   1098c:	f04f 0200 	mov.w	r2, #0
   10990:	0021      	movs	r1, r4
   10992:	2200      	movs	r2, #0
   10994:	ea51 0302 	orrs.w	r3, r1, r2
   10998:	f000 80b5 	beq.w	10b06 <divu64_10+0x18e>
    {
        q64 = (ui64Val>>1) + (ui64Val>>2);
   1099c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
   109a0:	f04f 0500 	mov.w	r5, #0
   109a4:	f04f 0600 	mov.w	r6, #0
   109a8:	085d      	lsrs	r5, r3, #1
   109aa:	ea45 75c4 	orr.w	r5, r5, r4, lsl #31
   109ae:	0866      	lsrs	r6, r4, #1
   109b0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
   109b4:	f04f 0100 	mov.w	r1, #0
   109b8:	f04f 0200 	mov.w	r2, #0
   109bc:	0899      	lsrs	r1, r3, #2
   109be:	ea41 7184 	orr.w	r1, r1, r4, lsl #30
   109c2:	08a2      	lsrs	r2, r4, #2
   109c4:	eb15 0a01 	adds.w	sl, r5, r1
   109c8:	eb46 0b02 	adc.w	fp, r6, r2
   109cc:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
        q64 += (q64 >> 4);
   109d0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   109d4:	f04f 0100 	mov.w	r1, #0
   109d8:	f04f 0200 	mov.w	r2, #0
   109dc:	0919      	lsrs	r1, r3, #4
   109de:	ea41 7104 	orr.w	r1, r1, r4, lsl #28
   109e2:	0922      	lsrs	r2, r4, #4
   109e4:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   109e8:	1858      	adds	r0, r3, r1
   109ea:	62b8      	str	r0, [r7, #40]	; 0x28
   109ec:	eb44 0302 	adc.w	r3, r4, r2
   109f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   109f2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
   109f6:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 8);
   109fa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   109fe:	f04f 0100 	mov.w	r1, #0
   10a02:	f04f 0200 	mov.w	r2, #0
   10a06:	0a19      	lsrs	r1, r3, #8
   10a08:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
   10a0c:	0a22      	lsrs	r2, r4, #8
   10a0e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   10a12:	1858      	adds	r0, r3, r1
   10a14:	6238      	str	r0, [r7, #32]
   10a16:	eb44 0302 	adc.w	r3, r4, r2
   10a1a:	627b      	str	r3, [r7, #36]	; 0x24
   10a1c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
   10a20:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 16);
   10a24:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   10a28:	f04f 0100 	mov.w	r1, #0
   10a2c:	f04f 0200 	mov.w	r2, #0
   10a30:	0c19      	lsrs	r1, r3, #16
   10a32:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   10a36:	0c22      	lsrs	r2, r4, #16
   10a38:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
   10a3c:	1858      	adds	r0, r3, r1
   10a3e:	61b8      	str	r0, [r7, #24]
   10a40:	eb44 0302 	adc.w	r3, r4, r2
   10a44:	61fb      	str	r3, [r7, #28]
   10a46:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   10a4a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 += (q64 >> 32);
   10a4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
   10a52:	f04f 0300 	mov.w	r3, #0
   10a56:	f04f 0400 	mov.w	r4, #0
   10a5a:	0013      	movs	r3, r2
   10a5c:	2400      	movs	r4, #0
   10a5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
   10a62:	18c8      	adds	r0, r1, r3
   10a64:	6138      	str	r0, [r7, #16]
   10a66:	eb42 0304 	adc.w	r3, r2, r4
   10a6a:	617b      	str	r3, [r7, #20]
   10a6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   10a70:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        q64 >>= 3;
   10a74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
   10a78:	f04f 0300 	mov.w	r3, #0
   10a7c:	f04f 0400 	mov.w	r4, #0
   10a80:	08cb      	lsrs	r3, r1, #3
   10a82:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   10a86:	08d4      	lsrs	r4, r2, #3
   10a88:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
        r64 = ui64Val - q64*10;
   10a8c:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
   10a90:	462b      	mov	r3, r5
   10a92:	4634      	mov	r4, r6
   10a94:	f04f 0100 	mov.w	r1, #0
   10a98:	f04f 0200 	mov.w	r2, #0
   10a9c:	00a2      	lsls	r2, r4, #2
   10a9e:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   10aa2:	0099      	lsls	r1, r3, #2
   10aa4:	460b      	mov	r3, r1
   10aa6:	4614      	mov	r4, r2
   10aa8:	195b      	adds	r3, r3, r5
   10aaa:	eb46 0404 	adc.w	r4, r6, r4
   10aae:	18da      	adds	r2, r3, r3
   10ab0:	60ba      	str	r2, [r7, #8]
   10ab2:	eb44 0304 	adc.w	r3, r4, r4
   10ab6:	60fb      	str	r3, [r7, #12]
   10ab8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   10abc:	4619      	mov	r1, r3
   10abe:	4622      	mov	r2, r4
   10ac0:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
   10ac4:	1a58      	subs	r0, r3, r1
   10ac6:	6038      	str	r0, [r7, #0]
   10ac8:	eb64 0302 	sbc.w	r3, r4, r2
   10acc:	607b      	str	r3, [r7, #4]
   10ace:	e9d7 3400 	ldrd	r3, r4, [r7]
   10ad2:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
        return q64 + ((r64 + 6) >> 4);
   10ad6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
   10ada:	f113 0806 	adds.w	r8, r3, #6
   10ade:	f144 0900 	adc.w	r9, r4, #0
   10ae2:	f04f 0300 	mov.w	r3, #0
   10ae6:	f04f 0400 	mov.w	r4, #0
   10aea:	ea4f 1318 	mov.w	r3, r8, lsr #4
   10aee:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
   10af2:	ea4f 1419 	mov.w	r4, r9, lsr #4
   10af6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
   10afa:	1858      	adds	r0, r3, r1
   10afc:	6338      	str	r0, [r7, #48]	; 0x30
   10afe:	eb44 0302 	adc.w	r3, r4, r2
   10b02:	637b      	str	r3, [r7, #52]	; 0x34
   10b04:	e02c      	b.n	10b60 <divu64_10+0x1e8>
    }
    else
    {
        ui32Val = (uint32_t)(ui64Val & 0xffffffff);
   10b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   10b08:	64fb      	str	r3, [r7, #76]	; 0x4c
        q32 = (ui32Val>>1) + (ui32Val>>2);
   10b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10b0c:	085a      	lsrs	r2, r3, #1
   10b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10b10:	089b      	lsrs	r3, r3, #2
   10b12:	4413      	add	r3, r2
   10b14:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 4);
   10b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b18:	091b      	lsrs	r3, r3, #4
   10b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10b1c:	4413      	add	r3, r2
   10b1e:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 8);
   10b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b22:	0a1b      	lsrs	r3, r3, #8
   10b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10b26:	4413      	add	r3, r2
   10b28:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 += (q32 >> 16);
   10b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b2c:	0c1b      	lsrs	r3, r3, #16
   10b2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10b30:	4413      	add	r3, r2
   10b32:	64bb      	str	r3, [r7, #72]	; 0x48
        q32 >>= 3;
   10b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b36:	08db      	lsrs	r3, r3, #3
   10b38:	64bb      	str	r3, [r7, #72]	; 0x48
        r32 = ui32Val - q32*10;
   10b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   10b3c:	4613      	mov	r3, r2
   10b3e:	009b      	lsls	r3, r3, #2
   10b40:	4413      	add	r3, r2
   10b42:	005b      	lsls	r3, r3, #1
   10b44:	461a      	mov	r2, r3
   10b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10b48:	1a9b      	subs	r3, r3, r2
   10b4a:	647b      	str	r3, [r7, #68]	; 0x44
        return (uint64_t)(q32 + ((r32 + 6) >> 4));
   10b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10b4e:	3306      	adds	r3, #6
   10b50:	091a      	lsrs	r2, r3, #4
   10b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   10b54:	4413      	add	r3, r2
   10b56:	4619      	mov	r1, r3
   10b58:	f04f 0200 	mov.w	r2, #0
   10b5c:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30
   10b60:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
    }
}
   10b64:	4618      	mov	r0, r3
   10b66:	4621      	mov	r1, r4
   10b68:	3760      	adds	r7, #96	; 0x60
   10b6a:	46bd      	mov	sp, r7
   10b6c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   10b70:	4770      	bx	lr

00010b72 <ndigits_in_u64>:
// example: 10000 return 5, 123 returns 3.
//
//*****************************************************************************
static int
ndigits_in_u64(uint64_t ui64Val)
{
   10b72:	b590      	push	{r4, r7, lr}
   10b74:	b085      	sub	sp, #20
   10b76:	af00      	add	r7, sp, #0
   10b78:	e9c7 0100 	strd	r0, r1, [r7]
    int iNDigits = ui64Val ? 0 : 1;
   10b7c:	683a      	ldr	r2, [r7, #0]
   10b7e:	687b      	ldr	r3, [r7, #4]
   10b80:	4313      	orrs	r3, r2
   10b82:	2b00      	cmp	r3, #0
   10b84:	bf0c      	ite	eq
   10b86:	2301      	moveq	r3, #1
   10b88:	2300      	movne	r3, #0
   10b8a:	b2db      	uxtb	r3, r3
   10b8c:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   10b8e:	e008      	b.n	10ba2 <ndigits_in_u64+0x30>
    {
        //
        // ui32Val /= 10;
        //
        ui64Val = divu64_10(ui64Val);
   10b90:	e9d7 0100 	ldrd	r0, r1, [r7]
   10b94:	f7ff fef0 	bl	10978 <divu64_10>
   10b98:	e9c7 0100 	strd	r0, r1, [r7]
        ++iNDigits;
   10b9c:	68fb      	ldr	r3, [r7, #12]
   10b9e:	3301      	adds	r3, #1
   10ba0:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   10ba2:	e9d7 3400 	ldrd	r3, r4, [r7]
   10ba6:	4323      	orrs	r3, r4
   10ba8:	d1f2      	bne.n	10b90 <ndigits_in_u64+0x1e>
    }

    return iNDigits;
   10baa:	68fb      	ldr	r3, [r7, #12]
}
   10bac:	4618      	mov	r0, r3
   10bae:	3714      	adds	r7, #20
   10bb0:	46bd      	mov	sp, r7
   10bb2:	bd90      	pop	{r4, r7, pc}

00010bb4 <ndigits_in_i64>:
// example: -3 returns 1, 3 returns 1, 15 returns 2, -15 returns 2, ...
//
//*****************************************************************************
static int
ndigits_in_i64(int64_t i64Val)
{
   10bb4:	b590      	push	{r4, r7, lr}
   10bb6:	b083      	sub	sp, #12
   10bb8:	af00      	add	r7, sp, #0
   10bba:	e9c7 0100 	strd	r0, r1, [r7]
    if ( i64Val < 0 )
   10bbe:	e9d7 3400 	ldrd	r3, r4, [r7]
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	f174 0300 	sbcs.w	r3, r4, #0
   10bc8:	da06      	bge.n	10bd8 <ndigits_in_i64+0x24>
    {
        //
        // Get absolute value
        //
        i64Val = -i64Val;
   10bca:	e9d7 3400 	ldrd	r3, r4, [r7]
   10bce:	425b      	negs	r3, r3
   10bd0:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   10bd4:	e9c7 3400 	strd	r3, r4, [r7]
    }

    return ndigits_in_u64((uint64_t) i64Val);
   10bd8:	e9d7 3400 	ldrd	r3, r4, [r7]
   10bdc:	4618      	mov	r0, r3
   10bde:	4621      	mov	r1, r4
   10be0:	f7ff ffc7 	bl	10b72 <ndigits_in_u64>
   10be4:	4603      	mov	r3, r0
}
   10be6:	4618      	mov	r0, r3
   10be8:	370c      	adds	r7, #12
   10bea:	46bd      	mov	sp, r7
   10bec:	bd90      	pop	{r4, r7, pc}

00010bee <ndigits_in_hex>:
// Return the number of hex digits in an uint64_t.
//
//*****************************************************************************
static int
ndigits_in_hex(uint64_t ui64Val)
{
   10bee:	b490      	push	{r4, r7}
   10bf0:	b084      	sub	sp, #16
   10bf2:	af00      	add	r7, sp, #0
   10bf4:	e9c7 0100 	strd	r0, r1, [r7]
    int iDigits = ui64Val ? 0 : 1;
   10bf8:	683a      	ldr	r2, [r7, #0]
   10bfa:	687b      	ldr	r3, [r7, #4]
   10bfc:	4313      	orrs	r3, r2
   10bfe:	2b00      	cmp	r3, #0
   10c00:	bf0c      	ite	eq
   10c02:	2301      	moveq	r3, #1
   10c04:	2300      	movne	r3, #0
   10c06:	b2db      	uxtb	r3, r3
   10c08:	60fb      	str	r3, [r7, #12]

    while ( ui64Val )
   10c0a:	e00e      	b.n	10c2a <ndigits_in_hex+0x3c>
    {
        ui64Val >>= 4;
   10c0c:	e9d7 1200 	ldrd	r1, r2, [r7]
   10c10:	f04f 0300 	mov.w	r3, #0
   10c14:	f04f 0400 	mov.w	r4, #0
   10c18:	090b      	lsrs	r3, r1, #4
   10c1a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   10c1e:	0914      	lsrs	r4, r2, #4
   10c20:	e9c7 3400 	strd	r3, r4, [r7]
        ++iDigits;
   10c24:	68fb      	ldr	r3, [r7, #12]
   10c26:	3301      	adds	r3, #1
   10c28:	60fb      	str	r3, [r7, #12]
    while ( ui64Val )
   10c2a:	e9d7 3400 	ldrd	r3, r4, [r7]
   10c2e:	4323      	orrs	r3, r4
   10c30:	d1ec      	bne.n	10c0c <ndigits_in_hex+0x1e>
    }

    return iDigits;
   10c32:	68fb      	ldr	r3, [r7, #12]
}
   10c34:	4618      	mov	r0, r3
   10c36:	3710      	adds	r7, #16
   10c38:	46bd      	mov	sp, r7
   10c3a:	bc90      	pop	{r4, r7}
   10c3c:	4770      	bx	lr

00010c3e <decstr_to_int>:
// pui32CharCnt.
//
//*****************************************************************************
static uint32_t
decstr_to_int(const char *pcStr, uint32_t *pui32CharCnt)
{
   10c3e:	b480      	push	{r7}
   10c40:	b087      	sub	sp, #28
   10c42:	af00      	add	r7, sp, #0
   10c44:	6078      	str	r0, [r7, #4]
   10c46:	6039      	str	r1, [r7, #0]
    bool bNeg = false;
   10c48:	2300      	movs	r3, #0
   10c4a:	75fb      	strb	r3, [r7, #23]
    uint32_t ui32Val = 0, uCnt = 0;
   10c4c:	2300      	movs	r3, #0
   10c4e:	613b      	str	r3, [r7, #16]
   10c50:	2300      	movs	r3, #0
   10c52:	60fb      	str	r3, [r7, #12]

    if ( *pcStr == '-')
   10c54:	687b      	ldr	r3, [r7, #4]
   10c56:	781b      	ldrb	r3, [r3, #0]
   10c58:	2b2d      	cmp	r3, #45	; 0x2d
   10c5a:	d11b      	bne.n	10c94 <decstr_to_int+0x56>
    {
        bNeg = true;
   10c5c:	2301      	movs	r3, #1
   10c5e:	75fb      	strb	r3, [r7, #23]
        pcStr++;
   10c60:	687b      	ldr	r3, [r7, #4]
   10c62:	3301      	adds	r3, #1
   10c64:	607b      	str	r3, [r7, #4]
        uCnt++;
   10c66:	68fb      	ldr	r3, [r7, #12]
   10c68:	3301      	adds	r3, #1
   10c6a:	60fb      	str	r3, [r7, #12]
    }

    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   10c6c:	e012      	b.n	10c94 <decstr_to_int+0x56>
    {
        ++uCnt;
   10c6e:	68fb      	ldr	r3, [r7, #12]
   10c70:	3301      	adds	r3, #1
   10c72:	60fb      	str	r3, [r7, #12]

        //
        // Multiply accumulated value by 10.
        //
        ui32Val *= 10;
   10c74:	693a      	ldr	r2, [r7, #16]
   10c76:	4613      	mov	r3, r2
   10c78:	009b      	lsls	r3, r3, #2
   10c7a:	4413      	add	r3, r2
   10c7c:	005b      	lsls	r3, r3, #1
   10c7e:	613b      	str	r3, [r7, #16]

        //
        // Add in the new low digit.
        //
        ui32Val += (*pcStr - '0');
   10c80:	687b      	ldr	r3, [r7, #4]
   10c82:	781b      	ldrb	r3, [r3, #0]
   10c84:	461a      	mov	r2, r3
   10c86:	693b      	ldr	r3, [r7, #16]
   10c88:	4413      	add	r3, r2
   10c8a:	3b30      	subs	r3, #48	; 0x30
   10c8c:	613b      	str	r3, [r7, #16]
        pcStr++;
   10c8e:	687b      	ldr	r3, [r7, #4]
   10c90:	3301      	adds	r3, #1
   10c92:	607b      	str	r3, [r7, #4]
    while ( *pcStr >= '0'  &&  *pcStr <= '9' )
   10c94:	687b      	ldr	r3, [r7, #4]
   10c96:	781b      	ldrb	r3, [r3, #0]
   10c98:	2b2f      	cmp	r3, #47	; 0x2f
   10c9a:	d903      	bls.n	10ca4 <decstr_to_int+0x66>
   10c9c:	687b      	ldr	r3, [r7, #4]
   10c9e:	781b      	ldrb	r3, [r3, #0]
   10ca0:	2b39      	cmp	r3, #57	; 0x39
   10ca2:	d9e4      	bls.n	10c6e <decstr_to_int+0x30>
    }

    if ( pui32CharCnt )
   10ca4:	683b      	ldr	r3, [r7, #0]
   10ca6:	2b00      	cmp	r3, #0
   10ca8:	d002      	beq.n	10cb0 <decstr_to_int+0x72>
    {
        *pui32CharCnt = uCnt;
   10caa:	683b      	ldr	r3, [r7, #0]
   10cac:	68fa      	ldr	r2, [r7, #12]
   10cae:	601a      	str	r2, [r3, #0]
    }

    return bNeg ? -ui32Val : ui32Val;
   10cb0:	7dfb      	ldrb	r3, [r7, #23]
   10cb2:	2b00      	cmp	r3, #0
   10cb4:	d002      	beq.n	10cbc <decstr_to_int+0x7e>
   10cb6:	693b      	ldr	r3, [r7, #16]
   10cb8:	425b      	negs	r3, r3
   10cba:	e000      	b.n	10cbe <decstr_to_int+0x80>
   10cbc:	693b      	ldr	r3, [r7, #16]
}
   10cbe:	4618      	mov	r0, r3
   10cc0:	371c      	adds	r7, #28
   10cc2:	46bd      	mov	sp, r7
   10cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   10cc8:	4770      	bx	lr

00010cca <uint64_to_str>:
// written).
//
//*****************************************************************************
static int
uint64_to_str(uint64_t ui64Val, char *pcBuf)
{
   10cca:	b590      	push	{r4, r7, lr}
   10ccc:	b091      	sub	sp, #68	; 0x44
   10cce:	af00      	add	r7, sp, #0
   10cd0:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10cd4:	607a      	str	r2, [r7, #4]
    char tbuf[25];
    int ix = 0, iNumDig = 0;
   10cd6:	2300      	movs	r3, #0
   10cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   10cda:	2300      	movs	r3, #0
   10cdc:	63bb      	str	r3, [r7, #56]	; 0x38
    do
    {
        //
        // Divide by 10
        //
        u64Tmp = divu64_10(ui64Val);
   10cde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10ce2:	f7ff fe49 	bl	10978 <divu64_10>
   10ce6:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30

        //
        // Get modulus
        //
        uMod = ui64Val - (u64Tmp * 10);
   10cea:	68b9      	ldr	r1, [r7, #8]
   10cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   10cee:	4613      	mov	r3, r2
   10cf0:	009b      	lsls	r3, r3, #2
   10cf2:	4413      	add	r3, r2
   10cf4:	005b      	lsls	r3, r3, #1
   10cf6:	1acb      	subs	r3, r1, r3
   10cf8:	62fb      	str	r3, [r7, #44]	; 0x2c

        tbuf[ix++] = uMod + '0';
   10cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10cfc:	b2da      	uxtb	r2, r3
   10cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d00:	1c59      	adds	r1, r3, #1
   10d02:	63f9      	str	r1, [r7, #60]	; 0x3c
   10d04:	3230      	adds	r2, #48	; 0x30
   10d06:	b2d2      	uxtb	r2, r2
   10d08:	f107 0140 	add.w	r1, r7, #64	; 0x40
   10d0c:	440b      	add	r3, r1
   10d0e:	f803 2c30 	strb.w	r2, [r3, #-48]
        ui64Val = u64Tmp;
   10d12:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
   10d16:	e9c7 3402 	strd	r3, r4, [r7, #8]
    } while ( ui64Val );
   10d1a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   10d1e:	4323      	orrs	r3, r4
   10d20:	d1dd      	bne.n	10cde <uint64_to_str+0x14>

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   10d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d24:	63bb      	str	r3, [r7, #56]	; 0x38

    //
    // Now, reverse the buffer when saving to the caller's buffer.
    //
    if ( pcBuf )
   10d26:	687b      	ldr	r3, [r7, #4]
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d011      	beq.n	10d50 <uint64_to_str+0x86>
    {
        while ( ix-- )
   10d2c:	e008      	b.n	10d40 <uint64_to_str+0x76>
        {
            *pcBuf++ = tbuf[ix];
   10d2e:	687b      	ldr	r3, [r7, #4]
   10d30:	1c5a      	adds	r2, r3, #1
   10d32:	607a      	str	r2, [r7, #4]
   10d34:	f107 0110 	add.w	r1, r7, #16
   10d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   10d3a:	440a      	add	r2, r1
   10d3c:	7812      	ldrb	r2, [r2, #0]
   10d3e:	701a      	strb	r2, [r3, #0]
        while ( ix-- )
   10d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10d42:	1e5a      	subs	r2, r3, #1
   10d44:	63fa      	str	r2, [r7, #60]	; 0x3c
   10d46:	2b00      	cmp	r3, #0
   10d48:	d1f1      	bne.n	10d2e <uint64_to_str+0x64>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0x00;
   10d4a:	687b      	ldr	r3, [r7, #4]
   10d4c:	2200      	movs	r2, #0
   10d4e:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   10d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
   10d52:	4618      	mov	r0, r3
   10d54:	3744      	adds	r7, #68	; 0x44
   10d56:	46bd      	mov	sp, r7
   10d58:	bd90      	pop	{r4, r7, pc}

00010d5a <uint64_to_hexstr>:
// written).
//
//*****************************************************************************
static int
uint64_to_hexstr(uint64_t ui64Val, char *pcBuf, bool bLower)
{
   10d5a:	b490      	push	{r4, r7}
   10d5c:	b08c      	sub	sp, #48	; 0x30
   10d5e:	af00      	add	r7, sp, #0
   10d60:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10d64:	607a      	str	r2, [r7, #4]
   10d66:	70fb      	strb	r3, [r7, #3]
    int iNumDig, ix = 0;
   10d68:	2300      	movs	r3, #0
   10d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    char cCh, tbuf[20];

    if ( ui64Val == 0 )
   10d6c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   10d70:	4323      	orrs	r3, r4
   10d72:	d135      	bne.n	10de0 <uint64_to_hexstr+0x86>
    {
        tbuf[ix++] = '0';   // Print a '0'
   10d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10d76:	1c5a      	adds	r2, r3, #1
   10d78:	62fa      	str	r2, [r7, #44]	; 0x2c
   10d7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
   10d7e:	4413      	add	r3, r2
   10d80:	2230      	movs	r2, #48	; 0x30
   10d82:	f803 2c20 	strb.w	r2, [r3, #-32]
    }

    while ( ui64Val )
   10d86:	e02b      	b.n	10de0 <uint64_to_hexstr+0x86>
    {
        cCh = ui64Val & 0xf;
   10d88:	7a3b      	ldrb	r3, [r7, #8]
   10d8a:	f003 030f 	and.w	r3, r3, #15
   10d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        //
        // Alpha character
        //
        if ( cCh > 9 )
   10d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10d96:	2b09      	cmp	r3, #9
   10d98:	d90a      	bls.n	10db0 <uint64_to_hexstr+0x56>
        {
            cCh += bLower ? 0x27 : 0x7;
   10d9a:	78fb      	ldrb	r3, [r7, #3]
   10d9c:	2b00      	cmp	r3, #0
   10d9e:	d001      	beq.n	10da4 <uint64_to_hexstr+0x4a>
   10da0:	2227      	movs	r2, #39	; 0x27
   10da2:	e000      	b.n	10da6 <uint64_to_hexstr+0x4c>
   10da4:	2207      	movs	r2, #7
   10da6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   10daa:	4413      	add	r3, r2
   10dac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        }

        tbuf[ix++] = cCh + '0';
   10db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10db2:	1c5a      	adds	r2, r3, #1
   10db4:	62fa      	str	r2, [r7, #44]	; 0x2c
   10db6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
   10dba:	3230      	adds	r2, #48	; 0x30
   10dbc:	b2d2      	uxtb	r2, r2
   10dbe:	f107 0130 	add.w	r1, r7, #48	; 0x30
   10dc2:	440b      	add	r3, r1
   10dc4:	f803 2c20 	strb.w	r2, [r3, #-32]
        ui64Val >>= 4;
   10dc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
   10dcc:	f04f 0300 	mov.w	r3, #0
   10dd0:	f04f 0400 	mov.w	r4, #0
   10dd4:	090b      	lsrs	r3, r1, #4
   10dd6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   10dda:	0914      	lsrs	r4, r2, #4
   10ddc:	e9c7 3402 	strd	r3, r4, [r7, #8]
    while ( ui64Val )
   10de0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   10de4:	4323      	orrs	r3, r4
   10de6:	d1cf      	bne.n	10d88 <uint64_to_hexstr+0x2e>
    }

    //
    // Save the total number of digits
    //
    iNumDig = ix;
   10de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10dea:	627b      	str	r3, [r7, #36]	; 0x24

    //
    // Now, reverse the buffer when saving to the callers buffer.
    //
    if (pcBuf)
   10dec:	687b      	ldr	r3, [r7, #4]
   10dee:	2b00      	cmp	r3, #0
   10df0:	d011      	beq.n	10e16 <uint64_to_hexstr+0xbc>
    {
        while (ix--)
   10df2:	e008      	b.n	10e06 <uint64_to_hexstr+0xac>
        {
            *pcBuf++ = tbuf[ix];
   10df4:	687b      	ldr	r3, [r7, #4]
   10df6:	1c5a      	adds	r2, r3, #1
   10df8:	607a      	str	r2, [r7, #4]
   10dfa:	f107 0110 	add.w	r1, r7, #16
   10dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10e00:	440a      	add	r2, r1
   10e02:	7812      	ldrb	r2, [r2, #0]
   10e04:	701a      	strb	r2, [r3, #0]
        while (ix--)
   10e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10e08:	1e5a      	subs	r2, r3, #1
   10e0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   10e0c:	2b00      	cmp	r3, #0
   10e0e:	d1f1      	bne.n	10df4 <uint64_to_hexstr+0x9a>
        }

        //
        // Terminate the caller's buffer
        //
        *pcBuf = 0;
   10e10:	687b      	ldr	r3, [r7, #4]
   10e12:	2200      	movs	r2, #0
   10e14:	701a      	strb	r2, [r3, #0]
    }

    return iNumDig;
   10e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   10e18:	4618      	mov	r0, r3
   10e1a:	3730      	adds	r7, #48	; 0x30
   10e1c:	46bd      	mov	sp, r7
   10e1e:	bc90      	pop	{r4, r7}
   10e20:	4770      	bx	lr

00010e22 <simple_strlen>:
// Return length of the given string.
//
//*****************************************************************************
static uint32_t
simple_strlen(char *pcBuf)
{
   10e22:	b480      	push	{r7}
   10e24:	b085      	sub	sp, #20
   10e26:	af00      	add	r7, sp, #0
   10e28:	6078      	str	r0, [r7, #4]
    uint32_t ui32RetVal = 0;
   10e2a:	2300      	movs	r3, #0
   10e2c:	60fb      	str	r3, [r7, #12]
    if ( !pcBuf )
   10e2e:	687b      	ldr	r3, [r7, #4]
   10e30:	2b00      	cmp	r3, #0
   10e32:	d104      	bne.n	10e3e <simple_strlen+0x1c>
    {
        return ui32RetVal;
   10e34:	68fb      	ldr	r3, [r7, #12]
   10e36:	e009      	b.n	10e4c <simple_strlen+0x2a>
    }

    while ( *pcBuf++ )
    {
        ui32RetVal++;
   10e38:	68fb      	ldr	r3, [r7, #12]
   10e3a:	3301      	adds	r3, #1
   10e3c:	60fb      	str	r3, [r7, #12]
    while ( *pcBuf++ )
   10e3e:	687b      	ldr	r3, [r7, #4]
   10e40:	1c5a      	adds	r2, r3, #1
   10e42:	607a      	str	r2, [r7, #4]
   10e44:	781b      	ldrb	r3, [r3, #0]
   10e46:	2b00      	cmp	r3, #0
   10e48:	d1f6      	bne.n	10e38 <simple_strlen+0x16>
    }
    return ui32RetVal;
   10e4a:	68fb      	ldr	r3, [r7, #12]
}
   10e4c:	4618      	mov	r0, r3
   10e4e:	3714      	adds	r7, #20
   10e50:	46bd      	mov	sp, r7
   10e52:	f85d 7b04 	ldr.w	r7, [sp], #4
   10e56:	4770      	bx	lr

00010e58 <padbuffer>:
// Pad a string buffer with pad characters.
//
//*****************************************************************************
static int32_t
padbuffer(char *pcBuf, uint8_t cPadChar, int32_t i32NumChars)
{
   10e58:	b480      	push	{r7}
   10e5a:	b087      	sub	sp, #28
   10e5c:	af00      	add	r7, sp, #0
   10e5e:	60f8      	str	r0, [r7, #12]
   10e60:	460b      	mov	r3, r1
   10e62:	607a      	str	r2, [r7, #4]
   10e64:	72fb      	strb	r3, [r7, #11]
    int32_t i32Cnt = 0;
   10e66:	2300      	movs	r3, #0
   10e68:	617b      	str	r3, [r7, #20]

    if ( i32NumChars <= 0 )
   10e6a:	687b      	ldr	r3, [r7, #4]
   10e6c:	2b00      	cmp	r3, #0
   10e6e:	dc0c      	bgt.n	10e8a <padbuffer+0x32>
    {
        return i32Cnt;
   10e70:	697b      	ldr	r3, [r7, #20]
   10e72:	e010      	b.n	10e96 <padbuffer+0x3e>
    }

    while ( i32NumChars-- )
    {
        if ( pcBuf )
   10e74:	68fb      	ldr	r3, [r7, #12]
   10e76:	2b00      	cmp	r3, #0
   10e78:	d004      	beq.n	10e84 <padbuffer+0x2c>
        {
            *pcBuf++ = cPadChar;
   10e7a:	68fb      	ldr	r3, [r7, #12]
   10e7c:	1c5a      	adds	r2, r3, #1
   10e7e:	60fa      	str	r2, [r7, #12]
   10e80:	7afa      	ldrb	r2, [r7, #11]
   10e82:	701a      	strb	r2, [r3, #0]
        }
        i32Cnt++;
   10e84:	697b      	ldr	r3, [r7, #20]
   10e86:	3301      	adds	r3, #1
   10e88:	617b      	str	r3, [r7, #20]
    while ( i32NumChars-- )
   10e8a:	687b      	ldr	r3, [r7, #4]
   10e8c:	1e5a      	subs	r2, r3, #1
   10e8e:	607a      	str	r2, [r7, #4]
   10e90:	2b00      	cmp	r3, #0
   10e92:	d1ef      	bne.n	10e74 <padbuffer+0x1c>
    }

    return i32Cnt;
   10e94:	697b      	ldr	r3, [r7, #20]
}
   10e96:	4618      	mov	r0, r3
   10e98:	371c      	adds	r7, #28
   10e9a:	46bd      	mov	sp, r7
   10e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   10ea0:	4770      	bx	lr
	...

00010ea4 <ftoa>:
    int32_t I32;
    float F;
} i32fl_t;

static int ftoa(float fValue, char *pcBuf, int iPrecision)
{
   10ea4:	b590      	push	{r4, r7, lr}
   10ea6:	b08f      	sub	sp, #60	; 0x3c
   10ea8:	af00      	add	r7, sp, #0
   10eaa:	ed87 0a03 	vstr	s0, [r7, #12]
   10eae:	60b8      	str	r0, [r7, #8]
   10eb0:	6079      	str	r1, [r7, #4]
    i32fl_t unFloatValue;
    int iExp2, iBufSize;
    int32_t i32Significand, i32IntPart, i32FracPart;
    char *pcBufInitial, *pcBuftmp;

    iBufSize = *(uint32_t*)pcBuf;
   10eb2:	68bb      	ldr	r3, [r7, #8]
   10eb4:	681b      	ldr	r3, [r3, #0]
   10eb6:	627b      	str	r3, [r7, #36]	; 0x24
    if (iBufSize < 4)
   10eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10eba:	2b03      	cmp	r3, #3
   10ebc:	dc02      	bgt.n	10ec4 <ftoa+0x20>
    {
        return AM_FTOA_ERR_BUFSIZE;
   10ebe:	f06f 0302 	mvn.w	r3, #2
   10ec2:	e0e7      	b.n	11094 <ftoa+0x1f0>
    }

    if (fValue == 0.0f)
   10ec4:	edd7 7a03 	vldr	s15, [r7, #12]
   10ec8:	eef5 7a40 	vcmp.f32	s15, #0.0
   10ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   10ed0:	d104      	bne.n	10edc <ftoa+0x38>
    {
        // "0.0"
        *(uint32_t*)pcBuf = 0x00 << 24 | ('0' << 16) | ('.' << 8) | ('0' << 0);
   10ed2:	68bb      	ldr	r3, [r7, #8]
   10ed4:	4a71      	ldr	r2, [pc, #452]	; (1109c <ftoa+0x1f8>)
   10ed6:	601a      	str	r2, [r3, #0]
        return 3;
   10ed8:	2303      	movs	r3, #3
   10eda:	e0db      	b.n	11094 <ftoa+0x1f0>
    }

    pcBufInitial = pcBuf;
   10edc:	68bb      	ldr	r3, [r7, #8]
   10ede:	623b      	str	r3, [r7, #32]

    unFloatValue.F = fValue;
   10ee0:	68fb      	ldr	r3, [r7, #12]
   10ee2:	613b      	str	r3, [r7, #16]

    iExp2 = ((unFloatValue.I32 >> 23) & 0x000000FF) - 127;
   10ee4:	693b      	ldr	r3, [r7, #16]
   10ee6:	15db      	asrs	r3, r3, #23
   10ee8:	b2db      	uxtb	r3, r3
   10eea:	3b7f      	subs	r3, #127	; 0x7f
   10eec:	61fb      	str	r3, [r7, #28]
    i32Significand = (unFloatValue.I32 & 0x00FFFFFF) | 0x00800000;
   10eee:	693b      	ldr	r3, [r7, #16]
   10ef0:	f3c3 0316 	ubfx	r3, r3, #0, #23
   10ef4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   10ef8:	61bb      	str	r3, [r7, #24]
    i32FracPart = 0;
   10efa:	2300      	movs	r3, #0
   10efc:	633b      	str	r3, [r7, #48]	; 0x30
    i32IntPart = 0;
   10efe:	2300      	movs	r3, #0
   10f00:	637b      	str	r3, [r7, #52]	; 0x34

    if (iExp2 >= 31)
   10f02:	69fb      	ldr	r3, [r7, #28]
   10f04:	2b1e      	cmp	r3, #30
   10f06:	dd02      	ble.n	10f0e <ftoa+0x6a>
    {
        return AM_FTOA_ERR_VAL_TOO_LARGE;
   10f08:	f06f 0301 	mvn.w	r3, #1
   10f0c:	e0c2      	b.n	11094 <ftoa+0x1f0>
    }
    else if (iExp2 < -23)
   10f0e:	69fb      	ldr	r3, [r7, #28]
   10f10:	f113 0f17 	cmn.w	r3, #23
   10f14:	da02      	bge.n	10f1c <ftoa+0x78>
    {
        return AM_FTOA_ERR_VAL_TOO_SMALL;
   10f16:	f04f 33ff 	mov.w	r3, #4294967295
   10f1a:	e0bb      	b.n	11094 <ftoa+0x1f0>
    }
    else if (iExp2 >= 23)
   10f1c:	69fb      	ldr	r3, [r7, #28]
   10f1e:	2b16      	cmp	r3, #22
   10f20:	dd06      	ble.n	10f30 <ftoa+0x8c>
    {
        i32IntPart = i32Significand << (iExp2 - 23);
   10f22:	69fb      	ldr	r3, [r7, #28]
   10f24:	3b17      	subs	r3, #23
   10f26:	69ba      	ldr	r2, [r7, #24]
   10f28:	fa02 f303 	lsl.w	r3, r2, r3
   10f2c:	637b      	str	r3, [r7, #52]	; 0x34
   10f2e:	e01a      	b.n	10f66 <ftoa+0xc2>
    }
    else if (iExp2 >= 0)
   10f30:	69fb      	ldr	r3, [r7, #28]
   10f32:	2b00      	cmp	r3, #0
   10f34:	db0f      	blt.n	10f56 <ftoa+0xb2>
    {
        i32IntPart = i32Significand >> (23 - iExp2);
   10f36:	69fb      	ldr	r3, [r7, #28]
   10f38:	f1c3 0317 	rsb	r3, r3, #23
   10f3c:	69ba      	ldr	r2, [r7, #24]
   10f3e:	fa42 f303 	asr.w	r3, r2, r3
   10f42:	637b      	str	r3, [r7, #52]	; 0x34
        i32FracPart = (i32Significand << (iExp2 + 1)) & 0x00FFFFFF;
   10f44:	69fb      	ldr	r3, [r7, #28]
   10f46:	3301      	adds	r3, #1
   10f48:	69ba      	ldr	r2, [r7, #24]
   10f4a:	fa02 f303 	lsl.w	r3, r2, r3
   10f4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10f52:	633b      	str	r3, [r7, #48]	; 0x30
   10f54:	e007      	b.n	10f66 <ftoa+0xc2>
    }
    else // if (iExp2 < 0)
    {
        i32FracPart = (i32Significand & 0x00FFFFFF) >> -(iExp2 + 1);
   10f56:	69bb      	ldr	r3, [r7, #24]
   10f58:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   10f5c:	69fb      	ldr	r3, [r7, #28]
   10f5e:	43db      	mvns	r3, r3
   10f60:	fa42 f303 	asr.w	r3, r2, r3
   10f64:	633b      	str	r3, [r7, #48]	; 0x30
    }

    if (unFloatValue.I32 < 0)
   10f66:	693b      	ldr	r3, [r7, #16]
   10f68:	2b00      	cmp	r3, #0
   10f6a:	da04      	bge.n	10f76 <ftoa+0xd2>
    {
        *pcBuf++ = '-';
   10f6c:	68bb      	ldr	r3, [r7, #8]
   10f6e:	1c5a      	adds	r2, r3, #1
   10f70:	60ba      	str	r2, [r7, #8]
   10f72:	222d      	movs	r2, #45	; 0x2d
   10f74:	701a      	strb	r2, [r3, #0]
    }

    if (i32IntPart == 0)
   10f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10f78:	2b00      	cmp	r3, #0
   10f7a:	d105      	bne.n	10f88 <ftoa+0xe4>
    {
        *pcBuf++ = '0';
   10f7c:	68bb      	ldr	r3, [r7, #8]
   10f7e:	1c5a      	adds	r2, r3, #1
   10f80:	60ba      	str	r2, [r7, #8]
   10f82:	2230      	movs	r2, #48	; 0x30
   10f84:	701a      	strb	r2, [r3, #0]
   10f86:	e021      	b.n	10fcc <ftoa+0x128>
    }
    else
    {
        if (i32IntPart > 0)
   10f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10f8a:	2b00      	cmp	r3, #0
   10f8c:	dd08      	ble.n	10fa0 <ftoa+0xfc>
        {
            uint64_to_str(i32IntPart, pcBuf);
   10f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10f90:	ea4f 74e3 	mov.w	r4, r3, asr #31
   10f94:	68ba      	ldr	r2, [r7, #8]
   10f96:	4618      	mov	r0, r3
   10f98:	4621      	mov	r1, r4
   10f9a:	f7ff fe96 	bl	10cca <uint64_to_str>
   10f9e:	e011      	b.n	10fc4 <ftoa+0x120>
        }
        else
        {
            *pcBuf++ = '-';
   10fa0:	68bb      	ldr	r3, [r7, #8]
   10fa2:	1c5a      	adds	r2, r3, #1
   10fa4:	60ba      	str	r2, [r7, #8]
   10fa6:	222d      	movs	r2, #45	; 0x2d
   10fa8:	701a      	strb	r2, [r3, #0]
            uint64_to_str(-i32IntPart, pcBuf);
   10faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   10fac:	425b      	negs	r3, r3
   10fae:	ea4f 74e3 	mov.w	r4, r3, asr #31
   10fb2:	68ba      	ldr	r2, [r7, #8]
   10fb4:	4618      	mov	r0, r3
   10fb6:	4621      	mov	r1, r4
   10fb8:	f7ff fe87 	bl	10cca <uint64_to_str>
        }
        while (*pcBuf)    // Get to end of new string
   10fbc:	e002      	b.n	10fc4 <ftoa+0x120>
        {
            pcBuf++;
   10fbe:	68bb      	ldr	r3, [r7, #8]
   10fc0:	3301      	adds	r3, #1
   10fc2:	60bb      	str	r3, [r7, #8]
        while (*pcBuf)    // Get to end of new string
   10fc4:	68bb      	ldr	r3, [r7, #8]
   10fc6:	781b      	ldrb	r3, [r3, #0]
   10fc8:	2b00      	cmp	r3, #0
   10fca:	d1f8      	bne.n	10fbe <ftoa+0x11a>
    }

    //
    // Now, begin the fractional part
    //
    *pcBuf++ = '.';
   10fcc:	68bb      	ldr	r3, [r7, #8]
   10fce:	1c5a      	adds	r2, r3, #1
   10fd0:	60ba      	str	r2, [r7, #8]
   10fd2:	222e      	movs	r2, #46	; 0x2e
   10fd4:	701a      	strb	r2, [r3, #0]

    if (i32FracPart == 0)
   10fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   10fd8:	2b00      	cmp	r3, #0
   10fda:	d105      	bne.n	10fe8 <ftoa+0x144>
    {
        *pcBuf++ = '0';
   10fdc:	68bb      	ldr	r3, [r7, #8]
   10fde:	1c5a      	adds	r2, r3, #1
   10fe0:	60ba      	str	r2, [r7, #8]
   10fe2:	2230      	movs	r2, #48	; 0x30
   10fe4:	701a      	strb	r2, [r3, #0]
   10fe6:	e04f      	b.n	11088 <ftoa+0x1e4>
    }
    else
    {
        int jx, iMax;

        iMax = iBufSize - (pcBuf - pcBufInitial) - 1;
   10fe8:	68ba      	ldr	r2, [r7, #8]
   10fea:	6a3b      	ldr	r3, [r7, #32]
   10fec:	1ad3      	subs	r3, r2, r3
   10fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10ff0:	1ad3      	subs	r3, r2, r3
   10ff2:	3b01      	subs	r3, #1
   10ff4:	617b      	str	r3, [r7, #20]
        iMax = (iMax > iPrecision) ? iPrecision : iMax;
   10ff6:	697a      	ldr	r2, [r7, #20]
   10ff8:	687b      	ldr	r3, [r7, #4]
   10ffa:	4293      	cmp	r3, r2
   10ffc:	bfa8      	it	ge
   10ffe:	4613      	movge	r3, r2
   11000:	617b      	str	r3, [r7, #20]

        for (jx = 0; jx < iMax; jx++)
   11002:	2300      	movs	r3, #0
   11004:	62bb      	str	r3, [r7, #40]	; 0x28
   11006:	e015      	b.n	11034 <ftoa+0x190>
        {
            i32FracPart *= 10;
   11008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1100a:	4613      	mov	r3, r2
   1100c:	009b      	lsls	r3, r3, #2
   1100e:	4413      	add	r3, r2
   11010:	005b      	lsls	r3, r3, #1
   11012:	633b      	str	r3, [r7, #48]	; 0x30
            *pcBuf++ = (i32FracPart >> 24) + '0';
   11014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11016:	161b      	asrs	r3, r3, #24
   11018:	b2da      	uxtb	r2, r3
   1101a:	68bb      	ldr	r3, [r7, #8]
   1101c:	1c59      	adds	r1, r3, #1
   1101e:	60b9      	str	r1, [r7, #8]
   11020:	3230      	adds	r2, #48	; 0x30
   11022:	b2d2      	uxtb	r2, r2
   11024:	701a      	strb	r2, [r3, #0]
            i32FracPart &= 0x00FFFFFF;
   11026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11028:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1102c:	633b      	str	r3, [r7, #48]	; 0x30
        for (jx = 0; jx < iMax; jx++)
   1102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11030:	3301      	adds	r3, #1
   11032:	62bb      	str	r3, [r7, #40]	; 0x28
   11034:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11036:	697b      	ldr	r3, [r7, #20]
   11038:	429a      	cmp	r2, r3
   1103a:	dbe5      	blt.n	11008 <ftoa+0x164>
        // 1.996        4                   1.9960
        //
        // To determine whether to round up, we'll look at what the next
        // decimal value would have been.
        //
        if ( ((i32FracPart * 10) >> 24) >= 5 )
   1103c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1103e:	4613      	mov	r3, r2
   11040:	009b      	lsls	r3, r3, #2
   11042:	4413      	add	r3, r2
   11044:	005b      	lsls	r3, r3, #1
   11046:	161b      	asrs	r3, r3, #24
   11048:	2b04      	cmp	r3, #4
   1104a:	dd1d      	ble.n	11088 <ftoa+0x1e4>
        {
            //
            // Yes, we need to round up.
            // Go back through the string and make adjustments as necessary.
            //
            pcBuftmp = pcBuf - 1;
   1104c:	68bb      	ldr	r3, [r7, #8]
   1104e:	3b01      	subs	r3, #1
   11050:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   11052:	e015      	b.n	11080 <ftoa+0x1dc>
            {
                if ( *pcBuftmp == '.' )
   11054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11056:	781b      	ldrb	r3, [r3, #0]
   11058:	2b2e      	cmp	r3, #46	; 0x2e
   1105a:	d00e      	beq.n	1107a <ftoa+0x1d6>
                {
                }
                else if ( *pcBuftmp == '9' )
   1105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1105e:	781b      	ldrb	r3, [r3, #0]
   11060:	2b39      	cmp	r3, #57	; 0x39
   11062:	d103      	bne.n	1106c <ftoa+0x1c8>
                {
                    *pcBuftmp = '0';
   11064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11066:	2230      	movs	r2, #48	; 0x30
   11068:	701a      	strb	r2, [r3, #0]
   1106a:	e006      	b.n	1107a <ftoa+0x1d6>
                }
                else
                {
                    *pcBuftmp += 1;
   1106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1106e:	781b      	ldrb	r3, [r3, #0]
   11070:	3301      	adds	r3, #1
   11072:	b2da      	uxtb	r2, r3
   11074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11076:	701a      	strb	r2, [r3, #0]
                    break;
   11078:	e006      	b.n	11088 <ftoa+0x1e4>
                }
                pcBuftmp--;
   1107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1107c:	3b01      	subs	r3, #1
   1107e:	62fb      	str	r3, [r7, #44]	; 0x2c
            while ( pcBuftmp >= pcBufInitial )
   11080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11082:	6a3b      	ldr	r3, [r7, #32]
   11084:	429a      	cmp	r2, r3
   11086:	d2e5      	bcs.n	11054 <ftoa+0x1b0>
    }

    //
    // Terminate the string and we're done
    //
    *pcBuf = 0x00;
   11088:	68bb      	ldr	r3, [r7, #8]
   1108a:	2200      	movs	r2, #0
   1108c:	701a      	strb	r2, [r3, #0]

    return (pcBuf - pcBufInitial);
   1108e:	68ba      	ldr	r2, [r7, #8]
   11090:	6a3b      	ldr	r3, [r7, #32]
   11092:	1ad3      	subs	r3, r2, r3
} // ftoa()
   11094:	4618      	mov	r0, r3
   11096:	373c      	adds	r7, #60	; 0x3c
   11098:	46bd      	mov	sp, r7
   1109a:	bd90      	pop	{r4, r7, pc}
   1109c:	00302e30 	.word	0x00302e30

000110a0 <am_util_stdio_vsprintf>:
//! @return uint32_t representing the number of characters printed.
//
//******************************************************************************
uint32_t
am_util_stdio_vsprintf(char *pcBuf, const char *pcFmt, va_list pArgs)
{
   110a0:	b590      	push	{r4, r7, lr}
   110a2:	b095      	sub	sp, #84	; 0x54
   110a4:	af00      	add	r7, sp, #0
   110a6:	60f8      	str	r0, [r7, #12]
   110a8:	60b9      	str	r1, [r7, #8]
   110aa:	607a      	str	r2, [r7, #4]
    char *pcStr;
    uint64_t ui64Val;
    int64_t i64Val;
    uint32_t ui32NumChars, ui32CharCnt = 0;
   110ac:	2300      	movs	r3, #0
   110ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    int iWidth, iVal, iPrecision;
    uint8_t ui8CharSpecifier, ui8PadChar;
    bool bLower, bLongLong, bNeg;
    uint32_t ui32strlen = 0;
   110b0:	2300      	movs	r3, #0
   110b2:	627b      	str	r3, [r7, #36]	; 0x24

    while ( *pcFmt != 0x0 )
   110b4:	e2e9      	b.n	1168a <am_util_stdio_vsprintf+0x5ea>
    {
        iPrecision = 6;             // printf() default precision for %f is 6
   110b6:	2306      	movs	r3, #6
   110b8:	633b      	str	r3, [r7, #48]	; 0x30

        if ( *pcFmt != '%' )
   110ba:	68bb      	ldr	r3, [r7, #8]
   110bc:	781b      	ldrb	r3, [r3, #0]
   110be:	2b25      	cmp	r3, #37	; 0x25
   110c0:	d01f      	beq.n	11102 <am_util_stdio_vsprintf+0x62>
        {
            //
            // Accumulate the string portion of the format specification.
            //
            if ( pcBuf )
   110c2:	68fb      	ldr	r3, [r7, #12]
   110c4:	2b00      	cmp	r3, #0
   110c6:	d015      	beq.n	110f4 <am_util_stdio_vsprintf+0x54>
            {
                // If '\n', convert to '\r\n'
                if ( *pcFmt == '\n'  &&  g_bTxtXlate )
   110c8:	68bb      	ldr	r3, [r7, #8]
   110ca:	781b      	ldrb	r3, [r3, #0]
   110cc:	2b0a      	cmp	r3, #10
   110ce:	d10b      	bne.n	110e8 <am_util_stdio_vsprintf+0x48>
   110d0:	4bb2      	ldr	r3, [pc, #712]	; (1139c <am_util_stdio_vsprintf+0x2fc>)
   110d2:	781b      	ldrb	r3, [r3, #0]
   110d4:	2b00      	cmp	r3, #0
   110d6:	d007      	beq.n	110e8 <am_util_stdio_vsprintf+0x48>
                {
                    *pcBuf++ = '\r';
   110d8:	68fb      	ldr	r3, [r7, #12]
   110da:	1c5a      	adds	r2, r3, #1
   110dc:	60fa      	str	r2, [r7, #12]
   110de:	220d      	movs	r2, #13
   110e0:	701a      	strb	r2, [r3, #0]
                    ++ui32CharCnt;
   110e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   110e4:	3301      	adds	r3, #1
   110e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                *pcBuf++ = *pcFmt;
   110e8:	68fb      	ldr	r3, [r7, #12]
   110ea:	1c5a      	adds	r2, r3, #1
   110ec:	60fa      	str	r2, [r7, #12]
   110ee:	68ba      	ldr	r2, [r7, #8]
   110f0:	7812      	ldrb	r2, [r2, #0]
   110f2:	701a      	strb	r2, [r3, #0]
            }

            ++pcFmt;
   110f4:	68bb      	ldr	r3, [r7, #8]
   110f6:	3301      	adds	r3, #1
   110f8:	60bb      	str	r3, [r7, #8]
            ++ui32CharCnt;
   110fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   110fc:	3301      	adds	r3, #1
   110fe:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
   11100:	e2c3      	b.n	1168a <am_util_stdio_vsprintf+0x5ea>
        }

        //
        // Handle the specifier.
        //
        ++pcFmt;
   11102:	68bb      	ldr	r3, [r7, #8]
   11104:	3301      	adds	r3, #1
   11106:	60bb      	str	r3, [r7, #8]
        bLower = bLongLong = false;
   11108:	2300      	movs	r3, #0
   1110a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   1110e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11112:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        //
        // Default to space as ui8PadChar
        //
        ui8PadChar = ' ';
   11116:	2320      	movs	r3, #32
   11118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        if ( *pcFmt == '0' )
   1111c:	68bb      	ldr	r3, [r7, #8]
   1111e:	781b      	ldrb	r3, [r3, #0]
   11120:	2b30      	cmp	r3, #48	; 0x30
   11122:	d105      	bne.n	11130 <am_util_stdio_vsprintf+0x90>
        {
            ui8PadChar = '0';
   11124:	2330      	movs	r3, #48	; 0x30
   11126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            ++pcFmt;
   1112a:	68bb      	ldr	r3, [r7, #8]
   1112c:	3301      	adds	r3, #1
   1112e:	60bb      	str	r3, [r7, #8]
        }

        //
        // Width specifier
        //
        iWidth = decstr_to_int(pcFmt, &ui32NumChars);
   11130:	f107 0310 	add.w	r3, r7, #16
   11134:	4619      	mov	r1, r3
   11136:	68b8      	ldr	r0, [r7, #8]
   11138:	f7ff fd81 	bl	10c3e <decstr_to_int>
   1113c:	4603      	mov	r3, r0
   1113e:	63bb      	str	r3, [r7, #56]	; 0x38
        pcFmt += ui32NumChars;
   11140:	693b      	ldr	r3, [r7, #16]
   11142:	68ba      	ldr	r2, [r7, #8]
   11144:	4413      	add	r3, r2
   11146:	60bb      	str	r3, [r7, #8]

        //
        // For now, only support a negative width specifier for %s
        //
        if ( ( *pcFmt != 's' )  &&  ( iWidth < 0 ) )
   11148:	68bb      	ldr	r3, [r7, #8]
   1114a:	781b      	ldrb	r3, [r3, #0]
   1114c:	2b73      	cmp	r3, #115	; 0x73
   1114e:	d005      	beq.n	1115c <am_util_stdio_vsprintf+0xbc>
   11150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11152:	2b00      	cmp	r3, #0
   11154:	da02      	bge.n	1115c <am_util_stdio_vsprintf+0xbc>
        {
            iWidth = -iWidth;
   11156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11158:	425b      	negs	r3, r3
   1115a:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        //
        // Check for precision specifier
        //
        if (*pcFmt == '.')
   1115c:	68bb      	ldr	r3, [r7, #8]
   1115e:	781b      	ldrb	r3, [r3, #0]
   11160:	2b2e      	cmp	r3, #46	; 0x2e
   11162:	d10e      	bne.n	11182 <am_util_stdio_vsprintf+0xe2>
        {
            ++pcFmt;
   11164:	68bb      	ldr	r3, [r7, #8]
   11166:	3301      	adds	r3, #1
   11168:	60bb      	str	r3, [r7, #8]
            iPrecision = decstr_to_int(pcFmt, &ui32NumChars);
   1116a:	f107 0310 	add.w	r3, r7, #16
   1116e:	4619      	mov	r1, r3
   11170:	68b8      	ldr	r0, [r7, #8]
   11172:	f7ff fd64 	bl	10c3e <decstr_to_int>
   11176:	4603      	mov	r3, r0
   11178:	633b      	str	r3, [r7, #48]	; 0x30
            pcFmt += ui32NumChars;
   1117a:	693b      	ldr	r3, [r7, #16]
   1117c:	68ba      	ldr	r2, [r7, #8]
   1117e:	4413      	add	r3, r2
   11180:	60bb      	str	r3, [r7, #8]
        // 'll', which must be a modifier for either 'd', 'i', 'u', 'x', or 'X'
        // (or even 'o', which is not currently supported). Other sub-specifiers
        // like 'hh','h', etc. are not currently handled.
        // Note - 'l' is used in Coremark, a primary reason it's supported here.
        //
        if ( *pcFmt == 'l' )
   11182:	68bb      	ldr	r3, [r7, #8]
   11184:	781b      	ldrb	r3, [r3, #0]
   11186:	2b6c      	cmp	r3, #108	; 0x6c
   11188:	d10c      	bne.n	111a4 <am_util_stdio_vsprintf+0x104>
        {
            pcFmt++;
   1118a:	68bb      	ldr	r3, [r7, #8]
   1118c:	3301      	adds	r3, #1
   1118e:	60bb      	str	r3, [r7, #8]
            if ( *pcFmt == 'l' )    // "ll" (long long)
   11190:	68bb      	ldr	r3, [r7, #8]
   11192:	781b      	ldrb	r3, [r3, #0]
   11194:	2b6c      	cmp	r3, #108	; 0x6c
   11196:	d105      	bne.n	111a4 <am_util_stdio_vsprintf+0x104>
            {
                pcFmt++;
   11198:	68bb      	ldr	r3, [r7, #8]
   1119a:	3301      	adds	r3, #1
   1119c:	60bb      	str	r3, [r7, #8]
                bLongLong = true;
   1119e:	2301      	movs	r3, #1
   111a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            }
        }

        switch ( *pcFmt )
   111a4:	68bb      	ldr	r3, [r7, #8]
   111a6:	781b      	ldrb	r3, [r3, #0]
   111a8:	3b46      	subs	r3, #70	; 0x46
   111aa:	2b32      	cmp	r3, #50	; 0x32
   111ac:	f200 825a 	bhi.w	11664 <am_util_stdio_vsprintf+0x5c4>
   111b0:	a201      	add	r2, pc, #4	; (adr r2, 111b8 <am_util_stdio_vsprintf+0x118>)
   111b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   111b6:	bf00      	nop
   111b8:	000115eb 	.word	0x000115eb
   111bc:	00011665 	.word	0x00011665
   111c0:	00011665 	.word	0x00011665
   111c4:	00011665 	.word	0x00011665
   111c8:	00011665 	.word	0x00011665
   111cc:	00011665 	.word	0x00011665
   111d0:	00011665 	.word	0x00011665
   111d4:	00011665 	.word	0x00011665
   111d8:	00011665 	.word	0x00011665
   111dc:	00011665 	.word	0x00011665
   111e0:	00011665 	.word	0x00011665
   111e4:	00011665 	.word	0x00011665
   111e8:	00011665 	.word	0x00011665
   111ec:	00011665 	.word	0x00011665
   111f0:	00011665 	.word	0x00011665
   111f4:	00011665 	.word	0x00011665
   111f8:	00011665 	.word	0x00011665
   111fc:	00011665 	.word	0x00011665
   11200:	0001137f 	.word	0x0001137f
   11204:	00011665 	.word	0x00011665
   11208:	00011665 	.word	0x00011665
   1120c:	00011665 	.word	0x00011665
   11210:	00011665 	.word	0x00011665
   11214:	00011665 	.word	0x00011665
   11218:	00011665 	.word	0x00011665
   1121c:	00011665 	.word	0x00011665
   11220:	00011665 	.word	0x00011665
   11224:	00011665 	.word	0x00011665
   11228:	00011665 	.word	0x00011665
   1122c:	00011285 	.word	0x00011285
   11230:	000114b1 	.word	0x000114b1
   11234:	00011665 	.word	0x00011665
   11238:	000115eb 	.word	0x000115eb
   1123c:	00011665 	.word	0x00011665
   11240:	00011665 	.word	0x00011665
   11244:	000114b1 	.word	0x000114b1
   11248:	00011665 	.word	0x00011665
   1124c:	00011665 	.word	0x00011665
   11250:	00011665 	.word	0x00011665
   11254:	00011665 	.word	0x00011665
   11258:	00011665 	.word	0x00011665
   1125c:	00011665 	.word	0x00011665
   11260:	00011665 	.word	0x00011665
   11264:	00011665 	.word	0x00011665
   11268:	00011665 	.word	0x00011665
   1126c:	000112ab 	.word	0x000112ab
   11270:	00011665 	.word	0x00011665
   11274:	0001141d 	.word	0x0001141d
   11278:	00011665 	.word	0x00011665
   1127c:	00011665 	.word	0x00011665
   11280:	00011379 	.word	0x00011379
        {
            case 'c':
                ui8CharSpecifier = va_arg(pArgs, uint32_t);
   11284:	687b      	ldr	r3, [r7, #4]
   11286:	1d1a      	adds	r2, r3, #4
   11288:	607a      	str	r2, [r7, #4]
   1128a:	681b      	ldr	r3, [r3, #0]
   1128c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                if ( pcBuf )
   11290:	68fb      	ldr	r3, [r7, #12]
   11292:	2b00      	cmp	r3, #0
   11294:	d005      	beq.n	112a2 <am_util_stdio_vsprintf+0x202>
                {
                    *pcBuf++ = ui8CharSpecifier;
   11296:	68fb      	ldr	r3, [r7, #12]
   11298:	1c5a      	adds	r2, r3, #1
   1129a:	60fa      	str	r2, [r7, #12]
   1129c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   112a0:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   112a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   112a4:	3301      	adds	r3, #1
   112a6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   112a8:	e1ec      	b.n	11684 <am_util_stdio_vsprintf+0x5e4>

            case 's':
                pcStr = va_arg(pArgs, char *);
   112aa:	687b      	ldr	r3, [r7, #4]
   112ac:	1d1a      	adds	r2, r3, #4
   112ae:	607a      	str	r2, [r7, #4]
   112b0:	681b      	ldr	r3, [r3, #0]
   112b2:	64fb      	str	r3, [r7, #76]	; 0x4c
                //
                // For %s, we support the width specifier. If iWidth is negative
                // the string is left-aligned (padding on the right).  Otherwise
                // the string is padded at the beginning with spaces.
                //
                ui32strlen = simple_strlen(pcStr);
   112b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   112b6:	f7ff fdb4 	bl	10e22 <simple_strlen>
   112ba:	6278      	str	r0, [r7, #36]	; 0x24
                if ( iWidth > 0 )
   112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   112be:	2b00      	cmp	r3, #0
   112c0:	dd2e      	ble.n	11320 <am_util_stdio_vsprintf+0x280>
                {
                    // Pad the beginning of the string (right-aligned).
                    if ( ui32strlen < iWidth )
   112c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   112c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   112c6:	429a      	cmp	r2, r3
   112c8:	d22a      	bcs.n	11320 <am_util_stdio_vsprintf+0x280>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   112ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
   112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112ce:	1ad3      	subs	r3, r2, r3
   112d0:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   112d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   112d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   112d8:	4619      	mov	r1, r3
   112da:	68f8      	ldr	r0, [r7, #12]
   112dc:	f7ff fdbc 	bl	10e58 <padbuffer>
   112e0:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   112e2:	68fb      	ldr	r3, [r7, #12]
   112e4:	2b00      	cmp	r3, #0
   112e6:	d001      	beq.n	112ec <am_util_stdio_vsprintf+0x24c>
   112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   112ea:	e000      	b.n	112ee <am_util_stdio_vsprintf+0x24e>
   112ec:	2300      	movs	r3, #0
   112ee:	68fa      	ldr	r2, [r7, #12]
   112f0:	4413      	add	r3, r2
   112f2:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   112f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   112f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   112f8:	4413      	add	r3, r2
   112fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   112fc:	2300      	movs	r3, #0
   112fe:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }

                while (*pcStr != 0x0)
   11300:	e00e      	b.n	11320 <am_util_stdio_vsprintf+0x280>
                {
                    if ( pcBuf )
   11302:	68fb      	ldr	r3, [r7, #12]
   11304:	2b00      	cmp	r3, #0
   11306:	d005      	beq.n	11314 <am_util_stdio_vsprintf+0x274>
                    {
                        *pcBuf++ = *pcStr;
   11308:	68fb      	ldr	r3, [r7, #12]
   1130a:	1c5a      	adds	r2, r3, #1
   1130c:	60fa      	str	r2, [r7, #12]
   1130e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   11310:	7812      	ldrb	r2, [r2, #0]
   11312:	701a      	strb	r2, [r3, #0]
                    }

                    ++pcStr;
   11314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11316:	3301      	adds	r3, #1
   11318:	64fb      	str	r3, [r7, #76]	; 0x4c
                    ++ui32CharCnt;
   1131a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1131c:	3301      	adds	r3, #1
   1131e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while (*pcStr != 0x0)
   11320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11322:	781b      	ldrb	r3, [r3, #0]
   11324:	2b00      	cmp	r3, #0
   11326:	d1ec      	bne.n	11302 <am_util_stdio_vsprintf+0x262>
                }

                if ( iWidth )
   11328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1132a:	2b00      	cmp	r3, #0
   1132c:	f000 81a7 	beq.w	1167e <am_util_stdio_vsprintf+0x5de>
                {
                    iWidth = -iWidth;
   11330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11332:	425b      	negs	r3, r3
   11334:	63bb      	str	r3, [r7, #56]	; 0x38

                    // Pad the end of the string (left-aligned).
                    if ( ui32strlen < iWidth )
   11336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1133a:	429a      	cmp	r2, r3
   1133c:	f080 819f 	bcs.w	1167e <am_util_stdio_vsprintf+0x5de>
                    {
                        // String needs some padding.
                        iWidth -= ui32strlen;
   11340:	6bba      	ldr	r2, [r7, #56]	; 0x38
   11342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11344:	1ad3      	subs	r3, r2, r3
   11346:	63bb      	str	r3, [r7, #56]	; 0x38
                        iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   11348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1134c:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1134e:	4619      	mov	r1, r3
   11350:	68f8      	ldr	r0, [r7, #12]
   11352:	f7ff fd81 	bl	10e58 <padbuffer>
   11356:	63b8      	str	r0, [r7, #56]	; 0x38
                        pcBuf += pcBuf ? iWidth : 0;
   11358:	68fb      	ldr	r3, [r7, #12]
   1135a:	2b00      	cmp	r3, #0
   1135c:	d001      	beq.n	11362 <am_util_stdio_vsprintf+0x2c2>
   1135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11360:	e000      	b.n	11364 <am_util_stdio_vsprintf+0x2c4>
   11362:	2300      	movs	r3, #0
   11364:	68fa      	ldr	r2, [r7, #12]
   11366:	4413      	add	r3, r2
   11368:	60fb      	str	r3, [r7, #12]
                        ui32CharCnt += iWidth;
   1136a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1136c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1136e:	4413      	add	r3, r2
   11370:	63fb      	str	r3, [r7, #60]	; 0x3c
                        iWidth = 0;
   11372:	2300      	movs	r3, #0
   11374:	63bb      	str	r3, [r7, #56]	; 0x38
                    }
                }
                break;
   11376:	e182      	b.n	1167e <am_util_stdio_vsprintf+0x5de>

            case 'x':
                bLower = true;
   11378:	2301      	movs	r3, #1
   1137a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            case 'X':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1137e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11382:	2b00      	cmp	r3, #0
   11384:	d00c      	beq.n	113a0 <am_util_stdio_vsprintf+0x300>
   11386:	687b      	ldr	r3, [r7, #4]
   11388:	3307      	adds	r3, #7
   1138a:	f023 0307 	bic.w	r3, r3, #7
   1138e:	f103 0208 	add.w	r2, r3, #8
   11392:	607a      	str	r2, [r7, #4]
   11394:	e9d3 3400 	ldrd	r3, r4, [r3]
   11398:	e008      	b.n	113ac <am_util_stdio_vsprintf+0x30c>
   1139a:	bf00      	nop
   1139c:	10000540 	.word	0x10000540
                                      va_arg(pArgs, uint32_t);
   113a0:	687b      	ldr	r3, [r7, #4]
   113a2:	1d1a      	adds	r2, r3, #4
   113a4:	607a      	str	r2, [r7, #4]
   113a6:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   113a8:	f04f 0400 	mov.w	r4, #0
   113ac:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113b2:	2b00      	cmp	r3, #0
   113b4:	d01e      	beq.n	113f4 <am_util_stdio_vsprintf+0x354>
                {
                    //
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_hex(ui64Val);
   113b6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   113ba:	f7ff fc18 	bl	10bee <ndigits_in_hex>
   113be:	4602      	mov	r2, r0
   113c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113c2:	1a9b      	subs	r3, r3, r2
   113c4:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   113c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   113ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
   113cc:	4619      	mov	r1, r3
   113ce:	68f8      	ldr	r0, [r7, #12]
   113d0:	f7ff fd42 	bl	10e58 <padbuffer>
   113d4:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   113d6:	68fb      	ldr	r3, [r7, #12]
   113d8:	2b00      	cmp	r3, #0
   113da:	d001      	beq.n	113e0 <am_util_stdio_vsprintf+0x340>
   113dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113de:	e000      	b.n	113e2 <am_util_stdio_vsprintf+0x342>
   113e0:	2300      	movs	r3, #0
   113e2:	68fa      	ldr	r2, [r7, #12]
   113e4:	4413      	add	r3, r2
   113e6:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   113e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   113ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   113ec:	4413      	add	r3, r2
   113ee:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   113f0:	2300      	movs	r3, #0
   113f2:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_hexstr(ui64Val, pcBuf, bLower);
   113f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   113f8:	68fa      	ldr	r2, [r7, #12]
   113fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   113fe:	f7ff fcac 	bl	10d5a <uint64_to_hexstr>
   11402:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   11404:	68fb      	ldr	r3, [r7, #12]
   11406:	2b00      	cmp	r3, #0
   11408:	d003      	beq.n	11412 <am_util_stdio_vsprintf+0x372>
                {
                    pcBuf += iVal;
   1140a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1140c:	68fa      	ldr	r2, [r7, #12]
   1140e:	4413      	add	r3, r2
   11410:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   11412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11416:	4413      	add	r3, r2
   11418:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1141a:	e133      	b.n	11684 <am_util_stdio_vsprintf+0x5e4>

            case 'u':
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   1141c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   11420:	2b00      	cmp	r3, #0
   11422:	d009      	beq.n	11438 <am_util_stdio_vsprintf+0x398>
   11424:	687b      	ldr	r3, [r7, #4]
   11426:	3307      	adds	r3, #7
   11428:	f023 0307 	bic.w	r3, r3, #7
   1142c:	f103 0208 	add.w	r2, r3, #8
   11430:	607a      	str	r2, [r7, #4]
   11432:	e9d3 3400 	ldrd	r3, r4, [r3]
   11436:	e005      	b.n	11444 <am_util_stdio_vsprintf+0x3a4>
                                      va_arg(pArgs, uint32_t);
   11438:	687b      	ldr	r3, [r7, #4]
   1143a:	1d1a      	adds	r2, r3, #4
   1143c:	607a      	str	r2, [r7, #4]
   1143e:	681b      	ldr	r3, [r3, #0]
                ui64Val = bLongLong ? va_arg(pArgs, uint64_t) :
   11440:	f04f 0400 	mov.w	r4, #0
   11444:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

                if ( iWidth )
   11448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1144a:	2b00      	cmp	r3, #0
   1144c:	d01e      	beq.n	1148c <am_util_stdio_vsprintf+0x3ec>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_u64(ui64Val);
   1144e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   11452:	f7ff fb8e 	bl	10b72 <ndigits_in_u64>
   11456:	4602      	mov	r2, r0
   11458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1145a:	1a9b      	subs	r3, r3, r2
   1145c:	63bb      	str	r3, [r7, #56]	; 0x38

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   1145e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   11462:	6bba      	ldr	r2, [r7, #56]	; 0x38
   11464:	4619      	mov	r1, r3
   11466:	68f8      	ldr	r0, [r7, #12]
   11468:	f7ff fcf6 	bl	10e58 <padbuffer>
   1146c:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   1146e:	68fb      	ldr	r3, [r7, #12]
   11470:	2b00      	cmp	r3, #0
   11472:	d001      	beq.n	11478 <am_util_stdio_vsprintf+0x3d8>
   11474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11476:	e000      	b.n	1147a <am_util_stdio_vsprintf+0x3da>
   11478:	2300      	movs	r3, #0
   1147a:	68fa      	ldr	r2, [r7, #12]
   1147c:	4413      	add	r3, r2
   1147e:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   11480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11484:	4413      	add	r3, r2
   11486:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   11488:	2300      	movs	r3, #0
   1148a:	63bb      	str	r3, [r7, #56]	; 0x38
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   1148c:	68fa      	ldr	r2, [r7, #12]
   1148e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   11492:	f7ff fc1a 	bl	10cca <uint64_to_str>
   11496:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   11498:	68fb      	ldr	r3, [r7, #12]
   1149a:	2b00      	cmp	r3, #0
   1149c:	d003      	beq.n	114a6 <am_util_stdio_vsprintf+0x406>
                {
                    pcBuf += iVal;
   1149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   114a0:	68fa      	ldr	r2, [r7, #12]
   114a2:	4413      	add	r3, r2
   114a4:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   114a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   114a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   114aa:	4413      	add	r3, r2
   114ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   114ae:	e0e9      	b.n	11684 <am_util_stdio_vsprintf+0x5e4>
                // Output for a negative number, for example, -5:
                //   %d:-5
                //  %5d:   -5
                // %05d:-0005
                //
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   114b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   114b4:	2b00      	cmp	r3, #0
   114b6:	d009      	beq.n	114cc <am_util_stdio_vsprintf+0x42c>
   114b8:	687b      	ldr	r3, [r7, #4]
   114ba:	3307      	adds	r3, #7
   114bc:	f023 0307 	bic.w	r3, r3, #7
   114c0:	f103 0208 	add.w	r2, r3, #8
   114c4:	607a      	str	r2, [r7, #4]
   114c6:	e9d3 3400 	ldrd	r3, r4, [r3]
   114ca:	e005      	b.n	114d8 <am_util_stdio_vsprintf+0x438>
                                     va_arg(pArgs, int32_t);
   114cc:	687b      	ldr	r3, [r7, #4]
   114ce:	1d1a      	adds	r2, r3, #4
   114d0:	607a      	str	r2, [r7, #4]
   114d2:	681b      	ldr	r3, [r3, #0]
                i64Val = bLongLong ? va_arg(pArgs, int64_t) :
   114d4:	ea4f 74e3 	mov.w	r4, r3, asr #31
   114d8:	e9c7 3406 	strd	r3, r4, [r7, #24]

                //
                // Get absolute value
                //
                if ( i64Val < 0 )
   114dc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   114e0:	2b00      	cmp	r3, #0
   114e2:	f174 0300 	sbcs.w	r3, r4, #0
   114e6:	da0a      	bge.n	114fe <am_util_stdio_vsprintf+0x45e>
                {
                    ui64Val = -i64Val;          // Get absolute value
   114e8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   114ec:	425b      	negs	r3, r3
   114ee:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
   114f2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = true;
   114f6:	2301      	movs	r3, #1
   114f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   114fc:	e006      	b.n	1150c <am_util_stdio_vsprintf+0x46c>
                }
                else
                {
                    ui64Val = i64Val;
   114fe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   11502:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                    bNeg = false;
   11506:	2300      	movs	r3, #0
   11508:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                if ( iWidth )
   1150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1150e:	2b00      	cmp	r3, #0
   11510:	d04a      	beq.n	115a8 <am_util_stdio_vsprintf+0x508>
                {
                    //
                    // We need to pad the beginning of the value.
                    // Compute # of leading chars
                    //
                    iWidth -= ndigits_in_i64(ui64Val);
   11512:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
   11516:	4618      	mov	r0, r3
   11518:	4621      	mov	r1, r4
   1151a:	f7ff fb4b 	bl	10bb4 <ndigits_in_i64>
   1151e:	4602      	mov	r2, r0
   11520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11522:	1a9b      	subs	r3, r3, r2
   11524:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg )
   11526:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1152a:	2b00      	cmp	r3, #0
   1152c:	d011      	beq.n	11552 <am_util_stdio_vsprintf+0x4b2>
                    {
                        --iWidth;
   1152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11530:	3b01      	subs	r3, #1
   11532:	63bb      	str	r3, [r7, #56]	; 0x38

                        //
                        // Allow for the negative sign
                        //
                        if ( ui8PadChar == '0' )
   11534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   11538:	2b30      	cmp	r3, #48	; 0x30
   1153a:	d10a      	bne.n	11552 <am_util_stdio_vsprintf+0x4b2>
                        {
                            //
                            // Print the neg sign BEFORE the leading zeros
                            //
                            if ( pcBuf )
   1153c:	68fb      	ldr	r3, [r7, #12]
   1153e:	2b00      	cmp	r3, #0
   11540:	d004      	beq.n	1154c <am_util_stdio_vsprintf+0x4ac>
                            {
                                *pcBuf++ = '-';
   11542:	68fb      	ldr	r3, [r7, #12]
   11544:	1c5a      	adds	r2, r3, #1
   11546:	60fa      	str	r2, [r7, #12]
   11548:	222d      	movs	r2, #45	; 0x2d
   1154a:	701a      	strb	r2, [r3, #0]
                            }

                            ++ui32CharCnt;
   1154c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1154e:	3301      	adds	r3, #1
   11550:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    iWidth = padbuffer(pcBuf, ui8PadChar, iWidth);
   11552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   11556:	6bba      	ldr	r2, [r7, #56]	; 0x38
   11558:	4619      	mov	r1, r3
   1155a:	68f8      	ldr	r0, [r7, #12]
   1155c:	f7ff fc7c 	bl	10e58 <padbuffer>
   11560:	63b8      	str	r0, [r7, #56]	; 0x38
                    pcBuf += pcBuf ? iWidth : 0;
   11562:	68fb      	ldr	r3, [r7, #12]
   11564:	2b00      	cmp	r3, #0
   11566:	d001      	beq.n	1156c <am_util_stdio_vsprintf+0x4cc>
   11568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1156a:	e000      	b.n	1156e <am_util_stdio_vsprintf+0x4ce>
   1156c:	2300      	movs	r3, #0
   1156e:	68fa      	ldr	r2, [r7, #12]
   11570:	4413      	add	r3, r2
   11572:	60fb      	str	r3, [r7, #12]
                    ui32CharCnt += iWidth;
   11574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   11576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11578:	4413      	add	r3, r2
   1157a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    iWidth = 0;
   1157c:	2300      	movs	r3, #0
   1157e:	63bb      	str	r3, [r7, #56]	; 0x38

                    if ( bNeg  &&  (ui8PadChar == ' ') )
   11580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   11584:	2b00      	cmp	r3, #0
   11586:	d01e      	beq.n	115c6 <am_util_stdio_vsprintf+0x526>
   11588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1158c:	2b20      	cmp	r3, #32
   1158e:	d11a      	bne.n	115c6 <am_util_stdio_vsprintf+0x526>
                    {
                        //
                        // Print the neg sign AFTER the leading blanks
                        //
                        if ( pcBuf )
   11590:	68fb      	ldr	r3, [r7, #12]
   11592:	2b00      	cmp	r3, #0
   11594:	d004      	beq.n	115a0 <am_util_stdio_vsprintf+0x500>
                        {
                            *pcBuf++ = '-';
   11596:	68fb      	ldr	r3, [r7, #12]
   11598:	1c5a      	adds	r2, r3, #1
   1159a:	60fa      	str	r2, [r7, #12]
   1159c:	222d      	movs	r2, #45	; 0x2d
   1159e:	701a      	strb	r2, [r3, #0]
                        }

                        ++ui32CharCnt;
   115a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   115a2:	3301      	adds	r3, #1
   115a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   115a6:	e00e      	b.n	115c6 <am_util_stdio_vsprintf+0x526>
                    }
                }
                else
                {
                    if ( bNeg )
   115a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   115ac:	2b00      	cmp	r3, #0
   115ae:	d00a      	beq.n	115c6 <am_util_stdio_vsprintf+0x526>
                    {
                        if ( pcBuf )
   115b0:	68fb      	ldr	r3, [r7, #12]
   115b2:	2b00      	cmp	r3, #0
   115b4:	d004      	beq.n	115c0 <am_util_stdio_vsprintf+0x520>
                        {
                            *pcBuf++ = '-';
   115b6:	68fb      	ldr	r3, [r7, #12]
   115b8:	1c5a      	adds	r2, r3, #1
   115ba:	60fa      	str	r2, [r7, #12]
   115bc:	222d      	movs	r2, #45	; 0x2d
   115be:	701a      	strb	r2, [r3, #0]
                        }
                        ++ui32CharCnt;
   115c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   115c2:	3301      	adds	r3, #1
   115c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                }

                iVal = uint64_to_str(ui64Val, pcBuf);
   115c6:	68fa      	ldr	r2, [r7, #12]
   115c8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   115cc:	f7ff fb7d 	bl	10cca <uint64_to_str>
   115d0:	6378      	str	r0, [r7, #52]	; 0x34

                if ( pcBuf )
   115d2:	68fb      	ldr	r3, [r7, #12]
   115d4:	2b00      	cmp	r3, #0
   115d6:	d003      	beq.n	115e0 <am_util_stdio_vsprintf+0x540>
                {
                    pcBuf += iVal;
   115d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   115da:	68fa      	ldr	r2, [r7, #12]
   115dc:	4413      	add	r3, r2
   115de:	60fb      	str	r3, [r7, #12]
                }

                ui32CharCnt += iVal;
   115e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   115e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   115e4:	4413      	add	r3, r2
   115e6:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   115e8:	e04c      	b.n	11684 <am_util_stdio_vsprintf+0x5e4>


            case 'f':
            case 'F':
                if ( pcBuf )
   115ea:	68fb      	ldr	r3, [r7, #12]
   115ec:	2b00      	cmp	r3, #0
   115ee:	d048      	beq.n	11682 <am_util_stdio_vsprintf+0x5e2>
                {
                    float fValue = va_arg(pArgs, double);
   115f0:	687b      	ldr	r3, [r7, #4]
   115f2:	3307      	adds	r3, #7
   115f4:	f023 0307 	bic.w	r3, r3, #7
   115f8:	f103 0208 	add.w	r2, r3, #8
   115fc:	607a      	str	r2, [r7, #4]
   115fe:	e9d3 3400 	ldrd	r3, r4, [r3]
   11602:	4618      	mov	r0, r3
   11604:	4621      	mov	r1, r4
   11606:	f7fe fd7b 	bl	10100 <__aeabi_d2f>
   1160a:	4603      	mov	r3, r0
   1160c:	617b      	str	r3, [r7, #20]

                    //
                    // pcBuf is an input (size of buffer) and also an output of ftoa()
                    //
                    *(uint32_t*)pcBuf = 20;
   1160e:	68fb      	ldr	r3, [r7, #12]
   11610:	2214      	movs	r2, #20
   11612:	601a      	str	r2, [r3, #0]

                    iVal = ftoa(fValue, pcBuf, iPrecision);
   11614:	6b39      	ldr	r1, [r7, #48]	; 0x30
   11616:	68f8      	ldr	r0, [r7, #12]
   11618:	ed97 0a05 	vldr	s0, [r7, #20]
   1161c:	f7ff fc42 	bl	10ea4 <ftoa>
   11620:	6378      	str	r0, [r7, #52]	; 0x34
                    if ( iVal < 0 )
   11622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11624:	2b00      	cmp	r3, #0
   11626:	da14      	bge.n	11652 <am_util_stdio_vsprintf+0x5b2>
                    {
                        uint32_t u32PrntErrVal;
                        if ( iVal == AM_FTOA_ERR_VAL_TOO_SMALL )
   11628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1162a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1162e:	d102      	bne.n	11636 <am_util_stdio_vsprintf+0x596>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('0' << 16) |
   11630:	4b1e      	ldr	r3, [pc, #120]	; (116ac <am_util_stdio_vsprintf+0x60c>)
   11632:	62bb      	str	r3, [r7, #40]	; 0x28
   11634:	e008      	b.n	11648 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('0' << 0);  // "0.0"
                        }
                        else if ( iVal == AM_FTOA_ERR_VAL_TOO_LARGE )
   11636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11638:	f113 0f02 	cmn.w	r3, #2
   1163c:	d102      	bne.n	11644 <am_util_stdio_vsprintf+0x5a4>
                        {
                            u32PrntErrVal = (0x00 << 24) | ('#' << 16) |
   1163e:	4b1c      	ldr	r3, [pc, #112]	; (116b0 <am_util_stdio_vsprintf+0x610>)
   11640:	62bb      	str	r3, [r7, #40]	; 0x28
   11642:	e001      	b.n	11648 <am_util_stdio_vsprintf+0x5a8>
                                            ('.' << 8)   | ('#' << 0);  // "#.#"
                        }
                        else
                        {
                            u32PrntErrVal = (0x00 << 24) | ('?' << 16) |
   11644:	4b1b      	ldr	r3, [pc, #108]	; (116b4 <am_util_stdio_vsprintf+0x614>)
   11646:	62bb      	str	r3, [r7, #40]	; 0x28
                                            ('.' << 8)   | ('?' << 0);  // "?.?"
                        }
                        *(uint32_t*)pcBuf = u32PrntErrVal;
   11648:	68fb      	ldr	r3, [r7, #12]
   1164a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1164c:	601a      	str	r2, [r3, #0]
                        iVal = 3;
   1164e:	2303      	movs	r3, #3
   11650:	637b      	str	r3, [r7, #52]	; 0x34
                    }
                    ui32CharCnt += iVal;
   11652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   11656:	4413      	add	r3, r2
   11658:	63fb      	str	r3, [r7, #60]	; 0x3c
                    pcBuf += iVal;
   1165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1165c:	68fa      	ldr	r2, [r7, #12]
   1165e:	4413      	add	r3, r2
   11660:	60fb      	str	r3, [r7, #12]
                }
                break;
   11662:	e00e      	b.n	11682 <am_util_stdio_vsprintf+0x5e2>
            // For non-handled specifiers, we'll just print the character.
            // e.g. this will allow the normal printing of a '%' using
            // "%%".
            //
            default:
                if ( pcBuf )
   11664:	68fb      	ldr	r3, [r7, #12]
   11666:	2b00      	cmp	r3, #0
   11668:	d005      	beq.n	11676 <am_util_stdio_vsprintf+0x5d6>
                {
                    *pcBuf++ = *pcFmt;
   1166a:	68fb      	ldr	r3, [r7, #12]
   1166c:	1c5a      	adds	r2, r3, #1
   1166e:	60fa      	str	r2, [r7, #12]
   11670:	68ba      	ldr	r2, [r7, #8]
   11672:	7812      	ldrb	r2, [r2, #0]
   11674:	701a      	strb	r2, [r3, #0]
                }

                ++ui32CharCnt;
   11676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   11678:	3301      	adds	r3, #1
   1167a:	63fb      	str	r3, [r7, #60]	; 0x3c
                break;
   1167c:	e002      	b.n	11684 <am_util_stdio_vsprintf+0x5e4>
                break;
   1167e:	bf00      	nop
   11680:	e000      	b.n	11684 <am_util_stdio_vsprintf+0x5e4>
                break;
   11682:	bf00      	nop
        } // switch()

        //
        // Bump the format specification to the next character
        //
        ++pcFmt;
   11684:	68bb      	ldr	r3, [r7, #8]
   11686:	3301      	adds	r3, #1
   11688:	60bb      	str	r3, [r7, #8]
    while ( *pcFmt != 0x0 )
   1168a:	68bb      	ldr	r3, [r7, #8]
   1168c:	781b      	ldrb	r3, [r3, #0]
   1168e:	2b00      	cmp	r3, #0
   11690:	f47f ad11 	bne.w	110b6 <am_util_stdio_vsprintf+0x16>
    } // while ()

    //
    // Terminate the string
    //
    if ( pcBuf )
   11694:	68fb      	ldr	r3, [r7, #12]
   11696:	2b00      	cmp	r3, #0
   11698:	d002      	beq.n	116a0 <am_util_stdio_vsprintf+0x600>
    {
        *pcBuf = 0x0;
   1169a:	68fb      	ldr	r3, [r7, #12]
   1169c:	2200      	movs	r2, #0
   1169e:	701a      	strb	r2, [r3, #0]
    }

    return (ui32CharCnt);
   116a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   116a2:	4618      	mov	r0, r3
   116a4:	3754      	adds	r7, #84	; 0x54
   116a6:	46bd      	mov	sp, r7
   116a8:	bd90      	pop	{r4, r7, pc}
   116aa:	bf00      	nop
   116ac:	00302e30 	.word	0x00302e30
   116b0:	00232e23 	.word	0x00232e23
   116b4:	003f2e3f 	.word	0x003f2e3f

000116b8 <am_util_stdio_printf>:
//! @return uint32_t representing the number of characters printed.
//
// *****************************************************************************
uint32_t
am_util_stdio_printf(const char *pcFmt, ...)
{
   116b8:	b40f      	push	{r0, r1, r2, r3}
   116ba:	b580      	push	{r7, lr}
   116bc:	b082      	sub	sp, #8
   116be:	af00      	add	r7, sp, #0
    uint32_t ui32NumChars;

    if (!g_pfnCharPrint)
   116c0:	4b0d      	ldr	r3, [pc, #52]	; (116f8 <am_util_stdio_printf+0x40>)
   116c2:	681b      	ldr	r3, [r3, #0]
   116c4:	2b00      	cmp	r3, #0
   116c6:	d101      	bne.n	116cc <am_util_stdio_printf+0x14>
    {
        return 0;
   116c8:	2300      	movs	r3, #0
   116ca:	e00d      	b.n	116e8 <am_util_stdio_printf+0x30>

    //
    // Convert to the desired string.
    //
    va_list pArgs;
    va_start(pArgs, pcFmt);
   116cc:	f107 0314 	add.w	r3, r7, #20
   116d0:	603b      	str	r3, [r7, #0]
    ui32NumChars = am_util_stdio_vsprintf(g_prfbuf, pcFmt, pArgs);
   116d2:	683a      	ldr	r2, [r7, #0]
   116d4:	6939      	ldr	r1, [r7, #16]
   116d6:	4809      	ldr	r0, [pc, #36]	; (116fc <am_util_stdio_printf+0x44>)
   116d8:	f7ff fce2 	bl	110a0 <am_util_stdio_vsprintf>
   116dc:	6078      	str	r0, [r7, #4]
    va_end(pArgs);

    //
    // This is where we print the buffer to the configured interface.
    //
    g_pfnCharPrint(g_prfbuf);
   116de:	4b06      	ldr	r3, [pc, #24]	; (116f8 <am_util_stdio_printf+0x40>)
   116e0:	681b      	ldr	r3, [r3, #0]
   116e2:	4806      	ldr	r0, [pc, #24]	; (116fc <am_util_stdio_printf+0x44>)
   116e4:	4798      	blx	r3

    //
    // return the number of characters printed.
    //
    return ui32NumChars;
   116e6:	687b      	ldr	r3, [r7, #4]
}
   116e8:	4618      	mov	r0, r3
   116ea:	3708      	adds	r7, #8
   116ec:	46bd      	mov	sp, r7
   116ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   116f2:	b004      	add	sp, #16
   116f4:	4770      	bx	lr
   116f6:	bf00      	nop
   116f8:	10000fe0 	.word	0x10000fe0
   116fc:	10000440 	.word	0x10000440

00011700 <am_util_stdio_terminal_clear>:
//! @return None.
//
//*****************************************************************************
void
am_util_stdio_terminal_clear(void)
{
   11700:	b580      	push	{r7, lr}
   11702:	af00      	add	r7, sp, #0
    // left corner.
    // We'll first print a number of spaces, which helps get the ITM in sync
    // with AM Flash, especially after a reset event or a system clock
    // frequency change.
    //
    am_util_stdio_printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   11704:	4802      	ldr	r0, [pc, #8]	; (11710 <am_util_stdio_terminal_clear+0x10>)
   11706:	f7ff ffd7 	bl	116b8 <am_util_stdio_printf>
}
   1170a:	bf00      	nop
   1170c:	bd80      	pop	{r7, pc}
   1170e:	bf00      	nop
   11710:	0001a094 	.word	0x0001a094

00011714 <_initialize_config>:

//dummys for full duplex
uint8_t dummy_tx[512];
uint8_t dummy_rx[512];

uint32_t _initialize_config(am_hal_iom_config_t config) {
   11714:	b084      	sub	sp, #16
   11716:	b580      	push	{r7, lr}
   11718:	b082      	sub	sp, #8
   1171a:	af00      	add	r7, sp, #0
   1171c:	f107 0c10 	add.w	ip, r7, #16
   11720:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t retVal32 = 0;
   11724:	2300      	movs	r3, #0
   11726:	607b      	str	r3, [r7, #4]

	if(spi_handle != NULL) {
   11728:	4b22      	ldr	r3, [pc, #136]	; (117b4 <_initialize_config+0xa0>)
   1172a:	681b      	ldr	r3, [r3, #0]
   1172c:	2b00      	cmp	r3, #0
   1172e:	d009      	beq.n	11744 <_initialize_config+0x30>
		am_hal_iom_disable(spi_handle);
   11730:	4b20      	ldr	r3, [pc, #128]	; (117b4 <_initialize_config+0xa0>)
   11732:	681b      	ldr	r3, [r3, #0]
   11734:	4618      	mov	r0, r3
   11736:	f007 f877 	bl	18828 <am_hal_iom_disable>
		am_hal_iom_uninitialize(spi_handle);
   1173a:	4b1e      	ldr	r3, [pc, #120]	; (117b4 <_initialize_config+0xa0>)
   1173c:	681b      	ldr	r3, [r3, #0]
   1173e:	4618      	mov	r0, r3
   11740:	f006 ffa0 	bl	18684 <am_hal_iom_uninitialize>
	}

	retVal32 = am_hal_iom_initialize(spi_instance, &spi_handle);
   11744:	4b1c      	ldr	r3, [pc, #112]	; (117b8 <_initialize_config+0xa4>)
   11746:	781b      	ldrb	r3, [r3, #0]
   11748:	491a      	ldr	r1, [pc, #104]	; (117b4 <_initialize_config+0xa0>)
   1174a:	4618      	mov	r0, r3
   1174c:	f006 ffd4 	bl	186f8 <am_hal_iom_initialize>
   11750:	6078      	str	r0, [r7, #4]
	if (retVal32 != AM_HAL_STATUS_SUCCESS){
   11752:	687b      	ldr	r3, [r7, #4]
   11754:	2b00      	cmp	r3, #0
   11756:	d001      	beq.n	1175c <_initialize_config+0x48>
		return 1;
   11758:	2301      	movs	r3, #1
   1175a:	e024      	b.n	117a6 <_initialize_config+0x92>
	}

	retVal32 = am_hal_iom_power_ctrl(spi_handle, AM_HAL_SYSCTRL_WAKE, false);    ////it was false
   1175c:	4b15      	ldr	r3, [pc, #84]	; (117b4 <_initialize_config+0xa0>)
   1175e:	681b      	ldr	r3, [r3, #0]
   11760:	2200      	movs	r2, #0
   11762:	2100      	movs	r1, #0
   11764:	4618      	mov	r0, r3
   11766:	f007 f895 	bl	18894 <am_hal_iom_power_ctrl>
   1176a:	6078      	str	r0, [r7, #4]
	if (retVal32 != AM_HAL_STATUS_SUCCESS){
   1176c:	687b      	ldr	r3, [r7, #4]
   1176e:	2b00      	cmp	r3, #0
   11770:	d001      	beq.n	11776 <_initialize_config+0x62>
		return 1;
   11772:	2301      	movs	r3, #1
   11774:	e017      	b.n	117a6 <_initialize_config+0x92>
	}

	retVal32 = am_hal_iom_configure(spi_handle, &spi_config);
   11776:	4b0f      	ldr	r3, [pc, #60]	; (117b4 <_initialize_config+0xa0>)
   11778:	681b      	ldr	r3, [r3, #0]
   1177a:	4910      	ldr	r1, [pc, #64]	; (117bc <_initialize_config+0xa8>)
   1177c:	4618      	mov	r0, r3
   1177e:	f007 f961 	bl	18a44 <am_hal_iom_configure>
   11782:	6078      	str	r0, [r7, #4]
	if (retVal32 != AM_HAL_STATUS_SUCCESS){
   11784:	687b      	ldr	r3, [r7, #4]
   11786:	2b00      	cmp	r3, #0
   11788:	d001      	beq.n	1178e <_initialize_config+0x7a>
		return 1;
   1178a:	2301      	movs	r3, #1
   1178c:	e00b      	b.n	117a6 <_initialize_config+0x92>
	}

	retVal32 = am_hal_iom_enable(spi_handle);
   1178e:	4b09      	ldr	r3, [pc, #36]	; (117b4 <_initialize_config+0xa0>)
   11790:	681b      	ldr	r3, [r3, #0]
   11792:	4618      	mov	r0, r3
   11794:	f006 ffd6 	bl	18744 <am_hal_iom_enable>
   11798:	6078      	str	r0, [r7, #4]
	if (retVal32 != AM_HAL_STATUS_SUCCESS){
   1179a:	687b      	ldr	r3, [r7, #4]
   1179c:	2b00      	cmp	r3, #0
   1179e:	d001      	beq.n	117a4 <_initialize_config+0x90>
		return 1;
   117a0:	2301      	movs	r3, #1
   117a2:	e000      	b.n	117a6 <_initialize_config+0x92>
	}
	return 0;
   117a4:	2300      	movs	r3, #0
}
   117a6:	4618      	mov	r0, r3
   117a8:	3708      	adds	r7, #8
   117aa:	46bd      	mov	sp, r7
   117ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   117b0:	b004      	add	sp, #16
   117b2:	4770      	bx	lr
   117b4:	10000544 	.word	0x10000544
   117b8:	100013fc 	.word	0x100013fc
   117bc:	100013e8 	.word	0x100013e8

000117c0 <_initialize_pins>:

uint32_t _initialize_pins(uint8_t iom_instance) {
   117c0:	b580      	push	{r7, lr}
   117c2:	b084      	sub	sp, #16
   117c4:	af00      	add	r7, sp, #0
   117c6:	4603      	mov	r3, r0
   117c8:	71fb      	strb	r3, [r7, #7]
	if(iom_instance < 6) {
   117ca:	79fb      	ldrb	r3, [r7, #7]
   117cc:	2b05      	cmp	r3, #5
   117ce:	d830      	bhi.n	11832 <_initialize_pins+0x72>
		am_bsp_iom_pins_enable(iom_instance, AM_HAL_IOM_SPI_MODE);
   117d0:	79fb      	ldrb	r3, [r7, #7]
   117d2:	2100      	movs	r1, #0
   117d4:	4618      	mov	r0, r3
   117d6:	f006 fb7f 	bl	17ed8 <am_bsp_iom_pins_enable>
		switch(iom_instance){
   117da:	79fb      	ldrb	r3, [r7, #7]
   117dc:	2b05      	cmp	r3, #5
   117de:	d853      	bhi.n	11888 <_initialize_pins+0xc8>
   117e0:	a201      	add	r2, pc, #4	; (adr r2, 117e8 <_initialize_pins+0x28>)
   117e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   117e6:	bf00      	nop
   117e8:	00011801 	.word	0x00011801
   117ec:	00011809 	.word	0x00011809
   117f0:	00011811 	.word	0x00011811
   117f4:	00011819 	.word	0x00011819
   117f8:	00011821 	.word	0x00011821
   117fc:	00011829 	.word	0x00011829
			case 0: {cs_pin=AM_BSP_GPIO_IOM0_CS; break;}
   11800:	4b2e      	ldr	r3, [pc, #184]	; (118bc <_initialize_pins+0xfc>)
   11802:	221c      	movs	r2, #28
   11804:	601a      	str	r2, [r3, #0]
   11806:	e03f      	b.n	11888 <_initialize_pins+0xc8>
			case 1: {cs_pin=AM_BSP_GPIO_IOM1_CS; break;}
   11808:	4b2c      	ldr	r3, [pc, #176]	; (118bc <_initialize_pins+0xfc>)
   1180a:	220e      	movs	r2, #14
   1180c:	601a      	str	r2, [r3, #0]
   1180e:	e03b      	b.n	11888 <_initialize_pins+0xc8>
			case 2: {cs_pin=AM_BSP_GPIO_IOM2_CS; break;}
   11810:	4b2a      	ldr	r3, [pc, #168]	; (118bc <_initialize_pins+0xfc>)
   11812:	220f      	movs	r2, #15
   11814:	601a      	str	r2, [r3, #0]
   11816:	e037      	b.n	11888 <_initialize_pins+0xc8>
			case 3: {cs_pin=AM_BSP_GPIO_IOM3_CS; break;}
   11818:	4b28      	ldr	r3, [pc, #160]	; (118bc <_initialize_pins+0xfc>)
   1181a:	220c      	movs	r2, #12
   1181c:	601a      	str	r2, [r3, #0]
   1181e:	e033      	b.n	11888 <_initialize_pins+0xc8>
			case 4: {cs_pin=AM_BSP_GPIO_IOM4_CS; break;}
   11820:	4b26      	ldr	r3, [pc, #152]	; (118bc <_initialize_pins+0xfc>)
   11822:	220d      	movs	r2, #13
   11824:	601a      	str	r2, [r3, #0]
   11826:	e02f      	b.n	11888 <_initialize_pins+0xc8>
			case 5: {cs_pin=AM_BSP_GPIO_IOM5_CS; break;}
   11828:	4b24      	ldr	r3, [pc, #144]	; (118bc <_initialize_pins+0xfc>)
   1182a:	2210      	movs	r2, #16
   1182c:	601a      	str	r2, [r3, #0]
   1182e:	bf00      	nop
   11830:	e02a      	b.n	11888 <_initialize_pins+0xc8>
		}
	} else {
		//default settings: IO Module 1
		am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_SCK,  g_AM_BSP_GPIO_IOM1_SCK);
   11832:	4b23      	ldr	r3, [pc, #140]	; (118c0 <_initialize_pins+0x100>)
   11834:	6819      	ldr	r1, [r3, #0]
   11836:	2008      	movs	r0, #8
   11838:	f006 fd1a 	bl	18270 <am_hal_gpio_pinconfig>
		am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_MISO, g_AM_BSP_GPIO_IOM1_MISO);
   1183c:	4b21      	ldr	r3, [pc, #132]	; (118c4 <_initialize_pins+0x104>)
   1183e:	6819      	ldr	r1, [r3, #0]
   11840:	2009      	movs	r0, #9
   11842:	f006 fd15 	bl	18270 <am_hal_gpio_pinconfig>
		am_hal_gpio_pinconfig(AM_BSP_GPIO_IOM1_MOSI, g_AM_BSP_GPIO_IOM1_MOSI);
   11846:	4b20      	ldr	r3, [pc, #128]	; (118c8 <_initialize_pins+0x108>)
   11848:	6819      	ldr	r1, [r3, #0]
   1184a:	200a      	movs	r0, #10
   1184c:	f006 fd10 	bl	18270 <am_hal_gpio_pinconfig>
		//use A11 as the CS
		am_hal_gpio_pincfg_t g_AM_BSP_GPIO_IOM1_CS_11 =
   11850:	2300      	movs	r3, #0
   11852:	60bb      	str	r3, [r7, #8]
   11854:	7a3b      	ldrb	r3, [r7, #8]
   11856:	2201      	movs	r2, #1
   11858:	f362 0302 	bfi	r3, r2, #0, #3
   1185c:	723b      	strb	r3, [r7, #8]
   1185e:	7a7b      	ldrb	r3, [r7, #9]
   11860:	f043 0303 	orr.w	r3, r3, #3
   11864:	727b      	strb	r3, [r7, #9]
   11866:	7a7b      	ldrb	r3, [r7, #9]
   11868:	2201      	movs	r2, #1
   1186a:	f362 0383 	bfi	r3, r2, #2, #2
   1186e:	727b      	strb	r3, [r7, #9]
   11870:	7abb      	ldrb	r3, [r7, #10]
   11872:	2201      	movs	r2, #1
   11874:	f362 0302 	bfi	r3, r2, #0, #3
   11878:	72bb      	strb	r3, [r7, #10]
		    .eIntDir             = AM_HAL_GPIO_PIN_INTDIR_LO2HI,
		    .uIOMnum             = 1,
		    .uNCE                = 0,
		    .eCEpol              = AM_HAL_GPIO_PIN_CEPOL_ACTIVELOW
		};
		am_hal_gpio_pinconfig(11,   g_AM_BSP_GPIO_IOM1_CS_11);
   1187a:	68b9      	ldr	r1, [r7, #8]
   1187c:	200b      	movs	r0, #11
   1187e:	f006 fcf7 	bl	18270 <am_hal_gpio_pinconfig>
		cs_pin = 11;
   11882:	4b0e      	ldr	r3, [pc, #56]	; (118bc <_initialize_pins+0xfc>)
   11884:	220b      	movs	r2, #11
   11886:	601a      	str	r2, [r3, #0]
	}

	//init dummies
	uint32_t i;
	for(i=0;i<512;i++) {
   11888:	2300      	movs	r3, #0
   1188a:	60fb      	str	r3, [r7, #12]
   1188c:	e00c      	b.n	118a8 <_initialize_pins+0xe8>
		dummy_rx[i] = 0;
   1188e:	4a0f      	ldr	r2, [pc, #60]	; (118cc <_initialize_pins+0x10c>)
   11890:	68fb      	ldr	r3, [r7, #12]
   11892:	4413      	add	r3, r2
   11894:	2200      	movs	r2, #0
   11896:	701a      	strb	r2, [r3, #0]
		dummy_tx[i] = 0xFF;
   11898:	4a0d      	ldr	r2, [pc, #52]	; (118d0 <_initialize_pins+0x110>)
   1189a:	68fb      	ldr	r3, [r7, #12]
   1189c:	4413      	add	r3, r2
   1189e:	22ff      	movs	r2, #255	; 0xff
   118a0:	701a      	strb	r2, [r3, #0]
	for(i=0;i<512;i++) {
   118a2:	68fb      	ldr	r3, [r7, #12]
   118a4:	3301      	adds	r3, #1
   118a6:	60fb      	str	r3, [r7, #12]
   118a8:	68fb      	ldr	r3, [r7, #12]
   118aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   118ae:	d3ee      	bcc.n	1188e <_initialize_pins+0xce>
	}

	return 0;
   118b0:	2300      	movs	r3, #0
}
   118b2:	4618      	mov	r0, r3
   118b4:	3710      	adds	r7, #16
   118b6:	46bd      	mov	sp, r7
   118b8:	bd80      	pop	{r7, pc}
   118ba:	bf00      	nop
   118bc:	100013e4 	.word	0x100013e4
   118c0:	00028bfc 	.word	0x00028bfc
   118c4:	00028bf4 	.word	0x00028bf4
   118c8:	00028bf8 	.word	0x00028bf8
   118cc:	100011e4 	.word	0x100011e4
   118d0:	10000fe4 	.word	0x10000fe4

000118d4 <spi_initialize>:

uint32_t spi_initialize() {
   118d4:	b580      	push	{r7, lr}
   118d6:	b082      	sub	sp, #8
   118d8:	af02      	add	r7, sp, #8
	spi_instance = 1;
   118da:	4b1c      	ldr	r3, [pc, #112]	; (1194c <spi_initialize+0x78>)
   118dc:	2201      	movs	r2, #1
   118de:	701a      	strb	r2, [r3, #0]
	spi_config.eInterfaceMode = AM_HAL_IOM_SPI_MODE;
   118e0:	4b1b      	ldr	r3, [pc, #108]	; (11950 <spi_initialize+0x7c>)
   118e2:	2200      	movs	r2, #0
   118e4:	701a      	strb	r2, [r3, #0]
	spi_config.ui32ClockFreq = AM_HAL_IOM_400KHZ; //set to low-speed mode
   118e6:	4b1a      	ldr	r3, [pc, #104]	; (11950 <spi_initialize+0x7c>)
   118e8:	4a1a      	ldr	r2, [pc, #104]	; (11954 <spi_initialize+0x80>)
   118ea:	605a      	str	r2, [r3, #4]
	spi_config.eSpiMode = AM_HAL_IOM_SPI_MODE_0; //used by SD cards
   118ec:	4b18      	ldr	r3, [pc, #96]	; (11950 <spi_initialize+0x7c>)
   118ee:	2200      	movs	r2, #0
   118f0:	721a      	strb	r2, [r3, #8]
	if(_initialize_config(spi_config) != 0) {
   118f2:	4b17      	ldr	r3, [pc, #92]	; (11950 <spi_initialize+0x7c>)
   118f4:	691a      	ldr	r2, [r3, #16]
   118f6:	9200      	str	r2, [sp, #0]
   118f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   118fa:	f7ff ff0b 	bl	11714 <_initialize_config>
   118fe:	4603      	mov	r3, r0
   11900:	2b00      	cmp	r3, #0
   11902:	d001      	beq.n	11908 <spi_initialize+0x34>
		return 1;
   11904:	2301      	movs	r3, #1
   11906:	e01d      	b.n	11944 <spi_initialize+0x70>
	}
	//default settings
	if(_initialize_pins(255)) {
   11908:	20ff      	movs	r0, #255	; 0xff
   1190a:	f7ff ff59 	bl	117c0 <_initialize_pins>
   1190e:	4603      	mov	r3, r0
   11910:	2b00      	cmp	r3, #0
   11912:	d001      	beq.n	11918 <spi_initialize+0x44>
		return 1;
   11914:	2301      	movs	r3, #1
   11916:	e015      	b.n	11944 <spi_initialize+0x70>
	}
	//set default transfer parameters that never change
	iomTransfer.ui32InstrLen = 0;
   11918:	4b0f      	ldr	r3, [pc, #60]	; (11958 <spi_initialize+0x84>)
   1191a:	2200      	movs	r2, #0
   1191c:	605a      	str	r2, [r3, #4]
	iomTransfer.ui32Instr = 0;
   1191e:	4b0e      	ldr	r3, [pc, #56]	; (11958 <spi_initialize+0x84>)
   11920:	2200      	movs	r2, #0
   11922:	609a      	str	r2, [r3, #8]
	iomTransfer.bContinue = true;
   11924:	4b0c      	ldr	r3, [pc, #48]	; (11958 <spi_initialize+0x84>)
   11926:	2201      	movs	r2, #1
   11928:	771a      	strb	r2, [r3, #28]
	iomTransfer.ui8RepeatCount = 0;
   1192a:	4b0b      	ldr	r3, [pc, #44]	; (11958 <spi_initialize+0x84>)
   1192c:	2200      	movs	r2, #0
   1192e:	775a      	strb	r2, [r3, #29]
	iomTransfer.ui8Priority = 1;
   11930:	4b09      	ldr	r3, [pc, #36]	; (11958 <spi_initialize+0x84>)
   11932:	2201      	movs	r2, #1
   11934:	779a      	strb	r2, [r3, #30]
	iomTransfer.ui32PauseCondition = 0;
   11936:	4b08      	ldr	r3, [pc, #32]	; (11958 <spi_initialize+0x84>)
   11938:	2200      	movs	r2, #0
   1193a:	621a      	str	r2, [r3, #32]
	iomTransfer.ui32StatusSetClr = 0;
   1193c:	4b06      	ldr	r3, [pc, #24]	; (11958 <spi_initialize+0x84>)
   1193e:	2200      	movs	r2, #0
   11940:	625a      	str	r2, [r3, #36]	; 0x24
	return 0;
   11942:	2300      	movs	r3, #0
}
   11944:	4618      	mov	r0, r3
   11946:	46bd      	mov	sp, r7
   11948:	bd80      	pop	{r7, pc}
   1194a:	bf00      	nop
   1194c:	100013fc 	.word	0x100013fc
   11950:	100013e8 	.word	0x100013e8
   11954:	00061a80 	.word	0x00061a80
   11958:	10000548 	.word	0x10000548

0001195c <_transfer_tx>:
	}
	return 1;
}

void _transfer_tx(void *buf_out, void *buf_in, size_t count)
{
   1195c:	b580      	push	{r7, lr}
   1195e:	b086      	sub	sp, #24
   11960:	af00      	add	r7, sp, #0
   11962:	60f8      	str	r0, [r7, #12]
   11964:	60b9      	str	r1, [r7, #8]
   11966:	607a      	str	r2, [r7, #4]
//	iomTransfer.ui32NumBytes = count;
//	iomTransfer.pui32TxBuffer = (uint32_t *)buf_out;
//	iomTransfer.pui32RxBuffer = (uint32_t *)buf_in;
//	iomTransfer.eDirection = AM_HAL_IOM_TX;
//	uint32_t status = am_hal_iom_blocking_transfer(spi_handle, &iomTransfer);
	iomTransfer.ui32NumBytes = count;
   11968:	4a0b      	ldr	r2, [pc, #44]	; (11998 <_transfer_tx+0x3c>)
   1196a:	687b      	ldr	r3, [r7, #4]
   1196c:	60d3      	str	r3, [r2, #12]
	iomTransfer.pui32TxBuffer = (uint32_t *)buf_out;
   1196e:	4a0a      	ldr	r2, [pc, #40]	; (11998 <_transfer_tx+0x3c>)
   11970:	68fb      	ldr	r3, [r7, #12]
   11972:	6153      	str	r3, [r2, #20]
	iomTransfer.pui32RxBuffer = (uint32_t *)dummy_rx;
   11974:	4b08      	ldr	r3, [pc, #32]	; (11998 <_transfer_tx+0x3c>)
   11976:	4a09      	ldr	r2, [pc, #36]	; (1199c <_transfer_tx+0x40>)
   11978:	619a      	str	r2, [r3, #24]
	iomTransfer.eDirection = AM_HAL_IOM_FULLDUPLEX;
   1197a:	4b07      	ldr	r3, [pc, #28]	; (11998 <_transfer_tx+0x3c>)
   1197c:	2202      	movs	r2, #2
   1197e:	741a      	strb	r2, [r3, #16]
	uint32_t status = am_hal_iom_spi_blocking_fullduplex(spi_handle, &iomTransfer);
   11980:	4b07      	ldr	r3, [pc, #28]	; (119a0 <_transfer_tx+0x44>)
   11982:	681b      	ldr	r3, [r3, #0]
   11984:	4904      	ldr	r1, [pc, #16]	; (11998 <_transfer_tx+0x3c>)
   11986:	4618      	mov	r0, r3
   11988:	f007 fa08 	bl	18d9c <am_hal_iom_spi_blocking_fullduplex>
   1198c:	6178      	str	r0, [r7, #20]
	if(status != 0){
		#ifdef OWN_PRINT
		am_util_stdio_printf("txs: %d\n", status);
		#endif
	}
}
   1198e:	bf00      	nop
   11990:	3718      	adds	r7, #24
   11992:	46bd      	mov	sp, r7
   11994:	bd80      	pop	{r7, pc}
   11996:	bf00      	nop
   11998:	10000548 	.word	0x10000548
   1199c:	100011e4 	.word	0x100011e4
   119a0:	10000544 	.word	0x10000544

000119a4 <_transfer_rx>:

void _transfer_rx(void *buf_out, void *buf_in, size_t count)
{
   119a4:	b580      	push	{r7, lr}
   119a6:	b086      	sub	sp, #24
   119a8:	af00      	add	r7, sp, #0
   119aa:	60f8      	str	r0, [r7, #12]
   119ac:	60b9      	str	r1, [r7, #8]
   119ae:	607a      	str	r2, [r7, #4]
//	iomTransfer.ui32NumBytes = count;
//	iomTransfer.pui32TxBuffer = (uint32_t *)buf_out;
//	iomTransfer.pui32RxBuffer = (uint32_t *)buf_in;
//	iomTransfer.eDirection = AM_HAL_IOM_RX;
//	uint32_t status = am_hal_iom_blocking_transfer(spi_handle, &iomTransfer);
	iomTransfer.ui32NumBytes = count;
   119b0:	4a0b      	ldr	r2, [pc, #44]	; (119e0 <_transfer_rx+0x3c>)
   119b2:	687b      	ldr	r3, [r7, #4]
   119b4:	60d3      	str	r3, [r2, #12]
	iomTransfer.pui32TxBuffer = (uint32_t *)dummy_tx;
   119b6:	4b0a      	ldr	r3, [pc, #40]	; (119e0 <_transfer_rx+0x3c>)
   119b8:	4a0a      	ldr	r2, [pc, #40]	; (119e4 <_transfer_rx+0x40>)
   119ba:	615a      	str	r2, [r3, #20]
	iomTransfer.pui32RxBuffer = (uint32_t *)buf_in;
   119bc:	4a08      	ldr	r2, [pc, #32]	; (119e0 <_transfer_rx+0x3c>)
   119be:	68bb      	ldr	r3, [r7, #8]
   119c0:	6193      	str	r3, [r2, #24]
	iomTransfer.eDirection = AM_HAL_IOM_FULLDUPLEX;
   119c2:	4b07      	ldr	r3, [pc, #28]	; (119e0 <_transfer_rx+0x3c>)
   119c4:	2202      	movs	r2, #2
   119c6:	741a      	strb	r2, [r3, #16]
	uint32_t status = am_hal_iom_spi_blocking_fullduplex(spi_handle, &iomTransfer);
   119c8:	4b07      	ldr	r3, [pc, #28]	; (119e8 <_transfer_rx+0x44>)
   119ca:	681b      	ldr	r3, [r3, #0]
   119cc:	4904      	ldr	r1, [pc, #16]	; (119e0 <_transfer_rx+0x3c>)
   119ce:	4618      	mov	r0, r3
   119d0:	f007 f9e4 	bl	18d9c <am_hal_iom_spi_blocking_fullduplex>
   119d4:	6178      	str	r0, [r7, #20]
	if(status != 0){
		#ifdef OWN_PRINT
		am_util_stdio_printf("rxs: %d\n", status);
		#endif
	}
}
   119d6:	bf00      	nop
   119d8:	3718      	adds	r7, #24
   119da:	46bd      	mov	sp, r7
   119dc:	bd80      	pop	{r7, pc}
   119de:	bf00      	nop
   119e0:	10000548 	.word	0x10000548
   119e4:	10000fe4 	.word	0x10000fe4
   119e8:	10000544 	.word	0x10000544

000119ec <_transfer_fd>:

void _transfer_fd(void *buf_out, void *buf_in, uint32_t count) {
   119ec:	b580      	push	{r7, lr}
   119ee:	b086      	sub	sp, #24
   119f0:	af00      	add	r7, sp, #0
   119f2:	60f8      	str	r0, [r7, #12]
   119f4:	60b9      	str	r1, [r7, #8]
   119f6:	607a      	str	r2, [r7, #4]
	iomTransfer.ui32NumBytes = count;
   119f8:	4a0b      	ldr	r2, [pc, #44]	; (11a28 <_transfer_fd+0x3c>)
   119fa:	687b      	ldr	r3, [r7, #4]
   119fc:	60d3      	str	r3, [r2, #12]
	iomTransfer.pui32TxBuffer = (uint32_t *)buf_out;
   119fe:	4a0a      	ldr	r2, [pc, #40]	; (11a28 <_transfer_fd+0x3c>)
   11a00:	68fb      	ldr	r3, [r7, #12]
   11a02:	6153      	str	r3, [r2, #20]
	iomTransfer.pui32RxBuffer = (uint32_t *)buf_in;
   11a04:	4a08      	ldr	r2, [pc, #32]	; (11a28 <_transfer_fd+0x3c>)
   11a06:	68bb      	ldr	r3, [r7, #8]
   11a08:	6193      	str	r3, [r2, #24]
	iomTransfer.eDirection = AM_HAL_IOM_FULLDUPLEX;
   11a0a:	4b07      	ldr	r3, [pc, #28]	; (11a28 <_transfer_fd+0x3c>)
   11a0c:	2202      	movs	r2, #2
   11a0e:	741a      	strb	r2, [r3, #16]
	uint32_t status = am_hal_iom_spi_blocking_fullduplex(spi_handle, &iomTransfer);
   11a10:	4b06      	ldr	r3, [pc, #24]	; (11a2c <_transfer_fd+0x40>)
   11a12:	681b      	ldr	r3, [r3, #0]
   11a14:	4904      	ldr	r1, [pc, #16]	; (11a28 <_transfer_fd+0x3c>)
   11a16:	4618      	mov	r0, r3
   11a18:	f007 f9c0 	bl	18d9c <am_hal_iom_spi_blocking_fullduplex>
   11a1c:	6178      	str	r0, [r7, #20]
	if(status != 0){
		#ifdef OWN_PRINT
		am_util_stdio_printf("fds: %d\n", status);
		#endif
	}
}
   11a1e:	bf00      	nop
   11a20:	3718      	adds	r7, #24
   11a22:	46bd      	mov	sp, r7
   11a24:	bd80      	pop	{r7, pc}
   11a26:	bf00      	nop
   11a28:	10000548 	.word	0x10000548
   11a2c:	10000544 	.word	0x10000544

00011a30 <spi_setspeed>:

uint32_t spi_setspeed(uint32_t speed)
{
   11a30:	b580      	push	{r7, lr}
   11a32:	b084      	sub	sp, #16
   11a34:	af02      	add	r7, sp, #8
   11a36:	6078      	str	r0, [r7, #4]
	spi_config.ui32ClockFreq = speed;
   11a38:	4a06      	ldr	r2, [pc, #24]	; (11a54 <spi_setspeed+0x24>)
   11a3a:	687b      	ldr	r3, [r7, #4]
   11a3c:	6053      	str	r3, [r2, #4]
	return _initialize_config(spi_config);
   11a3e:	4b05      	ldr	r3, [pc, #20]	; (11a54 <spi_setspeed+0x24>)
   11a40:	691a      	ldr	r2, [r3, #16]
   11a42:	9200      	str	r2, [sp, #0]
   11a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11a46:	f7ff fe65 	bl	11714 <_initialize_config>
   11a4a:	4603      	mov	r3, r0
}
   11a4c:	4618      	mov	r0, r3
   11a4e:	3708      	adds	r7, #8
   11a50:	46bd      	mov	sp, r7
   11a52:	bd80      	pop	{r7, pc}
   11a54:	100013e8 	.word	0x100013e8

00011a58 <spi_cs_set>:
void spi_cs_pin_set(uint8_t new_pin) {
	am_hal_gpio_pinconfig(new_pin,   g_AM_HAL_GPIO_OUTPUT_12);
	cs_pin = new_pin;
}

void spi_cs_set() {
   11a58:	b580      	push	{r7, lr}
   11a5a:	af00      	add	r7, sp, #0
	am_hal_gpio_state_write(cs_pin, AM_HAL_GPIO_OUTPUT_SET);
   11a5c:	4b03      	ldr	r3, [pc, #12]	; (11a6c <spi_cs_set+0x14>)
   11a5e:	681b      	ldr	r3, [r3, #0]
   11a60:	2101      	movs	r1, #1
   11a62:	4618      	mov	r0, r3
   11a64:	f006 fd44 	bl	184f0 <am_hal_gpio_state_write>
}
   11a68:	bf00      	nop
   11a6a:	bd80      	pop	{r7, pc}
   11a6c:	100013e4 	.word	0x100013e4

00011a70 <spi_cs_clear>:

void spi_cs_clear() {
   11a70:	b580      	push	{r7, lr}
   11a72:	af00      	add	r7, sp, #0
	am_hal_gpio_state_write(cs_pin, AM_HAL_GPIO_OUTPUT_CLEAR);
   11a74:	4b03      	ldr	r3, [pc, #12]	; (11a84 <spi_cs_clear+0x14>)
   11a76:	681b      	ldr	r3, [r3, #0]
   11a78:	2100      	movs	r1, #0
   11a7a:	4618      	mov	r0, r3
   11a7c:	f006 fd38 	bl	184f0 <am_hal_gpio_state_write>
}
   11a80:	bf00      	nop
   11a82:	bd80      	pop	{r7, pc}
   11a84:	100013e4 	.word	0x100013e4

00011a88 <SD_DelayUs>:
// wait until card is ready
#define SD_WAIT_READY() if(SD_WaitReady()) return 1;


void SD_DelayUs(uint32_t tt)
{
   11a88:	b580      	push	{r7, lr}
   11a8a:	b082      	sub	sp, #8
   11a8c:	af00      	add	r7, sp, #0
   11a8e:	6078      	str	r0, [r7, #4]
	am_util_delay_us(tt);
   11a90:	6878      	ldr	r0, [r7, #4]
   11a92:	f7fe febb 	bl	1080c <am_util_delay_us>
}
   11a96:	bf00      	nop
   11a98:	3708      	adds	r7, #8
   11a9a:	46bd      	mov	sp, r7
   11a9c:	bd80      	pop	{r7, pc}

00011a9e <SD_Send_Byte>:

void SD_Send_Byte (uint8_t data)
{
   11a9e:	b580      	push	{r7, lr}
   11aa0:	b082      	sub	sp, #8
   11aa2:	af00      	add	r7, sp, #0
   11aa4:	4603      	mov	r3, r0
   11aa6:	71fb      	strb	r3, [r7, #7]
	_transfer_tx(&data, NULL, 1);
   11aa8:	1dfb      	adds	r3, r7, #7
   11aaa:	2201      	movs	r2, #1
   11aac:	2100      	movs	r1, #0
   11aae:	4618      	mov	r0, r3
   11ab0:	f7ff ff54 	bl	1195c <_transfer_tx>
}
   11ab4:	bf00      	nop
   11ab6:	3708      	adds	r7, #8
   11ab8:	46bd      	mov	sp, r7
   11aba:	bd80      	pop	{r7, pc}

00011abc <SD_Get_Byte>:


uint8_t SD_Get_Byte(void)
{
   11abc:	b580      	push	{r7, lr}
   11abe:	af00      	add	r7, sp, #0
	txval = 0xFF;
   11ac0:	4b06      	ldr	r3, [pc, #24]	; (11adc <SD_Get_Byte+0x20>)
   11ac2:	22ff      	movs	r2, #255	; 0xff
   11ac4:	601a      	str	r2, [r3, #0]
	_transfer_fd(&txval, &rxval, 1);
   11ac6:	2201      	movs	r2, #1
   11ac8:	4905      	ldr	r1, [pc, #20]	; (11ae0 <SD_Get_Byte+0x24>)
   11aca:	4804      	ldr	r0, [pc, #16]	; (11adc <SD_Get_Byte+0x20>)
   11acc:	f7ff ff8e 	bl	119ec <_transfer_fd>
	return rxval;
   11ad0:	4b03      	ldr	r3, [pc, #12]	; (11ae0 <SD_Get_Byte+0x24>)
   11ad2:	681b      	ldr	r3, [r3, #0]
   11ad4:	b2db      	uxtb	r3, r3
}
   11ad6:	4618      	mov	r0, r3
   11ad8:	bd80      	pop	{r7, pc}
   11ada:	bf00      	nop
   11adc:	10000038 	.word	0x10000038
   11ae0:	10000570 	.word	0x10000570

00011ae4 <SD_WriteCmd>:


uint32_t SD_WriteCmd( uint8_t cmd, uint32_t arg, uint8_t crc )
{
   11ae4:	b580      	push	{r7, lr}
   11ae6:	b084      	sub	sp, #16
   11ae8:	af00      	add	r7, sp, #0
   11aea:	4603      	mov	r3, r0
   11aec:	6039      	str	r1, [r7, #0]
   11aee:	71fb      	strb	r3, [r7, #7]
   11af0:	4613      	mov	r3, r2
   11af2:	71bb      	strb	r3, [r7, #6]
	uint32_t cnt=512;
   11af4:	f44f 7300 	mov.w	r3, #512	; 0x200
   11af8:	60fb      	str	r3, [r7, #12]
	uint8_t  sta;
	//am_util_stdio_printf("SD_WriteCmd: %d : ", cmd-0x40);
	SD_WAIT_READY();
   11afa:	f000 f873 	bl	11be4 <SD_WaitReady>
   11afe:	4603      	mov	r3, r0
   11b00:	2b00      	cmp	r3, #0
   11b02:	d001      	beq.n	11b08 <SD_WriteCmd+0x24>
   11b04:	2301      	movs	r3, #1
   11b06:	e030      	b.n	11b6a <SD_WriteCmd+0x86>

	SD_Send_Byte( cmd | 0x40 );
   11b08:	79fb      	ldrb	r3, [r7, #7]
   11b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11b0e:	b2db      	uxtb	r3, r3
   11b10:	4618      	mov	r0, r3
   11b12:	f7ff ffc4 	bl	11a9e <SD_Send_Byte>
	SD_Send_Byte( (uint8_t)(arg>>24) );
   11b16:	683b      	ldr	r3, [r7, #0]
   11b18:	0e1b      	lsrs	r3, r3, #24
   11b1a:	b2db      	uxtb	r3, r3
   11b1c:	4618      	mov	r0, r3
   11b1e:	f7ff ffbe 	bl	11a9e <SD_Send_Byte>
	SD_Send_Byte( (uint8_t)(arg>>16) );
   11b22:	683b      	ldr	r3, [r7, #0]
   11b24:	0c1b      	lsrs	r3, r3, #16
   11b26:	b2db      	uxtb	r3, r3
   11b28:	4618      	mov	r0, r3
   11b2a:	f7ff ffb8 	bl	11a9e <SD_Send_Byte>
	SD_Send_Byte( (uint8_t)(arg>>8) );
   11b2e:	683b      	ldr	r3, [r7, #0]
   11b30:	0a1b      	lsrs	r3, r3, #8
   11b32:	b2db      	uxtb	r3, r3
   11b34:	4618      	mov	r0, r3
   11b36:	f7ff ffb2 	bl	11a9e <SD_Send_Byte>
	SD_Send_Byte( (uint8_t)(arg) );
   11b3a:	683b      	ldr	r3, [r7, #0]
   11b3c:	b2db      	uxtb	r3, r3
   11b3e:	4618      	mov	r0, r3
   11b40:	f7ff ffad 	bl	11a9e <SD_Send_Byte>
	SD_Send_Byte( crc );   // CRC
   11b44:	79bb      	ldrb	r3, [r7, #6]
   11b46:	4618      	mov	r0, r3
   11b48:	f7ff ffa9 	bl	11a9e <SD_Send_Byte>

	do
	{
		sta = SD_Get_Byte();
   11b4c:	f7ff ffb6 	bl	11abc <SD_Get_Byte>
   11b50:	4603      	mov	r3, r0
   11b52:	72fb      	strb	r3, [r7, #11]
		cnt--;
   11b54:	68fb      	ldr	r3, [r7, #12]
   11b56:	3b01      	subs	r3, #1
   11b58:	60fb      	str	r3, [r7, #12]
	} while ( (cnt)&&(sta & 0x80) );
   11b5a:	68fb      	ldr	r3, [r7, #12]
   11b5c:	2b00      	cmp	r3, #0
   11b5e:	d003      	beq.n	11b68 <SD_WriteCmd+0x84>
   11b60:	f997 300b 	ldrsb.w	r3, [r7, #11]
   11b64:	2b00      	cmp	r3, #0
   11b66:	dbf1      	blt.n	11b4c <SD_WriteCmd+0x68>

	return (uint32_t) sta;
   11b68:	7afb      	ldrb	r3, [r7, #11]
}
   11b6a:	4618      	mov	r0, r3
   11b6c:	3710      	adds	r7, #16
   11b6e:	46bd      	mov	sp, r7
   11b70:	bd80      	pop	{r7, pc}
	...

00011b74 <SD_CSD_CID>:

uint32_t SD_CSD_CID(uint8_t cmd, uint8_t *buf)
{
   11b74:	b580      	push	{r7, lr}
   11b76:	b082      	sub	sp, #8
   11b78:	af00      	add	r7, sp, #0
   11b7a:	4603      	mov	r3, r0
   11b7c:	6039      	str	r1, [r7, #0]
   11b7e:	71fb      	strb	r3, [r7, #7]
	SET_REPEAT_SD(1000);
   11b80:	4b16      	ldr	r3, [pc, #88]	; (11bdc <SD_CSD_CID+0x68>)
   11b82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11b86:	601a      	str	r2, [r3, #0]
	while(SD_WriteCmd(cmd,0x00,0xFF) != 0x00){
   11b88:	e00e      	b.n	11ba8 <SD_CSD_CID+0x34>
		REPORT_REPEAT_ERROR_SD(1)
   11b8a:	4b14      	ldr	r3, [pc, #80]	; (11bdc <SD_CSD_CID+0x68>)
   11b8c:	681b      	ldr	r3, [r3, #0]
   11b8e:	3b01      	subs	r3, #1
   11b90:	4a12      	ldr	r2, [pc, #72]	; (11bdc <SD_CSD_CID+0x68>)
   11b92:	6013      	str	r3, [r2, #0]
   11b94:	4b11      	ldr	r3, [pc, #68]	; (11bdc <SD_CSD_CID+0x68>)
   11b96:	681b      	ldr	r3, [r3, #0]
   11b98:	2b00      	cmp	r3, #0
   11b9a:	d105      	bne.n	11ba8 <SD_CSD_CID+0x34>
   11b9c:	216a      	movs	r1, #106	; 0x6a
   11b9e:	4810      	ldr	r0, [pc, #64]	; (11be0 <SD_CSD_CID+0x6c>)
   11ba0:	f7ff fd8a 	bl	116b8 <am_util_stdio_printf>
   11ba4:	2301      	movs	r3, #1
   11ba6:	e015      	b.n	11bd4 <SD_CSD_CID+0x60>
	while(SD_WriteCmd(cmd,0x00,0xFF) != 0x00){
   11ba8:	79fb      	ldrb	r3, [r7, #7]
   11baa:	22ff      	movs	r2, #255	; 0xff
   11bac:	2100      	movs	r1, #0
   11bae:	4618      	mov	r0, r3
   11bb0:	f7ff ff98 	bl	11ae4 <SD_WriteCmd>
   11bb4:	4603      	mov	r3, r0
   11bb6:	2b00      	cmp	r3, #0
   11bb8:	d1e7      	bne.n	11b8a <SD_CSD_CID+0x16>
	}
	SD_WAIT_READY();
   11bba:	f000 f813 	bl	11be4 <SD_WaitReady>
   11bbe:	4603      	mov	r3, r0
   11bc0:	2b00      	cmp	r3, #0
   11bc2:	d001      	beq.n	11bc8 <SD_CSD_CID+0x54>
   11bc4:	2301      	movs	r3, #1
   11bc6:	e005      	b.n	11bd4 <SD_CSD_CID+0x60>
	_transfer_rx(NULL, buf, 16);
   11bc8:	2210      	movs	r2, #16
   11bca:	6839      	ldr	r1, [r7, #0]
   11bcc:	2000      	movs	r0, #0
   11bce:	f7ff fee9 	bl	119a4 <_transfer_rx>

	return 0;
   11bd2:	2300      	movs	r3, #0
}
   11bd4:	4618      	mov	r0, r3
   11bd6:	3708      	adds	r7, #8
   11bd8:	46bd      	mov	sp, r7
   11bda:	bd80      	pop	{r7, pc}
   11bdc:	10001400 	.word	0x10001400
   11be0:	0001a0a8 	.word	0x0001a0a8

00011be4 <SD_WaitReady>:

uint8_t SD_WaitReady( void )
{
   11be4:	b580      	push	{r7, lr}
   11be6:	b082      	sub	sp, #8
   11be8:	af00      	add	r7, sp, #0
	uint32_t cnt = 0x00fffff;
   11bea:	4b0b      	ldr	r3, [pc, #44]	; (11c18 <SD_WaitReady+0x34>)
   11bec:	607b      	str	r3, [r7, #4]
	uint8_t sta;
	do
	{
		sta = SD_Get_Byte( );
   11bee:	f7ff ff65 	bl	11abc <SD_Get_Byte>
   11bf2:	4603      	mov	r3, r0
   11bf4:	70fb      	strb	r3, [r7, #3]
		if ( sta == 0xFF ) //
   11bf6:	78fb      	ldrb	r3, [r7, #3]
   11bf8:	2bff      	cmp	r3, #255	; 0xff
   11bfa:	d101      	bne.n	11c00 <SD_WaitReady+0x1c>
		{
			return 0;
   11bfc:	2300      	movs	r3, #0
   11bfe:	e006      	b.n	11c0e <SD_WaitReady+0x2a>
		}
		cnt--;
   11c00:	687b      	ldr	r3, [r7, #4]
   11c02:	3b01      	subs	r3, #1
   11c04:	607b      	str	r3, [r7, #4]
	} while ( cnt );
   11c06:	687b      	ldr	r3, [r7, #4]
   11c08:	2b00      	cmp	r3, #0
   11c0a:	d1f0      	bne.n	11bee <SD_WaitReady+0xa>
	return 1;
   11c0c:	2301      	movs	r3, #1
}
   11c0e:	4618      	mov	r0, r3
   11c10:	3708      	adds	r7, #8
   11c12:	46bd      	mov	sp, r7
   11c14:	bd80      	pop	{r7, pc}
   11c16:	bf00      	nop
   11c18:	000fffff 	.word	0x000fffff

00011c1c <SD_WaitBusy>:

uint8_t SD_WaitBusy( void ) {
   11c1c:	b580      	push	{r7, lr}
   11c1e:	af00      	add	r7, sp, #0
	uint32_t retVal;
	SET_REPEAT_SD(10000);
   11c20:	4b0d      	ldr	r3, [pc, #52]	; (11c58 <SD_WaitBusy+0x3c>)
   11c22:	f242 7210 	movw	r2, #10000	; 0x2710
   11c26:	601a      	str	r2, [r3, #0]
	while(SD_Get_Byte() == 0) { REPORT_REPEAT_ERROR_SD(1) }
   11c28:	e00e      	b.n	11c48 <SD_WaitBusy+0x2c>
   11c2a:	4b0b      	ldr	r3, [pc, #44]	; (11c58 <SD_WaitBusy+0x3c>)
   11c2c:	681b      	ldr	r3, [r3, #0]
   11c2e:	3b01      	subs	r3, #1
   11c30:	4a09      	ldr	r2, [pc, #36]	; (11c58 <SD_WaitBusy+0x3c>)
   11c32:	6013      	str	r3, [r2, #0]
   11c34:	4b08      	ldr	r3, [pc, #32]	; (11c58 <SD_WaitBusy+0x3c>)
   11c36:	681b      	ldr	r3, [r3, #0]
   11c38:	2b00      	cmp	r3, #0
   11c3a:	d105      	bne.n	11c48 <SD_WaitBusy+0x2c>
   11c3c:	2185      	movs	r1, #133	; 0x85
   11c3e:	4807      	ldr	r0, [pc, #28]	; (11c5c <SD_WaitBusy+0x40>)
   11c40:	f7ff fd3a 	bl	116b8 <am_util_stdio_printf>
   11c44:	2301      	movs	r3, #1
   11c46:	e005      	b.n	11c54 <SD_WaitBusy+0x38>
   11c48:	f7ff ff38 	bl	11abc <SD_Get_Byte>
   11c4c:	4603      	mov	r3, r0
   11c4e:	2b00      	cmp	r3, #0
   11c50:	d0eb      	beq.n	11c2a <SD_WaitBusy+0xe>
	return 0;
   11c52:	2300      	movs	r3, #0
}
   11c54:	4618      	mov	r0, r3
   11c56:	bd80      	pop	{r7, pc}
   11c58:	10001400 	.word	0x10001400
   11c5c:	0001a0a8 	.word	0x0001a0a8

00011c60 <SD_CS>:

void SD_CS(uint8_t cs)
{
   11c60:	b580      	push	{r7, lr}
   11c62:	b082      	sub	sp, #8
   11c64:	af00      	add	r7, sp, #0
   11c66:	4603      	mov	r3, r0
   11c68:	71fb      	strb	r3, [r7, #7]
	if (cs == 1)
   11c6a:	79fb      	ldrb	r3, [r7, #7]
   11c6c:	2b01      	cmp	r3, #1
   11c6e:	d102      	bne.n	11c76 <SD_CS+0x16>
	{
		spi_cs_set();
   11c70:	f7ff fef2 	bl	11a58 <spi_cs_set>
	}
	else
	{
		spi_cs_clear();
	}
}
   11c74:	e001      	b.n	11c7a <SD_CS+0x1a>
		spi_cs_clear();
   11c76:	f7ff fefb 	bl	11a70 <spi_cs_clear>
}
   11c7a:	bf00      	nop
   11c7c:	3708      	adds	r7, #8
   11c7e:	46bd      	mov	sp, r7
   11c80:	bd80      	pop	{r7, pc}
	...

00011c84 <SD_SSP0LowSpeed>:


uint32_t SD_SSP0LowSpeed(void)
{
   11c84:	b580      	push	{r7, lr}
   11c86:	af00      	add	r7, sp, #0
	return spi_setspeed(AM_HAL_IOM_400KHZ);
   11c88:	4802      	ldr	r0, [pc, #8]	; (11c94 <SD_SSP0LowSpeed+0x10>)
   11c8a:	f7ff fed1 	bl	11a30 <spi_setspeed>
   11c8e:	4603      	mov	r3, r0
}
   11c90:	4618      	mov	r0, r3
   11c92:	bd80      	pop	{r7, pc}
   11c94:	00061a80 	.word	0x00061a80

00011c98 <SD_SSP0HighSpeed>:

uint32_t SD_SSP0HighSpeed(void)
{
   11c98:	b580      	push	{r7, lr}
   11c9a:	af00      	add	r7, sp, #0
	return spi_setspeed(AM_HAL_IOM_400KHZ);
   11c9c:	4802      	ldr	r0, [pc, #8]	; (11ca8 <SD_SSP0HighSpeed+0x10>)
   11c9e:	f7ff fec7 	bl	11a30 <spi_setspeed>
   11ca2:	4603      	mov	r3, r0
}
   11ca4:	4618      	mov	r0, r3
   11ca6:	bd80      	pop	{r7, pc}
   11ca8:	00061a80 	.word	0x00061a80

00011cac <SD_init>:

uint32_t SD_init(void)
{
   11cac:	b590      	push	{r4, r7, lr}
   11cae:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
   11cb2:	af00      	add	r7, sp, #0
	am_util_stdio_printf("SD Init Called.\n\n");
   11cb4:	486c      	ldr	r0, [pc, #432]	; (11e68 <SD_init+0x1bc>)
   11cb6:	f7ff fcff 	bl	116b8 <am_util_stdio_printf>
	uint8_t i = 0,tmp = 0;
   11cba:	2300      	movs	r3, #0
   11cbc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
   11cc0:	2300      	movs	r3, #0
   11cc2:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
	uint8_t  buff[512];

	SD_SSP0LowSpeed();                                      // low speed
   11cc6:	f7ff ffdd 	bl	11c84 <SD_SSP0LowSpeed>
	SD_DelayUs(5000);
   11cca:	f241 3088 	movw	r0, #5000	; 0x1388
   11cce:	f7ff fedb 	bl	11a88 <SD_DelayUs>

	// send 72 clocks
	for (i=0; i<0x0F; i++)              
   11cd2:	2300      	movs	r3, #0
   11cd4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
   11cd8:	e007      	b.n	11cea <SD_init+0x3e>
	{
		SD_Send_Byte(0xFF);
   11cda:	20ff      	movs	r0, #255	; 0xff
   11cdc:	f7ff fedf 	bl	11a9e <SD_Send_Byte>
	for (i=0; i<0x0F; i++)              
   11ce0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11ce4:	3301      	adds	r3, #1
   11ce6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
   11cea:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11cee:	2b0e      	cmp	r3, #14
   11cf0:	d9f3      	bls.n	11cda <SD_init+0x2e>
		//am_util_stdio_printf("Send Byte Commands.\n\n");
	}
	i=0;
   11cf2:	2300      	movs	r3, #0
   11cf4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	// Send Command CMD0 to SD/SD Card  enter idle
	do
	{
		tmp = SD_WriteCmd(CMD0,0x00,0x95);   // CMD0
   11cf8:	2295      	movs	r2, #149	; 0x95
   11cfa:	2100      	movs	r1, #0
   11cfc:	2040      	movs	r0, #64	; 0x40
   11cfe:	f7ff fef1 	bl	11ae4 <SD_WriteCmd>
   11d02:	4603      	mov	r3, r0
   11d04:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
		i++;
   11d08:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11d0c:	3301      	adds	r3, #1
   11d0e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
	}while ((tmp != 1) && (i < 200));
   11d12:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
   11d16:	2b01      	cmp	r3, #1
   11d18:	d003      	beq.n	11d22 <SD_init+0x76>
   11d1a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11d1e:	2bc7      	cmp	r3, #199	; 0xc7
   11d20:	d9ea      	bls.n	11cf8 <SD_init+0x4c>

	am_util_stdio_printf("SD Card Version Called\n\n");
   11d22:	4852      	ldr	r0, [pc, #328]	; (11e6c <SD_init+0x1c0>)
   11d24:	f7ff fcc8 	bl	116b8 <am_util_stdio_printf>
	if(i >= 200)
   11d28:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11d2c:	2bc7      	cmp	r3, #199	; 0xc7
   11d2e:	d901      	bls.n	11d34 <SD_init+0x88>
	{
		return 1;
   11d30:	2301      	movs	r3, #1
   11d32:	e094      	b.n	11e5e <SD_init+0x1b2>
	}                             
	
	//get SD card version
	tmp = SD_WriteCmd( CMD8,0x1AA,0x87 );
   11d34:	2287      	movs	r2, #135	; 0x87
   11d36:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   11d3a:	2048      	movs	r0, #72	; 0x48
   11d3c:	f7ff fed2 	bl	11ae4 <SD_WriteCmd>
   11d40:	4603      	mov	r3, r0
   11d42:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
	//trailing 32bits
	SD_Get_Byte();
   11d46:	f7ff feb9 	bl	11abc <SD_Get_Byte>
	SD_Get_Byte();
   11d4a:	f7ff feb7 	bl	11abc <SD_Get_Byte>
	SD_Get_Byte();
   11d4e:	f7ff feb5 	bl	11abc <SD_Get_Byte>
	SD_Get_Byte();
   11d52:	f7ff feb3 	bl	11abc <SD_Get_Byte>

	if(tmp == 1)// 2.0 card
   11d56:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
   11d5a:	2b01      	cmp	r3, #1
   11d5c:	d177      	bne.n	11e4e <SD_init+0x1a2>
	{
		//init card: CMD41 is only for SDC
		i=1000;
   11d5e:	23e8      	movs	r3, #232	; 0xe8
   11d60:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		do
		{
			SD_WriteCmd( CMD55, 0, 0xFF );
   11d64:	22ff      	movs	r2, #255	; 0xff
   11d66:	2100      	movs	r1, #0
   11d68:	2077      	movs	r0, #119	; 0x77
   11d6a:	f7ff febb 	bl	11ae4 <SD_WriteCmd>
			tmp = SD_WriteCmd( CMD41,0x40000000, 0xFF);//CMD41
   11d6e:	22ff      	movs	r2, #255	; 0xff
   11d70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11d74:	2069      	movs	r0, #105	; 0x69
   11d76:	f7ff feb5 	bl	11ae4 <SD_WriteCmd>
   11d7a:	4603      	mov	r3, r0
   11d7c:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
			i--;
   11d80:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11d84:	3b01      	subs	r3, #1
   11d86:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		} while ((tmp) && (i));
   11d8a:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
   11d8e:	2b00      	cmp	r3, #0
   11d90:	d003      	beq.n	11d9a <SD_init+0xee>
   11d92:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11d96:	2b00      	cmp	r3, #0
   11d98:	d1e4      	bne.n	11d64 <SD_init+0xb8>
		if(i == 0)
   11d9a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11d9e:	2b00      	cmp	r3, #0
   11da0:	d101      	bne.n	11da6 <SD_init+0xfa>
		{
			return 1;
   11da2:	2301      	movs	r3, #1
   11da4:	e05b      	b.n	11e5e <SD_init+0x1b2>
		}

		//Get OCR information
		tmp = SD_WriteCmd(CMD58, 0, 0 );
   11da6:	2200      	movs	r2, #0
   11da8:	2100      	movs	r1, #0
   11daa:	207a      	movs	r0, #122	; 0x7a
   11dac:	f7ff fe9a 	bl	11ae4 <SD_WriteCmd>
   11db0:	4603      	mov	r3, r0
   11db2:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
		if ( tmp != 0x00 )
   11db6:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
   11dba:	2b00      	cmp	r3, #0
   11dbc:	d001      	beq.n	11dc2 <SD_init+0x116>
		{
			return 1;
   11dbe:	2301      	movs	r3, #1
   11dc0:	e04d      	b.n	11e5e <SD_init+0x1b2>
		}

		for ( i = 0; i < 4; i++ )
   11dc2:	2300      	movs	r3, #0
   11dc4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
   11dc8:	e00c      	b.n	11de4 <SD_init+0x138>
		{
			buff[ i ] = SD_Get_Byte();
   11dca:	f897 4207 	ldrb.w	r4, [r7, #519]	; 0x207
   11dce:	f7ff fe75 	bl	11abc <SD_Get_Byte>
   11dd2:	4603      	mov	r3, r0
   11dd4:	461a      	mov	r2, r3
   11dd6:	1d3b      	adds	r3, r7, #4
   11dd8:	551a      	strb	r2, [r3, r4]
		for ( i = 0; i < 4; i++ )
   11dda:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11dde:	3301      	adds	r3, #1
   11de0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
   11de4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
   11de8:	2b03      	cmp	r3, #3
   11dea:	d9ee      	bls.n	11dca <SD_init+0x11e>
		}

		if ( buff[0] & 0x40 )
   11dec:	1d3b      	adds	r3, r7, #4
   11dee:	781b      	ldrb	r3, [r3, #0]
   11df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11df4:	2b00      	cmp	r3, #0
   11df6:	d006      	beq.n	11e06 <SD_init+0x15a>
		{
			SD_Type = SD_TYPE_V2HC;
   11df8:	4b1d      	ldr	r3, [pc, #116]	; (11e70 <SD_init+0x1c4>)
   11dfa:	2201      	movs	r2, #1
   11dfc:	601a      	str	r2, [r3, #0]
			am_util_stdio_printf( "card is V2.0 SDHC.....\n\n" );
   11dfe:	481d      	ldr	r0, [pc, #116]	; (11e74 <SD_init+0x1c8>)
   11e00:	f7ff fc5a 	bl	116b8 <am_util_stdio_printf>
   11e04:	e005      	b.n	11e12 <SD_init+0x166>
		}
		else {
			SD_Type = SD_TYPE_V2;
   11e06:	4b1a      	ldr	r3, [pc, #104]	; (11e70 <SD_init+0x1c4>)
   11e08:	2200      	movs	r2, #0
   11e0a:	601a      	str	r2, [r3, #0]
			am_util_stdio_printf( "card is V2.0.....\n\n" );
   11e0c:	481a      	ldr	r0, [pc, #104]	; (11e78 <SD_init+0x1cc>)
   11e0e:	f7ff fc53 	bl	116b8 <am_util_stdio_printf>
		}          
		SET_REPEAT_SD(1000);
   11e12:	4b1a      	ldr	r3, [pc, #104]	; (11e7c <SD_init+0x1d0>)
   11e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e18:	601a      	str	r2, [r3, #0]
		while(SD_WriteCmd(CMD16,512,0xFF) != 0){
   11e1a:	e00e      	b.n	11e3a <SD_init+0x18e>
			REPORT_REPEAT_ERROR_SD(1)
   11e1c:	4b17      	ldr	r3, [pc, #92]	; (11e7c <SD_init+0x1d0>)
   11e1e:	681b      	ldr	r3, [r3, #0]
   11e20:	3b01      	subs	r3, #1
   11e22:	4a16      	ldr	r2, [pc, #88]	; (11e7c <SD_init+0x1d0>)
   11e24:	6013      	str	r3, [r2, #0]
   11e26:	4b15      	ldr	r3, [pc, #84]	; (11e7c <SD_init+0x1d0>)
   11e28:	681b      	ldr	r3, [r3, #0]
   11e2a:	2b00      	cmp	r3, #0
   11e2c:	d105      	bne.n	11e3a <SD_init+0x18e>
   11e2e:	21eb      	movs	r1, #235	; 0xeb
   11e30:	4813      	ldr	r0, [pc, #76]	; (11e80 <SD_init+0x1d4>)
   11e32:	f7ff fc41 	bl	116b8 <am_util_stdio_printf>
   11e36:	2301      	movs	r3, #1
   11e38:	e011      	b.n	11e5e <SD_init+0x1b2>
		while(SD_WriteCmd(CMD16,512,0xFF) != 0){
   11e3a:	22ff      	movs	r2, #255	; 0xff
   11e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
   11e40:	2050      	movs	r0, #80	; 0x50
   11e42:	f7ff fe4f 	bl	11ae4 <SD_WriteCmd>
   11e46:	4603      	mov	r3, r0
   11e48:	2b00      	cmp	r3, #0
   11e4a:	d1e7      	bne.n	11e1c <SD_init+0x170>
   11e4c:	e002      	b.n	11e54 <SD_init+0x1a8>
		}
	} else {
		//init older cards...
		// not supported
		am_util_stdio_printf( "INvalid card....\n\n" );
   11e4e:	480d      	ldr	r0, [pc, #52]	; (11e84 <SD_init+0x1d8>)
   11e50:	f7ff fc32 	bl	116b8 <am_util_stdio_printf>
	}

	SD_SSP0HighSpeed();                    //back to high speed
   11e54:	f7ff ff20 	bl	11c98 <SD_SSP0HighSpeed>
	SD_WaitReady();
   11e58:	f7ff fec4 	bl	11be4 <SD_WaitReady>
	return 0;                       
   11e5c:	2300      	movs	r3, #0
}
   11e5e:	4618      	mov	r0, r3
   11e60:	f507 7703 	add.w	r7, r7, #524	; 0x20c
   11e64:	46bd      	mov	sp, r7
   11e66:	bd90      	pop	{r4, r7, pc}
   11e68:	0001a0b4 	.word	0x0001a0b4
   11e6c:	0001a0c8 	.word	0x0001a0c8
   11e70:	10000034 	.word	0x10000034
   11e74:	0001a0e4 	.word	0x0001a0e4
   11e78:	0001a100 	.word	0x0001a100
   11e7c:	10001400 	.word	0x10001400
   11e80:	0001a0a8 	.word	0x0001a0a8
   11e84:	0001a114 	.word	0x0001a114

00011e88 <SD_ReadSingleBlock>:


uint32_t SD_ReadSingleBlock(uint32_t addr, uint8_t *buf)
{
   11e88:	b580      	push	{r7, lr}
   11e8a:	b082      	sub	sp, #8
   11e8c:	af00      	add	r7, sp, #0
   11e8e:	6078      	str	r0, [r7, #4]
   11e90:	6039      	str	r1, [r7, #0]
	SD_WaitReady();
   11e92:	f7ff fea7 	bl	11be4 <SD_WaitReady>
	SET_REPEAT_SD(1000);
   11e96:	4b27      	ldr	r3, [pc, #156]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11e9c:	601a      	str	r2, [r3, #0]
	while(SD_WriteCmd(CMD17,addr,0xFF) != 0){
   11e9e:	e00e      	b.n	11ebe <SD_ReadSingleBlock+0x36>
		REPORT_REPEAT_ERROR_SD(1)
   11ea0:	4b24      	ldr	r3, [pc, #144]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11ea2:	681b      	ldr	r3, [r3, #0]
   11ea4:	3b01      	subs	r3, #1
   11ea6:	4a23      	ldr	r2, [pc, #140]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11ea8:	6013      	str	r3, [r2, #0]
   11eaa:	4b22      	ldr	r3, [pc, #136]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11eac:	681b      	ldr	r3, [r3, #0]
   11eae:	2b00      	cmp	r3, #0
   11eb0:	d105      	bne.n	11ebe <SD_ReadSingleBlock+0x36>
   11eb2:	21fe      	movs	r1, #254	; 0xfe
   11eb4:	4820      	ldr	r0, [pc, #128]	; (11f38 <SD_ReadSingleBlock+0xb0>)
   11eb6:	f7ff fbff 	bl	116b8 <am_util_stdio_printf>
   11eba:	2301      	movs	r3, #1
   11ebc:	e035      	b.n	11f2a <SD_ReadSingleBlock+0xa2>
	while(SD_WriteCmd(CMD17,addr,0xFF) != 0){
   11ebe:	22ff      	movs	r2, #255	; 0xff
   11ec0:	6879      	ldr	r1, [r7, #4]
   11ec2:	2051      	movs	r0, #81	; 0x51
   11ec4:	f7ff fe0e 	bl	11ae4 <SD_WriteCmd>
   11ec8:	4603      	mov	r3, r0
   11eca:	2b00      	cmp	r3, #0
   11ecc:	d1e8      	bne.n	11ea0 <SD_ReadSingleBlock+0x18>
	}
	SET_REPEAT_SD(10000);
   11ece:	4b19      	ldr	r3, [pc, #100]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11ed0:	f242 7210 	movw	r2, #10000	; 0x2710
   11ed4:	601a      	str	r2, [r3, #0]
	while(SD_Get_Byte() != 0xFE){
   11ed6:	e00f      	b.n	11ef8 <SD_ReadSingleBlock+0x70>
		REPORT_REPEAT_ERROR_SD(1)
   11ed8:	4b16      	ldr	r3, [pc, #88]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11eda:	681b      	ldr	r3, [r3, #0]
   11edc:	3b01      	subs	r3, #1
   11ede:	4a15      	ldr	r2, [pc, #84]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11ee0:	6013      	str	r3, [r2, #0]
   11ee2:	4b14      	ldr	r3, [pc, #80]	; (11f34 <SD_ReadSingleBlock+0xac>)
   11ee4:	681b      	ldr	r3, [r3, #0]
   11ee6:	2b00      	cmp	r3, #0
   11ee8:	d106      	bne.n	11ef8 <SD_ReadSingleBlock+0x70>
   11eea:	f44f 7181 	mov.w	r1, #258	; 0x102
   11eee:	4812      	ldr	r0, [pc, #72]	; (11f38 <SD_ReadSingleBlock+0xb0>)
   11ef0:	f7ff fbe2 	bl	116b8 <am_util_stdio_printf>
   11ef4:	2301      	movs	r3, #1
   11ef6:	e018      	b.n	11f2a <SD_ReadSingleBlock+0xa2>
	while(SD_Get_Byte() != 0xFE){
   11ef8:	f7ff fde0 	bl	11abc <SD_Get_Byte>
   11efc:	4603      	mov	r3, r0
   11efe:	2bfe      	cmp	r3, #254	; 0xfe
   11f00:	d1ea      	bne.n	11ed8 <SD_ReadSingleBlock+0x50>
	}

	_transfer_rx(NULL, buf, 512);
   11f02:	f44f 7200 	mov.w	r2, #512	; 0x200
   11f06:	6839      	ldr	r1, [r7, #0]
   11f08:	2000      	movs	r0, #0
   11f0a:	f7ff fd4b 	bl	119a4 <_transfer_rx>

	SD_Get_Byte();
   11f0e:	f7ff fdd5 	bl	11abc <SD_Get_Byte>
	SD_Get_Byte();
   11f12:	f7ff fdd3 	bl	11abc <SD_Get_Byte>
	SD_WaitBusy();
   11f16:	f7ff fe81 	bl	11c1c <SD_WaitBusy>
	SD_WAIT_READY();
   11f1a:	f7ff fe63 	bl	11be4 <SD_WaitReady>
   11f1e:	4603      	mov	r3, r0
   11f20:	2b00      	cmp	r3, #0
   11f22:	d001      	beq.n	11f28 <SD_ReadSingleBlock+0xa0>
   11f24:	2301      	movs	r3, #1
   11f26:	e000      	b.n	11f2a <SD_ReadSingleBlock+0xa2>
	//am_util_stdio_printf("SD_ReadSingleBlock: %d\n", addr);
	return 0;
   11f28:	2300      	movs	r3, #0
}
   11f2a:	4618      	mov	r0, r3
   11f2c:	3708      	adds	r7, #8
   11f2e:	46bd      	mov	sp, r7
   11f30:	bd80      	pop	{r7, pc}
   11f32:	bf00      	nop
   11f34:	10001400 	.word	0x10001400
   11f38:	0001a0a8 	.word	0x0001a0a8

00011f3c <SD_ReadMultipleBlock>:

uint32_t SD_ReadMultipleBlock(uint32_t addr, uint8_t *buf, uint32_t count)
{
   11f3c:	b580      	push	{r7, lr}
   11f3e:	b084      	sub	sp, #16
   11f40:	af00      	add	r7, sp, #0
   11f42:	60f8      	str	r0, [r7, #12]
   11f44:	60b9      	str	r1, [r7, #8]
   11f46:	607a      	str	r2, [r7, #4]
	SD_WaitReady();
   11f48:	f7ff fe4c 	bl	11be4 <SD_WaitReady>
	SET_REPEAT_SD(1000);
   11f4c:	4b2e      	ldr	r3, [pc, #184]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f52:	601a      	str	r2, [r3, #0]
	while(SD_WriteCmd(CMD18,addr,0xFF) != 0){
   11f54:	e00f      	b.n	11f76 <SD_ReadMultipleBlock+0x3a>
		REPORT_REPEAT_ERROR_SD(1)
   11f56:	4b2c      	ldr	r3, [pc, #176]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f58:	681b      	ldr	r3, [r3, #0]
   11f5a:	3b01      	subs	r3, #1
   11f5c:	4a2a      	ldr	r2, [pc, #168]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f5e:	6013      	str	r3, [r2, #0]
   11f60:	4b29      	ldr	r3, [pc, #164]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f62:	681b      	ldr	r3, [r3, #0]
   11f64:	2b00      	cmp	r3, #0
   11f66:	d106      	bne.n	11f76 <SD_ReadMultipleBlock+0x3a>
   11f68:	f44f 718a 	mov.w	r1, #276	; 0x114
   11f6c:	4827      	ldr	r0, [pc, #156]	; (1200c <SD_ReadMultipleBlock+0xd0>)
   11f6e:	f7ff fba3 	bl	116b8 <am_util_stdio_printf>
   11f72:	2301      	movs	r3, #1
   11f74:	e044      	b.n	12000 <SD_ReadMultipleBlock+0xc4>
	while(SD_WriteCmd(CMD18,addr,0xFF) != 0){
   11f76:	22ff      	movs	r2, #255	; 0xff
   11f78:	68f9      	ldr	r1, [r7, #12]
   11f7a:	2052      	movs	r0, #82	; 0x52
   11f7c:	f7ff fdb2 	bl	11ae4 <SD_WriteCmd>
   11f80:	4603      	mov	r3, r0
   11f82:	2b00      	cmp	r3, #0
   11f84:	d1e7      	bne.n	11f56 <SD_ReadMultipleBlock+0x1a>
	}
	do
	{
		SET_REPEAT_SD(1000);
   11f86:	4b20      	ldr	r3, [pc, #128]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11f8c:	601a      	str	r2, [r3, #0]
		while(SD_Get_Byte() != 0xFE){
   11f8e:	e00f      	b.n	11fb0 <SD_ReadMultipleBlock+0x74>
			REPORT_REPEAT_ERROR_SD(1)
   11f90:	4b1d      	ldr	r3, [pc, #116]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f92:	681b      	ldr	r3, [r3, #0]
   11f94:	3b01      	subs	r3, #1
   11f96:	4a1c      	ldr	r2, [pc, #112]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f98:	6013      	str	r3, [r2, #0]
   11f9a:	4b1b      	ldr	r3, [pc, #108]	; (12008 <SD_ReadMultipleBlock+0xcc>)
   11f9c:	681b      	ldr	r3, [r3, #0]
   11f9e:	2b00      	cmp	r3, #0
   11fa0:	d106      	bne.n	11fb0 <SD_ReadMultipleBlock+0x74>
   11fa2:	f44f 718d 	mov.w	r1, #282	; 0x11a
   11fa6:	4819      	ldr	r0, [pc, #100]	; (1200c <SD_ReadMultipleBlock+0xd0>)
   11fa8:	f7ff fb86 	bl	116b8 <am_util_stdio_printf>
   11fac:	2301      	movs	r3, #1
   11fae:	e027      	b.n	12000 <SD_ReadMultipleBlock+0xc4>
		while(SD_Get_Byte() != 0xFE){
   11fb0:	f7ff fd84 	bl	11abc <SD_Get_Byte>
   11fb4:	4603      	mov	r3, r0
   11fb6:	2bfe      	cmp	r3, #254	; 0xfe
   11fb8:	d1ea      	bne.n	11f90 <SD_ReadMultipleBlock+0x54>
		}

		_transfer_rx(NULL, buf, 512);
   11fba:	f44f 7200 	mov.w	r2, #512	; 0x200
   11fbe:	68b9      	ldr	r1, [r7, #8]
   11fc0:	2000      	movs	r0, #0
   11fc2:	f7ff fcef 	bl	119a4 <_transfer_rx>

		SD_Get_Byte();                                                                    
   11fc6:	f7ff fd79 	bl	11abc <SD_Get_Byte>
		SD_Get_Byte();
   11fca:	f7ff fd77 	bl	11abc <SD_Get_Byte>
		buf += 512;
   11fce:	68bb      	ldr	r3, [r7, #8]
   11fd0:	f503 7300 	add.w	r3, r3, #512	; 0x200
   11fd4:	60bb      	str	r3, [r7, #8]
	}while (--count);
   11fd6:	687b      	ldr	r3, [r7, #4]
   11fd8:	3b01      	subs	r3, #1
   11fda:	607b      	str	r3, [r7, #4]
   11fdc:	687b      	ldr	r3, [r7, #4]
   11fde:	2b00      	cmp	r3, #0
   11fe0:	d1d1      	bne.n	11f86 <SD_ReadMultipleBlock+0x4a>
	SD_WriteCmd(CMD12,0x00,0xFF);  ////needs error checking
   11fe2:	22ff      	movs	r2, #255	; 0xff
   11fe4:	2100      	movs	r1, #0
   11fe6:	204c      	movs	r0, #76	; 0x4c
   11fe8:	f7ff fd7c 	bl	11ae4 <SD_WriteCmd>
	SD_WaitBusy();
   11fec:	f7ff fe16 	bl	11c1c <SD_WaitBusy>
	SD_WAIT_READY();
   11ff0:	f7ff fdf8 	bl	11be4 <SD_WaitReady>
   11ff4:	4603      	mov	r3, r0
   11ff6:	2b00      	cmp	r3, #0
   11ff8:	d001      	beq.n	11ffe <SD_ReadMultipleBlock+0xc2>
   11ffa:	2301      	movs	r3, #1
   11ffc:	e000      	b.n	12000 <SD_ReadMultipleBlock+0xc4>
	//am_util_stdio_printf("SD_ReadMultipleBlock: %d\n", count);
	return 0;
   11ffe:	2300      	movs	r3, #0
}
   12000:	4618      	mov	r0, r3
   12002:	3710      	adds	r7, #16
   12004:	46bd      	mov	sp, r7
   12006:	bd80      	pop	{r7, pc}
   12008:	10001400 	.word	0x10001400
   1200c:	0001a0a8 	.word	0x0001a0a8

00012010 <SD_WriteSingleBlock>:

uint32_t SD_WriteSingleBlock(uint32_t addr,const uint8_t *buf)
{
   12010:	b580      	push	{r7, lr}
   12012:	b084      	sub	sp, #16
   12014:	af00      	add	r7, sp, #0
   12016:	6078      	str	r0, [r7, #4]
   12018:	6039      	str	r1, [r7, #0]
	uint8_t  temp;
	SD_WaitReady();
   1201a:	f7ff fde3 	bl	11be4 <SD_WaitReady>
	SET_REPEAT_SD(100);
   1201e:	4b29      	ldr	r3, [pc, #164]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   12020:	2264      	movs	r2, #100	; 0x64
   12022:	601a      	str	r2, [r3, #0]
	while(SD_WriteCmd(CMD24,addr,0xFF) != 0){
   12024:	e00f      	b.n	12046 <SD_WriteSingleBlock+0x36>
		REPORT_REPEAT_ERROR_SD(1)
   12026:	4b27      	ldr	r3, [pc, #156]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   12028:	681b      	ldr	r3, [r3, #0]
   1202a:	3b01      	subs	r3, #1
   1202c:	4a25      	ldr	r2, [pc, #148]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   1202e:	6013      	str	r3, [r2, #0]
   12030:	4b24      	ldr	r3, [pc, #144]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   12032:	681b      	ldr	r3, [r3, #0]
   12034:	2b00      	cmp	r3, #0
   12036:	d106      	bne.n	12046 <SD_WriteSingleBlock+0x36>
   12038:	f44f 7198 	mov.w	r1, #304	; 0x130
   1203c:	4822      	ldr	r0, [pc, #136]	; (120c8 <SD_WriteSingleBlock+0xb8>)
   1203e:	f7ff fb3b 	bl	116b8 <am_util_stdio_printf>
   12042:	2301      	movs	r3, #1
   12044:	e039      	b.n	120ba <SD_WriteSingleBlock+0xaa>
	while(SD_WriteCmd(CMD24,addr,0xFF) != 0){
   12046:	22ff      	movs	r2, #255	; 0xff
   12048:	6879      	ldr	r1, [r7, #4]
   1204a:	2058      	movs	r0, #88	; 0x58
   1204c:	f7ff fd4a 	bl	11ae4 <SD_WriteCmd>
   12050:	4603      	mov	r3, r0
   12052:	2b00      	cmp	r3, #0
   12054:	d1e7      	bne.n	12026 <SD_WriteSingleBlock+0x16>
	}
	// Send start token
	SD_Send_Byte(0xFE);
   12056:	20fe      	movs	r0, #254	; 0xfe
   12058:	f7ff fd21 	bl	11a9e <SD_Send_Byte>

	// Send data: 512 bytes
	_transfer_tx(buf, NULL, 512);
   1205c:	f44f 7200 	mov.w	r2, #512	; 0x200
   12060:	2100      	movs	r1, #0
   12062:	6838      	ldr	r0, [r7, #0]
   12064:	f7ff fc7a 	bl	1195c <_transfer_tx>

	// wait for Data response
	SET_REPEAT_SD(100);
   12068:	4b16      	ldr	r3, [pc, #88]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   1206a:	2264      	movs	r2, #100	; 0x64
   1206c:	601a      	str	r2, [r3, #0]
	while((temp = SD_Get_Byte()) == 0xFF) { REPORT_REPEAT_ERROR_SD(1) }
   1206e:	e00f      	b.n	12090 <SD_WriteSingleBlock+0x80>
   12070:	4b14      	ldr	r3, [pc, #80]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   12072:	681b      	ldr	r3, [r3, #0]
   12074:	3b01      	subs	r3, #1
   12076:	4a13      	ldr	r2, [pc, #76]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   12078:	6013      	str	r3, [r2, #0]
   1207a:	4b12      	ldr	r3, [pc, #72]	; (120c4 <SD_WriteSingleBlock+0xb4>)
   1207c:	681b      	ldr	r3, [r3, #0]
   1207e:	2b00      	cmp	r3, #0
   12080:	d106      	bne.n	12090 <SD_WriteSingleBlock+0x80>
   12082:	f44f 719d 	mov.w	r1, #314	; 0x13a
   12086:	4810      	ldr	r0, [pc, #64]	; (120c8 <SD_WriteSingleBlock+0xb8>)
   12088:	f7ff fb16 	bl	116b8 <am_util_stdio_printf>
   1208c:	2301      	movs	r3, #1
   1208e:	e014      	b.n	120ba <SD_WriteSingleBlock+0xaa>
   12090:	f7ff fd14 	bl	11abc <SD_Get_Byte>
   12094:	4603      	mov	r3, r0
   12096:	73fb      	strb	r3, [r7, #15]
   12098:	7bfb      	ldrb	r3, [r7, #15]
   1209a:	2bff      	cmp	r3, #255	; 0xff
   1209c:	d0e8      	beq.n	12070 <SD_WriteSingleBlock+0x60>
	temp &= 0x1F;
   1209e:	7bfb      	ldrb	r3, [r7, #15]
   120a0:	f003 031f 	and.w	r3, r3, #31
   120a4:	73fb      	strb	r3, [r7, #15]
	if (temp != 0x05) {
   120a6:	7bfb      	ldrb	r3, [r7, #15]
   120a8:	2b05      	cmp	r3, #5
   120aa:	d001      	beq.n	120b0 <SD_WriteSingleBlock+0xa0>
		//am_util_stdio_printf("Error data resp.: %d\n", temp);
		return 1;
   120ac:	2301      	movs	r3, #1
   120ae:	e004      	b.n	120ba <SD_WriteSingleBlock+0xaa>
	}
	SD_WaitBusy();
   120b0:	f7ff fdb4 	bl	11c1c <SD_WaitBusy>
	SD_WaitReady();
   120b4:	f7ff fd96 	bl	11be4 <SD_WaitReady>
	//am_util_stdio_printf("SD_WriteSingleBlock: %d\n", addr);
	return 0;
   120b8:	2300      	movs	r3, #0
}
   120ba:	4618      	mov	r0, r3
   120bc:	3710      	adds	r7, #16
   120be:	46bd      	mov	sp, r7
   120c0:	bd80      	pop	{r7, pc}
   120c2:	bf00      	nop
   120c4:	10001400 	.word	0x10001400
   120c8:	0001a0a8 	.word	0x0001a0a8

000120cc <SD_WriteMultipleBlock>:

uint32_t SD_WriteMultipleBlock(uint32_t addr, const uint8_t *buf, uint32_t count)
{
   120cc:	b580      	push	{r7, lr}
   120ce:	b086      	sub	sp, #24
   120d0:	af00      	add	r7, sp, #0
   120d2:	60f8      	str	r0, [r7, #12]
   120d4:	60b9      	str	r1, [r7, #8]
   120d6:	607a      	str	r2, [r7, #4]
	uint8_t temp;
	SD_WAIT_READY()
   120d8:	f7ff fd84 	bl	11be4 <SD_WaitReady>
   120dc:	4603      	mov	r3, r0
   120de:	2b00      	cmp	r3, #0
   120e0:	d001      	beq.n	120e6 <SD_WriteMultipleBlock+0x1a>
   120e2:	2301      	movs	r3, #1
   120e4:	e064      	b.n	121b0 <SD_WriteMultipleBlock+0xe4>
	//Write multipleBlock command
	SET_REPEAT_SD(100);
   120e6:	4b34      	ldr	r3, [pc, #208]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   120e8:	2264      	movs	r2, #100	; 0x64
   120ea:	601a      	str	r2, [r3, #0]
	while(SD_WriteCmd(CMD25,addr,0xFF) != 0){
   120ec:	e00f      	b.n	1210e <SD_WriteMultipleBlock+0x42>
		REPORT_REPEAT_ERROR_SD(1)
   120ee:	4b32      	ldr	r3, [pc, #200]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   120f0:	681b      	ldr	r3, [r3, #0]
   120f2:	3b01      	subs	r3, #1
   120f4:	4a30      	ldr	r2, [pc, #192]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   120f6:	6013      	str	r3, [r2, #0]
   120f8:	4b2f      	ldr	r3, [pc, #188]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   120fa:	681b      	ldr	r3, [r3, #0]
   120fc:	2b00      	cmp	r3, #0
   120fe:	d106      	bne.n	1210e <SD_WriteMultipleBlock+0x42>
   12100:	f240 114d 	movw	r1, #333	; 0x14d
   12104:	482d      	ldr	r0, [pc, #180]	; (121bc <SD_WriteMultipleBlock+0xf0>)
   12106:	f7ff fad7 	bl	116b8 <am_util_stdio_printf>
   1210a:	2301      	movs	r3, #1
   1210c:	e050      	b.n	121b0 <SD_WriteMultipleBlock+0xe4>
	while(SD_WriteCmd(CMD25,addr,0xFF) != 0){
   1210e:	22ff      	movs	r2, #255	; 0xff
   12110:	68f9      	ldr	r1, [r7, #12]
   12112:	2059      	movs	r0, #89	; 0x59
   12114:	f7ff fce6 	bl	11ae4 <SD_WriteCmd>
   12118:	4603      	mov	r3, r0
   1211a:	2b00      	cmp	r3, #0
   1211c:	d1e7      	bne.n	120ee <SD_WriteMultipleBlock+0x22>
	}
	do
	{
		// Send start block token
		SD_Send_Byte(0xFC);
   1211e:	20fc      	movs	r0, #252	; 0xfc
   12120:	f7ff fcbd 	bl	11a9e <SD_Send_Byte>

		// Send data: 512 bytes
		_transfer_tx(buf, NULL, 512);
   12124:	f44f 7200 	mov.w	r2, #512	; 0x200
   12128:	2100      	movs	r1, #0
   1212a:	68b8      	ldr	r0, [r7, #8]
   1212c:	f7ff fc16 	bl	1195c <_transfer_tx>

		// wait for Data response
		SET_REPEAT_SD(100);
   12130:	4b21      	ldr	r3, [pc, #132]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   12132:	2264      	movs	r2, #100	; 0x64
   12134:	601a      	str	r2, [r3, #0]
		while((temp = SD_Get_Byte()) == 0xFF) { REPORT_REPEAT_ERROR_SD(1) }
   12136:	e00f      	b.n	12158 <SD_WriteMultipleBlock+0x8c>
   12138:	4b1f      	ldr	r3, [pc, #124]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   1213a:	681b      	ldr	r3, [r3, #0]
   1213c:	3b01      	subs	r3, #1
   1213e:	4a1e      	ldr	r2, [pc, #120]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   12140:	6013      	str	r3, [r2, #0]
   12142:	4b1d      	ldr	r3, [pc, #116]	; (121b8 <SD_WriteMultipleBlock+0xec>)
   12144:	681b      	ldr	r3, [r3, #0]
   12146:	2b00      	cmp	r3, #0
   12148:	d106      	bne.n	12158 <SD_WriteMultipleBlock+0x8c>
   1214a:	f240 1159 	movw	r1, #345	; 0x159
   1214e:	481b      	ldr	r0, [pc, #108]	; (121bc <SD_WriteMultipleBlock+0xf0>)
   12150:	f7ff fab2 	bl	116b8 <am_util_stdio_printf>
   12154:	2301      	movs	r3, #1
   12156:	e02b      	b.n	121b0 <SD_WriteMultipleBlock+0xe4>
   12158:	f7ff fcb0 	bl	11abc <SD_Get_Byte>
   1215c:	4603      	mov	r3, r0
   1215e:	75fb      	strb	r3, [r7, #23]
   12160:	7dfb      	ldrb	r3, [r7, #23]
   12162:	2bff      	cmp	r3, #255	; 0xff
   12164:	d0e8      	beq.n	12138 <SD_WriteMultipleBlock+0x6c>
		temp &= 0x1F;
   12166:	7dfb      	ldrb	r3, [r7, #23]
   12168:	f003 031f 	and.w	r3, r3, #31
   1216c:	75fb      	strb	r3, [r7, #23]
		// Block write failure?
		if (temp != 0x05) {
   1216e:	7dfb      	ldrb	r3, [r7, #23]
   12170:	2b05      	cmp	r3, #5
   12172:	d001      	beq.n	12178 <SD_WriteMultipleBlock+0xac>
			//am_util_stdio_printf("Error data resp.: %d\n", temp);
			return 1;
   12174:	2301      	movs	r3, #1
   12176:	e01b      	b.n	121b0 <SD_WriteMultipleBlock+0xe4>
		}
		// Card goes busy to write the block to the flash
		SD_WaitBusy();
   12178:	f7ff fd50 	bl	11c1c <SD_WaitBusy>
		// Next block
		buf += 512;
   1217c:	68bb      	ldr	r3, [r7, #8]
   1217e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   12182:	60bb      	str	r3, [r7, #8]
	}while (--count);
   12184:	687b      	ldr	r3, [r7, #4]
   12186:	3b01      	subs	r3, #1
   12188:	607b      	str	r3, [r7, #4]
   1218a:	687b      	ldr	r3, [r7, #4]
   1218c:	2b00      	cmp	r3, #0
   1218e:	d1c6      	bne.n	1211e <SD_WriteMultipleBlock+0x52>
	// Send stop transmission token
	SD_Send_Byte(0xFD);
   12190:	20fd      	movs	r0, #253	; 0xfd
   12192:	f7ff fc84 	bl	11a9e <SD_Send_Byte>
	SD_Send_Byte(0xFF);
   12196:	20ff      	movs	r0, #255	; 0xff
   12198:	f7ff fc81 	bl	11a9e <SD_Send_Byte>
	// Wait card to finish
	SD_WaitBusy();
   1219c:	f7ff fd3e 	bl	11c1c <SD_WaitBusy>
	SD_WAIT_READY();
   121a0:	f7ff fd20 	bl	11be4 <SD_WaitReady>
   121a4:	4603      	mov	r3, r0
   121a6:	2b00      	cmp	r3, #0
   121a8:	d001      	beq.n	121ae <SD_WriteMultipleBlock+0xe2>
   121aa:	2301      	movs	r3, #1
   121ac:	e000      	b.n	121b0 <SD_WriteMultipleBlock+0xe4>
	//am_util_stdio_printf("SD_WriteMultipleBlock: %d %d\n", addr, count);
	return 0;
   121ae:	2300      	movs	r3, #0
}
   121b0:	4618      	mov	r0, r3
   121b2:	3718      	adds	r7, #24
   121b4:	46bd      	mov	sp, r7
   121b6:	bd80      	pop	{r7, pc}
   121b8:	10001400 	.word	0x10001400
   121bc:	0001a0a8 	.word	0x0001a0a8

000121c0 <disk_status>:

/*-----------------------------------------------------------------------*/
/* Get Drive Status                                                      */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status ( BYTE pdrv ) {
   121c0:	b480      	push	{r7}
   121c2:	b083      	sub	sp, #12
   121c4:	af00      	add	r7, sp, #0
   121c6:	4603      	mov	r3, r0
   121c8:	71fb      	strb	r3, [r7, #7]
	if(pdrv){
   121ca:	79fb      	ldrb	r3, [r7, #7]
   121cc:	2b00      	cmp	r3, #0
   121ce:	d001      	beq.n	121d4 <disk_status+0x14>
		return STA_NOINIT;
   121d0:	2301      	movs	r3, #1
   121d2:	e000      	b.n	121d6 <disk_status+0x16>
    }
	return RES_OK;
   121d4:	2300      	movs	r3, #0
}
   121d6:	4618      	mov	r0, r3
   121d8:	370c      	adds	r7, #12
   121da:	46bd      	mov	sp, r7
   121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   121e0:	4770      	bx	lr

000121e2 <disk_initialize>:

/*-----------------------------------------------------------------------*/
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize ( BYTE pdrv ) {
   121e2:	b580      	push	{r7, lr}
   121e4:	b084      	sub	sp, #16
   121e6:	af00      	add	r7, sp, #0
   121e8:	4603      	mov	r3, r0
   121ea:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;
	SD_CS(0);
   121ec:	2000      	movs	r0, #0
   121ee:	f7ff fd37 	bl	11c60 <SD_CS>
	stat = SD_init();  //SD card initialization
   121f2:	f7ff fd5b 	bl	11cac <SD_init>
   121f6:	4603      	mov	r3, r0
   121f8:	73fb      	strb	r3, [r7, #15]
	SD_CS(1);
   121fa:	2001      	movs	r0, #1
   121fc:	f7ff fd30 	bl	11c60 <SD_CS>
	if(STA_NODISK == stat) {
   12200:	7bfb      	ldrb	r3, [r7, #15]
   12202:	2b02      	cmp	r3, #2
   12204:	d101      	bne.n	1220a <disk_initialize+0x28>
		return STA_NODISK;
   12206:	2302      	movs	r3, #2
   12208:	e005      	b.n	12216 <disk_initialize+0x34>
	} else if(0 != stat) {
   1220a:	7bfb      	ldrb	r3, [r7, #15]
   1220c:	2b00      	cmp	r3, #0
   1220e:	d001      	beq.n	12214 <disk_initialize+0x32>
		return STA_NOINIT; 
   12210:	2301      	movs	r3, #1
   12212:	e000      	b.n	12216 <disk_initialize+0x34>
	} else {
		return 0;          
   12214:	2300      	movs	r3, #0
	}
}
   12216:	4618      	mov	r0, r3
   12218:	3710      	adds	r7, #16
   1221a:	46bd      	mov	sp, r7
   1221c:	bd80      	pop	{r7, pc}
	...

00012220 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
   12220:	b580      	push	{r7, lr}
   12222:	b086      	sub	sp, #24
   12224:	af00      	add	r7, sp, #0
   12226:	60b9      	str	r1, [r7, #8]
   12228:	607a      	str	r2, [r7, #4]
   1222a:	603b      	str	r3, [r7, #0]
   1222c:	4603      	mov	r3, r0
   1222e:	73fb      	strb	r3, [r7, #15]
    DRESULT res;
    if (pdrv || !count) {   
   12230:	7bfb      	ldrb	r3, [r7, #15]
   12232:	2b00      	cmp	r3, #0
   12234:	d102      	bne.n	1223c <disk_read+0x1c>
   12236:	683b      	ldr	r3, [r7, #0]
   12238:	2b00      	cmp	r3, #0
   1223a:	d101      	bne.n	12240 <disk_read+0x20>
		return RES_PARERR; 
   1223c:	2304      	movs	r3, #4
   1223e:	e01f      	b.n	12280 <disk_read+0x60>
    }

	SD_CS(0);
   12240:	2000      	movs	r0, #0
   12242:	f7ff fd0d 	bl	11c60 <SD_CS>
	if (1 == count) {
   12246:	683b      	ldr	r3, [r7, #0]
   12248:	2b01      	cmp	r3, #1
   1224a:	d106      	bne.n	1225a <disk_read+0x3a>
		res = SD_ReadSingleBlock(sector, buff);
   1224c:	68b9      	ldr	r1, [r7, #8]
   1224e:	6878      	ldr	r0, [r7, #4]
   12250:	f7ff fe1a 	bl	11e88 <SD_ReadSingleBlock>
   12254:	4603      	mov	r3, r0
   12256:	75fb      	strb	r3, [r7, #23]
   12258:	e006      	b.n	12268 <disk_read+0x48>
	} else {
		res = SD_ReadMultipleBlock(sector, buff, count);
   1225a:	683a      	ldr	r2, [r7, #0]
   1225c:	68b9      	ldr	r1, [r7, #8]
   1225e:	6878      	ldr	r0, [r7, #4]
   12260:	f7ff fe6c 	bl	11f3c <SD_ReadMultipleBlock>
   12264:	4603      	mov	r3, r0
   12266:	75fb      	strb	r3, [r7, #23]
	}
	SD_CS(1);
   12268:	2001      	movs	r0, #1
   1226a:	f7ff fcf9 	bl	11c60 <SD_CS>

    if(0x00 == res) {
   1226e:	7dfb      	ldrb	r3, [r7, #23]
   12270:	2b00      	cmp	r3, #0
   12272:	d101      	bne.n	12278 <disk_read+0x58>
        return RES_OK;
   12274:	2300      	movs	r3, #0
   12276:	e003      	b.n	12280 <disk_read+0x60>
    } else {
    	am_util_stdio_printf("Read error.\n");
   12278:	4803      	ldr	r0, [pc, #12]	; (12288 <disk_read+0x68>)
   1227a:	f7ff fa1d 	bl	116b8 <am_util_stdio_printf>
        return RES_ERROR;
   1227e:	2301      	movs	r3, #1
    }
}
   12280:	4618      	mov	r0, r3
   12282:	3718      	adds	r7, #24
   12284:	46bd      	mov	sp, r7
   12286:	bd80      	pop	{r7, pc}
   12288:	0001a128 	.word	0x0001a128

0001228c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
   1228c:	b580      	push	{r7, lr}
   1228e:	b086      	sub	sp, #24
   12290:	af00      	add	r7, sp, #0
   12292:	60b9      	str	r1, [r7, #8]
   12294:	607a      	str	r2, [r7, #4]
   12296:	603b      	str	r3, [r7, #0]
   12298:	4603      	mov	r3, r0
   1229a:	73fb      	strb	r3, [r7, #15]
	DRESULT res;
	if(pdrv || !count) {   
   1229c:	7bfb      	ldrb	r3, [r7, #15]
   1229e:	2b00      	cmp	r3, #0
   122a0:	d102      	bne.n	122a8 <disk_write+0x1c>
   122a2:	683b      	ldr	r3, [r7, #0]
   122a4:	2b00      	cmp	r3, #0
   122a6:	d101      	bne.n	122ac <disk_write+0x20>
		return RES_PARERR; 
   122a8:	2304      	movs	r3, #4
   122aa:	e026      	b.n	122fa <disk_write+0x6e>
	}

	SD_CS(0);
   122ac:	2000      	movs	r0, #0
   122ae:	f7ff fcd7 	bl	11c60 <SD_CS>
	if(1 == count) {
   122b2:	683b      	ldr	r3, [r7, #0]
   122b4:	2b01      	cmp	r3, #1
   122b6:	d106      	bne.n	122c6 <disk_write+0x3a>
		res = SD_WriteSingleBlock(sector, buff);
   122b8:	68b9      	ldr	r1, [r7, #8]
   122ba:	6878      	ldr	r0, [r7, #4]
   122bc:	f7ff fea8 	bl	12010 <SD_WriteSingleBlock>
   122c0:	4603      	mov	r3, r0
   122c2:	75fb      	strb	r3, [r7, #23]
   122c4:	e006      	b.n	122d4 <disk_write+0x48>
	}else{
		res = SD_WriteMultipleBlock(sector, buff, count);
   122c6:	683a      	ldr	r2, [r7, #0]
   122c8:	68b9      	ldr	r1, [r7, #8]
   122ca:	6878      	ldr	r0, [r7, #4]
   122cc:	f7ff fefe 	bl	120cc <SD_WriteMultipleBlock>
   122d0:	4603      	mov	r3, r0
   122d2:	75fb      	strb	r3, [r7, #23]
	}
	SD_CS(1);
   122d4:	2001      	movs	r0, #1
   122d6:	f7ff fcc3 	bl	11c60 <SD_CS>
	
	if(0 == res) {
   122da:	7dfb      	ldrb	r3, [r7, #23]
   122dc:	2b00      	cmp	r3, #0
   122de:	d101      	bne.n	122e4 <disk_write+0x58>
		return RES_OK;
   122e0:	2300      	movs	r3, #0
   122e2:	e00a      	b.n	122fa <disk_write+0x6e>
	}else{
    	am_util_stdio_printf("Write error: %d\n", res);
   122e4:	7dfb      	ldrb	r3, [r7, #23]
   122e6:	4619      	mov	r1, r3
   122e8:	4806      	ldr	r0, [pc, #24]	; (12304 <disk_write+0x78>)
   122ea:	f7ff f9e5 	bl	116b8 <am_util_stdio_printf>
    	am_util_stdio_printf("Args: %d ; %d\n", sector, count);
   122ee:	683a      	ldr	r2, [r7, #0]
   122f0:	6879      	ldr	r1, [r7, #4]
   122f2:	4805      	ldr	r0, [pc, #20]	; (12308 <disk_write+0x7c>)
   122f4:	f7ff f9e0 	bl	116b8 <am_util_stdio_printf>
		return RES_ERROR;
   122f8:	2301      	movs	r3, #1
	}
}
   122fa:	4618      	mov	r0, r3
   122fc:	3718      	adds	r7, #24
   122fe:	46bd      	mov	sp, r7
   12300:	bd80      	pop	{r7, pc}
   12302:	bf00      	nop
   12304:	0001a138 	.word	0x0001a138
   12308:	0001a14c 	.word	0x0001a14c

0001230c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
   1230c:	b580      	push	{r7, lr}
   1230e:	b08a      	sub	sp, #40	; 0x28
   12310:	af00      	add	r7, sp, #0
   12312:	4603      	mov	r3, r0
   12314:	603a      	str	r2, [r7, #0]
   12316:	71fb      	strb	r3, [r7, #7]
   12318:	460b      	mov	r3, r1
   1231a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD csize;
	if (pdrv) {   
   1231c:	79fb      	ldrb	r3, [r7, #7]
   1231e:	2b00      	cmp	r3, #0
   12320:	d001      	beq.n	12326 <disk_ioctl+0x1a>
		return RES_PARERR; 
   12322:	2304      	movs	r3, #4
   12324:	e0a9      	b.n	1247a <disk_ioctl+0x16e>
	}

	SD_CS(0);
   12326:	2000      	movs	r0, #0
   12328:	f7ff fc9a 	bl	11c60 <SD_CS>
	SD_CSD_CID(0x49, csd);
   1232c:	f107 030c 	add.w	r3, r7, #12
   12330:	4619      	mov	r1, r3
   12332:	2049      	movs	r0, #73	; 0x49
   12334:	f7ff fc1e 	bl	11b74 <SD_CSD_CID>
	res = RES_ERROR;
   12338:	2301      	movs	r3, #1
   1233a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (cmd) {
   1233e:	79bb      	ldrb	r3, [r7, #6]
   12340:	2b03      	cmp	r3, #3
   12342:	f200 808b 	bhi.w	1245c <disk_ioctl+0x150>
   12346:	a201      	add	r2, pc, #4	; (adr r2, 1234c <disk_ioctl+0x40>)
   12348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1234c:	0001235d 	.word	0x0001235d
   12350:	00012365 	.word	0x00012365
   12354:	000123ff 	.word	0x000123ff
   12358:	0001240f 	.word	0x0001240f
		case CTRL_SYNC:
			res = RES_OK; 
   1235c:	2300      	movs	r3, #0
   1235e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   12362:	e085      	b.n	12470 <disk_ioctl+0x164>

		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (WORD) */
			if((SD_WriteCmd(0x49,0x00,0x95) == 0) && (SD_CSD_CID(0x49, csd)==0)) {
   12364:	2295      	movs	r2, #149	; 0x95
   12366:	2100      	movs	r1, #0
   12368:	2049      	movs	r0, #73	; 0x49
   1236a:	f7ff fbbb 	bl	11ae4 <SD_WriteCmd>
   1236e:	4603      	mov	r3, r0
   12370:	2b00      	cmp	r3, #0
   12372:	d17a      	bne.n	1246a <disk_ioctl+0x15e>
   12374:	f107 030c 	add.w	r3, r7, #12
   12378:	4619      	mov	r1, r3
   1237a:	2049      	movs	r0, #73	; 0x49
   1237c:	f7ff fbfa 	bl	11b74 <SD_CSD_CID>
   12380:	4603      	mov	r3, r0
   12382:	2b00      	cmp	r3, #0
   12384:	d171      	bne.n	1246a <disk_ioctl+0x15e>
				if((csd[0] >> 6) == 1) { //SD ver 2.0
   12386:	7b3b      	ldrb	r3, [r7, #12]
   12388:	099b      	lsrs	r3, r3, #6
   1238a:	b2db      	uxtb	r3, r3
   1238c:	2b01      	cmp	r3, #1
   1238e:	d10b      	bne.n	123a8 <disk_ioctl+0x9c>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
   12390:	7d7b      	ldrb	r3, [r7, #21]
   12392:	461a      	mov	r2, r3
   12394:	7d3b      	ldrb	r3, [r7, #20]
   12396:	021b      	lsls	r3, r3, #8
   12398:	4413      	add	r3, r2
   1239a:	3301      	adds	r3, #1
   1239c:	623b      	str	r3, [r7, #32]
					*(DWORD*)buff = (DWORD)csize << 10;
   1239e:	6a3b      	ldr	r3, [r7, #32]
   123a0:	029a      	lsls	r2, r3, #10
   123a2:	683b      	ldr	r3, [r7, #0]
   123a4:	601a      	str	r2, [r3, #0]
   123a6:	e026      	b.n	123f6 <disk_ioctl+0xea>
				}else { //SD ver. 1.x
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
   123a8:	7c7b      	ldrb	r3, [r7, #17]
   123aa:	f003 030f 	and.w	r3, r3, #15
   123ae:	b2da      	uxtb	r2, r3
   123b0:	7dbb      	ldrb	r3, [r7, #22]
   123b2:	09db      	lsrs	r3, r3, #7
   123b4:	b2db      	uxtb	r3, r3
   123b6:	4413      	add	r3, r2
   123b8:	b2da      	uxtb	r2, r3
   123ba:	7d7b      	ldrb	r3, [r7, #21]
   123bc:	005b      	lsls	r3, r3, #1
   123be:	b2db      	uxtb	r3, r3
   123c0:	f003 0306 	and.w	r3, r3, #6
   123c4:	b2db      	uxtb	r3, r3
   123c6:	4413      	add	r3, r2
   123c8:	b2db      	uxtb	r3, r3
   123ca:	3302      	adds	r3, #2
   123cc:	77fb      	strb	r3, [r7, #31]
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
   123ce:	7d3b      	ldrb	r3, [r7, #20]
   123d0:	099b      	lsrs	r3, r3, #6
   123d2:	b2db      	uxtb	r3, r3
   123d4:	461a      	mov	r2, r3
   123d6:	7cfb      	ldrb	r3, [r7, #19]
   123d8:	009b      	lsls	r3, r3, #2
   123da:	441a      	add	r2, r3
   123dc:	7cbb      	ldrb	r3, [r7, #18]
   123de:	029b      	lsls	r3, r3, #10
   123e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
   123e4:	4413      	add	r3, r2
   123e6:	3301      	adds	r3, #1
   123e8:	623b      	str	r3, [r7, #32]
					*(DWORD*)buff = (DWORD)csize << (n - 9);
   123ea:	7ffb      	ldrb	r3, [r7, #31]
   123ec:	3b09      	subs	r3, #9
   123ee:	6a3a      	ldr	r2, [r7, #32]
   123f0:	409a      	lsls	r2, r3
   123f2:	683b      	ldr	r3, [r7, #0]
   123f4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
   123f6:	2300      	movs	r3, #0
   123f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
   123fc:	e035      	b.n	1246a <disk_ioctl+0x15e>

		case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
			*(WORD*)buff = 512;
   123fe:	683b      	ldr	r3, [r7, #0]
   12400:	f44f 7200 	mov.w	r2, #512	; 0x200
   12404:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
   12406:	2300      	movs	r3, #0
   12408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   1240c:	e030      	b.n	12470 <disk_ioctl+0x164>

		case GET_BLOCK_SIZE  :
			if ((SD_WriteCmd(0x49,0x00,0x95) == 0) && (SD_CSD_CID(0x49, csd)==0)) {
   1240e:	2295      	movs	r2, #149	; 0x95
   12410:	2100      	movs	r1, #0
   12412:	2049      	movs	r0, #73	; 0x49
   12414:	f7ff fb66 	bl	11ae4 <SD_WriteCmd>
   12418:	4603      	mov	r3, r0
   1241a:	2b00      	cmp	r3, #0
   1241c:	d127      	bne.n	1246e <disk_ioctl+0x162>
   1241e:	f107 030c 	add.w	r3, r7, #12
   12422:	4619      	mov	r1, r3
   12424:	2049      	movs	r0, #73	; 0x49
   12426:	f7ff fba5 	bl	11b74 <SD_CSD_CID>
   1242a:	4603      	mov	r3, r0
   1242c:	2b00      	cmp	r3, #0
   1242e:	d11e      	bne.n	1246e <disk_ioctl+0x162>
				*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
   12430:	7dbb      	ldrb	r3, [r7, #22]
   12432:	005b      	lsls	r3, r3, #1
   12434:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   12438:	7dfa      	ldrb	r2, [r7, #23]
   1243a:	09d2      	lsrs	r2, r2, #7
   1243c:	b2d2      	uxtb	r2, r2
   1243e:	4413      	add	r3, r2
   12440:	1c5a      	adds	r2, r3, #1
   12442:	7e7b      	ldrb	r3, [r7, #25]
   12444:	099b      	lsrs	r3, r3, #6
   12446:	b2db      	uxtb	r3, r3
   12448:	3b01      	subs	r3, #1
   1244a:	fa02 f303 	lsl.w	r3, r2, r3
   1244e:	461a      	mov	r2, r3
   12450:	683b      	ldr	r3, [r7, #0]
   12452:	601a      	str	r2, [r3, #0]
				res = RES_OK;
   12454:	2300      	movs	r3, #0
   12456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
   1245a:	e008      	b.n	1246e <disk_ioctl+0x162>

		default: 
	    	am_util_stdio_printf("IO error.\n");
   1245c:	4809      	ldr	r0, [pc, #36]	; (12484 <disk_ioctl+0x178>)
   1245e:	f7ff f92b 	bl	116b8 <am_util_stdio_printf>
			res = RES_PARERR; 
   12462:	2304      	movs	r3, #4
   12464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
   12468:	e002      	b.n	12470 <disk_ioctl+0x164>
			break;
   1246a:	bf00      	nop
   1246c:	e000      	b.n	12470 <disk_ioctl+0x164>
			break;
   1246e:	bf00      	nop
	}
	SD_CS(1);
   12470:	2001      	movs	r0, #1
   12472:	f7ff fbf5 	bl	11c60 <SD_CS>
	return res;
   12476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
   1247a:	4618      	mov	r0, r3
   1247c:	3728      	adds	r7, #40	; 0x28
   1247e:	46bd      	mov	sp, r7
   12480:	bd80      	pop	{r7, pc}
   12482:	bf00      	nop
   12484:	0001a15c 	.word	0x0001a15c

00012488 <get_fattime>:

DWORD get_fattime (void)
{
   12488:	b480      	push	{r7}
   1248a:	af00      	add	r7, sp, #0
	return 0;
   1248c:	2300      	movs	r3, #0
}
   1248e:	4618      	mov	r0, r3
   12490:	46bd      	mov	sp, r7
   12492:	f85d 7b04 	ldr.w	r7, [sp], #4
   12496:	4770      	bx	lr

00012498 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
   12498:	b480      	push	{r7}
   1249a:	b085      	sub	sp, #20
   1249c:	af00      	add	r7, sp, #0
   1249e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
   124a0:	687b      	ldr	r3, [r7, #4]
   124a2:	3301      	adds	r3, #1
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
   124a8:	89fb      	ldrh	r3, [r7, #14]
   124aa:	021b      	lsls	r3, r3, #8
   124ac:	b21a      	sxth	r2, r3
   124ae:	687b      	ldr	r3, [r7, #4]
   124b0:	781b      	ldrb	r3, [r3, #0]
   124b2:	b21b      	sxth	r3, r3
   124b4:	4313      	orrs	r3, r2
   124b6:	b21b      	sxth	r3, r3
   124b8:	81fb      	strh	r3, [r7, #14]
	return rv;
   124ba:	89fb      	ldrh	r3, [r7, #14]
}
   124bc:	4618      	mov	r0, r3
   124be:	3714      	adds	r7, #20
   124c0:	46bd      	mov	sp, r7
   124c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   124c6:	4770      	bx	lr

000124c8 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
   124c8:	b480      	push	{r7}
   124ca:	b085      	sub	sp, #20
   124cc:	af00      	add	r7, sp, #0
   124ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
   124d0:	687b      	ldr	r3, [r7, #4]
   124d2:	3303      	adds	r3, #3
   124d4:	781b      	ldrb	r3, [r3, #0]
   124d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
   124d8:	68fb      	ldr	r3, [r7, #12]
   124da:	021b      	lsls	r3, r3, #8
   124dc:	687a      	ldr	r2, [r7, #4]
   124de:	3202      	adds	r2, #2
   124e0:	7812      	ldrb	r2, [r2, #0]
   124e2:	4313      	orrs	r3, r2
   124e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
   124e6:	68fb      	ldr	r3, [r7, #12]
   124e8:	021b      	lsls	r3, r3, #8
   124ea:	687a      	ldr	r2, [r7, #4]
   124ec:	3201      	adds	r2, #1
   124ee:	7812      	ldrb	r2, [r2, #0]
   124f0:	4313      	orrs	r3, r2
   124f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
   124f4:	68fb      	ldr	r3, [r7, #12]
   124f6:	021b      	lsls	r3, r3, #8
   124f8:	687a      	ldr	r2, [r7, #4]
   124fa:	7812      	ldrb	r2, [r2, #0]
   124fc:	4313      	orrs	r3, r2
   124fe:	60fb      	str	r3, [r7, #12]
	return rv;
   12500:	68fb      	ldr	r3, [r7, #12]
}
   12502:	4618      	mov	r0, r3
   12504:	3714      	adds	r7, #20
   12506:	46bd      	mov	sp, r7
   12508:	f85d 7b04 	ldr.w	r7, [sp], #4
   1250c:	4770      	bx	lr

0001250e <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
   1250e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   12512:	b08c      	sub	sp, #48	; 0x30
   12514:	af00      	add	r7, sp, #0
   12516:	6278      	str	r0, [r7, #36]	; 0x24
	QWORD rv;

	rv = ptr[7];
   12518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1251a:	3307      	adds	r3, #7
   1251c:	781b      	ldrb	r3, [r3, #0]
   1251e:	b2db      	uxtb	r3, r3
   12520:	f04f 0400 	mov.w	r4, #0
   12524:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[6];
   12528:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
   1252c:	f04f 0100 	mov.w	r1, #0
   12530:	f04f 0200 	mov.w	r2, #0
   12534:	0222      	lsls	r2, r4, #8
   12536:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
   1253a:	0219      	lsls	r1, r3, #8
   1253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1253e:	3306      	adds	r3, #6
   12540:	781b      	ldrb	r3, [r3, #0]
   12542:	b2db      	uxtb	r3, r3
   12544:	f04f 0400 	mov.w	r4, #0
   12548:	ea41 0503 	orr.w	r5, r1, r3
   1254c:	ea42 0604 	orr.w	r6, r2, r4
   12550:	e9c7 560a 	strd	r5, r6, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[5];
   12554:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
   12558:	f04f 0100 	mov.w	r1, #0
   1255c:	f04f 0200 	mov.w	r2, #0
   12560:	0222      	lsls	r2, r4, #8
   12562:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
   12566:	0219      	lsls	r1, r3, #8
   12568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1256a:	3305      	adds	r3, #5
   1256c:	781b      	ldrb	r3, [r3, #0]
   1256e:	b2db      	uxtb	r3, r3
   12570:	f04f 0400 	mov.w	r4, #0
   12574:	ea41 0803 	orr.w	r8, r1, r3
   12578:	ea42 0904 	orr.w	r9, r2, r4
   1257c:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[4];
   12580:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
   12584:	f04f 0100 	mov.w	r1, #0
   12588:	f04f 0200 	mov.w	r2, #0
   1258c:	0222      	lsls	r2, r4, #8
   1258e:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
   12592:	0219      	lsls	r1, r3, #8
   12594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12596:	3304      	adds	r3, #4
   12598:	781b      	ldrb	r3, [r3, #0]
   1259a:	b2db      	uxtb	r3, r3
   1259c:	f04f 0400 	mov.w	r4, #0
   125a0:	ea41 0003 	orr.w	r0, r1, r3
   125a4:	61b8      	str	r0, [r7, #24]
   125a6:	ea42 0304 	orr.w	r3, r2, r4
   125aa:	61fb      	str	r3, [r7, #28]
   125ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   125b0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[3];
   125b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   125b8:	f04f 0300 	mov.w	r3, #0
   125bc:	f04f 0400 	mov.w	r4, #0
   125c0:	0214      	lsls	r4, r2, #8
   125c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
   125c6:	020b      	lsls	r3, r1, #8
   125c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   125ca:	3203      	adds	r2, #3
   125cc:	7812      	ldrb	r2, [r2, #0]
   125ce:	b2d1      	uxtb	r1, r2
   125d0:	f04f 0200 	mov.w	r2, #0
   125d4:	ea43 0001 	orr.w	r0, r3, r1
   125d8:	6138      	str	r0, [r7, #16]
   125da:	ea44 0302 	orr.w	r3, r4, r2
   125de:	617b      	str	r3, [r7, #20]
   125e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
   125e4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[2];
   125e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   125ec:	f04f 0300 	mov.w	r3, #0
   125f0:	f04f 0400 	mov.w	r4, #0
   125f4:	0214      	lsls	r4, r2, #8
   125f6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
   125fa:	020b      	lsls	r3, r1, #8
   125fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   125fe:	3202      	adds	r2, #2
   12600:	7812      	ldrb	r2, [r2, #0]
   12602:	b2d1      	uxtb	r1, r2
   12604:	f04f 0200 	mov.w	r2, #0
   12608:	ea43 0001 	orr.w	r0, r3, r1
   1260c:	60b8      	str	r0, [r7, #8]
   1260e:	ea44 0302 	orr.w	r3, r4, r2
   12612:	60fb      	str	r3, [r7, #12]
   12614:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   12618:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[1];
   1261c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   12620:	f04f 0300 	mov.w	r3, #0
   12624:	f04f 0400 	mov.w	r4, #0
   12628:	0214      	lsls	r4, r2, #8
   1262a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
   1262e:	020b      	lsls	r3, r1, #8
   12630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12632:	3201      	adds	r2, #1
   12634:	7812      	ldrb	r2, [r2, #0]
   12636:	b2d1      	uxtb	r1, r2
   12638:	f04f 0200 	mov.w	r2, #0
   1263c:	ea43 0001 	orr.w	r0, r3, r1
   12640:	6038      	str	r0, [r7, #0]
   12642:	ea44 0302 	orr.w	r3, r4, r2
   12646:	607b      	str	r3, [r7, #4]
   12648:	e9d7 3400 	ldrd	r3, r4, [r7]
   1264c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	rv = rv << 8 | ptr[0];
   12650:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
   12654:	f04f 0300 	mov.w	r3, #0
   12658:	f04f 0400 	mov.w	r4, #0
   1265c:	0214      	lsls	r4, r2, #8
   1265e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
   12662:	020b      	lsls	r3, r1, #8
   12664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12666:	7812      	ldrb	r2, [r2, #0]
   12668:	b2d1      	uxtb	r1, r2
   1266a:	f04f 0200 	mov.w	r2, #0
   1266e:	ea43 0a01 	orr.w	sl, r3, r1
   12672:	ea44 0b02 	orr.w	fp, r4, r2
   12676:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	return rv;
   1267a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
}
   1267e:	4618      	mov	r0, r3
   12680:	4621      	mov	r1, r4
   12682:	3730      	adds	r7, #48	; 0x30
   12684:	46bd      	mov	sp, r7
   12686:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   1268a:	4770      	bx	lr

0001268c <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
   1268c:	b480      	push	{r7}
   1268e:	b083      	sub	sp, #12
   12690:	af00      	add	r7, sp, #0
   12692:	6078      	str	r0, [r7, #4]
   12694:	460b      	mov	r3, r1
   12696:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
   12698:	687b      	ldr	r3, [r7, #4]
   1269a:	1c5a      	adds	r2, r3, #1
   1269c:	607a      	str	r2, [r7, #4]
   1269e:	887a      	ldrh	r2, [r7, #2]
   126a0:	b2d2      	uxtb	r2, r2
   126a2:	701a      	strb	r2, [r3, #0]
   126a4:	887b      	ldrh	r3, [r7, #2]
   126a6:	0a1b      	lsrs	r3, r3, #8
   126a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
   126aa:	687b      	ldr	r3, [r7, #4]
   126ac:	1c5a      	adds	r2, r3, #1
   126ae:	607a      	str	r2, [r7, #4]
   126b0:	887a      	ldrh	r2, [r7, #2]
   126b2:	b2d2      	uxtb	r2, r2
   126b4:	701a      	strb	r2, [r3, #0]
}
   126b6:	bf00      	nop
   126b8:	370c      	adds	r7, #12
   126ba:	46bd      	mov	sp, r7
   126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   126c0:	4770      	bx	lr

000126c2 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
   126c2:	b480      	push	{r7}
   126c4:	b083      	sub	sp, #12
   126c6:	af00      	add	r7, sp, #0
   126c8:	6078      	str	r0, [r7, #4]
   126ca:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   126cc:	687b      	ldr	r3, [r7, #4]
   126ce:	1c5a      	adds	r2, r3, #1
   126d0:	607a      	str	r2, [r7, #4]
   126d2:	683a      	ldr	r2, [r7, #0]
   126d4:	b2d2      	uxtb	r2, r2
   126d6:	701a      	strb	r2, [r3, #0]
   126d8:	683b      	ldr	r3, [r7, #0]
   126da:	0a1b      	lsrs	r3, r3, #8
   126dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   126de:	687b      	ldr	r3, [r7, #4]
   126e0:	1c5a      	adds	r2, r3, #1
   126e2:	607a      	str	r2, [r7, #4]
   126e4:	683a      	ldr	r2, [r7, #0]
   126e6:	b2d2      	uxtb	r2, r2
   126e8:	701a      	strb	r2, [r3, #0]
   126ea:	683b      	ldr	r3, [r7, #0]
   126ec:	0a1b      	lsrs	r3, r3, #8
   126ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
   126f0:	687b      	ldr	r3, [r7, #4]
   126f2:	1c5a      	adds	r2, r3, #1
   126f4:	607a      	str	r2, [r7, #4]
   126f6:	683a      	ldr	r2, [r7, #0]
   126f8:	b2d2      	uxtb	r2, r2
   126fa:	701a      	strb	r2, [r3, #0]
   126fc:	683b      	ldr	r3, [r7, #0]
   126fe:	0a1b      	lsrs	r3, r3, #8
   12700:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
   12702:	687b      	ldr	r3, [r7, #4]
   12704:	1c5a      	adds	r2, r3, #1
   12706:	607a      	str	r2, [r7, #4]
   12708:	683a      	ldr	r2, [r7, #0]
   1270a:	b2d2      	uxtb	r2, r2
   1270c:	701a      	strb	r2, [r3, #0]
}
   1270e:	bf00      	nop
   12710:	370c      	adds	r7, #12
   12712:	46bd      	mov	sp, r7
   12714:	f85d 7b04 	ldr.w	r7, [sp], #4
   12718:	4770      	bx	lr

0001271a <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
   1271a:	b490      	push	{r4, r7}
   1271c:	b084      	sub	sp, #16
   1271e:	af00      	add	r7, sp, #0
   12720:	60f8      	str	r0, [r7, #12]
   12722:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
   12726:	68fb      	ldr	r3, [r7, #12]
   12728:	1c5a      	adds	r2, r3, #1
   1272a:	60fa      	str	r2, [r7, #12]
   1272c:	783a      	ldrb	r2, [r7, #0]
   1272e:	701a      	strb	r2, [r3, #0]
   12730:	e9d7 1200 	ldrd	r1, r2, [r7]
   12734:	f04f 0300 	mov.w	r3, #0
   12738:	f04f 0400 	mov.w	r4, #0
   1273c:	0a0b      	lsrs	r3, r1, #8
   1273e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   12742:	0a14      	lsrs	r4, r2, #8
   12744:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
   12748:	68fb      	ldr	r3, [r7, #12]
   1274a:	1c5a      	adds	r2, r3, #1
   1274c:	60fa      	str	r2, [r7, #12]
   1274e:	783a      	ldrb	r2, [r7, #0]
   12750:	701a      	strb	r2, [r3, #0]
   12752:	e9d7 1200 	ldrd	r1, r2, [r7]
   12756:	f04f 0300 	mov.w	r3, #0
   1275a:	f04f 0400 	mov.w	r4, #0
   1275e:	0a0b      	lsrs	r3, r1, #8
   12760:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   12764:	0a14      	lsrs	r4, r2, #8
   12766:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
   1276a:	68fb      	ldr	r3, [r7, #12]
   1276c:	1c5a      	adds	r2, r3, #1
   1276e:	60fa      	str	r2, [r7, #12]
   12770:	783a      	ldrb	r2, [r7, #0]
   12772:	701a      	strb	r2, [r3, #0]
   12774:	e9d7 1200 	ldrd	r1, r2, [r7]
   12778:	f04f 0300 	mov.w	r3, #0
   1277c:	f04f 0400 	mov.w	r4, #0
   12780:	0a0b      	lsrs	r3, r1, #8
   12782:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   12786:	0a14      	lsrs	r4, r2, #8
   12788:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
   1278c:	68fb      	ldr	r3, [r7, #12]
   1278e:	1c5a      	adds	r2, r3, #1
   12790:	60fa      	str	r2, [r7, #12]
   12792:	783a      	ldrb	r2, [r7, #0]
   12794:	701a      	strb	r2, [r3, #0]
   12796:	e9d7 1200 	ldrd	r1, r2, [r7]
   1279a:	f04f 0300 	mov.w	r3, #0
   1279e:	f04f 0400 	mov.w	r4, #0
   127a2:	0a0b      	lsrs	r3, r1, #8
   127a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   127a8:	0a14      	lsrs	r4, r2, #8
   127aa:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
   127ae:	68fb      	ldr	r3, [r7, #12]
   127b0:	1c5a      	adds	r2, r3, #1
   127b2:	60fa      	str	r2, [r7, #12]
   127b4:	783a      	ldrb	r2, [r7, #0]
   127b6:	701a      	strb	r2, [r3, #0]
   127b8:	e9d7 1200 	ldrd	r1, r2, [r7]
   127bc:	f04f 0300 	mov.w	r3, #0
   127c0:	f04f 0400 	mov.w	r4, #0
   127c4:	0a0b      	lsrs	r3, r1, #8
   127c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   127ca:	0a14      	lsrs	r4, r2, #8
   127cc:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
   127d0:	68fb      	ldr	r3, [r7, #12]
   127d2:	1c5a      	adds	r2, r3, #1
   127d4:	60fa      	str	r2, [r7, #12]
   127d6:	783a      	ldrb	r2, [r7, #0]
   127d8:	701a      	strb	r2, [r3, #0]
   127da:	e9d7 1200 	ldrd	r1, r2, [r7]
   127de:	f04f 0300 	mov.w	r3, #0
   127e2:	f04f 0400 	mov.w	r4, #0
   127e6:	0a0b      	lsrs	r3, r1, #8
   127e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   127ec:	0a14      	lsrs	r4, r2, #8
   127ee:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
   127f2:	68fb      	ldr	r3, [r7, #12]
   127f4:	1c5a      	adds	r2, r3, #1
   127f6:	60fa      	str	r2, [r7, #12]
   127f8:	783a      	ldrb	r2, [r7, #0]
   127fa:	701a      	strb	r2, [r3, #0]
   127fc:	e9d7 1200 	ldrd	r1, r2, [r7]
   12800:	f04f 0300 	mov.w	r3, #0
   12804:	f04f 0400 	mov.w	r4, #0
   12808:	0a0b      	lsrs	r3, r1, #8
   1280a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1280e:	0a14      	lsrs	r4, r2, #8
   12810:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
   12814:	68fb      	ldr	r3, [r7, #12]
   12816:	1c5a      	adds	r2, r3, #1
   12818:	60fa      	str	r2, [r7, #12]
   1281a:	783a      	ldrb	r2, [r7, #0]
   1281c:	701a      	strb	r2, [r3, #0]
}
   1281e:	bf00      	nop
   12820:	3710      	adds	r7, #16
   12822:	46bd      	mov	sp, r7
   12824:	bc90      	pop	{r4, r7}
   12826:	4770      	bx	lr

00012828 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
   12828:	b480      	push	{r7}
   1282a:	b087      	sub	sp, #28
   1282c:	af00      	add	r7, sp, #0
   1282e:	60f8      	str	r0, [r7, #12]
   12830:	60b9      	str	r1, [r7, #8]
   12832:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   12834:	68fb      	ldr	r3, [r7, #12]
   12836:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   12838:	68bb      	ldr	r3, [r7, #8]
   1283a:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
   1283c:	687b      	ldr	r3, [r7, #4]
   1283e:	2b00      	cmp	r3, #0
   12840:	d00d      	beq.n	1285e <mem_cpy+0x36>
		do {
			*d++ = *s++;
   12842:	693a      	ldr	r2, [r7, #16]
   12844:	1c53      	adds	r3, r2, #1
   12846:	613b      	str	r3, [r7, #16]
   12848:	697b      	ldr	r3, [r7, #20]
   1284a:	1c59      	adds	r1, r3, #1
   1284c:	6179      	str	r1, [r7, #20]
   1284e:	7812      	ldrb	r2, [r2, #0]
   12850:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
   12852:	687b      	ldr	r3, [r7, #4]
   12854:	3b01      	subs	r3, #1
   12856:	607b      	str	r3, [r7, #4]
   12858:	687b      	ldr	r3, [r7, #4]
   1285a:	2b00      	cmp	r3, #0
   1285c:	d1f1      	bne.n	12842 <mem_cpy+0x1a>
	}
}
   1285e:	bf00      	nop
   12860:	371c      	adds	r7, #28
   12862:	46bd      	mov	sp, r7
   12864:	f85d 7b04 	ldr.w	r7, [sp], #4
   12868:	4770      	bx	lr

0001286a <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
   1286a:	b480      	push	{r7}
   1286c:	b087      	sub	sp, #28
   1286e:	af00      	add	r7, sp, #0
   12870:	60f8      	str	r0, [r7, #12]
   12872:	60b9      	str	r1, [r7, #8]
   12874:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   12876:	68fb      	ldr	r3, [r7, #12]
   12878:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
   1287a:	697b      	ldr	r3, [r7, #20]
   1287c:	1c5a      	adds	r2, r3, #1
   1287e:	617a      	str	r2, [r7, #20]
   12880:	68ba      	ldr	r2, [r7, #8]
   12882:	b2d2      	uxtb	r2, r2
   12884:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
   12886:	687b      	ldr	r3, [r7, #4]
   12888:	3b01      	subs	r3, #1
   1288a:	607b      	str	r3, [r7, #4]
   1288c:	687b      	ldr	r3, [r7, #4]
   1288e:	2b00      	cmp	r3, #0
   12890:	d1f3      	bne.n	1287a <mem_set+0x10>
}
   12892:	bf00      	nop
   12894:	371c      	adds	r7, #28
   12896:	46bd      	mov	sp, r7
   12898:	f85d 7b04 	ldr.w	r7, [sp], #4
   1289c:	4770      	bx	lr

0001289e <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
   1289e:	b480      	push	{r7}
   128a0:	b089      	sub	sp, #36	; 0x24
   128a2:	af00      	add	r7, sp, #0
   128a4:	60f8      	str	r0, [r7, #12]
   128a6:	60b9      	str	r1, [r7, #8]
   128a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   128aa:	68fb      	ldr	r3, [r7, #12]
   128ac:	61fb      	str	r3, [r7, #28]
   128ae:	68bb      	ldr	r3, [r7, #8]
   128b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
   128b2:	2300      	movs	r3, #0
   128b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
   128b6:	69fb      	ldr	r3, [r7, #28]
   128b8:	1c5a      	adds	r2, r3, #1
   128ba:	61fa      	str	r2, [r7, #28]
   128bc:	781b      	ldrb	r3, [r3, #0]
   128be:	4619      	mov	r1, r3
   128c0:	69bb      	ldr	r3, [r7, #24]
   128c2:	1c5a      	adds	r2, r3, #1
   128c4:	61ba      	str	r2, [r7, #24]
   128c6:	781b      	ldrb	r3, [r3, #0]
   128c8:	1acb      	subs	r3, r1, r3
   128ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
   128cc:	687b      	ldr	r3, [r7, #4]
   128ce:	3b01      	subs	r3, #1
   128d0:	607b      	str	r3, [r7, #4]
   128d2:	687b      	ldr	r3, [r7, #4]
   128d4:	2b00      	cmp	r3, #0
   128d6:	d002      	beq.n	128de <mem_cmp+0x40>
   128d8:	697b      	ldr	r3, [r7, #20]
   128da:	2b00      	cmp	r3, #0
   128dc:	d0eb      	beq.n	128b6 <mem_cmp+0x18>

	return r;
   128de:	697b      	ldr	r3, [r7, #20]
}
   128e0:	4618      	mov	r0, r3
   128e2:	3724      	adds	r7, #36	; 0x24
   128e4:	46bd      	mov	sp, r7
   128e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   128ea:	4770      	bx	lr

000128ec <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
   128ec:	b480      	push	{r7}
   128ee:	b083      	sub	sp, #12
   128f0:	af00      	add	r7, sp, #0
   128f2:	6078      	str	r0, [r7, #4]
   128f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   128f6:	e002      	b.n	128fe <chk_chr+0x12>
   128f8:	687b      	ldr	r3, [r7, #4]
   128fa:	3301      	adds	r3, #1
   128fc:	607b      	str	r3, [r7, #4]
   128fe:	687b      	ldr	r3, [r7, #4]
   12900:	781b      	ldrb	r3, [r3, #0]
   12902:	2b00      	cmp	r3, #0
   12904:	d005      	beq.n	12912 <chk_chr+0x26>
   12906:	687b      	ldr	r3, [r7, #4]
   12908:	781b      	ldrb	r3, [r3, #0]
   1290a:	461a      	mov	r2, r3
   1290c:	683b      	ldr	r3, [r7, #0]
   1290e:	4293      	cmp	r3, r2
   12910:	d1f2      	bne.n	128f8 <chk_chr+0xc>
	return *str;
   12912:	687b      	ldr	r3, [r7, #4]
   12914:	781b      	ldrb	r3, [r3, #0]
}
   12916:	4618      	mov	r0, r3
   12918:	370c      	adds	r7, #12
   1291a:	46bd      	mov	sp, r7
   1291c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12920:	4770      	bx	lr

00012922 <dbc_1st>:


/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
   12922:	b480      	push	{r7}
   12924:	b083      	sub	sp, #12
   12926:	af00      	add	r7, sp, #0
   12928:	4603      	mov	r3, r0
   1292a:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
   1292c:	2281      	movs	r2, #129	; 0x81
   1292e:	79fb      	ldrb	r3, [r7, #7]
   12930:	4293      	cmp	r3, r2
   12932:	d30f      	bcc.n	12954 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
   12934:	229f      	movs	r2, #159	; 0x9f
   12936:	79fb      	ldrb	r3, [r7, #7]
   12938:	4293      	cmp	r3, r2
   1293a:	d801      	bhi.n	12940 <dbc_1st+0x1e>
   1293c:	2301      	movs	r3, #1
   1293e:	e00a      	b.n	12956 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
   12940:	22e0      	movs	r2, #224	; 0xe0
   12942:	79fb      	ldrb	r3, [r7, #7]
   12944:	4293      	cmp	r3, r2
   12946:	d305      	bcc.n	12954 <dbc_1st+0x32>
   12948:	22fc      	movs	r2, #252	; 0xfc
   1294a:	79fb      	ldrb	r3, [r7, #7]
   1294c:	4293      	cmp	r3, r2
   1294e:	d801      	bhi.n	12954 <dbc_1st+0x32>
   12950:	2301      	movs	r3, #1
   12952:	e000      	b.n	12956 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
   12954:	2300      	movs	r3, #0
}
   12956:	4618      	mov	r0, r3
   12958:	370c      	adds	r7, #12
   1295a:	46bd      	mov	sp, r7
   1295c:	f85d 7b04 	ldr.w	r7, [sp], #4
   12960:	4770      	bx	lr

00012962 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
   12962:	b480      	push	{r7}
   12964:	b083      	sub	sp, #12
   12966:	af00      	add	r7, sp, #0
   12968:	4603      	mov	r3, r0
   1296a:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
   1296c:	2240      	movs	r2, #64	; 0x40
   1296e:	79fb      	ldrb	r3, [r7, #7]
   12970:	4293      	cmp	r3, r2
   12972:	d319      	bcc.n	129a8 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
   12974:	227e      	movs	r2, #126	; 0x7e
   12976:	79fb      	ldrb	r3, [r7, #7]
   12978:	4293      	cmp	r3, r2
   1297a:	d801      	bhi.n	12980 <dbc_2nd+0x1e>
   1297c:	2301      	movs	r3, #1
   1297e:	e014      	b.n	129aa <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
   12980:	2280      	movs	r2, #128	; 0x80
   12982:	79fb      	ldrb	r3, [r7, #7]
   12984:	4293      	cmp	r3, r2
   12986:	d305      	bcc.n	12994 <dbc_2nd+0x32>
   12988:	22fc      	movs	r2, #252	; 0xfc
   1298a:	79fb      	ldrb	r3, [r7, #7]
   1298c:	4293      	cmp	r3, r2
   1298e:	d801      	bhi.n	12994 <dbc_2nd+0x32>
   12990:	2301      	movs	r3, #1
   12992:	e00a      	b.n	129aa <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
   12994:	2200      	movs	r2, #0
   12996:	79fb      	ldrb	r3, [r7, #7]
   12998:	4293      	cmp	r3, r2
   1299a:	d305      	bcc.n	129a8 <dbc_2nd+0x46>
   1299c:	2200      	movs	r2, #0
   1299e:	79fb      	ldrb	r3, [r7, #7]
   129a0:	4293      	cmp	r3, r2
   129a2:	d801      	bhi.n	129a8 <dbc_2nd+0x46>
   129a4:	2301      	movs	r3, #1
   129a6:	e000      	b.n	129aa <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
   129a8:	2300      	movs	r3, #0
}
   129aa:	4618      	mov	r0, r3
   129ac:	370c      	adds	r7, #12
   129ae:	46bd      	mov	sp, r7
   129b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   129b4:	4770      	bx	lr

000129b6 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
   129b6:	b580      	push	{r7, lr}
   129b8:	b086      	sub	sp, #24
   129ba:	af00      	add	r7, sp, #0
   129bc:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
   129be:	687b      	ldr	r3, [r7, #4]
   129c0:	681b      	ldr	r3, [r3, #0]
   129c2:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
   129c4:	697b      	ldr	r3, [r7, #20]
   129c6:	1c5a      	adds	r2, r3, #1
   129c8:	617a      	str	r2, [r7, #20]
   129ca:	781b      	ldrb	r3, [r3, #0]
   129cc:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
   129ce:	8a7b      	ldrh	r3, [r7, #18]
   129d0:	b2db      	uxtb	r3, r3
   129d2:	4618      	mov	r0, r3
   129d4:	f7ff ffa5 	bl	12922 <dbc_1st>
   129d8:	4603      	mov	r3, r0
   129da:	2b00      	cmp	r3, #0
   129dc:	d015      	beq.n	12a0a <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
   129de:	697b      	ldr	r3, [r7, #20]
   129e0:	1c5a      	adds	r2, r3, #1
   129e2:	617a      	str	r2, [r7, #20]
   129e4:	781b      	ldrb	r3, [r3, #0]
   129e6:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
   129e8:	7c7b      	ldrb	r3, [r7, #17]
   129ea:	4618      	mov	r0, r3
   129ec:	f7ff ffb9 	bl	12962 <dbc_2nd>
   129f0:	4603      	mov	r3, r0
   129f2:	2b00      	cmp	r3, #0
   129f4:	d102      	bne.n	129fc <tchar2uni+0x46>
   129f6:	f04f 33ff 	mov.w	r3, #4294967295
   129fa:	e01d      	b.n	12a38 <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
   129fc:	8a7b      	ldrh	r3, [r7, #18]
   129fe:	021b      	lsls	r3, r3, #8
   12a00:	b29a      	uxth	r2, r3
   12a02:	7c7b      	ldrb	r3, [r7, #17]
   12a04:	b29b      	uxth	r3, r3
   12a06:	4413      	add	r3, r2
   12a08:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
   12a0a:	8a7b      	ldrh	r3, [r7, #18]
   12a0c:	2b00      	cmp	r3, #0
   12a0e:	d00d      	beq.n	12a2c <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
   12a10:	8a7b      	ldrh	r3, [r7, #18]
   12a12:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   12a16:	4618      	mov	r0, r3
   12a18:	f005 f950 	bl	17cbc <ff_oem2uni>
   12a1c:	4603      	mov	r3, r0
   12a1e:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
   12a20:	8a7b      	ldrh	r3, [r7, #18]
   12a22:	2b00      	cmp	r3, #0
   12a24:	d102      	bne.n	12a2c <tchar2uni+0x76>
   12a26:	f04f 33ff 	mov.w	r3, #4294967295
   12a2a:	e005      	b.n	12a38 <tchar2uni+0x82>
	}
	uc = wc;
   12a2c:	8a7b      	ldrh	r3, [r7, #18]
   12a2e:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
   12a30:	687b      	ldr	r3, [r7, #4]
   12a32:	697a      	ldr	r2, [r7, #20]
   12a34:	601a      	str	r2, [r3, #0]
	return uc;
   12a36:	68fb      	ldr	r3, [r7, #12]
}
   12a38:	4618      	mov	r0, r3
   12a3a:	3718      	adds	r7, #24
   12a3c:	46bd      	mov	sp, r7
   12a3e:	bd80      	pop	{r7, pc}

00012a40 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
   12a40:	b580      	push	{r7, lr}
   12a42:	b084      	sub	sp, #16
   12a44:	af00      	add	r7, sp, #0
   12a46:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
   12a48:	2300      	movs	r3, #0
   12a4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
   12a4c:	687b      	ldr	r3, [r7, #4]
   12a4e:	78db      	ldrb	r3, [r3, #3]
   12a50:	2b00      	cmp	r3, #0
   12a52:	d02c      	beq.n	12aae <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	7858      	ldrb	r0, [r3, #1]
   12a58:	687b      	ldr	r3, [r7, #4]
   12a5a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
   12a5e:	687b      	ldr	r3, [r7, #4]
   12a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12a62:	2301      	movs	r3, #1
   12a64:	f7ff fc12 	bl	1228c <disk_write>
   12a68:	4603      	mov	r3, r0
   12a6a:	2b00      	cmp	r3, #0
   12a6c:	d11d      	bne.n	12aaa <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
   12a6e:	687b      	ldr	r3, [r7, #4]
   12a70:	2200      	movs	r2, #0
   12a72:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
   12a74:	687b      	ldr	r3, [r7, #4]
   12a76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12a78:	687b      	ldr	r3, [r7, #4]
   12a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a7c:	1ad2      	subs	r2, r2, r3
   12a7e:	687b      	ldr	r3, [r7, #4]
   12a80:	6a1b      	ldr	r3, [r3, #32]
   12a82:	429a      	cmp	r2, r3
   12a84:	d213      	bcs.n	12aae <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
   12a86:	687b      	ldr	r3, [r7, #4]
   12a88:	789b      	ldrb	r3, [r3, #2]
   12a8a:	2b02      	cmp	r3, #2
   12a8c:	d10f      	bne.n	12aae <sync_window+0x6e>
   12a8e:	687b      	ldr	r3, [r7, #4]
   12a90:	7858      	ldrb	r0, [r3, #1]
   12a92:	687b      	ldr	r3, [r7, #4]
   12a94:	f103 013c 	add.w	r1, r3, #60	; 0x3c
   12a98:	687b      	ldr	r3, [r7, #4]
   12a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12a9c:	687b      	ldr	r3, [r7, #4]
   12a9e:	6a1b      	ldr	r3, [r3, #32]
   12aa0:	441a      	add	r2, r3
   12aa2:	2301      	movs	r3, #1
   12aa4:	f7ff fbf2 	bl	1228c <disk_write>
   12aa8:	e001      	b.n	12aae <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
   12aaa:	2301      	movs	r3, #1
   12aac:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
   12aae:	7bfb      	ldrb	r3, [r7, #15]
}
   12ab0:	4618      	mov	r0, r3
   12ab2:	3710      	adds	r7, #16
   12ab4:	46bd      	mov	sp, r7
   12ab6:	bd80      	pop	{r7, pc}

00012ab8 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
   12ab8:	b580      	push	{r7, lr}
   12aba:	b084      	sub	sp, #16
   12abc:	af00      	add	r7, sp, #0
   12abe:	6078      	str	r0, [r7, #4]
   12ac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
   12ac2:	2300      	movs	r3, #0
   12ac4:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
   12ac6:	687b      	ldr	r3, [r7, #4]
   12ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   12aca:	683a      	ldr	r2, [r7, #0]
   12acc:	429a      	cmp	r2, r3
   12ace:	d01b      	beq.n	12b08 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
   12ad0:	6878      	ldr	r0, [r7, #4]
   12ad2:	f7ff ffb5 	bl	12a40 <sync_window>
   12ad6:	4603      	mov	r3, r0
   12ad8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
   12ada:	7bfb      	ldrb	r3, [r7, #15]
   12adc:	2b00      	cmp	r3, #0
   12ade:	d113      	bne.n	12b08 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
   12ae0:	687b      	ldr	r3, [r7, #4]
   12ae2:	7858      	ldrb	r0, [r3, #1]
   12ae4:	687b      	ldr	r3, [r7, #4]
   12ae6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
   12aea:	2301      	movs	r3, #1
   12aec:	683a      	ldr	r2, [r7, #0]
   12aee:	f7ff fb97 	bl	12220 <disk_read>
   12af2:	4603      	mov	r3, r0
   12af4:	2b00      	cmp	r3, #0
   12af6:	d004      	beq.n	12b02 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
   12af8:	f04f 33ff 	mov.w	r3, #4294967295
   12afc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
   12afe:	2301      	movs	r3, #1
   12b00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
   12b02:	687b      	ldr	r3, [r7, #4]
   12b04:	683a      	ldr	r2, [r7, #0]
   12b06:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
   12b08:	7bfb      	ldrb	r3, [r7, #15]
}
   12b0a:	4618      	mov	r0, r3
   12b0c:	3710      	adds	r7, #16
   12b0e:	46bd      	mov	sp, r7
   12b10:	bd80      	pop	{r7, pc}
	...

00012b14 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
   12b14:	b580      	push	{r7, lr}
   12b16:	b084      	sub	sp, #16
   12b18:	af00      	add	r7, sp, #0
   12b1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
   12b1c:	6878      	ldr	r0, [r7, #4]
   12b1e:	f7ff ff8f 	bl	12a40 <sync_window>
   12b22:	4603      	mov	r3, r0
   12b24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
   12b26:	7bfb      	ldrb	r3, [r7, #15]
   12b28:	2b00      	cmp	r3, #0
   12b2a:	d158      	bne.n	12bde <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
   12b2c:	687b      	ldr	r3, [r7, #4]
   12b2e:	781b      	ldrb	r3, [r3, #0]
   12b30:	2b03      	cmp	r3, #3
   12b32:	d148      	bne.n	12bc6 <sync_fs+0xb2>
   12b34:	687b      	ldr	r3, [r7, #4]
   12b36:	791b      	ldrb	r3, [r3, #4]
   12b38:	2b01      	cmp	r3, #1
   12b3a:	d144      	bne.n	12bc6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
   12b3c:	687b      	ldr	r3, [r7, #4]
   12b3e:	333c      	adds	r3, #60	; 0x3c
   12b40:	f44f 7200 	mov.w	r2, #512	; 0x200
   12b44:	2100      	movs	r1, #0
   12b46:	4618      	mov	r0, r3
   12b48:	f7ff fe8f 	bl	1286a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
   12b4c:	687b      	ldr	r3, [r7, #4]
   12b4e:	333c      	adds	r3, #60	; 0x3c
   12b50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
   12b54:	f64a 2155 	movw	r1, #43605	; 0xaa55
   12b58:	4618      	mov	r0, r3
   12b5a:	f7ff fd97 	bl	1268c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
   12b5e:	687b      	ldr	r3, [r7, #4]
   12b60:	333c      	adds	r3, #60	; 0x3c
   12b62:	4921      	ldr	r1, [pc, #132]	; (12be8 <sync_fs+0xd4>)
   12b64:	4618      	mov	r0, r3
   12b66:	f7ff fdac 	bl	126c2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
   12b6a:	687b      	ldr	r3, [r7, #4]
   12b6c:	333c      	adds	r3, #60	; 0x3c
   12b6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
   12b72:	491e      	ldr	r1, [pc, #120]	; (12bec <sync_fs+0xd8>)
   12b74:	4618      	mov	r0, r3
   12b76:	f7ff fda4 	bl	126c2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
   12b7a:	687b      	ldr	r3, [r7, #4]
   12b7c:	333c      	adds	r3, #60	; 0x3c
   12b7e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
   12b82:	687b      	ldr	r3, [r7, #4]
   12b84:	699b      	ldr	r3, [r3, #24]
   12b86:	4619      	mov	r1, r3
   12b88:	4610      	mov	r0, r2
   12b8a:	f7ff fd9a 	bl	126c2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
   12b8e:	687b      	ldr	r3, [r7, #4]
   12b90:	333c      	adds	r3, #60	; 0x3c
   12b92:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
   12b96:	687b      	ldr	r3, [r7, #4]
   12b98:	695b      	ldr	r3, [r3, #20]
   12b9a:	4619      	mov	r1, r3
   12b9c:	4610      	mov	r0, r2
   12b9e:	f7ff fd90 	bl	126c2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
   12ba2:	687b      	ldr	r3, [r7, #4]
   12ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12ba6:	1c5a      	adds	r2, r3, #1
   12ba8:	687b      	ldr	r3, [r7, #4]
   12baa:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
   12bac:	687b      	ldr	r3, [r7, #4]
   12bae:	7858      	ldrb	r0, [r3, #1]
   12bb0:	687b      	ldr	r3, [r7, #4]
   12bb2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
   12bb6:	687b      	ldr	r3, [r7, #4]
   12bb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   12bba:	2301      	movs	r3, #1
   12bbc:	f7ff fb66 	bl	1228c <disk_write>
			fs->fsi_flag = 0;
   12bc0:	687b      	ldr	r3, [r7, #4]
   12bc2:	2200      	movs	r2, #0
   12bc4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
   12bc6:	687b      	ldr	r3, [r7, #4]
   12bc8:	785b      	ldrb	r3, [r3, #1]
   12bca:	2200      	movs	r2, #0
   12bcc:	2100      	movs	r1, #0
   12bce:	4618      	mov	r0, r3
   12bd0:	f7ff fb9c 	bl	1230c <disk_ioctl>
   12bd4:	4603      	mov	r3, r0
   12bd6:	2b00      	cmp	r3, #0
   12bd8:	d001      	beq.n	12bde <sync_fs+0xca>
   12bda:	2301      	movs	r3, #1
   12bdc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
   12bde:	7bfb      	ldrb	r3, [r7, #15]
}
   12be0:	4618      	mov	r0, r3
   12be2:	3710      	adds	r7, #16
   12be4:	46bd      	mov	sp, r7
   12be6:	bd80      	pop	{r7, pc}
   12be8:	41615252 	.word	0x41615252
   12bec:	61417272 	.word	0x61417272

00012bf0 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
   12bf0:	b480      	push	{r7}
   12bf2:	b083      	sub	sp, #12
   12bf4:	af00      	add	r7, sp, #0
   12bf6:	6078      	str	r0, [r7, #4]
   12bf8:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
   12bfa:	683b      	ldr	r3, [r7, #0]
   12bfc:	3b02      	subs	r3, #2
   12bfe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
   12c00:	687b      	ldr	r3, [r7, #4]
   12c02:	69db      	ldr	r3, [r3, #28]
   12c04:	3b02      	subs	r3, #2
   12c06:	683a      	ldr	r2, [r7, #0]
   12c08:	429a      	cmp	r2, r3
   12c0a:	d301      	bcc.n	12c10 <clst2sect+0x20>
   12c0c:	2300      	movs	r3, #0
   12c0e:	e008      	b.n	12c22 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
   12c10:	687b      	ldr	r3, [r7, #4]
   12c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   12c14:	687b      	ldr	r3, [r7, #4]
   12c16:	895b      	ldrh	r3, [r3, #10]
   12c18:	4619      	mov	r1, r3
   12c1a:	683b      	ldr	r3, [r7, #0]
   12c1c:	fb03 f301 	mul.w	r3, r3, r1
   12c20:	4413      	add	r3, r2
}
   12c22:	4618      	mov	r0, r3
   12c24:	370c      	adds	r7, #12
   12c26:	46bd      	mov	sp, r7
   12c28:	f85d 7b04 	ldr.w	r7, [sp], #4
   12c2c:	4770      	bx	lr
	...

00012c30 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
   12c30:	b590      	push	{r4, r7, lr}
   12c32:	b089      	sub	sp, #36	; 0x24
   12c34:	af00      	add	r7, sp, #0
   12c36:	6078      	str	r0, [r7, #4]
   12c38:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
   12c3a:	687a      	ldr	r2, [r7, #4]
   12c3c:	6812      	ldr	r2, [r2, #0]
   12c3e:	61ba      	str	r2, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
   12c40:	683a      	ldr	r2, [r7, #0]
   12c42:	2a01      	cmp	r2, #1
   12c44:	d904      	bls.n	12c50 <get_fat+0x20>
   12c46:	69ba      	ldr	r2, [r7, #24]
   12c48:	69d2      	ldr	r2, [r2, #28]
   12c4a:	6839      	ldr	r1, [r7, #0]
   12c4c:	4291      	cmp	r1, r2
   12c4e:	d302      	bcc.n	12c56 <get_fat+0x26>
		val = 1;	/* Internal error */
   12c50:	2301      	movs	r3, #1
   12c52:	61fb      	str	r3, [r7, #28]
   12c54:	e10b      	b.n	12e6e <get_fat+0x23e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
   12c56:	f04f 32ff 	mov.w	r2, #4294967295
   12c5a:	61fa      	str	r2, [r7, #28]

		switch (fs->fs_type) {
   12c5c:	69ba      	ldr	r2, [r7, #24]
   12c5e:	7812      	ldrb	r2, [r2, #0]
   12c60:	3a01      	subs	r2, #1
   12c62:	2a03      	cmp	r2, #3
   12c64:	f200 80f7 	bhi.w	12e56 <get_fat+0x226>
   12c68:	a101      	add	r1, pc, #4	; (adr r1, 12c70 <get_fat+0x40>)
   12c6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   12c6e:	bf00      	nop
   12c70:	00012c81 	.word	0x00012c81
   12c74:	00012d09 	.word	0x00012d09
   12c78:	00012d3f 	.word	0x00012d3f
   12c7c:	00012d79 	.word	0x00012d79
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
   12c80:	683b      	ldr	r3, [r7, #0]
   12c82:	617b      	str	r3, [r7, #20]
   12c84:	697b      	ldr	r3, [r7, #20]
   12c86:	085b      	lsrs	r3, r3, #1
   12c88:	697a      	ldr	r2, [r7, #20]
   12c8a:	4413      	add	r3, r2
   12c8c:	617b      	str	r3, [r7, #20]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12c8e:	69bb      	ldr	r3, [r7, #24]
   12c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12c92:	697b      	ldr	r3, [r7, #20]
   12c94:	0a5b      	lsrs	r3, r3, #9
   12c96:	4413      	add	r3, r2
   12c98:	4619      	mov	r1, r3
   12c9a:	69b8      	ldr	r0, [r7, #24]
   12c9c:	f7ff ff0c 	bl	12ab8 <move_window>
   12ca0:	4603      	mov	r3, r0
   12ca2:	2b00      	cmp	r3, #0
   12ca4:	f040 80da 	bne.w	12e5c <get_fat+0x22c>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
   12ca8:	697b      	ldr	r3, [r7, #20]
   12caa:	1c5a      	adds	r2, r3, #1
   12cac:	617a      	str	r2, [r7, #20]
   12cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
   12cb2:	69ba      	ldr	r2, [r7, #24]
   12cb4:	4413      	add	r3, r2
   12cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   12cba:	613b      	str	r3, [r7, #16]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12cbc:	69bb      	ldr	r3, [r7, #24]
   12cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12cc0:	697b      	ldr	r3, [r7, #20]
   12cc2:	0a5b      	lsrs	r3, r3, #9
   12cc4:	4413      	add	r3, r2
   12cc6:	4619      	mov	r1, r3
   12cc8:	69b8      	ldr	r0, [r7, #24]
   12cca:	f7ff fef5 	bl	12ab8 <move_window>
   12cce:	4603      	mov	r3, r0
   12cd0:	2b00      	cmp	r3, #0
   12cd2:	f040 80c5 	bne.w	12e60 <get_fat+0x230>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
   12cd6:	697b      	ldr	r3, [r7, #20]
   12cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   12cdc:	69ba      	ldr	r2, [r7, #24]
   12cde:	4413      	add	r3, r2
   12ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   12ce4:	021b      	lsls	r3, r3, #8
   12ce6:	461a      	mov	r2, r3
   12ce8:	693b      	ldr	r3, [r7, #16]
   12cea:	4313      	orrs	r3, r2
   12cec:	613b      	str	r3, [r7, #16]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
   12cee:	683b      	ldr	r3, [r7, #0]
   12cf0:	f003 0301 	and.w	r3, r3, #1
   12cf4:	2b00      	cmp	r3, #0
   12cf6:	d002      	beq.n	12cfe <get_fat+0xce>
   12cf8:	693b      	ldr	r3, [r7, #16]
   12cfa:	091b      	lsrs	r3, r3, #4
   12cfc:	e002      	b.n	12d04 <get_fat+0xd4>
   12cfe:	693b      	ldr	r3, [r7, #16]
   12d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
   12d04:	61fb      	str	r3, [r7, #28]
			break;
   12d06:	e0b2      	b.n	12e6e <get_fat+0x23e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   12d08:	69bb      	ldr	r3, [r7, #24]
   12d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d0c:	683b      	ldr	r3, [r7, #0]
   12d0e:	0a1b      	lsrs	r3, r3, #8
   12d10:	4413      	add	r3, r2
   12d12:	4619      	mov	r1, r3
   12d14:	69b8      	ldr	r0, [r7, #24]
   12d16:	f7ff fecf 	bl	12ab8 <move_window>
   12d1a:	4603      	mov	r3, r0
   12d1c:	2b00      	cmp	r3, #0
   12d1e:	f040 80a1 	bne.w	12e64 <get_fat+0x234>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
   12d22:	69bb      	ldr	r3, [r7, #24]
   12d24:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   12d28:	683b      	ldr	r3, [r7, #0]
   12d2a:	005b      	lsls	r3, r3, #1
   12d2c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   12d30:	4413      	add	r3, r2
   12d32:	4618      	mov	r0, r3
   12d34:	f7ff fbb0 	bl	12498 <ld_word>
   12d38:	4603      	mov	r3, r0
   12d3a:	61fb      	str	r3, [r7, #28]
			break;
   12d3c:	e097      	b.n	12e6e <get_fat+0x23e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   12d3e:	69bb      	ldr	r3, [r7, #24]
   12d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12d42:	683b      	ldr	r3, [r7, #0]
   12d44:	09db      	lsrs	r3, r3, #7
   12d46:	4413      	add	r3, r2
   12d48:	4619      	mov	r1, r3
   12d4a:	69b8      	ldr	r0, [r7, #24]
   12d4c:	f7ff feb4 	bl	12ab8 <move_window>
   12d50:	4603      	mov	r3, r0
   12d52:	2b00      	cmp	r3, #0
   12d54:	f040 8088 	bne.w	12e68 <get_fat+0x238>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
   12d58:	69bb      	ldr	r3, [r7, #24]
   12d5a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   12d5e:	683b      	ldr	r3, [r7, #0]
   12d60:	009b      	lsls	r3, r3, #2
   12d62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   12d66:	4413      	add	r3, r2
   12d68:	4618      	mov	r0, r3
   12d6a:	f7ff fbad 	bl	124c8 <ld_dword>
   12d6e:	4603      	mov	r3, r0
   12d70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   12d74:	61fb      	str	r3, [r7, #28]
			break;
   12d76:	e07a      	b.n	12e6e <get_fat+0x23e>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
   12d78:	687a      	ldr	r2, [r7, #4]
   12d7a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
   12d7e:	430a      	orrs	r2, r1
   12d80:	d003      	beq.n	12d8a <get_fat+0x15a>
   12d82:	687a      	ldr	r2, [r7, #4]
   12d84:	6892      	ldr	r2, [r2, #8]
   12d86:	2a00      	cmp	r2, #0
   12d88:	d103      	bne.n	12d92 <get_fat+0x162>
   12d8a:	687a      	ldr	r2, [r7, #4]
   12d8c:	79d2      	ldrb	r2, [r2, #7]
   12d8e:	2a00      	cmp	r2, #0
   12d90:	d161      	bne.n	12e56 <get_fat+0x226>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
   12d92:	687a      	ldr	r2, [r7, #4]
   12d94:	6892      	ldr	r2, [r2, #8]
   12d96:	6839      	ldr	r1, [r7, #0]
   12d98:	1a8a      	subs	r2, r1, r2
   12d9a:	60fa      	str	r2, [r7, #12]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
   12d9c:	687a      	ldr	r2, [r7, #4]
   12d9e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
   12da2:	f111 33ff 	adds.w	r3, r1, #4294967295
   12da6:	f142 34ff 	adc.w	r4, r2, #4294967295
   12daa:	f04f 0100 	mov.w	r1, #0
   12dae:	f04f 0200 	mov.w	r2, #0
   12db2:	0a59      	lsrs	r1, r3, #9
   12db4:	ea41 51c4 	orr.w	r1, r1, r4, lsl #23
   12db8:	0a62      	lsrs	r2, r4, #9
   12dba:	460a      	mov	r2, r1
   12dbc:	69bb      	ldr	r3, [r7, #24]
   12dbe:	895b      	ldrh	r3, [r3, #10]
   12dc0:	fbb2 f3f3 	udiv	r3, r2, r3
   12dc4:	60bb      	str	r3, [r7, #8]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
   12dc6:	687b      	ldr	r3, [r7, #4]
   12dc8:	79db      	ldrb	r3, [r3, #7]
   12dca:	2b02      	cmp	r3, #2
   12dcc:	d10e      	bne.n	12dec <get_fat+0x1bc>
   12dce:	68fa      	ldr	r2, [r7, #12]
   12dd0:	68bb      	ldr	r3, [r7, #8]
   12dd2:	429a      	cmp	r2, r3
   12dd4:	d80a      	bhi.n	12dec <get_fat+0x1bc>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
   12dd6:	68fa      	ldr	r2, [r7, #12]
   12dd8:	68bb      	ldr	r3, [r7, #8]
   12dda:	429a      	cmp	r2, r3
   12ddc:	d002      	beq.n	12de4 <get_fat+0x1b4>
   12dde:	683b      	ldr	r3, [r7, #0]
   12de0:	3301      	adds	r3, #1
   12de2:	e001      	b.n	12de8 <get_fat+0x1b8>
   12de4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   12de8:	61fb      	str	r3, [r7, #28]
					break;
   12dea:	e040      	b.n	12e6e <get_fat+0x23e>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
   12dec:	687b      	ldr	r3, [r7, #4]
   12dee:	79db      	ldrb	r3, [r3, #7]
   12df0:	2b03      	cmp	r3, #3
   12df2:	d108      	bne.n	12e06 <get_fat+0x1d6>
   12df4:	687b      	ldr	r3, [r7, #4]
   12df6:	699b      	ldr	r3, [r3, #24]
   12df8:	68fa      	ldr	r2, [r7, #12]
   12dfa:	429a      	cmp	r2, r3
   12dfc:	d203      	bcs.n	12e06 <get_fat+0x1d6>
					val = clst + 1; 	/* Generate the value */
   12dfe:	683b      	ldr	r3, [r7, #0]
   12e00:	3301      	adds	r3, #1
   12e02:	61fb      	str	r3, [r7, #28]
					break;
   12e04:	e033      	b.n	12e6e <get_fat+0x23e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
   12e06:	687b      	ldr	r3, [r7, #4]
   12e08:	79db      	ldrb	r3, [r3, #7]
   12e0a:	2b02      	cmp	r3, #2
   12e0c:	d023      	beq.n	12e56 <get_fat+0x226>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
   12e0e:	687b      	ldr	r3, [r7, #4]
   12e10:	69db      	ldr	r3, [r3, #28]
   12e12:	2b00      	cmp	r3, #0
   12e14:	d003      	beq.n	12e1e <get_fat+0x1ee>
						val = 0x7FFFFFFF;	/* Generate EOC */
   12e16:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   12e1a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
   12e1c:	e027      	b.n	12e6e <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   12e1e:	69bb      	ldr	r3, [r7, #24]
   12e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12e22:	683b      	ldr	r3, [r7, #0]
   12e24:	09db      	lsrs	r3, r3, #7
   12e26:	4413      	add	r3, r2
   12e28:	4619      	mov	r1, r3
   12e2a:	69b8      	ldr	r0, [r7, #24]
   12e2c:	f7ff fe44 	bl	12ab8 <move_window>
   12e30:	4603      	mov	r3, r0
   12e32:	2b00      	cmp	r3, #0
   12e34:	d11a      	bne.n	12e6c <get_fat+0x23c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
   12e36:	69bb      	ldr	r3, [r7, #24]
   12e38:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   12e3c:	683b      	ldr	r3, [r7, #0]
   12e3e:	009b      	lsls	r3, r3, #2
   12e40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   12e44:	4413      	add	r3, r2
   12e46:	4618      	mov	r0, r3
   12e48:	f7ff fb3e 	bl	124c8 <ld_dword>
   12e4c:	4603      	mov	r3, r0
   12e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12e52:	61fb      	str	r3, [r7, #28]
					break;
   12e54:	e00b      	b.n	12e6e <get_fat+0x23e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
   12e56:	2301      	movs	r3, #1
   12e58:	61fb      	str	r3, [r7, #28]
   12e5a:	e008      	b.n	12e6e <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12e5c:	bf00      	nop
   12e5e:	e006      	b.n	12e6e <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
   12e60:	bf00      	nop
   12e62:	e004      	b.n	12e6e <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
   12e64:	bf00      	nop
   12e66:	e002      	b.n	12e6e <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   12e68:	bf00      	nop
   12e6a:	e000      	b.n	12e6e <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
   12e6c:	bf00      	nop
		}
	}

	return val;
   12e6e:	69fb      	ldr	r3, [r7, #28]
}
   12e70:	4618      	mov	r0, r3
   12e72:	3724      	adds	r7, #36	; 0x24
   12e74:	46bd      	mov	sp, r7
   12e76:	bd90      	pop	{r4, r7, pc}

00012e78 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
   12e78:	b590      	push	{r4, r7, lr}
   12e7a:	b089      	sub	sp, #36	; 0x24
   12e7c:	af00      	add	r7, sp, #0
   12e7e:	60f8      	str	r0, [r7, #12]
   12e80:	60b9      	str	r1, [r7, #8]
   12e82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
   12e84:	2302      	movs	r3, #2
   12e86:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
   12e88:	68bb      	ldr	r3, [r7, #8]
   12e8a:	2b01      	cmp	r3, #1
   12e8c:	f240 80db 	bls.w	13046 <put_fat+0x1ce>
   12e90:	68fb      	ldr	r3, [r7, #12]
   12e92:	69db      	ldr	r3, [r3, #28]
   12e94:	68ba      	ldr	r2, [r7, #8]
   12e96:	429a      	cmp	r2, r3
   12e98:	f080 80d5 	bcs.w	13046 <put_fat+0x1ce>
		switch (fs->fs_type) {
   12e9c:	68fb      	ldr	r3, [r7, #12]
   12e9e:	781b      	ldrb	r3, [r3, #0]
   12ea0:	3b01      	subs	r3, #1
   12ea2:	2b03      	cmp	r3, #3
   12ea4:	f200 80d8 	bhi.w	13058 <put_fat+0x1e0>
   12ea8:	a201      	add	r2, pc, #4	; (adr r2, 12eb0 <put_fat+0x38>)
   12eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12eae:	bf00      	nop
   12eb0:	00012ec1 	.word	0x00012ec1
   12eb4:	00012f9d 	.word	0x00012f9d
   12eb8:	00012fdd 	.word	0x00012fdd
   12ebc:	00012fdd 	.word	0x00012fdd
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
   12ec0:	68bb      	ldr	r3, [r7, #8]
   12ec2:	61bb      	str	r3, [r7, #24]
   12ec4:	69bb      	ldr	r3, [r7, #24]
   12ec6:	085b      	lsrs	r3, r3, #1
   12ec8:	69ba      	ldr	r2, [r7, #24]
   12eca:	4413      	add	r3, r2
   12ecc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12ece:	68fb      	ldr	r3, [r7, #12]
   12ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12ed2:	69bb      	ldr	r3, [r7, #24]
   12ed4:	0a5b      	lsrs	r3, r3, #9
   12ed6:	4413      	add	r3, r2
   12ed8:	4619      	mov	r1, r3
   12eda:	68f8      	ldr	r0, [r7, #12]
   12edc:	f7ff fdec 	bl	12ab8 <move_window>
   12ee0:	4603      	mov	r3, r0
   12ee2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   12ee4:	7ffb      	ldrb	r3, [r7, #31]
   12ee6:	2b00      	cmp	r3, #0
   12ee8:	f040 80af 	bne.w	1304a <put_fat+0x1d2>
			p = fs->win + bc++ % SS(fs);
   12eec:	68fb      	ldr	r3, [r7, #12]
   12eee:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   12ef2:	69bb      	ldr	r3, [r7, #24]
   12ef4:	1c59      	adds	r1, r3, #1
   12ef6:	61b9      	str	r1, [r7, #24]
   12ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   12efc:	4413      	add	r3, r2
   12efe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
   12f00:	68bb      	ldr	r3, [r7, #8]
   12f02:	f003 0301 	and.w	r3, r3, #1
   12f06:	2b00      	cmp	r3, #0
   12f08:	d00d      	beq.n	12f26 <put_fat+0xae>
   12f0a:	697b      	ldr	r3, [r7, #20]
   12f0c:	781b      	ldrb	r3, [r3, #0]
   12f0e:	b25b      	sxtb	r3, r3
   12f10:	f003 030f 	and.w	r3, r3, #15
   12f14:	b25a      	sxtb	r2, r3
   12f16:	687b      	ldr	r3, [r7, #4]
   12f18:	b2db      	uxtb	r3, r3
   12f1a:	011b      	lsls	r3, r3, #4
   12f1c:	b25b      	sxtb	r3, r3
   12f1e:	4313      	orrs	r3, r2
   12f20:	b25b      	sxtb	r3, r3
   12f22:	b2db      	uxtb	r3, r3
   12f24:	e001      	b.n	12f2a <put_fat+0xb2>
   12f26:	687b      	ldr	r3, [r7, #4]
   12f28:	b2db      	uxtb	r3, r3
   12f2a:	697a      	ldr	r2, [r7, #20]
   12f2c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
   12f2e:	68fb      	ldr	r3, [r7, #12]
   12f30:	2201      	movs	r2, #1
   12f32:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   12f34:	68fb      	ldr	r3, [r7, #12]
   12f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12f38:	69bb      	ldr	r3, [r7, #24]
   12f3a:	0a5b      	lsrs	r3, r3, #9
   12f3c:	4413      	add	r3, r2
   12f3e:	4619      	mov	r1, r3
   12f40:	68f8      	ldr	r0, [r7, #12]
   12f42:	f7ff fdb9 	bl	12ab8 <move_window>
   12f46:	4603      	mov	r3, r0
   12f48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   12f4a:	7ffb      	ldrb	r3, [r7, #31]
   12f4c:	2b00      	cmp	r3, #0
   12f4e:	d17e      	bne.n	1304e <put_fat+0x1d6>
			p = fs->win + bc % SS(fs);
   12f50:	68fb      	ldr	r3, [r7, #12]
   12f52:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   12f56:	69bb      	ldr	r3, [r7, #24]
   12f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
   12f5c:	4413      	add	r3, r2
   12f5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
   12f60:	68bb      	ldr	r3, [r7, #8]
   12f62:	f003 0301 	and.w	r3, r3, #1
   12f66:	2b00      	cmp	r3, #0
   12f68:	d003      	beq.n	12f72 <put_fat+0xfa>
   12f6a:	687b      	ldr	r3, [r7, #4]
   12f6c:	091b      	lsrs	r3, r3, #4
   12f6e:	b2db      	uxtb	r3, r3
   12f70:	e00e      	b.n	12f90 <put_fat+0x118>
   12f72:	697b      	ldr	r3, [r7, #20]
   12f74:	781b      	ldrb	r3, [r3, #0]
   12f76:	b25b      	sxtb	r3, r3
   12f78:	f023 030f 	bic.w	r3, r3, #15
   12f7c:	b25a      	sxtb	r2, r3
   12f7e:	687b      	ldr	r3, [r7, #4]
   12f80:	0a1b      	lsrs	r3, r3, #8
   12f82:	b25b      	sxtb	r3, r3
   12f84:	f003 030f 	and.w	r3, r3, #15
   12f88:	b25b      	sxtb	r3, r3
   12f8a:	4313      	orrs	r3, r2
   12f8c:	b25b      	sxtb	r3, r3
   12f8e:	b2db      	uxtb	r3, r3
   12f90:	697a      	ldr	r2, [r7, #20]
   12f92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
   12f94:	68fb      	ldr	r3, [r7, #12]
   12f96:	2201      	movs	r2, #1
   12f98:	70da      	strb	r2, [r3, #3]
			break;
   12f9a:	e05d      	b.n	13058 <put_fat+0x1e0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   12f9c:	68fb      	ldr	r3, [r7, #12]
   12f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12fa0:	68bb      	ldr	r3, [r7, #8]
   12fa2:	0a1b      	lsrs	r3, r3, #8
   12fa4:	4413      	add	r3, r2
   12fa6:	4619      	mov	r1, r3
   12fa8:	68f8      	ldr	r0, [r7, #12]
   12faa:	f7ff fd85 	bl	12ab8 <move_window>
   12fae:	4603      	mov	r3, r0
   12fb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   12fb2:	7ffb      	ldrb	r3, [r7, #31]
   12fb4:	2b00      	cmp	r3, #0
   12fb6:	d14c      	bne.n	13052 <put_fat+0x1da>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
   12fb8:	68fb      	ldr	r3, [r7, #12]
   12fba:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   12fbe:	68bb      	ldr	r3, [r7, #8]
   12fc0:	005b      	lsls	r3, r3, #1
   12fc2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
   12fc6:	4413      	add	r3, r2
   12fc8:	687a      	ldr	r2, [r7, #4]
   12fca:	b292      	uxth	r2, r2
   12fcc:	4611      	mov	r1, r2
   12fce:	4618      	mov	r0, r3
   12fd0:	f7ff fb5c 	bl	1268c <st_word>
			fs->wflag = 1;
   12fd4:	68fb      	ldr	r3, [r7, #12]
   12fd6:	2201      	movs	r2, #1
   12fd8:	70da      	strb	r2, [r3, #3]
			break;
   12fda:	e03d      	b.n	13058 <put_fat+0x1e0>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   12fdc:	68fb      	ldr	r3, [r7, #12]
   12fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12fe0:	68bb      	ldr	r3, [r7, #8]
   12fe2:	09db      	lsrs	r3, r3, #7
   12fe4:	4413      	add	r3, r2
   12fe6:	4619      	mov	r1, r3
   12fe8:	68f8      	ldr	r0, [r7, #12]
   12fea:	f7ff fd65 	bl	12ab8 <move_window>
   12fee:	4603      	mov	r3, r0
   12ff0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
   12ff2:	7ffb      	ldrb	r3, [r7, #31]
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d12e      	bne.n	13056 <put_fat+0x1de>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   12ff8:	68fb      	ldr	r3, [r7, #12]
   12ffa:	781b      	ldrb	r3, [r3, #0]
   12ffc:	2b04      	cmp	r3, #4
   12ffe:	d012      	beq.n	13026 <put_fat+0x1ae>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
   13000:	687b      	ldr	r3, [r7, #4]
   13002:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
   13006:	68fb      	ldr	r3, [r7, #12]
   13008:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   1300c:	68bb      	ldr	r3, [r7, #8]
   1300e:	009b      	lsls	r3, r3, #2
   13010:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   13014:	4413      	add	r3, r2
   13016:	4618      	mov	r0, r3
   13018:	f7ff fa56 	bl	124c8 <ld_dword>
   1301c:	4603      	mov	r3, r0
   1301e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
   13022:	4323      	orrs	r3, r4
   13024:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
   13026:	68fb      	ldr	r3, [r7, #12]
   13028:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   1302c:	68bb      	ldr	r3, [r7, #8]
   1302e:	009b      	lsls	r3, r3, #2
   13030:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
   13034:	4413      	add	r3, r2
   13036:	6879      	ldr	r1, [r7, #4]
   13038:	4618      	mov	r0, r3
   1303a:	f7ff fb42 	bl	126c2 <st_dword>
			fs->wflag = 1;
   1303e:	68fb      	ldr	r3, [r7, #12]
   13040:	2201      	movs	r2, #1
   13042:	70da      	strb	r2, [r3, #3]
			break;
   13044:	e008      	b.n	13058 <put_fat+0x1e0>
		}
	}
   13046:	bf00      	nop
   13048:	e006      	b.n	13058 <put_fat+0x1e0>
			if (res != FR_OK) break;
   1304a:	bf00      	nop
   1304c:	e004      	b.n	13058 <put_fat+0x1e0>
			if (res != FR_OK) break;
   1304e:	bf00      	nop
   13050:	e002      	b.n	13058 <put_fat+0x1e0>
			if (res != FR_OK) break;
   13052:	bf00      	nop
   13054:	e000      	b.n	13058 <put_fat+0x1e0>
			if (res != FR_OK) break;
   13056:	bf00      	nop
	return res;
   13058:	7ffb      	ldrb	r3, [r7, #31]
}
   1305a:	4618      	mov	r0, r3
   1305c:	3724      	adds	r7, #36	; 0x24
   1305e:	46bd      	mov	sp, r7
   13060:	bd90      	pop	{r4, r7, pc}
   13062:	bf00      	nop

00013064 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
   13064:	b580      	push	{r7, lr}
   13066:	b08a      	sub	sp, #40	; 0x28
   13068:	af00      	add	r7, sp, #0
   1306a:	60f8      	str	r0, [r7, #12]
   1306c:	60b9      	str	r1, [r7, #8]
   1306e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
   13070:	68bb      	ldr	r3, [r7, #8]
   13072:	3b02      	subs	r3, #2
   13074:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
   13076:	68fb      	ldr	r3, [r7, #12]
   13078:	69db      	ldr	r3, [r3, #28]
   1307a:	3b02      	subs	r3, #2
   1307c:	68ba      	ldr	r2, [r7, #8]
   1307e:	429a      	cmp	r2, r3
   13080:	d301      	bcc.n	13086 <find_bitmap+0x22>
   13082:	2300      	movs	r3, #0
   13084:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
   13086:	68bb      	ldr	r3, [r7, #8]
   13088:	61fb      	str	r3, [r7, #28]
   1308a:	69fb      	ldr	r3, [r7, #28]
   1308c:	61bb      	str	r3, [r7, #24]
   1308e:	2300      	movs	r3, #0
   13090:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   13092:	68fb      	ldr	r3, [r7, #12]
   13094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13096:	69fb      	ldr	r3, [r7, #28]
   13098:	0b1b      	lsrs	r3, r3, #12
   1309a:	4413      	add	r3, r2
   1309c:	4619      	mov	r1, r3
   1309e:	68f8      	ldr	r0, [r7, #12]
   130a0:	f7ff fd0a 	bl	12ab8 <move_window>
   130a4:	4603      	mov	r3, r0
   130a6:	2b00      	cmp	r3, #0
   130a8:	d002      	beq.n	130b0 <find_bitmap+0x4c>
   130aa:	f04f 33ff 	mov.w	r3, #4294967295
   130ae:	e051      	b.n	13154 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
   130b0:	69fb      	ldr	r3, [r7, #28]
   130b2:	08db      	lsrs	r3, r3, #3
   130b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   130b8:	623b      	str	r3, [r7, #32]
   130ba:	69fb      	ldr	r3, [r7, #28]
   130bc:	f003 0307 	and.w	r3, r3, #7
   130c0:	2201      	movs	r2, #1
   130c2:	fa02 f303 	lsl.w	r3, r2, r3
   130c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
   130ca:	68fa      	ldr	r2, [r7, #12]
   130cc:	6a3b      	ldr	r3, [r7, #32]
   130ce:	4413      	add	r3, r2
   130d0:	333c      	adds	r3, #60	; 0x3c
   130d2:	781a      	ldrb	r2, [r3, #0]
   130d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   130d8:	4013      	ands	r3, r2
   130da:	74fb      	strb	r3, [r7, #19]
   130dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   130e0:	005b      	lsls	r3, r3, #1
   130e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
   130e6:	69fb      	ldr	r3, [r7, #28]
   130e8:	3301      	adds	r3, #1
   130ea:	61fb      	str	r3, [r7, #28]
   130ec:	68fb      	ldr	r3, [r7, #12]
   130ee:	69db      	ldr	r3, [r3, #28]
   130f0:	3b02      	subs	r3, #2
   130f2:	69fa      	ldr	r2, [r7, #28]
   130f4:	429a      	cmp	r2, r3
   130f6:	d307      	bcc.n	13108 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
   130f8:	2300      	movs	r3, #0
   130fa:	61fb      	str	r3, [r7, #28]
   130fc:	2300      	movs	r3, #0
   130fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   13102:	f44f 7300 	mov.w	r3, #512	; 0x200
   13106:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
   13108:	7cfb      	ldrb	r3, [r7, #19]
   1310a:	2b00      	cmp	r3, #0
   1310c:	d109      	bne.n	13122 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
   1310e:	697b      	ldr	r3, [r7, #20]
   13110:	3301      	adds	r3, #1
   13112:	617b      	str	r3, [r7, #20]
   13114:	697a      	ldr	r2, [r7, #20]
   13116:	687b      	ldr	r3, [r7, #4]
   13118:	429a      	cmp	r2, r3
   1311a:	d106      	bne.n	1312a <find_bitmap+0xc6>
   1311c:	69bb      	ldr	r3, [r7, #24]
   1311e:	3302      	adds	r3, #2
   13120:	e018      	b.n	13154 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
   13122:	69fb      	ldr	r3, [r7, #28]
   13124:	61bb      	str	r3, [r7, #24]
   13126:	2300      	movs	r3, #0
   13128:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
   1312a:	69fa      	ldr	r2, [r7, #28]
   1312c:	68bb      	ldr	r3, [r7, #8]
   1312e:	429a      	cmp	r2, r3
   13130:	d101      	bne.n	13136 <find_bitmap+0xd2>
   13132:	2300      	movs	r3, #0
   13134:	e00e      	b.n	13154 <find_bitmap+0xf0>
			} while (bm != 0);
   13136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1313a:	2b00      	cmp	r3, #0
   1313c:	d1c5      	bne.n	130ca <find_bitmap+0x66>
			bm = 1;
   1313e:	2301      	movs	r3, #1
   13140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
   13144:	6a3b      	ldr	r3, [r7, #32]
   13146:	3301      	adds	r3, #1
   13148:	623b      	str	r3, [r7, #32]
   1314a:	6a3b      	ldr	r3, [r7, #32]
   1314c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13150:	d3bb      	bcc.n	130ca <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
   13152:	e79e      	b.n	13092 <find_bitmap+0x2e>
	}
}
   13154:	4618      	mov	r0, r3
   13156:	3728      	adds	r7, #40	; 0x28
   13158:	46bd      	mov	sp, r7
   1315a:	bd80      	pop	{r7, pc}

0001315c <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
   1315c:	b580      	push	{r7, lr}
   1315e:	b088      	sub	sp, #32
   13160:	af00      	add	r7, sp, #0
   13162:	60f8      	str	r0, [r7, #12]
   13164:	60b9      	str	r1, [r7, #8]
   13166:	607a      	str	r2, [r7, #4]
   13168:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
   1316a:	68bb      	ldr	r3, [r7, #8]
   1316c:	3b02      	subs	r3, #2
   1316e:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
   13170:	68fb      	ldr	r3, [r7, #12]
   13172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13174:	68bb      	ldr	r3, [r7, #8]
   13176:	0b1b      	lsrs	r3, r3, #12
   13178:	4413      	add	r3, r2
   1317a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
   1317c:	68bb      	ldr	r3, [r7, #8]
   1317e:	08db      	lsrs	r3, r3, #3
   13180:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13184:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
   13186:	68bb      	ldr	r3, [r7, #8]
   13188:	f003 0307 	and.w	r3, r3, #7
   1318c:	2201      	movs	r2, #1
   1318e:	fa02 f303 	lsl.w	r3, r2, r3
   13192:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
   13194:	697b      	ldr	r3, [r7, #20]
   13196:	1c5a      	adds	r2, r3, #1
   13198:	617a      	str	r2, [r7, #20]
   1319a:	4619      	mov	r1, r3
   1319c:	68f8      	ldr	r0, [r7, #12]
   1319e:	f7ff fc8b 	bl	12ab8 <move_window>
   131a2:	4603      	mov	r3, r0
   131a4:	2b00      	cmp	r3, #0
   131a6:	d001      	beq.n	131ac <change_bitmap+0x50>
   131a8:	2301      	movs	r3, #1
   131aa:	e03d      	b.n	13228 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
   131ac:	68fa      	ldr	r2, [r7, #12]
   131ae:	69bb      	ldr	r3, [r7, #24]
   131b0:	4413      	add	r3, r2
   131b2:	333c      	adds	r3, #60	; 0x3c
   131b4:	781a      	ldrb	r2, [r3, #0]
   131b6:	7ffb      	ldrb	r3, [r7, #31]
   131b8:	4013      	ands	r3, r2
   131ba:	b2db      	uxtb	r3, r3
   131bc:	2b00      	cmp	r3, #0
   131be:	bf14      	ite	ne
   131c0:	2301      	movne	r3, #1
   131c2:	2300      	moveq	r3, #0
   131c4:	b2db      	uxtb	r3, r3
   131c6:	461a      	mov	r2, r3
   131c8:	683b      	ldr	r3, [r7, #0]
   131ca:	4293      	cmp	r3, r2
   131cc:	d101      	bne.n	131d2 <change_bitmap+0x76>
   131ce:	2302      	movs	r3, #2
   131d0:	e02a      	b.n	13228 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
   131d2:	68fa      	ldr	r2, [r7, #12]
   131d4:	69bb      	ldr	r3, [r7, #24]
   131d6:	4413      	add	r3, r2
   131d8:	333c      	adds	r3, #60	; 0x3c
   131da:	781a      	ldrb	r2, [r3, #0]
   131dc:	7ffb      	ldrb	r3, [r7, #31]
   131de:	4053      	eors	r3, r2
   131e0:	b2d9      	uxtb	r1, r3
   131e2:	68fa      	ldr	r2, [r7, #12]
   131e4:	69bb      	ldr	r3, [r7, #24]
   131e6:	4413      	add	r3, r2
   131e8:	333c      	adds	r3, #60	; 0x3c
   131ea:	460a      	mov	r2, r1
   131ec:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
   131ee:	68fb      	ldr	r3, [r7, #12]
   131f0:	2201      	movs	r2, #1
   131f2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
   131f4:	687b      	ldr	r3, [r7, #4]
   131f6:	3b01      	subs	r3, #1
   131f8:	607b      	str	r3, [r7, #4]
   131fa:	687b      	ldr	r3, [r7, #4]
   131fc:	2b00      	cmp	r3, #0
   131fe:	d101      	bne.n	13204 <change_bitmap+0xa8>
   13200:	2300      	movs	r3, #0
   13202:	e011      	b.n	13228 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
   13204:	7ffb      	ldrb	r3, [r7, #31]
   13206:	005b      	lsls	r3, r3, #1
   13208:	77fb      	strb	r3, [r7, #31]
   1320a:	7ffb      	ldrb	r3, [r7, #31]
   1320c:	2b00      	cmp	r3, #0
   1320e:	d1cd      	bne.n	131ac <change_bitmap+0x50>
			bm = 1;
   13210:	2301      	movs	r3, #1
   13212:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
   13214:	69bb      	ldr	r3, [r7, #24]
   13216:	3301      	adds	r3, #1
   13218:	61bb      	str	r3, [r7, #24]
   1321a:	69bb      	ldr	r3, [r7, #24]
   1321c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   13220:	d3c4      	bcc.n	131ac <change_bitmap+0x50>
		i = 0;
   13222:	2300      	movs	r3, #0
   13224:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
   13226:	e7b5      	b.n	13194 <change_bitmap+0x38>
	}
}
   13228:	4618      	mov	r0, r3
   1322a:	3720      	adds	r7, #32
   1322c:	46bd      	mov	sp, r7
   1322e:	bd80      	pop	{r7, pc}

00013230 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
   13230:	b580      	push	{r7, lr}
   13232:	b086      	sub	sp, #24
   13234:	af00      	add	r7, sp, #0
   13236:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
   13238:	687b      	ldr	r3, [r7, #4]
   1323a:	79db      	ldrb	r3, [r3, #7]
   1323c:	2b03      	cmp	r3, #3
   1323e:	d121      	bne.n	13284 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   13240:	687b      	ldr	r3, [r7, #4]
   13242:	689b      	ldr	r3, [r3, #8]
   13244:	617b      	str	r3, [r7, #20]
   13246:	687b      	ldr	r3, [r7, #4]
   13248:	699b      	ldr	r3, [r3, #24]
   1324a:	613b      	str	r3, [r7, #16]
   1324c:	e014      	b.n	13278 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
   1324e:	687b      	ldr	r3, [r7, #4]
   13250:	6818      	ldr	r0, [r3, #0]
   13252:	697b      	ldr	r3, [r7, #20]
   13254:	3301      	adds	r3, #1
   13256:	461a      	mov	r2, r3
   13258:	6979      	ldr	r1, [r7, #20]
   1325a:	f7ff fe0d 	bl	12e78 <put_fat>
   1325e:	4603      	mov	r3, r0
   13260:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
   13262:	7bfb      	ldrb	r3, [r7, #15]
   13264:	2b00      	cmp	r3, #0
   13266:	d001      	beq.n	1326c <fill_first_frag+0x3c>
   13268:	7bfb      	ldrb	r3, [r7, #15]
   1326a:	e00c      	b.n	13286 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
   1326c:	697b      	ldr	r3, [r7, #20]
   1326e:	3301      	adds	r3, #1
   13270:	617b      	str	r3, [r7, #20]
   13272:	693b      	ldr	r3, [r7, #16]
   13274:	3b01      	subs	r3, #1
   13276:	613b      	str	r3, [r7, #16]
   13278:	693b      	ldr	r3, [r7, #16]
   1327a:	2b00      	cmp	r3, #0
   1327c:	d1e7      	bne.n	1324e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
   1327e:	687b      	ldr	r3, [r7, #4]
   13280:	2200      	movs	r2, #0
   13282:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
   13284:	2300      	movs	r3, #0
}
   13286:	4618      	mov	r0, r3
   13288:	3718      	adds	r7, #24
   1328a:	46bd      	mov	sp, r7
   1328c:	bd80      	pop	{r7, pc}

0001328e <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
   1328e:	b580      	push	{r7, lr}
   13290:	b086      	sub	sp, #24
   13292:	af00      	add	r7, sp, #0
   13294:	60f8      	str	r0, [r7, #12]
   13296:	60b9      	str	r1, [r7, #8]
   13298:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
   1329a:	e020      	b.n	132de <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
   1329c:	68fb      	ldr	r3, [r7, #12]
   1329e:	6818      	ldr	r0, [r3, #0]
   132a0:	68fb      	ldr	r3, [r7, #12]
   132a2:	69db      	ldr	r3, [r3, #28]
   132a4:	68ba      	ldr	r2, [r7, #8]
   132a6:	1ad3      	subs	r3, r2, r3
   132a8:	1c59      	adds	r1, r3, #1
   132aa:	68fb      	ldr	r3, [r7, #12]
   132ac:	69db      	ldr	r3, [r3, #28]
   132ae:	2b01      	cmp	r3, #1
   132b0:	d905      	bls.n	132be <fill_last_frag+0x30>
   132b2:	68fb      	ldr	r3, [r7, #12]
   132b4:	69db      	ldr	r3, [r3, #28]
   132b6:	68ba      	ldr	r2, [r7, #8]
   132b8:	1ad3      	subs	r3, r2, r3
   132ba:	3302      	adds	r3, #2
   132bc:	e000      	b.n	132c0 <fill_last_frag+0x32>
   132be:	687b      	ldr	r3, [r7, #4]
   132c0:	461a      	mov	r2, r3
   132c2:	f7ff fdd9 	bl	12e78 <put_fat>
   132c6:	4603      	mov	r3, r0
   132c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
   132ca:	7dfb      	ldrb	r3, [r7, #23]
   132cc:	2b00      	cmp	r3, #0
   132ce:	d001      	beq.n	132d4 <fill_last_frag+0x46>
   132d0:	7dfb      	ldrb	r3, [r7, #23]
   132d2:	e009      	b.n	132e8 <fill_last_frag+0x5a>
		obj->n_frag--;
   132d4:	68fb      	ldr	r3, [r7, #12]
   132d6:	69db      	ldr	r3, [r3, #28]
   132d8:	1e5a      	subs	r2, r3, #1
   132da:	68fb      	ldr	r3, [r7, #12]
   132dc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
   132de:	68fb      	ldr	r3, [r7, #12]
   132e0:	69db      	ldr	r3, [r3, #28]
   132e2:	2b00      	cmp	r3, #0
   132e4:	d1da      	bne.n	1329c <fill_last_frag+0xe>
	}
	return FR_OK;
   132e6:	2300      	movs	r3, #0
}
   132e8:	4618      	mov	r0, r3
   132ea:	3718      	adds	r7, #24
   132ec:	46bd      	mov	sp, r7
   132ee:	bd80      	pop	{r7, pc}

000132f0 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
   132f0:	b580      	push	{r7, lr}
   132f2:	b08a      	sub	sp, #40	; 0x28
   132f4:	af00      	add	r7, sp, #0
   132f6:	60f8      	str	r0, [r7, #12]
   132f8:	60b9      	str	r1, [r7, #8]
   132fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
   132fc:	2300      	movs	r3, #0
   132fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
   13300:	68fb      	ldr	r3, [r7, #12]
   13302:	681b      	ldr	r3, [r3, #0]
   13304:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
   13306:	68bb      	ldr	r3, [r7, #8]
   13308:	627b      	str	r3, [r7, #36]	; 0x24
   1330a:	68bb      	ldr	r3, [r7, #8]
   1330c:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
   1330e:	68bb      	ldr	r3, [r7, #8]
   13310:	2b01      	cmp	r3, #1
   13312:	d904      	bls.n	1331e <remove_chain+0x2e>
   13314:	69bb      	ldr	r3, [r7, #24]
   13316:	69db      	ldr	r3, [r3, #28]
   13318:	68ba      	ldr	r2, [r7, #8]
   1331a:	429a      	cmp	r2, r3
   1331c:	d301      	bcc.n	13322 <remove_chain+0x32>
   1331e:	2302      	movs	r3, #2
   13320:	e0c4      	b.n	134ac <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
   13322:	687b      	ldr	r3, [r7, #4]
   13324:	2b00      	cmp	r3, #0
   13326:	d014      	beq.n	13352 <remove_chain+0x62>
   13328:	69bb      	ldr	r3, [r7, #24]
   1332a:	781b      	ldrb	r3, [r3, #0]
   1332c:	2b04      	cmp	r3, #4
   1332e:	d103      	bne.n	13338 <remove_chain+0x48>
   13330:	68fb      	ldr	r3, [r7, #12]
   13332:	79db      	ldrb	r3, [r3, #7]
   13334:	2b02      	cmp	r3, #2
   13336:	d00c      	beq.n	13352 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
   13338:	f04f 32ff 	mov.w	r2, #4294967295
   1333c:	6879      	ldr	r1, [r7, #4]
   1333e:	69b8      	ldr	r0, [r7, #24]
   13340:	f7ff fd9a 	bl	12e78 <put_fat>
   13344:	4603      	mov	r3, r0
   13346:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
   13348:	7ffb      	ldrb	r3, [r7, #31]
   1334a:	2b00      	cmp	r3, #0
   1334c:	d001      	beq.n	13352 <remove_chain+0x62>
   1334e:	7ffb      	ldrb	r3, [r7, #31]
   13350:	e0ac      	b.n	134ac <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
   13352:	68b9      	ldr	r1, [r7, #8]
   13354:	68f8      	ldr	r0, [r7, #12]
   13356:	f7ff fc6b 	bl	12c30 <get_fat>
   1335a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
   1335c:	697b      	ldr	r3, [r7, #20]
   1335e:	2b00      	cmp	r3, #0
   13360:	d055      	beq.n	1340e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
   13362:	697b      	ldr	r3, [r7, #20]
   13364:	2b01      	cmp	r3, #1
   13366:	d101      	bne.n	1336c <remove_chain+0x7c>
   13368:	2302      	movs	r3, #2
   1336a:	e09f      	b.n	134ac <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
   1336c:	697b      	ldr	r3, [r7, #20]
   1336e:	f1b3 3fff 	cmp.w	r3, #4294967295
   13372:	d101      	bne.n	13378 <remove_chain+0x88>
   13374:	2301      	movs	r3, #1
   13376:	e099      	b.n	134ac <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
   13378:	69bb      	ldr	r3, [r7, #24]
   1337a:	781b      	ldrb	r3, [r3, #0]
   1337c:	2b04      	cmp	r3, #4
   1337e:	d00b      	beq.n	13398 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
   13380:	2200      	movs	r2, #0
   13382:	68b9      	ldr	r1, [r7, #8]
   13384:	69b8      	ldr	r0, [r7, #24]
   13386:	f7ff fd77 	bl	12e78 <put_fat>
   1338a:	4603      	mov	r3, r0
   1338c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
   1338e:	7ffb      	ldrb	r3, [r7, #31]
   13390:	2b00      	cmp	r3, #0
   13392:	d001      	beq.n	13398 <remove_chain+0xa8>
   13394:	7ffb      	ldrb	r3, [r7, #31]
   13396:	e089      	b.n	134ac <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
   13398:	69bb      	ldr	r3, [r7, #24]
   1339a:	699a      	ldr	r2, [r3, #24]
   1339c:	69bb      	ldr	r3, [r7, #24]
   1339e:	69db      	ldr	r3, [r3, #28]
   133a0:	3b02      	subs	r3, #2
   133a2:	429a      	cmp	r2, r3
   133a4:	d20b      	bcs.n	133be <remove_chain+0xce>
			fs->free_clst++;
   133a6:	69bb      	ldr	r3, [r7, #24]
   133a8:	699b      	ldr	r3, [r3, #24]
   133aa:	1c5a      	adds	r2, r3, #1
   133ac:	69bb      	ldr	r3, [r7, #24]
   133ae:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
   133b0:	69bb      	ldr	r3, [r7, #24]
   133b2:	791b      	ldrb	r3, [r3, #4]
   133b4:	f043 0301 	orr.w	r3, r3, #1
   133b8:	b2da      	uxtb	r2, r3
   133ba:	69bb      	ldr	r3, [r7, #24]
   133bc:	711a      	strb	r2, [r3, #4]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
   133be:	6a3b      	ldr	r3, [r7, #32]
   133c0:	3301      	adds	r3, #1
   133c2:	697a      	ldr	r2, [r7, #20]
   133c4:	429a      	cmp	r2, r3
   133c6:	d102      	bne.n	133ce <remove_chain+0xde>
			ecl = nxt;
   133c8:	697b      	ldr	r3, [r7, #20]
   133ca:	623b      	str	r3, [r7, #32]
   133cc:	e017      	b.n	133fe <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
   133ce:	69bb      	ldr	r3, [r7, #24]
   133d0:	781b      	ldrb	r3, [r3, #0]
   133d2:	2b04      	cmp	r3, #4
   133d4:	d10f      	bne.n	133f6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
   133d6:	6a3a      	ldr	r2, [r7, #32]
   133d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   133da:	1ad3      	subs	r3, r2, r3
   133dc:	1c5a      	adds	r2, r3, #1
   133de:	2300      	movs	r3, #0
   133e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   133e2:	69b8      	ldr	r0, [r7, #24]
   133e4:	f7ff feba 	bl	1315c <change_bitmap>
   133e8:	4603      	mov	r3, r0
   133ea:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
   133ec:	7ffb      	ldrb	r3, [r7, #31]
   133ee:	2b00      	cmp	r3, #0
   133f0:	d001      	beq.n	133f6 <remove_chain+0x106>
   133f2:	7ffb      	ldrb	r3, [r7, #31]
   133f4:	e05a      	b.n	134ac <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
   133f6:	697b      	ldr	r3, [r7, #20]
   133f8:	623b      	str	r3, [r7, #32]
   133fa:	6a3b      	ldr	r3, [r7, #32]
   133fc:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
   133fe:	697b      	ldr	r3, [r7, #20]
   13400:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
   13402:	69bb      	ldr	r3, [r7, #24]
   13404:	69db      	ldr	r3, [r3, #28]
   13406:	68ba      	ldr	r2, [r7, #8]
   13408:	429a      	cmp	r2, r3
   1340a:	d3a2      	bcc.n	13352 <remove_chain+0x62>
   1340c:	e000      	b.n	13410 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
   1340e:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
   13410:	69bb      	ldr	r3, [r7, #24]
   13412:	781b      	ldrb	r3, [r3, #0]
   13414:	2b04      	cmp	r3, #4
   13416:	d148      	bne.n	134aa <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
   13418:	687b      	ldr	r3, [r7, #4]
   1341a:	2b00      	cmp	r3, #0
   1341c:	d103      	bne.n	13426 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
   1341e:	68fb      	ldr	r3, [r7, #12]
   13420:	2200      	movs	r2, #0
   13422:	71da      	strb	r2, [r3, #7]
   13424:	e041      	b.n	134aa <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
   13426:	68fb      	ldr	r3, [r7, #12]
   13428:	79db      	ldrb	r3, [r3, #7]
   1342a:	2b00      	cmp	r3, #0
   1342c:	d129      	bne.n	13482 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
   1342e:	68fb      	ldr	r3, [r7, #12]
   13430:	689b      	ldr	r3, [r3, #8]
   13432:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
   13434:	e017      	b.n	13466 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
   13436:	68b9      	ldr	r1, [r7, #8]
   13438:	68f8      	ldr	r0, [r7, #12]
   1343a:	f7ff fbf9 	bl	12c30 <get_fat>
   1343e:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
   13440:	697b      	ldr	r3, [r7, #20]
   13442:	2b01      	cmp	r3, #1
   13444:	d801      	bhi.n	1344a <remove_chain+0x15a>
   13446:	2302      	movs	r3, #2
   13448:	e030      	b.n	134ac <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
   1344a:	697b      	ldr	r3, [r7, #20]
   1344c:	f1b3 3fff 	cmp.w	r3, #4294967295
   13450:	d101      	bne.n	13456 <remove_chain+0x166>
   13452:	2301      	movs	r3, #1
   13454:	e02a      	b.n	134ac <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
   13456:	68bb      	ldr	r3, [r7, #8]
   13458:	3301      	adds	r3, #1
   1345a:	697a      	ldr	r2, [r7, #20]
   1345c:	429a      	cmp	r2, r3
   1345e:	d107      	bne.n	13470 <remove_chain+0x180>
					clst++;
   13460:	68bb      	ldr	r3, [r7, #8]
   13462:	3301      	adds	r3, #1
   13464:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
   13466:	68ba      	ldr	r2, [r7, #8]
   13468:	687b      	ldr	r3, [r7, #4]
   1346a:	429a      	cmp	r2, r3
   1346c:	d1e3      	bne.n	13436 <remove_chain+0x146>
   1346e:	e000      	b.n	13472 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
   13470:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
   13472:	68ba      	ldr	r2, [r7, #8]
   13474:	687b      	ldr	r3, [r7, #4]
   13476:	429a      	cmp	r2, r3
   13478:	d117      	bne.n	134aa <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
   1347a:	68fb      	ldr	r3, [r7, #12]
   1347c:	2202      	movs	r2, #2
   1347e:	71da      	strb	r2, [r3, #7]
   13480:	e013      	b.n	134aa <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
   13482:	68fb      	ldr	r3, [r7, #12]
   13484:	79db      	ldrb	r3, [r3, #7]
   13486:	2b03      	cmp	r3, #3
   13488:	d10f      	bne.n	134aa <remove_chain+0x1ba>
   1348a:	68fb      	ldr	r3, [r7, #12]
   1348c:	689b      	ldr	r3, [r3, #8]
   1348e:	687a      	ldr	r2, [r7, #4]
   13490:	429a      	cmp	r2, r3
   13492:	d30a      	bcc.n	134aa <remove_chain+0x1ba>
   13494:	68fb      	ldr	r3, [r7, #12]
   13496:	689a      	ldr	r2, [r3, #8]
   13498:	68fb      	ldr	r3, [r7, #12]
   1349a:	699b      	ldr	r3, [r3, #24]
   1349c:	4413      	add	r3, r2
   1349e:	687a      	ldr	r2, [r7, #4]
   134a0:	429a      	cmp	r2, r3
   134a2:	d802      	bhi.n	134aa <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
   134a4:	68fb      	ldr	r3, [r7, #12]
   134a6:	2202      	movs	r2, #2
   134a8:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
   134aa:	2300      	movs	r3, #0
}
   134ac:	4618      	mov	r0, r3
   134ae:	3728      	adds	r7, #40	; 0x28
   134b0:	46bd      	mov	sp, r7
   134b2:	bd80      	pop	{r7, pc}

000134b4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
   134b4:	b580      	push	{r7, lr}
   134b6:	b088      	sub	sp, #32
   134b8:	af00      	add	r7, sp, #0
   134ba:	6078      	str	r0, [r7, #4]
   134bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
   134be:	687b      	ldr	r3, [r7, #4]
   134c0:	681b      	ldr	r3, [r3, #0]
   134c2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
   134c4:	683b      	ldr	r3, [r7, #0]
   134c6:	2b00      	cmp	r3, #0
   134c8:	d10d      	bne.n	134e6 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
   134ca:	693b      	ldr	r3, [r7, #16]
   134cc:	695b      	ldr	r3, [r3, #20]
   134ce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
   134d0:	69bb      	ldr	r3, [r7, #24]
   134d2:	2b00      	cmp	r3, #0
   134d4:	d004      	beq.n	134e0 <create_chain+0x2c>
   134d6:	693b      	ldr	r3, [r7, #16]
   134d8:	69db      	ldr	r3, [r3, #28]
   134da:	69ba      	ldr	r2, [r7, #24]
   134dc:	429a      	cmp	r2, r3
   134de:	d31b      	bcc.n	13518 <create_chain+0x64>
   134e0:	2301      	movs	r3, #1
   134e2:	61bb      	str	r3, [r7, #24]
   134e4:	e018      	b.n	13518 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
   134e6:	6839      	ldr	r1, [r7, #0]
   134e8:	6878      	ldr	r0, [r7, #4]
   134ea:	f7ff fba1 	bl	12c30 <get_fat>
   134ee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
   134f0:	68fb      	ldr	r3, [r7, #12]
   134f2:	2b01      	cmp	r3, #1
   134f4:	d801      	bhi.n	134fa <create_chain+0x46>
   134f6:	2301      	movs	r3, #1
   134f8:	e113      	b.n	13722 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
   134fa:	68fb      	ldr	r3, [r7, #12]
   134fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   13500:	d101      	bne.n	13506 <create_chain+0x52>
   13502:	68fb      	ldr	r3, [r7, #12]
   13504:	e10d      	b.n	13722 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   13506:	693b      	ldr	r3, [r7, #16]
   13508:	69db      	ldr	r3, [r3, #28]
   1350a:	68fa      	ldr	r2, [r7, #12]
   1350c:	429a      	cmp	r2, r3
   1350e:	d201      	bcs.n	13514 <create_chain+0x60>
   13510:	68fb      	ldr	r3, [r7, #12]
   13512:	e106      	b.n	13722 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
   13514:	683b      	ldr	r3, [r7, #0]
   13516:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
   13518:	693b      	ldr	r3, [r7, #16]
   1351a:	699b      	ldr	r3, [r3, #24]
   1351c:	2b00      	cmp	r3, #0
   1351e:	d101      	bne.n	13524 <create_chain+0x70>
   13520:	2300      	movs	r3, #0
   13522:	e0fe      	b.n	13722 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   13524:	693b      	ldr	r3, [r7, #16]
   13526:	781b      	ldrb	r3, [r3, #0]
   13528:	2b04      	cmp	r3, #4
   1352a:	d165      	bne.n	135f8 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
   1352c:	2201      	movs	r2, #1
   1352e:	69b9      	ldr	r1, [r7, #24]
   13530:	6938      	ldr	r0, [r7, #16]
   13532:	f7ff fd97 	bl	13064 <find_bitmap>
   13536:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
   13538:	69fb      	ldr	r3, [r7, #28]
   1353a:	2b00      	cmp	r3, #0
   1353c:	d003      	beq.n	13546 <create_chain+0x92>
   1353e:	69fb      	ldr	r3, [r7, #28]
   13540:	f1b3 3fff 	cmp.w	r3, #4294967295
   13544:	d101      	bne.n	1354a <create_chain+0x96>
   13546:	69fb      	ldr	r3, [r7, #28]
   13548:	e0eb      	b.n	13722 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
   1354a:	2301      	movs	r3, #1
   1354c:	2201      	movs	r2, #1
   1354e:	69f9      	ldr	r1, [r7, #28]
   13550:	6938      	ldr	r0, [r7, #16]
   13552:	f7ff fe03 	bl	1315c <change_bitmap>
   13556:	4603      	mov	r3, r0
   13558:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
   1355a:	7dfb      	ldrb	r3, [r7, #23]
   1355c:	2b02      	cmp	r3, #2
   1355e:	d101      	bne.n	13564 <create_chain+0xb0>
   13560:	2301      	movs	r3, #1
   13562:	e0de      	b.n	13722 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
   13564:	7dfb      	ldrb	r3, [r7, #23]
   13566:	2b01      	cmp	r3, #1
   13568:	d102      	bne.n	13570 <create_chain+0xbc>
   1356a:	f04f 33ff 	mov.w	r3, #4294967295
   1356e:	e0d8      	b.n	13722 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
   13570:	683b      	ldr	r3, [r7, #0]
   13572:	2b00      	cmp	r3, #0
   13574:	d103      	bne.n	1357e <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
   13576:	687b      	ldr	r3, [r7, #4]
   13578:	2202      	movs	r2, #2
   1357a:	71da      	strb	r2, [r3, #7]
   1357c:	e011      	b.n	135a2 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
   1357e:	687b      	ldr	r3, [r7, #4]
   13580:	79db      	ldrb	r3, [r3, #7]
   13582:	2b02      	cmp	r3, #2
   13584:	d10d      	bne.n	135a2 <create_chain+0xee>
   13586:	69bb      	ldr	r3, [r7, #24]
   13588:	3301      	adds	r3, #1
   1358a:	69fa      	ldr	r2, [r7, #28]
   1358c:	429a      	cmp	r2, r3
   1358e:	d008      	beq.n	135a2 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
   13590:	687b      	ldr	r3, [r7, #4]
   13592:	689b      	ldr	r3, [r3, #8]
   13594:	69ba      	ldr	r2, [r7, #24]
   13596:	1ad2      	subs	r2, r2, r3
   13598:	687b      	ldr	r3, [r7, #4]
   1359a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
   1359c:	687b      	ldr	r3, [r7, #4]
   1359e:	2203      	movs	r2, #3
   135a0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
   135a2:	687b      	ldr	r3, [r7, #4]
   135a4:	79db      	ldrb	r3, [r3, #7]
   135a6:	2b02      	cmp	r3, #2
   135a8:	f000 8098 	beq.w	136dc <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
   135ac:	683b      	ldr	r3, [r7, #0]
   135ae:	3301      	adds	r3, #1
   135b0:	69fa      	ldr	r2, [r7, #28]
   135b2:	429a      	cmp	r2, r3
   135b4:	d10b      	bne.n	135ce <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
   135b6:	687b      	ldr	r3, [r7, #4]
   135b8:	69db      	ldr	r3, [r3, #28]
   135ba:	2b00      	cmp	r3, #0
   135bc:	d003      	beq.n	135c6 <create_chain+0x112>
   135be:	687b      	ldr	r3, [r7, #4]
   135c0:	69db      	ldr	r3, [r3, #28]
   135c2:	3301      	adds	r3, #1
   135c4:	e000      	b.n	135c8 <create_chain+0x114>
   135c6:	2302      	movs	r3, #2
   135c8:	687a      	ldr	r2, [r7, #4]
   135ca:	61d3      	str	r3, [r2, #28]
   135cc:	e086      	b.n	136dc <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
   135ce:	687b      	ldr	r3, [r7, #4]
   135d0:	69db      	ldr	r3, [r3, #28]
   135d2:	2b00      	cmp	r3, #0
   135d4:	d102      	bne.n	135dc <create_chain+0x128>
   135d6:	687b      	ldr	r3, [r7, #4]
   135d8:	2201      	movs	r2, #1
   135da:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
   135dc:	69fa      	ldr	r2, [r7, #28]
   135de:	6839      	ldr	r1, [r7, #0]
   135e0:	6878      	ldr	r0, [r7, #4]
   135e2:	f7ff fe54 	bl	1328e <fill_last_frag>
   135e6:	4603      	mov	r3, r0
   135e8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
   135ea:	7dfb      	ldrb	r3, [r7, #23]
   135ec:	2b00      	cmp	r3, #0
   135ee:	d175      	bne.n	136dc <create_chain+0x228>
   135f0:	687b      	ldr	r3, [r7, #4]
   135f2:	2201      	movs	r2, #1
   135f4:	61da      	str	r2, [r3, #28]
   135f6:	e071      	b.n	136dc <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
   135f8:	2300      	movs	r3, #0
   135fa:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
   135fc:	69ba      	ldr	r2, [r7, #24]
   135fe:	683b      	ldr	r3, [r7, #0]
   13600:	429a      	cmp	r2, r3
   13602:	d129      	bne.n	13658 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
   13604:	69bb      	ldr	r3, [r7, #24]
   13606:	3301      	adds	r3, #1
   13608:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
   1360a:	693b      	ldr	r3, [r7, #16]
   1360c:	69db      	ldr	r3, [r3, #28]
   1360e:	69fa      	ldr	r2, [r7, #28]
   13610:	429a      	cmp	r2, r3
   13612:	d301      	bcc.n	13618 <create_chain+0x164>
   13614:	2302      	movs	r3, #2
   13616:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
   13618:	69f9      	ldr	r1, [r7, #28]
   1361a:	6878      	ldr	r0, [r7, #4]
   1361c:	f7ff fb08 	bl	12c30 <get_fat>
   13620:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   13622:	68fb      	ldr	r3, [r7, #12]
   13624:	2b01      	cmp	r3, #1
   13626:	d003      	beq.n	13630 <create_chain+0x17c>
   13628:	68fb      	ldr	r3, [r7, #12]
   1362a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1362e:	d101      	bne.n	13634 <create_chain+0x180>
   13630:	68fb      	ldr	r3, [r7, #12]
   13632:	e076      	b.n	13722 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
   13634:	68fb      	ldr	r3, [r7, #12]
   13636:	2b00      	cmp	r3, #0
   13638:	d00e      	beq.n	13658 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
   1363a:	693b      	ldr	r3, [r7, #16]
   1363c:	695b      	ldr	r3, [r3, #20]
   1363e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
   13640:	68fb      	ldr	r3, [r7, #12]
   13642:	2b01      	cmp	r3, #1
   13644:	d906      	bls.n	13654 <create_chain+0x1a0>
   13646:	693b      	ldr	r3, [r7, #16]
   13648:	69db      	ldr	r3, [r3, #28]
   1364a:	68fa      	ldr	r2, [r7, #12]
   1364c:	429a      	cmp	r2, r3
   1364e:	d201      	bcs.n	13654 <create_chain+0x1a0>
   13650:	68fb      	ldr	r3, [r7, #12]
   13652:	61bb      	str	r3, [r7, #24]
				ncl = 0;
   13654:	2300      	movs	r3, #0
   13656:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
   13658:	69fb      	ldr	r3, [r7, #28]
   1365a:	2b00      	cmp	r3, #0
   1365c:	d129      	bne.n	136b2 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
   1365e:	69bb      	ldr	r3, [r7, #24]
   13660:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
   13662:	69fb      	ldr	r3, [r7, #28]
   13664:	3301      	adds	r3, #1
   13666:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
   13668:	693b      	ldr	r3, [r7, #16]
   1366a:	69db      	ldr	r3, [r3, #28]
   1366c:	69fa      	ldr	r2, [r7, #28]
   1366e:	429a      	cmp	r2, r3
   13670:	d307      	bcc.n	13682 <create_chain+0x1ce>
					ncl = 2;
   13672:	2302      	movs	r3, #2
   13674:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
   13676:	69fa      	ldr	r2, [r7, #28]
   13678:	69bb      	ldr	r3, [r7, #24]
   1367a:	429a      	cmp	r2, r3
   1367c:	d901      	bls.n	13682 <create_chain+0x1ce>
   1367e:	2300      	movs	r3, #0
   13680:	e04f      	b.n	13722 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
   13682:	69f9      	ldr	r1, [r7, #28]
   13684:	6878      	ldr	r0, [r7, #4]
   13686:	f7ff fad3 	bl	12c30 <get_fat>
   1368a:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
   1368c:	68fb      	ldr	r3, [r7, #12]
   1368e:	2b00      	cmp	r3, #0
   13690:	d00e      	beq.n	136b0 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
   13692:	68fb      	ldr	r3, [r7, #12]
   13694:	2b01      	cmp	r3, #1
   13696:	d003      	beq.n	136a0 <create_chain+0x1ec>
   13698:	68fb      	ldr	r3, [r7, #12]
   1369a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1369e:	d101      	bne.n	136a4 <create_chain+0x1f0>
   136a0:	68fb      	ldr	r3, [r7, #12]
   136a2:	e03e      	b.n	13722 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
   136a4:	69fa      	ldr	r2, [r7, #28]
   136a6:	69bb      	ldr	r3, [r7, #24]
   136a8:	429a      	cmp	r2, r3
   136aa:	d1da      	bne.n	13662 <create_chain+0x1ae>
   136ac:	2300      	movs	r3, #0
   136ae:	e038      	b.n	13722 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
   136b0:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
   136b2:	f04f 32ff 	mov.w	r2, #4294967295
   136b6:	69f9      	ldr	r1, [r7, #28]
   136b8:	6938      	ldr	r0, [r7, #16]
   136ba:	f7ff fbdd 	bl	12e78 <put_fat>
   136be:	4603      	mov	r3, r0
   136c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
   136c2:	7dfb      	ldrb	r3, [r7, #23]
   136c4:	2b00      	cmp	r3, #0
   136c6:	d109      	bne.n	136dc <create_chain+0x228>
   136c8:	683b      	ldr	r3, [r7, #0]
   136ca:	2b00      	cmp	r3, #0
   136cc:	d006      	beq.n	136dc <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
   136ce:	69fa      	ldr	r2, [r7, #28]
   136d0:	6839      	ldr	r1, [r7, #0]
   136d2:	6938      	ldr	r0, [r7, #16]
   136d4:	f7ff fbd0 	bl	12e78 <put_fat>
   136d8:	4603      	mov	r3, r0
   136da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
   136dc:	7dfb      	ldrb	r3, [r7, #23]
   136de:	2b00      	cmp	r3, #0
   136e0:	d116      	bne.n	13710 <create_chain+0x25c>
		fs->last_clst = ncl;
   136e2:	693b      	ldr	r3, [r7, #16]
   136e4:	69fa      	ldr	r2, [r7, #28]
   136e6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
   136e8:	693b      	ldr	r3, [r7, #16]
   136ea:	699a      	ldr	r2, [r3, #24]
   136ec:	693b      	ldr	r3, [r7, #16]
   136ee:	69db      	ldr	r3, [r3, #28]
   136f0:	3b02      	subs	r3, #2
   136f2:	429a      	cmp	r2, r3
   136f4:	d804      	bhi.n	13700 <create_chain+0x24c>
   136f6:	693b      	ldr	r3, [r7, #16]
   136f8:	699b      	ldr	r3, [r3, #24]
   136fa:	1e5a      	subs	r2, r3, #1
   136fc:	693b      	ldr	r3, [r7, #16]
   136fe:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
   13700:	693b      	ldr	r3, [r7, #16]
   13702:	791b      	ldrb	r3, [r3, #4]
   13704:	f043 0301 	orr.w	r3, r3, #1
   13708:	b2da      	uxtb	r2, r3
   1370a:	693b      	ldr	r3, [r7, #16]
   1370c:	711a      	strb	r2, [r3, #4]
   1370e:	e007      	b.n	13720 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
   13710:	7dfb      	ldrb	r3, [r7, #23]
   13712:	2b01      	cmp	r3, #1
   13714:	d102      	bne.n	1371c <create_chain+0x268>
   13716:	f04f 33ff 	mov.w	r3, #4294967295
   1371a:	e000      	b.n	1371e <create_chain+0x26a>
   1371c:	2301      	movs	r3, #1
   1371e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
   13720:	69fb      	ldr	r3, [r7, #28]
}
   13722:	4618      	mov	r0, r3
   13724:	3720      	adds	r7, #32
   13726:	46bd      	mov	sp, r7
   13728:	bd80      	pop	{r7, pc}

0001372a <clmt_clust>:

static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
   1372a:	b590      	push	{r4, r7, lr}
   1372c:	b089      	sub	sp, #36	; 0x24
   1372e:	af00      	add	r7, sp, #0
   13730:	60f8      	str	r0, [r7, #12]
   13732:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
   13736:	68fb      	ldr	r3, [r7, #12]
   13738:	681b      	ldr	r3, [r3, #0]
   1373a:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
   1373c:	68fb      	ldr	r3, [r7, #12]
   1373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   13740:	3304      	adds	r3, #4
   13742:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
   13744:	e9d7 3400 	ldrd	r3, r4, [r7]
   13748:	f04f 0000 	mov.w	r0, #0
   1374c:	f04f 0100 	mov.w	r1, #0
   13750:	0a58      	lsrs	r0, r3, #9
   13752:	ea40 50c4 	orr.w	r0, r0, r4, lsl #23
   13756:	0a61      	lsrs	r1, r4, #9
   13758:	697b      	ldr	r3, [r7, #20]
   1375a:	895b      	ldrh	r3, [r3, #10]
   1375c:	b29b      	uxth	r3, r3
   1375e:	f04f 0400 	mov.w	r4, #0
   13762:	461a      	mov	r2, r3
   13764:	4623      	mov	r3, r4
   13766:	f7fc fd1b 	bl	101a0 <__aeabi_uldivmod>
   1376a:	4603      	mov	r3, r0
   1376c:	460c      	mov	r4, r1
   1376e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
   13770:	69bb      	ldr	r3, [r7, #24]
   13772:	1d1a      	adds	r2, r3, #4
   13774:	61ba      	str	r2, [r7, #24]
   13776:	681b      	ldr	r3, [r3, #0]
   13778:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
   1377a:	693b      	ldr	r3, [r7, #16]
   1377c:	2b00      	cmp	r3, #0
   1377e:	d101      	bne.n	13784 <clmt_clust+0x5a>
   13780:	2300      	movs	r3, #0
   13782:	e010      	b.n	137a6 <clmt_clust+0x7c>
		if (cl < ncl) break;	/* In this fragment? */
   13784:	69fa      	ldr	r2, [r7, #28]
   13786:	693b      	ldr	r3, [r7, #16]
   13788:	429a      	cmp	r2, r3
   1378a:	d307      	bcc.n	1379c <clmt_clust+0x72>
		cl -= ncl; tbl++;		/* Next fragment */
   1378c:	69fa      	ldr	r2, [r7, #28]
   1378e:	693b      	ldr	r3, [r7, #16]
   13790:	1ad3      	subs	r3, r2, r3
   13792:	61fb      	str	r3, [r7, #28]
   13794:	69bb      	ldr	r3, [r7, #24]
   13796:	3304      	adds	r3, #4
   13798:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
   1379a:	e7e9      	b.n	13770 <clmt_clust+0x46>
		if (cl < ncl) break;	/* In this fragment? */
   1379c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
   1379e:	69bb      	ldr	r3, [r7, #24]
   137a0:	681a      	ldr	r2, [r3, #0]
   137a2:	69fb      	ldr	r3, [r7, #28]
   137a4:	4413      	add	r3, r2
}
   137a6:	4618      	mov	r0, r3
   137a8:	3724      	adds	r7, #36	; 0x24
   137aa:	46bd      	mov	sp, r7
   137ac:	bd90      	pop	{r4, r7, pc}

000137ae <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
   137ae:	b580      	push	{r7, lr}
   137b0:	b086      	sub	sp, #24
   137b2:	af00      	add	r7, sp, #0
   137b4:	6078      	str	r0, [r7, #4]
   137b6:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
   137b8:	6878      	ldr	r0, [r7, #4]
   137ba:	f7ff f941 	bl	12a40 <sync_window>
   137be:	4603      	mov	r3, r0
   137c0:	2b00      	cmp	r3, #0
   137c2:	d001      	beq.n	137c8 <dir_clear+0x1a>
   137c4:	2301      	movs	r3, #1
   137c6:	e036      	b.n	13836 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
   137c8:	6839      	ldr	r1, [r7, #0]
   137ca:	6878      	ldr	r0, [r7, #4]
   137cc:	f7ff fa10 	bl	12bf0 <clst2sect>
   137d0:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
   137d2:	687b      	ldr	r3, [r7, #4]
   137d4:	693a      	ldr	r2, [r7, #16]
   137d6:	639a      	str	r2, [r3, #56]	; 0x38
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
   137d8:	687b      	ldr	r3, [r7, #4]
   137da:	333c      	adds	r3, #60	; 0x3c
   137dc:	f44f 7200 	mov.w	r2, #512	; 0x200
   137e0:	2100      	movs	r1, #0
   137e2:	4618      	mov	r0, r3
   137e4:	f7ff f841 	bl	1286a <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
   137e8:	687b      	ldr	r3, [r7, #4]
   137ea:	333c      	adds	r3, #60	; 0x3c
   137ec:	60fb      	str	r3, [r7, #12]
   137ee:	2301      	movs	r3, #1
   137f0:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
   137f2:	2300      	movs	r3, #0
   137f4:	617b      	str	r3, [r7, #20]
   137f6:	e003      	b.n	13800 <dir_clear+0x52>
   137f8:	697a      	ldr	r2, [r7, #20]
   137fa:	68bb      	ldr	r3, [r7, #8]
   137fc:	4413      	add	r3, r2
   137fe:	617b      	str	r3, [r7, #20]
   13800:	687b      	ldr	r3, [r7, #4]
   13802:	895b      	ldrh	r3, [r3, #10]
   13804:	461a      	mov	r2, r3
   13806:	697b      	ldr	r3, [r7, #20]
   13808:	4293      	cmp	r3, r2
   1380a:	d20b      	bcs.n	13824 <dir_clear+0x76>
   1380c:	687b      	ldr	r3, [r7, #4]
   1380e:	7858      	ldrb	r0, [r3, #1]
   13810:	693a      	ldr	r2, [r7, #16]
   13812:	697b      	ldr	r3, [r7, #20]
   13814:	441a      	add	r2, r3
   13816:	68bb      	ldr	r3, [r7, #8]
   13818:	68f9      	ldr	r1, [r7, #12]
   1381a:	f7fe fd37 	bl	1228c <disk_write>
   1381e:	4603      	mov	r3, r0
   13820:	2b00      	cmp	r3, #0
   13822:	d0e9      	beq.n	137f8 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
   13824:	687b      	ldr	r3, [r7, #4]
   13826:	895b      	ldrh	r3, [r3, #10]
   13828:	461a      	mov	r2, r3
   1382a:	697b      	ldr	r3, [r7, #20]
   1382c:	4293      	cmp	r3, r2
   1382e:	bf14      	ite	ne
   13830:	2301      	movne	r3, #1
   13832:	2300      	moveq	r3, #0
   13834:	b2db      	uxtb	r3, r3
}
   13836:	4618      	mov	r0, r3
   13838:	3718      	adds	r7, #24
   1383a:	46bd      	mov	sp, r7
   1383c:	bd80      	pop	{r7, pc}

0001383e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
   1383e:	b580      	push	{r7, lr}
   13840:	b086      	sub	sp, #24
   13842:	af00      	add	r7, sp, #0
   13844:	6078      	str	r0, [r7, #4]
   13846:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
   13848:	687b      	ldr	r3, [r7, #4]
   1384a:	681b      	ldr	r3, [r3, #0]
   1384c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
   1384e:	693b      	ldr	r3, [r7, #16]
   13850:	781b      	ldrb	r3, [r3, #0]
   13852:	2b04      	cmp	r3, #4
   13854:	d102      	bne.n	1385c <dir_sdi+0x1e>
   13856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1385a:	e001      	b.n	13860 <dir_sdi+0x22>
   1385c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13860:	683b      	ldr	r3, [r7, #0]
   13862:	429a      	cmp	r2, r3
   13864:	d904      	bls.n	13870 <dir_sdi+0x32>
   13866:	683b      	ldr	r3, [r7, #0]
   13868:	f003 031f 	and.w	r3, r3, #31
   1386c:	2b00      	cmp	r3, #0
   1386e:	d001      	beq.n	13874 <dir_sdi+0x36>
		return FR_INT_ERR;
   13870:	2302      	movs	r3, #2
   13872:	e066      	b.n	13942 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
   13874:	687b      	ldr	r3, [r7, #4]
   13876:	683a      	ldr	r2, [r7, #0]
   13878:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
   1387a:	687b      	ldr	r3, [r7, #4]
   1387c:	689b      	ldr	r3, [r3, #8]
   1387e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
   13880:	697b      	ldr	r3, [r7, #20]
   13882:	2b00      	cmp	r3, #0
   13884:	d109      	bne.n	1389a <dir_sdi+0x5c>
   13886:	693b      	ldr	r3, [r7, #16]
   13888:	781b      	ldrb	r3, [r3, #0]
   1388a:	2b02      	cmp	r3, #2
   1388c:	d905      	bls.n	1389a <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
   1388e:	693b      	ldr	r3, [r7, #16]
   13890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13892:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
   13894:	687b      	ldr	r3, [r7, #4]
   13896:	2200      	movs	r2, #0
   13898:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
   1389a:	697b      	ldr	r3, [r7, #20]
   1389c:	2b00      	cmp	r3, #0
   1389e:	d10c      	bne.n	138ba <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
   138a0:	683b      	ldr	r3, [r7, #0]
   138a2:	095b      	lsrs	r3, r3, #5
   138a4:	693a      	ldr	r2, [r7, #16]
   138a6:	8912      	ldrh	r2, [r2, #8]
   138a8:	4293      	cmp	r3, r2
   138aa:	d301      	bcc.n	138b0 <dir_sdi+0x72>
   138ac:	2302      	movs	r3, #2
   138ae:	e048      	b.n	13942 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
   138b0:	693b      	ldr	r3, [r7, #16]
   138b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   138b4:	687b      	ldr	r3, [r7, #4]
   138b6:	639a      	str	r2, [r3, #56]	; 0x38
   138b8:	e029      	b.n	1390e <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
   138ba:	693b      	ldr	r3, [r7, #16]
   138bc:	895b      	ldrh	r3, [r3, #10]
   138be:	025b      	lsls	r3, r3, #9
   138c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
   138c2:	e019      	b.n	138f8 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
   138c4:	687b      	ldr	r3, [r7, #4]
   138c6:	6979      	ldr	r1, [r7, #20]
   138c8:	4618      	mov	r0, r3
   138ca:	f7ff f9b1 	bl	12c30 <get_fat>
   138ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   138d0:	697b      	ldr	r3, [r7, #20]
   138d2:	f1b3 3fff 	cmp.w	r3, #4294967295
   138d6:	d101      	bne.n	138dc <dir_sdi+0x9e>
   138d8:	2301      	movs	r3, #1
   138da:	e032      	b.n	13942 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
   138dc:	697b      	ldr	r3, [r7, #20]
   138de:	2b01      	cmp	r3, #1
   138e0:	d904      	bls.n	138ec <dir_sdi+0xae>
   138e2:	693b      	ldr	r3, [r7, #16]
   138e4:	69db      	ldr	r3, [r3, #28]
   138e6:	697a      	ldr	r2, [r7, #20]
   138e8:	429a      	cmp	r2, r3
   138ea:	d301      	bcc.n	138f0 <dir_sdi+0xb2>
   138ec:	2302      	movs	r3, #2
   138ee:	e028      	b.n	13942 <dir_sdi+0x104>
			ofs -= csz;
   138f0:	683a      	ldr	r2, [r7, #0]
   138f2:	68fb      	ldr	r3, [r7, #12]
   138f4:	1ad3      	subs	r3, r2, r3
   138f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
   138f8:	683a      	ldr	r2, [r7, #0]
   138fa:	68fb      	ldr	r3, [r7, #12]
   138fc:	429a      	cmp	r2, r3
   138fe:	d2e1      	bcs.n	138c4 <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
   13900:	6979      	ldr	r1, [r7, #20]
   13902:	6938      	ldr	r0, [r7, #16]
   13904:	f7ff f974 	bl	12bf0 <clst2sect>
   13908:	4602      	mov	r2, r0
   1390a:	687b      	ldr	r3, [r7, #4]
   1390c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
   1390e:	687b      	ldr	r3, [r7, #4]
   13910:	697a      	ldr	r2, [r7, #20]
   13912:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
   13914:	687b      	ldr	r3, [r7, #4]
   13916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   13918:	2b00      	cmp	r3, #0
   1391a:	d101      	bne.n	13920 <dir_sdi+0xe2>
   1391c:	2302      	movs	r3, #2
   1391e:	e010      	b.n	13942 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
   13920:	687b      	ldr	r3, [r7, #4]
   13922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   13924:	683b      	ldr	r3, [r7, #0]
   13926:	0a5b      	lsrs	r3, r3, #9
   13928:	441a      	add	r2, r3
   1392a:	687b      	ldr	r3, [r7, #4]
   1392c:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
   1392e:	693b      	ldr	r3, [r7, #16]
   13930:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   13934:	683b      	ldr	r3, [r7, #0]
   13936:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1393a:	441a      	add	r2, r3
   1393c:	687b      	ldr	r3, [r7, #4]
   1393e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
   13940:	2300      	movs	r3, #0
}
   13942:	4618      	mov	r0, r3
   13944:	3718      	adds	r7, #24
   13946:	46bd      	mov	sp, r7
   13948:	bd80      	pop	{r7, pc}

0001394a <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   1394a:	b580      	push	{r7, lr}
   1394c:	b086      	sub	sp, #24
   1394e:	af00      	add	r7, sp, #0
   13950:	6078      	str	r0, [r7, #4]
   13952:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
   13954:	687b      	ldr	r3, [r7, #4]
   13956:	681b      	ldr	r3, [r3, #0]
   13958:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
   1395a:	687b      	ldr	r3, [r7, #4]
   1395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1395e:	3320      	adds	r3, #32
   13960:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
   13962:	693b      	ldr	r3, [r7, #16]
   13964:	781b      	ldrb	r3, [r3, #0]
   13966:	2b04      	cmp	r3, #4
   13968:	d102      	bne.n	13970 <dir_next+0x26>
   1396a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1396e:	e001      	b.n	13974 <dir_next+0x2a>
   13970:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13974:	68fb      	ldr	r3, [r7, #12]
   13976:	429a      	cmp	r2, r3
   13978:	d802      	bhi.n	13980 <dir_next+0x36>
   1397a:	687b      	ldr	r3, [r7, #4]
   1397c:	2200      	movs	r2, #0
   1397e:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
   13980:	687b      	ldr	r3, [r7, #4]
   13982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   13984:	2b00      	cmp	r3, #0
   13986:	d101      	bne.n	1398c <dir_next+0x42>
   13988:	2304      	movs	r3, #4
   1398a:	e07f      	b.n	13a8c <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
   1398c:	68fb      	ldr	r3, [r7, #12]
   1398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13992:	2b00      	cmp	r3, #0
   13994:	d16d      	bne.n	13a72 <dir_next+0x128>
		dp->sect++;				/* Next sector */
   13996:	687b      	ldr	r3, [r7, #4]
   13998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1399a:	1c5a      	adds	r2, r3, #1
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
   139a0:	687b      	ldr	r3, [r7, #4]
   139a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   139a4:	2b00      	cmp	r3, #0
   139a6:	d10a      	bne.n	139be <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
   139a8:	68fb      	ldr	r3, [r7, #12]
   139aa:	095b      	lsrs	r3, r3, #5
   139ac:	693a      	ldr	r2, [r7, #16]
   139ae:	8912      	ldrh	r2, [r2, #8]
   139b0:	4293      	cmp	r3, r2
   139b2:	d35e      	bcc.n	13a72 <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
   139b4:	687b      	ldr	r3, [r7, #4]
   139b6:	2200      	movs	r2, #0
   139b8:	639a      	str	r2, [r3, #56]	; 0x38
   139ba:	2304      	movs	r3, #4
   139bc:	e066      	b.n	13a8c <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
   139be:	68fb      	ldr	r3, [r7, #12]
   139c0:	0a5b      	lsrs	r3, r3, #9
   139c2:	693a      	ldr	r2, [r7, #16]
   139c4:	8952      	ldrh	r2, [r2, #10]
   139c6:	3a01      	subs	r2, #1
   139c8:	4013      	ands	r3, r2
   139ca:	2b00      	cmp	r3, #0
   139cc:	d151      	bne.n	13a72 <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
   139ce:	687a      	ldr	r2, [r7, #4]
   139d0:	687b      	ldr	r3, [r7, #4]
   139d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   139d4:	4619      	mov	r1, r3
   139d6:	4610      	mov	r0, r2
   139d8:	f7ff f92a 	bl	12c30 <get_fat>
   139dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
   139de:	697b      	ldr	r3, [r7, #20]
   139e0:	2b01      	cmp	r3, #1
   139e2:	d801      	bhi.n	139e8 <dir_next+0x9e>
   139e4:	2302      	movs	r3, #2
   139e6:	e051      	b.n	13a8c <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   139e8:	697b      	ldr	r3, [r7, #20]
   139ea:	f1b3 3fff 	cmp.w	r3, #4294967295
   139ee:	d101      	bne.n	139f4 <dir_next+0xaa>
   139f0:	2301      	movs	r3, #1
   139f2:	e04b      	b.n	13a8c <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
   139f4:	693b      	ldr	r3, [r7, #16]
   139f6:	69db      	ldr	r3, [r3, #28]
   139f8:	697a      	ldr	r2, [r7, #20]
   139fa:	429a      	cmp	r2, r3
   139fc:	d32f      	bcc.n	13a5e <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
   139fe:	683b      	ldr	r3, [r7, #0]
   13a00:	2b00      	cmp	r3, #0
   13a02:	d104      	bne.n	13a0e <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
   13a04:	687b      	ldr	r3, [r7, #4]
   13a06:	2200      	movs	r2, #0
   13a08:	639a      	str	r2, [r3, #56]	; 0x38
   13a0a:	2304      	movs	r3, #4
   13a0c:	e03e      	b.n	13a8c <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
   13a0e:	687a      	ldr	r2, [r7, #4]
   13a10:	687b      	ldr	r3, [r7, #4]
   13a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13a14:	4619      	mov	r1, r3
   13a16:	4610      	mov	r0, r2
   13a18:	f7ff fd4c 	bl	134b4 <create_chain>
   13a1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   13a1e:	697b      	ldr	r3, [r7, #20]
   13a20:	2b00      	cmp	r3, #0
   13a22:	d101      	bne.n	13a28 <dir_next+0xde>
   13a24:	2307      	movs	r3, #7
   13a26:	e031      	b.n	13a8c <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
   13a28:	697b      	ldr	r3, [r7, #20]
   13a2a:	2b01      	cmp	r3, #1
   13a2c:	d101      	bne.n	13a32 <dir_next+0xe8>
   13a2e:	2302      	movs	r3, #2
   13a30:	e02c      	b.n	13a8c <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   13a32:	697b      	ldr	r3, [r7, #20]
   13a34:	f1b3 3fff 	cmp.w	r3, #4294967295
   13a38:	d101      	bne.n	13a3e <dir_next+0xf4>
   13a3a:	2301      	movs	r3, #1
   13a3c:	e026      	b.n	13a8c <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
   13a3e:	6979      	ldr	r1, [r7, #20]
   13a40:	6938      	ldr	r0, [r7, #16]
   13a42:	f7ff feb4 	bl	137ae <dir_clear>
   13a46:	4603      	mov	r3, r0
   13a48:	2b00      	cmp	r3, #0
   13a4a:	d001      	beq.n	13a50 <dir_next+0x106>
   13a4c:	2301      	movs	r3, #1
   13a4e:	e01d      	b.n	13a8c <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
   13a50:	687b      	ldr	r3, [r7, #4]
   13a52:	79db      	ldrb	r3, [r3, #7]
   13a54:	f043 0304 	orr.w	r3, r3, #4
   13a58:	b2da      	uxtb	r2, r3
   13a5a:	687b      	ldr	r3, [r7, #4]
   13a5c:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
   13a5e:	687b      	ldr	r3, [r7, #4]
   13a60:	697a      	ldr	r2, [r7, #20]
   13a62:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
   13a64:	6979      	ldr	r1, [r7, #20]
   13a66:	6938      	ldr	r0, [r7, #16]
   13a68:	f7ff f8c2 	bl	12bf0 <clst2sect>
   13a6c:	4602      	mov	r2, r0
   13a6e:	687b      	ldr	r3, [r7, #4]
   13a70:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
   13a72:	687b      	ldr	r3, [r7, #4]
   13a74:	68fa      	ldr	r2, [r7, #12]
   13a76:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
   13a78:	693b      	ldr	r3, [r7, #16]
   13a7a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   13a7e:	68fb      	ldr	r3, [r7, #12]
   13a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
   13a84:	441a      	add	r2, r3
   13a86:	687b      	ldr	r3, [r7, #4]
   13a88:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
   13a8a:	2300      	movs	r3, #0
}
   13a8c:	4618      	mov	r0, r3
   13a8e:	3718      	adds	r7, #24
   13a90:	46bd      	mov	sp, r7
   13a92:	bd80      	pop	{r7, pc}

00013a94 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
   13a94:	b580      	push	{r7, lr}
   13a96:	b086      	sub	sp, #24
   13a98:	af00      	add	r7, sp, #0
   13a9a:	6078      	str	r0, [r7, #4]
   13a9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
   13a9e:	687b      	ldr	r3, [r7, #4]
   13aa0:	681b      	ldr	r3, [r3, #0]
   13aa2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
   13aa4:	2100      	movs	r1, #0
   13aa6:	6878      	ldr	r0, [r7, #4]
   13aa8:	f7ff fec9 	bl	1383e <dir_sdi>
   13aac:	4603      	mov	r3, r0
   13aae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
   13ab0:	7dfb      	ldrb	r3, [r7, #23]
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d140      	bne.n	13b38 <dir_alloc+0xa4>
		n = 0;
   13ab6:	2300      	movs	r3, #0
   13ab8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
   13aba:	687b      	ldr	r3, [r7, #4]
   13abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   13abe:	4619      	mov	r1, r3
   13ac0:	68f8      	ldr	r0, [r7, #12]
   13ac2:	f7fe fff9 	bl	12ab8 <move_window>
   13ac6:	4603      	mov	r3, r0
   13ac8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
   13aca:	7dfb      	ldrb	r3, [r7, #23]
   13acc:	2b00      	cmp	r3, #0
   13ace:	d132      	bne.n	13b36 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
   13ad0:	68fb      	ldr	r3, [r7, #12]
   13ad2:	781b      	ldrb	r3, [r3, #0]
   13ad4:	2b04      	cmp	r3, #4
   13ad6:	d108      	bne.n	13aea <dir_alloc+0x56>
   13ad8:	687b      	ldr	r3, [r7, #4]
   13ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13adc:	781b      	ldrb	r3, [r3, #0]
   13ade:	b25b      	sxtb	r3, r3
   13ae0:	43db      	mvns	r3, r3
   13ae2:	b2db      	uxtb	r3, r3
   13ae4:	09db      	lsrs	r3, r3, #7
   13ae6:	b2db      	uxtb	r3, r3
   13ae8:	e00f      	b.n	13b0a <dir_alloc+0x76>
   13aea:	687b      	ldr	r3, [r7, #4]
   13aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13aee:	781b      	ldrb	r3, [r3, #0]
   13af0:	2be5      	cmp	r3, #229	; 0xe5
   13af2:	d004      	beq.n	13afe <dir_alloc+0x6a>
   13af4:	687b      	ldr	r3, [r7, #4]
   13af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   13af8:	781b      	ldrb	r3, [r3, #0]
   13afa:	2b00      	cmp	r3, #0
   13afc:	d101      	bne.n	13b02 <dir_alloc+0x6e>
   13afe:	2301      	movs	r3, #1
   13b00:	e000      	b.n	13b04 <dir_alloc+0x70>
   13b02:	2300      	movs	r3, #0
   13b04:	f003 0301 	and.w	r3, r3, #1
   13b08:	b2db      	uxtb	r3, r3
   13b0a:	2b00      	cmp	r3, #0
   13b0c:	d007      	beq.n	13b1e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
   13b0e:	693b      	ldr	r3, [r7, #16]
   13b10:	3301      	adds	r3, #1
   13b12:	613b      	str	r3, [r7, #16]
   13b14:	693a      	ldr	r2, [r7, #16]
   13b16:	683b      	ldr	r3, [r7, #0]
   13b18:	429a      	cmp	r2, r3
   13b1a:	d102      	bne.n	13b22 <dir_alloc+0x8e>
   13b1c:	e00c      	b.n	13b38 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
   13b1e:	2300      	movs	r3, #0
   13b20:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
   13b22:	2101      	movs	r1, #1
   13b24:	6878      	ldr	r0, [r7, #4]
   13b26:	f7ff ff10 	bl	1394a <dir_next>
   13b2a:	4603      	mov	r3, r0
   13b2c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
   13b2e:	7dfb      	ldrb	r3, [r7, #23]
   13b30:	2b00      	cmp	r3, #0
   13b32:	d0c2      	beq.n	13aba <dir_alloc+0x26>
   13b34:	e000      	b.n	13b38 <dir_alloc+0xa4>
			if (res != FR_OK) break;
   13b36:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
   13b38:	7dfb      	ldrb	r3, [r7, #23]
   13b3a:	2b04      	cmp	r3, #4
   13b3c:	d101      	bne.n	13b42 <dir_alloc+0xae>
   13b3e:	2307      	movs	r3, #7
   13b40:	75fb      	strb	r3, [r7, #23]
	return res;
   13b42:	7dfb      	ldrb	r3, [r7, #23]
}
   13b44:	4618      	mov	r0, r3
   13b46:	3718      	adds	r7, #24
   13b48:	46bd      	mov	sp, r7
   13b4a:	bd80      	pop	{r7, pc}

00013b4c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
   13b4c:	b580      	push	{r7, lr}
   13b4e:	b084      	sub	sp, #16
   13b50:	af00      	add	r7, sp, #0
   13b52:	6078      	str	r0, [r7, #4]
   13b54:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
   13b56:	683b      	ldr	r3, [r7, #0]
   13b58:	331a      	adds	r3, #26
   13b5a:	4618      	mov	r0, r3
   13b5c:	f7fe fc9c 	bl	12498 <ld_word>
   13b60:	4603      	mov	r3, r0
   13b62:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
   13b64:	687b      	ldr	r3, [r7, #4]
   13b66:	781b      	ldrb	r3, [r3, #0]
   13b68:	2b03      	cmp	r3, #3
   13b6a:	d109      	bne.n	13b80 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
   13b6c:	683b      	ldr	r3, [r7, #0]
   13b6e:	3314      	adds	r3, #20
   13b70:	4618      	mov	r0, r3
   13b72:	f7fe fc91 	bl	12498 <ld_word>
   13b76:	4603      	mov	r3, r0
   13b78:	041b      	lsls	r3, r3, #16
   13b7a:	68fa      	ldr	r2, [r7, #12]
   13b7c:	4313      	orrs	r3, r2
   13b7e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
   13b80:	68fb      	ldr	r3, [r7, #12]
}
   13b82:	4618      	mov	r0, r3
   13b84:	3710      	adds	r7, #16
   13b86:	46bd      	mov	sp, r7
   13b88:	bd80      	pop	{r7, pc}

00013b8a <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
   13b8a:	b580      	push	{r7, lr}
   13b8c:	b084      	sub	sp, #16
   13b8e:	af00      	add	r7, sp, #0
   13b90:	60f8      	str	r0, [r7, #12]
   13b92:	60b9      	str	r1, [r7, #8]
   13b94:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
   13b96:	68bb      	ldr	r3, [r7, #8]
   13b98:	331a      	adds	r3, #26
   13b9a:	687a      	ldr	r2, [r7, #4]
   13b9c:	b292      	uxth	r2, r2
   13b9e:	4611      	mov	r1, r2
   13ba0:	4618      	mov	r0, r3
   13ba2:	f7fe fd73 	bl	1268c <st_word>
	if (fs->fs_type == FS_FAT32) {
   13ba6:	68fb      	ldr	r3, [r7, #12]
   13ba8:	781b      	ldrb	r3, [r3, #0]
   13baa:	2b03      	cmp	r3, #3
   13bac:	d109      	bne.n	13bc2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
   13bae:	68bb      	ldr	r3, [r7, #8]
   13bb0:	f103 0214 	add.w	r2, r3, #20
   13bb4:	687b      	ldr	r3, [r7, #4]
   13bb6:	0c1b      	lsrs	r3, r3, #16
   13bb8:	b29b      	uxth	r3, r3
   13bba:	4619      	mov	r1, r3
   13bbc:	4610      	mov	r0, r2
   13bbe:	f7fe fd65 	bl	1268c <st_word>
	}
}
   13bc2:	bf00      	nop
   13bc4:	3710      	adds	r7, #16
   13bc6:	46bd      	mov	sp, r7
   13bc8:	bd80      	pop	{r7, pc}
	...

00013bcc <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
   13bcc:	b590      	push	{r4, r7, lr}
   13bce:	b087      	sub	sp, #28
   13bd0:	af00      	add	r7, sp, #0
   13bd2:	6078      	str	r0, [r7, #4]
   13bd4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
   13bd6:	683b      	ldr	r3, [r7, #0]
   13bd8:	331a      	adds	r3, #26
   13bda:	4618      	mov	r0, r3
   13bdc:	f7fe fc5c 	bl	12498 <ld_word>
   13be0:	4603      	mov	r3, r0
   13be2:	2b00      	cmp	r3, #0
   13be4:	d001      	beq.n	13bea <cmp_lfn+0x1e>
   13be6:	2300      	movs	r3, #0
   13be8:	e058      	b.n	13c9c <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
   13bea:	683b      	ldr	r3, [r7, #0]
   13bec:	781b      	ldrb	r3, [r3, #0]
   13bee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13bf2:	1e5a      	subs	r2, r3, #1
   13bf4:	4613      	mov	r3, r2
   13bf6:	005b      	lsls	r3, r3, #1
   13bf8:	4413      	add	r3, r2
   13bfa:	009b      	lsls	r3, r3, #2
   13bfc:	4413      	add	r3, r2
   13bfe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   13c00:	2301      	movs	r3, #1
   13c02:	81fb      	strh	r3, [r7, #14]
   13c04:	2300      	movs	r3, #0
   13c06:	613b      	str	r3, [r7, #16]
   13c08:	e032      	b.n	13c70 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
   13c0a:	4a26      	ldr	r2, [pc, #152]	; (13ca4 <cmp_lfn+0xd8>)
   13c0c:	693b      	ldr	r3, [r7, #16]
   13c0e:	4413      	add	r3, r2
   13c10:	781b      	ldrb	r3, [r3, #0]
   13c12:	461a      	mov	r2, r3
   13c14:	683b      	ldr	r3, [r7, #0]
   13c16:	4413      	add	r3, r2
   13c18:	4618      	mov	r0, r3
   13c1a:	f7fe fc3d 	bl	12498 <ld_word>
   13c1e:	4603      	mov	r3, r0
   13c20:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
   13c22:	89fb      	ldrh	r3, [r7, #14]
   13c24:	2b00      	cmp	r3, #0
   13c26:	d019      	beq.n	13c5c <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
   13c28:	697b      	ldr	r3, [r7, #20]
   13c2a:	2bff      	cmp	r3, #255	; 0xff
   13c2c:	d811      	bhi.n	13c52 <cmp_lfn+0x86>
   13c2e:	89bb      	ldrh	r3, [r7, #12]
   13c30:	4618      	mov	r0, r3
   13c32:	f004 f89b 	bl	17d6c <ff_wtoupper>
   13c36:	4604      	mov	r4, r0
   13c38:	697b      	ldr	r3, [r7, #20]
   13c3a:	1c5a      	adds	r2, r3, #1
   13c3c:	617a      	str	r2, [r7, #20]
   13c3e:	005b      	lsls	r3, r3, #1
   13c40:	687a      	ldr	r2, [r7, #4]
   13c42:	4413      	add	r3, r2
   13c44:	881b      	ldrh	r3, [r3, #0]
   13c46:	4618      	mov	r0, r3
   13c48:	f004 f890 	bl	17d6c <ff_wtoupper>
   13c4c:	4603      	mov	r3, r0
   13c4e:	429c      	cmp	r4, r3
   13c50:	d001      	beq.n	13c56 <cmp_lfn+0x8a>
				return 0;					/* Not matched */
   13c52:	2300      	movs	r3, #0
   13c54:	e022      	b.n	13c9c <cmp_lfn+0xd0>
			}
			wc = uc;
   13c56:	89bb      	ldrh	r3, [r7, #12]
   13c58:	81fb      	strh	r3, [r7, #14]
   13c5a:	e006      	b.n	13c6a <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   13c5c:	89bb      	ldrh	r3, [r7, #12]
   13c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13c62:	4293      	cmp	r3, r2
   13c64:	d001      	beq.n	13c6a <cmp_lfn+0x9e>
   13c66:	2300      	movs	r3, #0
   13c68:	e018      	b.n	13c9c <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   13c6a:	693b      	ldr	r3, [r7, #16]
   13c6c:	3301      	adds	r3, #1
   13c6e:	613b      	str	r3, [r7, #16]
   13c70:	693b      	ldr	r3, [r7, #16]
   13c72:	2b0c      	cmp	r3, #12
   13c74:	d9c9      	bls.n	13c0a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
   13c76:	683b      	ldr	r3, [r7, #0]
   13c78:	781b      	ldrb	r3, [r3, #0]
   13c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13c7e:	2b00      	cmp	r3, #0
   13c80:	d00b      	beq.n	13c9a <cmp_lfn+0xce>
   13c82:	89fb      	ldrh	r3, [r7, #14]
   13c84:	2b00      	cmp	r3, #0
   13c86:	d008      	beq.n	13c9a <cmp_lfn+0xce>
   13c88:	697b      	ldr	r3, [r7, #20]
   13c8a:	005b      	lsls	r3, r3, #1
   13c8c:	687a      	ldr	r2, [r7, #4]
   13c8e:	4413      	add	r3, r2
   13c90:	881b      	ldrh	r3, [r3, #0]
   13c92:	2b00      	cmp	r3, #0
   13c94:	d001      	beq.n	13c9a <cmp_lfn+0xce>
   13c96:	2300      	movs	r3, #0
   13c98:	e000      	b.n	13c9c <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
   13c9a:	2301      	movs	r3, #1
}
   13c9c:	4618      	mov	r0, r3
   13c9e:	371c      	adds	r7, #28
   13ca0:	46bd      	mov	sp, r7
   13ca2:	bd90      	pop	{r4, r7, pc}
   13ca4:	0001a1c8 	.word	0x0001a1c8

00013ca8 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
   13ca8:	b580      	push	{r7, lr}
   13caa:	b086      	sub	sp, #24
   13cac:	af00      	add	r7, sp, #0
   13cae:	6078      	str	r0, [r7, #4]
   13cb0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
   13cb2:	683b      	ldr	r3, [r7, #0]
   13cb4:	331a      	adds	r3, #26
   13cb6:	4618      	mov	r0, r3
   13cb8:	f7fe fbee 	bl	12498 <ld_word>
   13cbc:	4603      	mov	r3, r0
   13cbe:	2b00      	cmp	r3, #0
   13cc0:	d001      	beq.n	13cc6 <pick_lfn+0x1e>
   13cc2:	2300      	movs	r3, #0
   13cc4:	e050      	b.n	13d68 <pick_lfn+0xc0>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
   13cc6:	683b      	ldr	r3, [r7, #0]
   13cc8:	781b      	ldrb	r3, [r3, #0]
   13cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   13cce:	1e5a      	subs	r2, r3, #1
   13cd0:	4613      	mov	r3, r2
   13cd2:	005b      	lsls	r3, r3, #1
   13cd4:	4413      	add	r3, r2
   13cd6:	009b      	lsls	r3, r3, #2
   13cd8:	4413      	add	r3, r2
   13cda:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   13cdc:	2301      	movs	r3, #1
   13cde:	81fb      	strh	r3, [r7, #14]
   13ce0:	2300      	movs	r3, #0
   13ce2:	613b      	str	r3, [r7, #16]
   13ce4:	e028      	b.n	13d38 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
   13ce6:	4a22      	ldr	r2, [pc, #136]	; (13d70 <pick_lfn+0xc8>)
   13ce8:	693b      	ldr	r3, [r7, #16]
   13cea:	4413      	add	r3, r2
   13cec:	781b      	ldrb	r3, [r3, #0]
   13cee:	461a      	mov	r2, r3
   13cf0:	683b      	ldr	r3, [r7, #0]
   13cf2:	4413      	add	r3, r2
   13cf4:	4618      	mov	r0, r3
   13cf6:	f7fe fbcf 	bl	12498 <ld_word>
   13cfa:	4603      	mov	r3, r0
   13cfc:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
   13cfe:	89fb      	ldrh	r3, [r7, #14]
   13d00:	2b00      	cmp	r3, #0
   13d02:	d00f      	beq.n	13d24 <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
   13d04:	697b      	ldr	r3, [r7, #20]
   13d06:	2bff      	cmp	r3, #255	; 0xff
   13d08:	d901      	bls.n	13d0e <pick_lfn+0x66>
   13d0a:	2300      	movs	r3, #0
   13d0c:	e02c      	b.n	13d68 <pick_lfn+0xc0>
			lfnbuf[i++] = wc = uc;			/* Store it */
   13d0e:	89bb      	ldrh	r3, [r7, #12]
   13d10:	81fb      	strh	r3, [r7, #14]
   13d12:	697b      	ldr	r3, [r7, #20]
   13d14:	1c5a      	adds	r2, r3, #1
   13d16:	617a      	str	r2, [r7, #20]
   13d18:	005b      	lsls	r3, r3, #1
   13d1a:	687a      	ldr	r2, [r7, #4]
   13d1c:	4413      	add	r3, r2
   13d1e:	89fa      	ldrh	r2, [r7, #14]
   13d20:	801a      	strh	r2, [r3, #0]
   13d22:	e006      	b.n	13d32 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
   13d24:	89bb      	ldrh	r3, [r7, #12]
   13d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13d2a:	4293      	cmp	r3, r2
   13d2c:	d001      	beq.n	13d32 <pick_lfn+0x8a>
   13d2e:	2300      	movs	r3, #0
   13d30:	e01a      	b.n	13d68 <pick_lfn+0xc0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
   13d32:	693b      	ldr	r3, [r7, #16]
   13d34:	3301      	adds	r3, #1
   13d36:	613b      	str	r3, [r7, #16]
   13d38:	693b      	ldr	r3, [r7, #16]
   13d3a:	2b0c      	cmp	r3, #12
   13d3c:	d9d3      	bls.n	13ce6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not terminated */
   13d3e:	683b      	ldr	r3, [r7, #0]
   13d40:	781b      	ldrb	r3, [r3, #0]
   13d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
   13d46:	2b00      	cmp	r3, #0
   13d48:	d00d      	beq.n	13d66 <pick_lfn+0xbe>
   13d4a:	89fb      	ldrh	r3, [r7, #14]
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d00a      	beq.n	13d66 <pick_lfn+0xbe>
		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
   13d50:	697b      	ldr	r3, [r7, #20]
   13d52:	2bff      	cmp	r3, #255	; 0xff
   13d54:	d901      	bls.n	13d5a <pick_lfn+0xb2>
   13d56:	2300      	movs	r3, #0
   13d58:	e006      	b.n	13d68 <pick_lfn+0xc0>
		lfnbuf[i] = 0;
   13d5a:	697b      	ldr	r3, [r7, #20]
   13d5c:	005b      	lsls	r3, r3, #1
   13d5e:	687a      	ldr	r2, [r7, #4]
   13d60:	4413      	add	r3, r2
   13d62:	2200      	movs	r2, #0
   13d64:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
   13d66:	2301      	movs	r3, #1
}
   13d68:	4618      	mov	r0, r3
   13d6a:	3718      	adds	r7, #24
   13d6c:	46bd      	mov	sp, r7
   13d6e:	bd80      	pop	{r7, pc}
   13d70:	0001a1c8 	.word	0x0001a1c8

00013d74 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
   13d74:	b580      	push	{r7, lr}
   13d76:	b088      	sub	sp, #32
   13d78:	af00      	add	r7, sp, #0
   13d7a:	60f8      	str	r0, [r7, #12]
   13d7c:	60b9      	str	r1, [r7, #8]
   13d7e:	4611      	mov	r1, r2
   13d80:	461a      	mov	r2, r3
   13d82:	460b      	mov	r3, r1
   13d84:	71fb      	strb	r3, [r7, #7]
   13d86:	4613      	mov	r3, r2
   13d88:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
   13d8a:	68bb      	ldr	r3, [r7, #8]
   13d8c:	330d      	adds	r3, #13
   13d8e:	79ba      	ldrb	r2, [r7, #6]
   13d90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   13d92:	68bb      	ldr	r3, [r7, #8]
   13d94:	330b      	adds	r3, #11
   13d96:	220f      	movs	r2, #15
   13d98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   13d9a:	68bb      	ldr	r3, [r7, #8]
   13d9c:	330c      	adds	r3, #12
   13d9e:	2200      	movs	r2, #0
   13da0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
   13da2:	68bb      	ldr	r3, [r7, #8]
   13da4:	331a      	adds	r3, #26
   13da6:	2100      	movs	r1, #0
   13da8:	4618      	mov	r0, r3
   13daa:	f7fe fc6f 	bl	1268c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
   13dae:	79fb      	ldrb	r3, [r7, #7]
   13db0:	1e5a      	subs	r2, r3, #1
   13db2:	4613      	mov	r3, r2
   13db4:	005b      	lsls	r3, r3, #1
   13db6:	4413      	add	r3, r2
   13db8:	009b      	lsls	r3, r3, #2
   13dba:	4413      	add	r3, r2
   13dbc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   13dbe:	2300      	movs	r3, #0
   13dc0:	82fb      	strh	r3, [r7, #22]
   13dc2:	2300      	movs	r3, #0
   13dc4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
   13dc6:	8afb      	ldrh	r3, [r7, #22]
   13dc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13dcc:	4293      	cmp	r3, r2
   13dce:	d007      	beq.n	13de0 <put_lfn+0x6c>
   13dd0:	69fb      	ldr	r3, [r7, #28]
   13dd2:	1c5a      	adds	r2, r3, #1
   13dd4:	61fa      	str	r2, [r7, #28]
   13dd6:	005b      	lsls	r3, r3, #1
   13dd8:	68fa      	ldr	r2, [r7, #12]
   13dda:	4413      	add	r3, r2
   13ddc:	881b      	ldrh	r3, [r3, #0]
   13dde:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
   13de0:	4a17      	ldr	r2, [pc, #92]	; (13e40 <put_lfn+0xcc>)
   13de2:	69bb      	ldr	r3, [r7, #24]
   13de4:	4413      	add	r3, r2
   13de6:	781b      	ldrb	r3, [r3, #0]
   13de8:	461a      	mov	r2, r3
   13dea:	68bb      	ldr	r3, [r7, #8]
   13dec:	4413      	add	r3, r2
   13dee:	8afa      	ldrh	r2, [r7, #22]
   13df0:	4611      	mov	r1, r2
   13df2:	4618      	mov	r0, r3
   13df4:	f7fe fc4a 	bl	1268c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
   13df8:	8afb      	ldrh	r3, [r7, #22]
   13dfa:	2b00      	cmp	r3, #0
   13dfc:	d102      	bne.n	13e04 <put_lfn+0x90>
   13dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13e02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
   13e04:	69bb      	ldr	r3, [r7, #24]
   13e06:	3301      	adds	r3, #1
   13e08:	61bb      	str	r3, [r7, #24]
   13e0a:	69bb      	ldr	r3, [r7, #24]
   13e0c:	2b0c      	cmp	r3, #12
   13e0e:	d9da      	bls.n	13dc6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
   13e10:	8afb      	ldrh	r3, [r7, #22]
   13e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
   13e16:	4293      	cmp	r3, r2
   13e18:	d006      	beq.n	13e28 <put_lfn+0xb4>
   13e1a:	69fb      	ldr	r3, [r7, #28]
   13e1c:	005b      	lsls	r3, r3, #1
   13e1e:	68fa      	ldr	r2, [r7, #12]
   13e20:	4413      	add	r3, r2
   13e22:	881b      	ldrh	r3, [r3, #0]
   13e24:	2b00      	cmp	r3, #0
   13e26:	d103      	bne.n	13e30 <put_lfn+0xbc>
   13e28:	79fb      	ldrb	r3, [r7, #7]
   13e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13e2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   13e30:	68bb      	ldr	r3, [r7, #8]
   13e32:	79fa      	ldrb	r2, [r7, #7]
   13e34:	701a      	strb	r2, [r3, #0]
}
   13e36:	bf00      	nop
   13e38:	3720      	adds	r7, #32
   13e3a:	46bd      	mov	sp, r7
   13e3c:	bd80      	pop	{r7, pc}
   13e3e:	bf00      	nop
   13e40:	0001a1c8 	.word	0x0001a1c8

00013e44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
   13e44:	b580      	push	{r7, lr}
   13e46:	b08c      	sub	sp, #48	; 0x30
   13e48:	af00      	add	r7, sp, #0
   13e4a:	60f8      	str	r0, [r7, #12]
   13e4c:	60b9      	str	r1, [r7, #8]
   13e4e:	607a      	str	r2, [r7, #4]
   13e50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sreg;


	mem_cpy(dst, src, 11);
   13e52:	220b      	movs	r2, #11
   13e54:	68b9      	ldr	r1, [r7, #8]
   13e56:	68f8      	ldr	r0, [r7, #12]
   13e58:	f7fe fce6 	bl	12828 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
   13e5c:	683b      	ldr	r3, [r7, #0]
   13e5e:	2b05      	cmp	r3, #5
   13e60:	d92b      	bls.n	13eba <gen_numname+0x76>
		sreg = seq;
   13e62:	683b      	ldr	r3, [r7, #0]
   13e64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
   13e66:	e022      	b.n	13eae <gen_numname+0x6a>
			wc = *lfn++;
   13e68:	687b      	ldr	r3, [r7, #4]
   13e6a:	1c9a      	adds	r2, r3, #2
   13e6c:	607a      	str	r2, [r7, #4]
   13e6e:	881b      	ldrh	r3, [r3, #0]
   13e70:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
   13e72:	2300      	movs	r3, #0
   13e74:	62bb      	str	r3, [r7, #40]	; 0x28
   13e76:	e017      	b.n	13ea8 <gen_numname+0x64>
				sreg = (sreg << 1) + (wc & 1);
   13e78:	69fb      	ldr	r3, [r7, #28]
   13e7a:	005a      	lsls	r2, r3, #1
   13e7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   13e7e:	f003 0301 	and.w	r3, r3, #1
   13e82:	4413      	add	r3, r2
   13e84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
   13e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   13e88:	085b      	lsrs	r3, r3, #1
   13e8a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sreg & 0x10000) sreg ^= 0x11021;
   13e8c:	69fb      	ldr	r3, [r7, #28]
   13e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   13e92:	2b00      	cmp	r3, #0
   13e94:	d005      	beq.n	13ea2 <gen_numname+0x5e>
   13e96:	69fb      	ldr	r3, [r7, #28]
   13e98:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
   13e9c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
   13ea0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
   13ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13ea4:	3301      	adds	r3, #1
   13ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   13ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13eaa:	2b0f      	cmp	r3, #15
   13eac:	d9e4      	bls.n	13e78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
   13eae:	687b      	ldr	r3, [r7, #4]
   13eb0:	881b      	ldrh	r3, [r3, #0]
   13eb2:	2b00      	cmp	r3, #0
   13eb4:	d1d8      	bne.n	13e68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sreg;
   13eb6:	69fb      	ldr	r3, [r7, #28]
   13eb8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
   13eba:	2307      	movs	r3, #7
   13ebc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
   13ebe:	683b      	ldr	r3, [r7, #0]
   13ec0:	b2db      	uxtb	r3, r3
   13ec2:	f003 030f 	and.w	r3, r3, #15
   13ec6:	b2db      	uxtb	r3, r3
   13ec8:	3330      	adds	r3, #48	; 0x30
   13eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
   13ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   13ed2:	2b39      	cmp	r3, #57	; 0x39
   13ed4:	d904      	bls.n	13ee0 <gen_numname+0x9c>
   13ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   13eda:	3307      	adds	r3, #7
   13edc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
   13ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13ee2:	1e5a      	subs	r2, r3, #1
   13ee4:	62ba      	str	r2, [r7, #40]	; 0x28
   13ee6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   13eea:	4413      	add	r3, r2
   13eec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   13ef0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
   13ef4:	683b      	ldr	r3, [r7, #0]
   13ef6:	091b      	lsrs	r3, r3, #4
   13ef8:	603b      	str	r3, [r7, #0]
	} while (seq);
   13efa:	683b      	ldr	r3, [r7, #0]
   13efc:	2b00      	cmp	r3, #0
   13efe:	d1de      	bne.n	13ebe <gen_numname+0x7a>
	ns[i] = '~';
   13f00:	f107 0214 	add.w	r2, r7, #20
   13f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13f06:	4413      	add	r3, r2
   13f08:	227e      	movs	r2, #126	; 0x7e
   13f0a:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   13f0c:	2300      	movs	r3, #0
   13f0e:	627b      	str	r3, [r7, #36]	; 0x24
   13f10:	e014      	b.n	13f3c <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {
   13f12:	68fa      	ldr	r2, [r7, #12]
   13f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f16:	4413      	add	r3, r2
   13f18:	781b      	ldrb	r3, [r3, #0]
   13f1a:	4618      	mov	r0, r3
   13f1c:	f7fe fd01 	bl	12922 <dbc_1st>
   13f20:	4603      	mov	r3, r0
   13f22:	2b00      	cmp	r3, #0
   13f24:	d007      	beq.n	13f36 <gen_numname+0xf2>
			if (j == i - 1) break;
   13f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13f28:	3b01      	subs	r3, #1
   13f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13f2c:	429a      	cmp	r2, r3
   13f2e:	d010      	beq.n	13f52 <gen_numname+0x10e>
			j++;
   13f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f32:	3301      	adds	r3, #1
   13f34:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
   13f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f38:	3301      	adds	r3, #1
   13f3a:	627b      	str	r3, [r7, #36]	; 0x24
   13f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13f40:	429a      	cmp	r2, r3
   13f42:	d207      	bcs.n	13f54 <gen_numname+0x110>
   13f44:	68fa      	ldr	r2, [r7, #12]
   13f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f48:	4413      	add	r3, r2
   13f4a:	781b      	ldrb	r3, [r3, #0]
   13f4c:	2b20      	cmp	r3, #32
   13f4e:	d1e0      	bne.n	13f12 <gen_numname+0xce>
   13f50:	e000      	b.n	13f54 <gen_numname+0x110>
			if (j == i - 1) break;
   13f52:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   13f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13f56:	2b07      	cmp	r3, #7
   13f58:	d808      	bhi.n	13f6c <gen_numname+0x128>
   13f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13f5c:	1c5a      	adds	r2, r3, #1
   13f5e:	62ba      	str	r2, [r7, #40]	; 0x28
   13f60:	f107 0230 	add.w	r2, r7, #48	; 0x30
   13f64:	4413      	add	r3, r2
   13f66:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
   13f6a:	e000      	b.n	13f6e <gen_numname+0x12a>
   13f6c:	2120      	movs	r1, #32
   13f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f70:	1c5a      	adds	r2, r3, #1
   13f72:	627a      	str	r2, [r7, #36]	; 0x24
   13f74:	68fa      	ldr	r2, [r7, #12]
   13f76:	4413      	add	r3, r2
   13f78:	460a      	mov	r2, r1
   13f7a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
   13f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13f7e:	2b07      	cmp	r3, #7
   13f80:	d9e8      	bls.n	13f54 <gen_numname+0x110>
}
   13f82:	bf00      	nop
   13f84:	3730      	adds	r7, #48	; 0x30
   13f86:	46bd      	mov	sp, r7
   13f88:	bd80      	pop	{r7, pc}

00013f8a <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
   13f8a:	b480      	push	{r7}
   13f8c:	b085      	sub	sp, #20
   13f8e:	af00      	add	r7, sp, #0
   13f90:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   13f92:	2300      	movs	r3, #0
   13f94:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
   13f96:	230b      	movs	r3, #11
   13f98:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
   13f9a:	7bfb      	ldrb	r3, [r7, #15]
   13f9c:	b2da      	uxtb	r2, r3
   13f9e:	0852      	lsrs	r2, r2, #1
   13fa0:	01db      	lsls	r3, r3, #7
   13fa2:	4313      	orrs	r3, r2
   13fa4:	b2da      	uxtb	r2, r3
   13fa6:	687b      	ldr	r3, [r7, #4]
   13fa8:	1c59      	adds	r1, r3, #1
   13faa:	6079      	str	r1, [r7, #4]
   13fac:	781b      	ldrb	r3, [r3, #0]
   13fae:	4413      	add	r3, r2
   13fb0:	73fb      	strb	r3, [r7, #15]
	} while (--n);
   13fb2:	68bb      	ldr	r3, [r7, #8]
   13fb4:	3b01      	subs	r3, #1
   13fb6:	60bb      	str	r3, [r7, #8]
   13fb8:	68bb      	ldr	r3, [r7, #8]
   13fba:	2b00      	cmp	r3, #0
   13fbc:	d1ed      	bne.n	13f9a <sum_sfn+0x10>
	return sum;
   13fbe:	7bfb      	ldrb	r3, [r7, #15]
}
   13fc0:	4618      	mov	r0, r3
   13fc2:	3714      	adds	r7, #20
   13fc4:	46bd      	mov	sp, r7
   13fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   13fca:	4770      	bx	lr

00013fcc <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
   13fcc:	b480      	push	{r7}
   13fce:	b087      	sub	sp, #28
   13fd0:	af00      	add	r7, sp, #0
   13fd2:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
   13fd4:	687b      	ldr	r3, [r7, #4]
   13fd6:	3301      	adds	r3, #1
   13fd8:	781b      	ldrb	r3, [r3, #0]
   13fda:	3301      	adds	r3, #1
   13fdc:	015b      	lsls	r3, r3, #5
   13fde:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
   13fe0:	2300      	movs	r3, #0
   13fe2:	827b      	strh	r3, [r7, #18]
   13fe4:	2300      	movs	r3, #0
   13fe6:	617b      	str	r3, [r7, #20]
   13fe8:	e018      	b.n	1401c <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
   13fea:	697b      	ldr	r3, [r7, #20]
   13fec:	2b02      	cmp	r3, #2
   13fee:	d103      	bne.n	13ff8 <xdir_sum+0x2c>
			i++;
   13ff0:	697b      	ldr	r3, [r7, #20]
   13ff2:	3301      	adds	r3, #1
   13ff4:	617b      	str	r3, [r7, #20]
   13ff6:	e00e      	b.n	14016 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
   13ff8:	8a7b      	ldrh	r3, [r7, #18]
   13ffa:	03db      	lsls	r3, r3, #15
   13ffc:	b29a      	uxth	r2, r3
   13ffe:	8a7b      	ldrh	r3, [r7, #18]
   14000:	085b      	lsrs	r3, r3, #1
   14002:	b29b      	uxth	r3, r3
   14004:	4413      	add	r3, r2
   14006:	b29a      	uxth	r2, r3
   14008:	6879      	ldr	r1, [r7, #4]
   1400a:	697b      	ldr	r3, [r7, #20]
   1400c:	440b      	add	r3, r1
   1400e:	781b      	ldrb	r3, [r3, #0]
   14010:	b29b      	uxth	r3, r3
   14012:	4413      	add	r3, r2
   14014:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
   14016:	697b      	ldr	r3, [r7, #20]
   14018:	3301      	adds	r3, #1
   1401a:	617b      	str	r3, [r7, #20]
   1401c:	697a      	ldr	r2, [r7, #20]
   1401e:	68fb      	ldr	r3, [r7, #12]
   14020:	429a      	cmp	r2, r3
   14022:	d3e2      	bcc.n	13fea <xdir_sum+0x1e>
		}
	}
	return sum;
   14024:	8a7b      	ldrh	r3, [r7, #18]
}
   14026:	4618      	mov	r0, r3
   14028:	371c      	adds	r7, #28
   1402a:	46bd      	mov	sp, r7
   1402c:	f85d 7b04 	ldr.w	r7, [sp], #4
   14030:	4770      	bx	lr

00014032 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
   14032:	b580      	push	{r7, lr}
   14034:	b084      	sub	sp, #16
   14036:	af00      	add	r7, sp, #0
   14038:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
   1403a:	2300      	movs	r3, #0
   1403c:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
   1403e:	e01f      	b.n	14080 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
   14040:	89bb      	ldrh	r3, [r7, #12]
   14042:	4618      	mov	r0, r3
   14044:	f003 fe92 	bl	17d6c <ff_wtoupper>
   14048:	4603      	mov	r3, r0
   1404a:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
   1404c:	89fb      	ldrh	r3, [r7, #14]
   1404e:	03db      	lsls	r3, r3, #15
   14050:	b29a      	uxth	r2, r3
   14052:	89fb      	ldrh	r3, [r7, #14]
   14054:	085b      	lsrs	r3, r3, #1
   14056:	b29b      	uxth	r3, r3
   14058:	4413      	add	r3, r2
   1405a:	b29a      	uxth	r2, r3
   1405c:	89bb      	ldrh	r3, [r7, #12]
   1405e:	b2db      	uxtb	r3, r3
   14060:	b29b      	uxth	r3, r3
   14062:	4413      	add	r3, r2
   14064:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
   14066:	89fb      	ldrh	r3, [r7, #14]
   14068:	03db      	lsls	r3, r3, #15
   1406a:	b29a      	uxth	r2, r3
   1406c:	89fb      	ldrh	r3, [r7, #14]
   1406e:	085b      	lsrs	r3, r3, #1
   14070:	b29b      	uxth	r3, r3
   14072:	4413      	add	r3, r2
   14074:	b29a      	uxth	r2, r3
   14076:	89bb      	ldrh	r3, [r7, #12]
   14078:	0a1b      	lsrs	r3, r3, #8
   1407a:	b29b      	uxth	r3, r3
   1407c:	4413      	add	r3, r2
   1407e:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
   14080:	687b      	ldr	r3, [r7, #4]
   14082:	1c9a      	adds	r2, r3, #2
   14084:	607a      	str	r2, [r7, #4]
   14086:	881b      	ldrh	r3, [r3, #0]
   14088:	81bb      	strh	r3, [r7, #12]
   1408a:	89bb      	ldrh	r3, [r7, #12]
   1408c:	2b00      	cmp	r3, #0
   1408e:	d1d7      	bne.n	14040 <xname_sum+0xe>
	}
	return sum;
   14090:	89fb      	ldrh	r3, [r7, #14]
}
   14092:	4618      	mov	r0, r3
   14094:	3710      	adds	r7, #16
   14096:	46bd      	mov	sp, r7
   14098:	bd80      	pop	{r7, pc}

0001409a <xsum32>:
#if !FF_FS_READONLY && FF_USE_MKFS
static DWORD xsum32 (	/* Returns 32-bit checksum */
	BYTE  dat,			/* Byte to be calculated (byte-by-byte processing) */
	DWORD sum			/* Previous sum value */
)
{
   1409a:	b480      	push	{r7}
   1409c:	b083      	sub	sp, #12
   1409e:	af00      	add	r7, sp, #0
   140a0:	4603      	mov	r3, r0
   140a2:	6039      	str	r1, [r7, #0]
   140a4:	71fb      	strb	r3, [r7, #7]
	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
   140a6:	683b      	ldr	r3, [r7, #0]
   140a8:	ea4f 0273 	mov.w	r2, r3, ror #1
   140ac:	79fb      	ldrb	r3, [r7, #7]
   140ae:	4413      	add	r3, r2
   140b0:	603b      	str	r3, [r7, #0]
	return sum;
   140b2:	683b      	ldr	r3, [r7, #0]
}
   140b4:	4618      	mov	r0, r3
   140b6:	370c      	adds	r7, #12
   140b8:	46bd      	mov	sp, r7
   140ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   140be:	4770      	bx	lr

000140c0 <load_xdir>:
/*-----------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
)
{
   140c0:	b590      	push	{r4, r7, lr}
   140c2:	b087      	sub	sp, #28
   140c4:	af00      	add	r7, sp, #0
   140c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
   140c8:	687b      	ldr	r3, [r7, #4]
   140ca:	681b      	ldr	r3, [r3, #0]
   140cc:	691b      	ldr	r3, [r3, #16]
   140ce:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
   140d0:	687b      	ldr	r3, [r7, #4]
   140d2:	681a      	ldr	r2, [r3, #0]
   140d4:	687b      	ldr	r3, [r7, #4]
   140d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   140d8:	4619      	mov	r1, r3
   140da:	4610      	mov	r0, r2
   140dc:	f7fe fcec 	bl	12ab8 <move_window>
   140e0:	4603      	mov	r3, r0
   140e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
   140e4:	7dfb      	ldrb	r3, [r7, #23]
   140e6:	2b00      	cmp	r3, #0
   140e8:	d001      	beq.n	140ee <load_xdir+0x2e>
   140ea:	7dfb      	ldrb	r3, [r7, #23]
   140ec:	e0a9      	b.n	14242 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
   140ee:	687b      	ldr	r3, [r7, #4]
   140f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   140f2:	781b      	ldrb	r3, [r3, #0]
   140f4:	2b85      	cmp	r3, #133	; 0x85
   140f6:	d001      	beq.n	140fc <load_xdir+0x3c>
   140f8:	2302      	movs	r3, #2
   140fa:	e0a2      	b.n	14242 <load_xdir+0x182>
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
   140fc:	687b      	ldr	r3, [r7, #4]
   140fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   14100:	2220      	movs	r2, #32
   14102:	4619      	mov	r1, r3
   14104:	68f8      	ldr	r0, [r7, #12]
   14106:	f7fe fb8f 	bl	12828 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
   1410a:	68fb      	ldr	r3, [r7, #12]
   1410c:	3301      	adds	r3, #1
   1410e:	781b      	ldrb	r3, [r3, #0]
   14110:	3301      	adds	r3, #1
   14112:	015b      	lsls	r3, r3, #5
   14114:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
   14116:	68bb      	ldr	r3, [r7, #8]
   14118:	2b5f      	cmp	r3, #95	; 0x5f
   1411a:	d903      	bls.n	14124 <load_xdir+0x64>
   1411c:	68bb      	ldr	r3, [r7, #8]
   1411e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
   14122:	d901      	bls.n	14128 <load_xdir+0x68>
   14124:	2302      	movs	r3, #2
   14126:	e08c      	b.n	14242 <load_xdir+0x182>

	/* Load stream-extension entry */
	res = dir_next(dp, 0);
   14128:	2100      	movs	r1, #0
   1412a:	6878      	ldr	r0, [r7, #4]
   1412c:	f7ff fc0d 	bl	1394a <dir_next>
   14130:	4603      	mov	r3, r0
   14132:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   14134:	7dfb      	ldrb	r3, [r7, #23]
   14136:	2b04      	cmp	r3, #4
   14138:	d101      	bne.n	1413e <load_xdir+0x7e>
   1413a:	2302      	movs	r3, #2
   1413c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
   1413e:	7dfb      	ldrb	r3, [r7, #23]
   14140:	2b00      	cmp	r3, #0
   14142:	d001      	beq.n	14148 <load_xdir+0x88>
   14144:	7dfb      	ldrb	r3, [r7, #23]
   14146:	e07c      	b.n	14242 <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
   14148:	687b      	ldr	r3, [r7, #4]
   1414a:	681a      	ldr	r2, [r3, #0]
   1414c:	687b      	ldr	r3, [r7, #4]
   1414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14150:	4619      	mov	r1, r3
   14152:	4610      	mov	r0, r2
   14154:	f7fe fcb0 	bl	12ab8 <move_window>
   14158:	4603      	mov	r3, r0
   1415a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
   1415c:	7dfb      	ldrb	r3, [r7, #23]
   1415e:	2b00      	cmp	r3, #0
   14160:	d001      	beq.n	14166 <load_xdir+0xa6>
   14162:	7dfb      	ldrb	r3, [r7, #23]
   14164:	e06d      	b.n	14242 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
   14166:	687b      	ldr	r3, [r7, #4]
   14168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1416a:	781b      	ldrb	r3, [r3, #0]
   1416c:	2bc0      	cmp	r3, #192	; 0xc0
   1416e:	d001      	beq.n	14174 <load_xdir+0xb4>
   14170:	2302      	movs	r3, #2
   14172:	e066      	b.n	14242 <load_xdir+0x182>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
   14174:	68fb      	ldr	r3, [r7, #12]
   14176:	f103 0020 	add.w	r0, r3, #32
   1417a:	687b      	ldr	r3, [r7, #4]
   1417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1417e:	2220      	movs	r2, #32
   14180:	4619      	mov	r1, r3
   14182:	f7fe fb51 	bl	12828 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
   14186:	68fb      	ldr	r3, [r7, #12]
   14188:	3323      	adds	r3, #35	; 0x23
   1418a:	781b      	ldrb	r3, [r3, #0]
   1418c:	332c      	adds	r3, #44	; 0x2c
   1418e:	4a2f      	ldr	r2, [pc, #188]	; (1424c <load_xdir+0x18c>)
   14190:	fba2 2303 	umull	r2, r3, r2, r3
   14194:	08db      	lsrs	r3, r3, #3
   14196:	015b      	lsls	r3, r3, #5
   14198:	68ba      	ldr	r2, [r7, #8]
   1419a:	429a      	cmp	r2, r3
   1419c:	d201      	bcs.n	141a2 <load_xdir+0xe2>
   1419e:	2302      	movs	r3, #2
   141a0:	e04f      	b.n	14242 <load_xdir+0x182>

	/* Load file-name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
   141a2:	2340      	movs	r3, #64	; 0x40
   141a4:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
   141a6:	2100      	movs	r1, #0
   141a8:	6878      	ldr	r0, [r7, #4]
   141aa:	f7ff fbce 	bl	1394a <dir_next>
   141ae:	4603      	mov	r3, r0
   141b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
   141b2:	7dfb      	ldrb	r3, [r7, #23]
   141b4:	2b04      	cmp	r3, #4
   141b6:	d101      	bne.n	141bc <load_xdir+0xfc>
   141b8:	2302      	movs	r3, #2
   141ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
   141bc:	7dfb      	ldrb	r3, [r7, #23]
   141be:	2b00      	cmp	r3, #0
   141c0:	d001      	beq.n	141c6 <load_xdir+0x106>
   141c2:	7dfb      	ldrb	r3, [r7, #23]
   141c4:	e03d      	b.n	14242 <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
   141c6:	687b      	ldr	r3, [r7, #4]
   141c8:	681a      	ldr	r2, [r3, #0]
   141ca:	687b      	ldr	r3, [r7, #4]
   141cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   141ce:	4619      	mov	r1, r3
   141d0:	4610      	mov	r0, r2
   141d2:	f7fe fc71 	bl	12ab8 <move_window>
   141d6:	4603      	mov	r3, r0
   141d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
   141da:	7dfb      	ldrb	r3, [r7, #23]
   141dc:	2b00      	cmp	r3, #0
   141de:	d001      	beq.n	141e4 <load_xdir+0x124>
   141e0:	7dfb      	ldrb	r3, [r7, #23]
   141e2:	e02e      	b.n	14242 <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
   141e4:	687b      	ldr	r3, [r7, #4]
   141e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   141e8:	781b      	ldrb	r3, [r3, #0]
   141ea:	2bc1      	cmp	r3, #193	; 0xc1
   141ec:	d001      	beq.n	141f2 <load_xdir+0x132>
   141ee:	2302      	movs	r3, #2
   141f0:	e027      	b.n	14242 <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
   141f2:	693b      	ldr	r3, [r7, #16]
   141f4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
   141f8:	d208      	bcs.n	1420c <load_xdir+0x14c>
   141fa:	68fa      	ldr	r2, [r7, #12]
   141fc:	693b      	ldr	r3, [r7, #16]
   141fe:	18d0      	adds	r0, r2, r3
   14200:	687b      	ldr	r3, [r7, #4]
   14202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   14204:	2220      	movs	r2, #32
   14206:	4619      	mov	r1, r3
   14208:	f7fe fb0e 	bl	12828 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
   1420c:	693b      	ldr	r3, [r7, #16]
   1420e:	3320      	adds	r3, #32
   14210:	613b      	str	r3, [r7, #16]
   14212:	693a      	ldr	r2, [r7, #16]
   14214:	68bb      	ldr	r3, [r7, #8]
   14216:	429a      	cmp	r2, r3
   14218:	d3c5      	bcc.n	141a6 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
   1421a:	693b      	ldr	r3, [r7, #16]
   1421c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
   14220:	d80e      	bhi.n	14240 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
   14222:	68f8      	ldr	r0, [r7, #12]
   14224:	f7ff fed2 	bl	13fcc <xdir_sum>
   14228:	4603      	mov	r3, r0
   1422a:	461c      	mov	r4, r3
   1422c:	68fb      	ldr	r3, [r7, #12]
   1422e:	3302      	adds	r3, #2
   14230:	4618      	mov	r0, r3
   14232:	f7fe f931 	bl	12498 <ld_word>
   14236:	4603      	mov	r3, r0
   14238:	429c      	cmp	r4, r3
   1423a:	d001      	beq.n	14240 <load_xdir+0x180>
   1423c:	2302      	movs	r3, #2
   1423e:	e000      	b.n	14242 <load_xdir+0x182>
	}
	return FR_OK;
   14240:	2300      	movs	r3, #0
}
   14242:	4618      	mov	r0, r3
   14244:	371c      	adds	r7, #28
   14246:	46bd      	mov	sp, r7
   14248:	bd90      	pop	{r4, r7, pc}
   1424a:	bf00      	nop
   1424c:	88888889 	.word	0x88888889

00014250 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
   14250:	b590      	push	{r4, r7, lr}
   14252:	b083      	sub	sp, #12
   14254:	af00      	add	r7, sp, #0
   14256:	6078      	str	r0, [r7, #4]
   14258:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
   1425a:	687b      	ldr	r3, [r7, #4]
   1425c:	691b      	ldr	r3, [r3, #16]
   1425e:	3334      	adds	r3, #52	; 0x34
   14260:	4618      	mov	r0, r3
   14262:	f7fe f931 	bl	124c8 <ld_dword>
   14266:	4602      	mov	r2, r0
   14268:	683b      	ldr	r3, [r7, #0]
   1426a:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
   1426c:	687b      	ldr	r3, [r7, #4]
   1426e:	691b      	ldr	r3, [r3, #16]
   14270:	3338      	adds	r3, #56	; 0x38
   14272:	4618      	mov	r0, r3
   14274:	f7fe f94b 	bl	1250e <ld_qword>
   14278:	4603      	mov	r3, r0
   1427a:	460c      	mov	r4, r1
   1427c:	683a      	ldr	r2, [r7, #0]
   1427e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
   14282:	687b      	ldr	r3, [r7, #4]
   14284:	691b      	ldr	r3, [r3, #16]
   14286:	3321      	adds	r3, #33	; 0x21
   14288:	781b      	ldrb	r3, [r3, #0]
   1428a:	f003 0302 	and.w	r3, r3, #2
   1428e:	b2da      	uxtb	r2, r3
   14290:	683b      	ldr	r3, [r7, #0]
   14292:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
   14294:	683b      	ldr	r3, [r7, #0]
   14296:	2200      	movs	r2, #0
   14298:	61da      	str	r2, [r3, #28]
}
   1429a:	bf00      	nop
   1429c:	370c      	adds	r7, #12
   1429e:	46bd      	mov	sp, r7
   142a0:	bd90      	pop	{r4, r7, pc}

000142a2 <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
   142a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   142a4:	b085      	sub	sp, #20
   142a6:	af00      	add	r7, sp, #0
   142a8:	6078      	str	r0, [r7, #4]
   142aa:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
   142ac:	683a      	ldr	r2, [r7, #0]
   142ae:	6811      	ldr	r1, [r2, #0]
   142b0:	687a      	ldr	r2, [r7, #4]
   142b2:	6011      	str	r1, [r2, #0]
	dp->obj.sclust = obj->c_scl;
   142b4:	683a      	ldr	r2, [r7, #0]
   142b6:	6a11      	ldr	r1, [r2, #32]
   142b8:	687a      	ldr	r2, [r7, #4]
   142ba:	6091      	str	r1, [r2, #8]
	dp->obj.stat = (BYTE)obj->c_size;
   142bc:	683a      	ldr	r2, [r7, #0]
   142be:	6a52      	ldr	r2, [r2, #36]	; 0x24
   142c0:	b2d1      	uxtb	r1, r2
   142c2:	687a      	ldr	r2, [r7, #4]
   142c4:	71d1      	strb	r1, [r2, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
   142c6:	683a      	ldr	r2, [r7, #0]
   142c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
   142ca:	4611      	mov	r1, r2
   142cc:	f04f 0200 	mov.w	r2, #0
   142d0:	f06f 05ff 	mvn.w	r5, #255	; 0xff
   142d4:	f04f 0600 	mov.w	r6, #0
   142d8:	ea01 0305 	and.w	r3, r1, r5
   142dc:	ea02 0406 	and.w	r4, r2, r6
   142e0:	687a      	ldr	r2, [r7, #4]
   142e2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->obj.n_frag = 0;
   142e6:	687b      	ldr	r3, [r7, #4]
   142e8:	2200      	movs	r2, #0
   142ea:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
   142ec:	683b      	ldr	r3, [r7, #0]
   142ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   142f0:	687b      	ldr	r3, [r7, #4]
   142f2:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
   142f4:	687b      	ldr	r3, [r7, #4]
   142f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   142f8:	4619      	mov	r1, r3
   142fa:	6878      	ldr	r0, [r7, #4]
   142fc:	f7ff fa9f 	bl	1383e <dir_sdi>
   14300:	4603      	mov	r3, r0
   14302:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
   14304:	7bfb      	ldrb	r3, [r7, #15]
   14306:	2b00      	cmp	r3, #0
   14308:	d104      	bne.n	14314 <load_obj_xdir+0x72>
		res = load_xdir(dp);		/* Load the object's entry block */
   1430a:	6878      	ldr	r0, [r7, #4]
   1430c:	f7ff fed8 	bl	140c0 <load_xdir>
   14310:	4603      	mov	r3, r0
   14312:	73fb      	strb	r3, [r7, #15]
	}
	return res;
   14314:	7bfb      	ldrb	r3, [r7, #15]
}
   14316:	4618      	mov	r0, r3
   14318:	3714      	adds	r7, #20
   1431a:	46bd      	mov	sp, r7
   1431c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001431e <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
   1431e:	b590      	push	{r4, r7, lr}
   14320:	b087      	sub	sp, #28
   14322:	af00      	add	r7, sp, #0
   14324:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
   14326:	687b      	ldr	r3, [r7, #4]
   14328:	681b      	ldr	r3, [r3, #0]
   1432a:	691b      	ldr	r3, [r3, #16]
   1432c:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
   1432e:	68fb      	ldr	r3, [r7, #12]
   14330:	1c9c      	adds	r4, r3, #2
   14332:	68f8      	ldr	r0, [r7, #12]
   14334:	f7ff fe4a 	bl	13fcc <xdir_sum>
   14338:	4603      	mov	r3, r0
   1433a:	4619      	mov	r1, r3
   1433c:	4620      	mov	r0, r4
   1433e:	f7fe f9a5 	bl	1268c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
   14342:	68fb      	ldr	r3, [r7, #12]
   14344:	3301      	adds	r3, #1
   14346:	781b      	ldrb	r3, [r3, #0]
   14348:	3301      	adds	r3, #1
   1434a:	613b      	str	r3, [r7, #16]

	/* Store the direcotry entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
   1434c:	687b      	ldr	r3, [r7, #4]
   1434e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   14350:	4619      	mov	r1, r3
   14352:	6878      	ldr	r0, [r7, #4]
   14354:	f7ff fa73 	bl	1383e <dir_sdi>
   14358:	4603      	mov	r3, r0
   1435a:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
   1435c:	e026      	b.n	143ac <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
   1435e:	687b      	ldr	r3, [r7, #4]
   14360:	681a      	ldr	r2, [r3, #0]
   14362:	687b      	ldr	r3, [r7, #4]
   14364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14366:	4619      	mov	r1, r3
   14368:	4610      	mov	r0, r2
   1436a:	f7fe fba5 	bl	12ab8 <move_window>
   1436e:	4603      	mov	r3, r0
   14370:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
   14372:	7dfb      	ldrb	r3, [r7, #23]
   14374:	2b00      	cmp	r3, #0
   14376:	d11d      	bne.n	143b4 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
   14378:	687b      	ldr	r3, [r7, #4]
   1437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1437c:	2220      	movs	r2, #32
   1437e:	68f9      	ldr	r1, [r7, #12]
   14380:	4618      	mov	r0, r3
   14382:	f7fe fa51 	bl	12828 <mem_cpy>
		dp->obj.fs->wflag = 1;
   14386:	687b      	ldr	r3, [r7, #4]
   14388:	681b      	ldr	r3, [r3, #0]
   1438a:	2201      	movs	r2, #1
   1438c:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
   1438e:	693b      	ldr	r3, [r7, #16]
   14390:	3b01      	subs	r3, #1
   14392:	613b      	str	r3, [r7, #16]
   14394:	693b      	ldr	r3, [r7, #16]
   14396:	2b00      	cmp	r3, #0
   14398:	d00e      	beq.n	143b8 <store_xdir+0x9a>
		dirb += SZDIRE;
   1439a:	68fb      	ldr	r3, [r7, #12]
   1439c:	3320      	adds	r3, #32
   1439e:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
   143a0:	2100      	movs	r1, #0
   143a2:	6878      	ldr	r0, [r7, #4]
   143a4:	f7ff fad1 	bl	1394a <dir_next>
   143a8:	4603      	mov	r3, r0
   143aa:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
   143ac:	7dfb      	ldrb	r3, [r7, #23]
   143ae:	2b00      	cmp	r3, #0
   143b0:	d0d5      	beq.n	1435e <store_xdir+0x40>
   143b2:	e002      	b.n	143ba <store_xdir+0x9c>
		if (res != FR_OK) break;
   143b4:	bf00      	nop
   143b6:	e000      	b.n	143ba <store_xdir+0x9c>
		if (--nent == 0) break;
   143b8:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
   143ba:	7dfb      	ldrb	r3, [r7, #23]
   143bc:	2b00      	cmp	r3, #0
   143be:	d002      	beq.n	143c6 <store_xdir+0xa8>
   143c0:	7dfb      	ldrb	r3, [r7, #23]
   143c2:	2b01      	cmp	r3, #1
   143c4:	d101      	bne.n	143ca <store_xdir+0xac>
   143c6:	7dfb      	ldrb	r3, [r7, #23]
   143c8:	e000      	b.n	143cc <store_xdir+0xae>
   143ca:	2302      	movs	r3, #2
}
   143cc:	4618      	mov	r0, r3
   143ce:	371c      	adds	r7, #28
   143d0:	46bd      	mov	sp, r7
   143d2:	bd90      	pop	{r4, r7, pc}

000143d4 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
   143d4:	b590      	push	{r4, r7, lr}
   143d6:	b085      	sub	sp, #20
   143d8:	af00      	add	r7, sp, #0
   143da:	6078      	str	r0, [r7, #4]
   143dc:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	mem_set(dirb, 0, 2 * SZDIRE);
   143de:	2240      	movs	r2, #64	; 0x40
   143e0:	2100      	movs	r1, #0
   143e2:	6878      	ldr	r0, [r7, #4]
   143e4:	f7fe fa41 	bl	1286a <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
   143e8:	687b      	ldr	r3, [r7, #4]
   143ea:	2285      	movs	r2, #133	; 0x85
   143ec:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
   143ee:	687b      	ldr	r3, [r7, #4]
   143f0:	3320      	adds	r3, #32
   143f2:	22c0      	movs	r2, #192	; 0xc0
   143f4:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
   143f6:	2340      	movs	r3, #64	; 0x40
   143f8:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
   143fa:	2300      	movs	r3, #0
   143fc:	72fb      	strb	r3, [r7, #11]
   143fe:	7afb      	ldrb	r3, [r7, #11]
   14400:	72bb      	strb	r3, [r7, #10]
   14402:	2301      	movs	r3, #1
   14404:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
   14406:	68fb      	ldr	r3, [r7, #12]
   14408:	1c5a      	adds	r2, r3, #1
   1440a:	60fa      	str	r2, [r7, #12]
   1440c:	687a      	ldr	r2, [r7, #4]
   1440e:	4413      	add	r3, r2
   14410:	22c1      	movs	r2, #193	; 0xc1
   14412:	701a      	strb	r2, [r3, #0]
   14414:	68fb      	ldr	r3, [r7, #12]
   14416:	1c5a      	adds	r2, r3, #1
   14418:	60fa      	str	r2, [r7, #12]
   1441a:	687a      	ldr	r2, [r7, #4]
   1441c:	4413      	add	r3, r2
   1441e:	2200      	movs	r2, #0
   14420:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
   14422:	893b      	ldrh	r3, [r7, #8]
   14424:	2b00      	cmp	r3, #0
   14426:	d00b      	beq.n	14440 <create_xdir+0x6c>
   14428:	7abb      	ldrb	r3, [r7, #10]
   1442a:	005b      	lsls	r3, r3, #1
   1442c:	683a      	ldr	r2, [r7, #0]
   1442e:	4413      	add	r3, r2
   14430:	881b      	ldrh	r3, [r3, #0]
   14432:	813b      	strh	r3, [r7, #8]
   14434:	893b      	ldrh	r3, [r7, #8]
   14436:	2b00      	cmp	r3, #0
   14438:	d002      	beq.n	14440 <create_xdir+0x6c>
   1443a:	7abb      	ldrb	r3, [r7, #10]
   1443c:	3301      	adds	r3, #1
   1443e:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 		/* Store it */
   14440:	687a      	ldr	r2, [r7, #4]
   14442:	68fb      	ldr	r3, [r7, #12]
   14444:	4413      	add	r3, r2
   14446:	893a      	ldrh	r2, [r7, #8]
   14448:	4611      	mov	r1, r2
   1444a:	4618      	mov	r0, r3
   1444c:	f7fe f91e 	bl	1268c <st_word>
			i += 2;
   14450:	68fb      	ldr	r3, [r7, #12]
   14452:	3302      	adds	r3, #2
   14454:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
   14456:	68fb      	ldr	r3, [r7, #12]
   14458:	f003 031f 	and.w	r3, r3, #31
   1445c:	2b00      	cmp	r3, #0
   1445e:	d1e0      	bne.n	14422 <create_xdir+0x4e>
		nc1++;
   14460:	7afb      	ldrb	r3, [r7, #11]
   14462:	3301      	adds	r3, #1
   14464:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
   14466:	7abb      	ldrb	r3, [r7, #10]
   14468:	005b      	lsls	r3, r3, #1
   1446a:	683a      	ldr	r2, [r7, #0]
   1446c:	4413      	add	r3, r2
   1446e:	881b      	ldrh	r3, [r3, #0]
   14470:	2b00      	cmp	r3, #0
   14472:	d1c8      	bne.n	14406 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
   14474:	687b      	ldr	r3, [r7, #4]
   14476:	3323      	adds	r3, #35	; 0x23
   14478:	7aba      	ldrb	r2, [r7, #10]
   1447a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
   1447c:	687b      	ldr	r3, [r7, #4]
   1447e:	3301      	adds	r3, #1
   14480:	7afa      	ldrb	r2, [r7, #11]
   14482:	3201      	adds	r2, #1
   14484:	b2d2      	uxtb	r2, r2
   14486:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
   14488:	687b      	ldr	r3, [r7, #4]
   1448a:	f103 0424 	add.w	r4, r3, #36	; 0x24
   1448e:	6838      	ldr	r0, [r7, #0]
   14490:	f7ff fdcf 	bl	14032 <xname_sum>
   14494:	4603      	mov	r3, r0
   14496:	4619      	mov	r1, r3
   14498:	4620      	mov	r0, r4
   1449a:	f7fe f8f7 	bl	1268c <st_word>
}
   1449e:	bf00      	nop
   144a0:	3714      	adds	r7, #20
   144a2:	46bd      	mov	sp, r7
   144a4:	bd90      	pop	{r4, r7, pc}

000144a6 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
   144a6:	b580      	push	{r7, lr}
   144a8:	b086      	sub	sp, #24
   144aa:	af00      	add	r7, sp, #0
   144ac:	6078      	str	r0, [r7, #4]
   144ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
   144b0:	2304      	movs	r3, #4
   144b2:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
   144b4:	687b      	ldr	r3, [r7, #4]
   144b6:	681b      	ldr	r3, [r3, #0]
   144b8:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
   144ba:	23ff      	movs	r3, #255	; 0xff
   144bc:	757b      	strb	r3, [r7, #21]
   144be:	23ff      	movs	r3, #255	; 0xff
   144c0:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
   144c2:	e09f      	b.n	14604 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
   144c4:	687b      	ldr	r3, [r7, #4]
   144c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   144c8:	4619      	mov	r1, r3
   144ca:	6938      	ldr	r0, [r7, #16]
   144cc:	f7fe faf4 	bl	12ab8 <move_window>
   144d0:	4603      	mov	r3, r0
   144d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
   144d4:	7dfb      	ldrb	r3, [r7, #23]
   144d6:	2b00      	cmp	r3, #0
   144d8:	f040 809a 	bne.w	14610 <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
   144dc:	687b      	ldr	r3, [r7, #4]
   144de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   144e0:	781b      	ldrb	r3, [r3, #0]
   144e2:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
   144e4:	7dbb      	ldrb	r3, [r7, #22]
   144e6:	2b00      	cmp	r3, #0
   144e8:	d102      	bne.n	144f0 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
   144ea:	2304      	movs	r3, #4
   144ec:	75fb      	strb	r3, [r7, #23]
   144ee:	e096      	b.n	1461e <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   144f0:	693b      	ldr	r3, [r7, #16]
   144f2:	781b      	ldrb	r3, [r3, #0]
   144f4:	2b04      	cmp	r3, #4
   144f6:	d118      	bne.n	1452a <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
   144f8:	7dbb      	ldrb	r3, [r7, #22]
   144fa:	2b85      	cmp	r3, #133	; 0x85
   144fc:	d179      	bne.n	145f2 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
   144fe:	687b      	ldr	r3, [r7, #4]
   14500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14502:	687b      	ldr	r3, [r7, #4]
   14504:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
   14506:	6878      	ldr	r0, [r7, #4]
   14508:	f7ff fdda 	bl	140c0 <load_xdir>
   1450c:	4603      	mov	r3, r0
   1450e:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
   14510:	7dfb      	ldrb	r3, [r7, #23]
   14512:	2b00      	cmp	r3, #0
   14514:	d17e      	bne.n	14614 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
   14516:	693b      	ldr	r3, [r7, #16]
   14518:	691b      	ldr	r3, [r3, #16]
   1451a:	3304      	adds	r3, #4
   1451c:	781b      	ldrb	r3, [r3, #0]
   1451e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14522:	b2da      	uxtb	r2, r3
   14524:	687b      	ldr	r3, [r7, #4]
   14526:	719a      	strb	r2, [r3, #6]
					}
					break;
   14528:	e074      	b.n	14614 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
   1452a:	687b      	ldr	r3, [r7, #4]
   1452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1452e:	330b      	adds	r3, #11
   14530:	781b      	ldrb	r3, [r3, #0]
   14532:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14536:	73fb      	strb	r3, [r7, #15]
   14538:	687b      	ldr	r3, [r7, #4]
   1453a:	7bfa      	ldrb	r2, [r7, #15]
   1453c:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
   1453e:	7dbb      	ldrb	r3, [r7, #22]
   14540:	2be5      	cmp	r3, #229	; 0xe5
   14542:	d00e      	beq.n	14562 <dir_read+0xbc>
   14544:	7dbb      	ldrb	r3, [r7, #22]
   14546:	2b2e      	cmp	r3, #46	; 0x2e
   14548:	d00b      	beq.n	14562 <dir_read+0xbc>
   1454a:	7bfb      	ldrb	r3, [r7, #15]
   1454c:	f023 0320 	bic.w	r3, r3, #32
   14550:	2b08      	cmp	r3, #8
   14552:	bf0c      	ite	eq
   14554:	2301      	moveq	r3, #1
   14556:	2300      	movne	r3, #0
   14558:	b2db      	uxtb	r3, r3
   1455a:	461a      	mov	r2, r3
   1455c:	683b      	ldr	r3, [r7, #0]
   1455e:	4293      	cmp	r3, r2
   14560:	d002      	beq.n	14568 <dir_read+0xc2>
				ord = 0xFF;
   14562:	23ff      	movs	r3, #255	; 0xff
   14564:	757b      	strb	r3, [r7, #21]
   14566:	e044      	b.n	145f2 <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {			/* An LFN entry is found */
   14568:	7bfb      	ldrb	r3, [r7, #15]
   1456a:	2b0f      	cmp	r3, #15
   1456c:	d12f      	bne.n	145ce <dir_read+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
   1456e:	7dbb      	ldrb	r3, [r7, #22]
   14570:	f003 0340 	and.w	r3, r3, #64	; 0x40
   14574:	2b00      	cmp	r3, #0
   14576:	d00d      	beq.n	14594 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
   14578:	687b      	ldr	r3, [r7, #4]
   1457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1457c:	7b5b      	ldrb	r3, [r3, #13]
   1457e:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
   14580:	7dbb      	ldrb	r3, [r7, #22]
   14582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14586:	75bb      	strb	r3, [r7, #22]
   14588:	7dbb      	ldrb	r3, [r7, #22]
   1458a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
   1458c:	687b      	ldr	r3, [r7, #4]
   1458e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14590:	687b      	ldr	r3, [r7, #4]
   14592:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   14594:	7dba      	ldrb	r2, [r7, #22]
   14596:	7d7b      	ldrb	r3, [r7, #21]
   14598:	429a      	cmp	r2, r3
   1459a:	d115      	bne.n	145c8 <dir_read+0x122>
   1459c:	687b      	ldr	r3, [r7, #4]
   1459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   145a0:	330d      	adds	r3, #13
   145a2:	781b      	ldrb	r3, [r3, #0]
   145a4:	7d3a      	ldrb	r2, [r7, #20]
   145a6:	429a      	cmp	r2, r3
   145a8:	d10e      	bne.n	145c8 <dir_read+0x122>
   145aa:	693b      	ldr	r3, [r7, #16]
   145ac:	68da      	ldr	r2, [r3, #12]
   145ae:	687b      	ldr	r3, [r7, #4]
   145b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   145b2:	4619      	mov	r1, r3
   145b4:	4610      	mov	r0, r2
   145b6:	f7ff fb77 	bl	13ca8 <pick_lfn>
   145ba:	4603      	mov	r3, r0
   145bc:	2b00      	cmp	r3, #0
   145be:	d003      	beq.n	145c8 <dir_read+0x122>
   145c0:	7d7b      	ldrb	r3, [r7, #21]
   145c2:	3b01      	subs	r3, #1
   145c4:	b2db      	uxtb	r3, r3
   145c6:	e000      	b.n	145ca <dir_read+0x124>
   145c8:	23ff      	movs	r3, #255	; 0xff
   145ca:	757b      	strb	r3, [r7, #21]
   145cc:	e011      	b.n	145f2 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
   145ce:	7d7b      	ldrb	r3, [r7, #21]
   145d0:	2b00      	cmp	r3, #0
   145d2:	d109      	bne.n	145e8 <dir_read+0x142>
   145d4:	687b      	ldr	r3, [r7, #4]
   145d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   145d8:	4618      	mov	r0, r3
   145da:	f7ff fcd6 	bl	13f8a <sum_sfn>
   145de:	4603      	mov	r3, r0
   145e0:	461a      	mov	r2, r3
   145e2:	7d3b      	ldrb	r3, [r7, #20]
   145e4:	4293      	cmp	r3, r2
   145e6:	d017      	beq.n	14618 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
   145e8:	687b      	ldr	r3, [r7, #4]
   145ea:	f04f 32ff 	mov.w	r2, #4294967295
   145ee:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
   145f0:	e012      	b.n	14618 <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
   145f2:	2100      	movs	r1, #0
   145f4:	6878      	ldr	r0, [r7, #4]
   145f6:	f7ff f9a8 	bl	1394a <dir_next>
   145fa:	4603      	mov	r3, r0
   145fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
   145fe:	7dfb      	ldrb	r3, [r7, #23]
   14600:	2b00      	cmp	r3, #0
   14602:	d10b      	bne.n	1461c <dir_read+0x176>
	while (dp->sect) {
   14604:	687b      	ldr	r3, [r7, #4]
   14606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14608:	2b00      	cmp	r3, #0
   1460a:	f47f af5b 	bne.w	144c4 <dir_read+0x1e>
   1460e:	e006      	b.n	1461e <dir_read+0x178>
		if (res != FR_OK) break;
   14610:	bf00      	nop
   14612:	e004      	b.n	1461e <dir_read+0x178>
					break;
   14614:	bf00      	nop
   14616:	e002      	b.n	1461e <dir_read+0x178>
					break;
   14618:	bf00      	nop
   1461a:	e000      	b.n	1461e <dir_read+0x178>
		if (res != FR_OK) break;
   1461c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
   1461e:	7dfb      	ldrb	r3, [r7, #23]
   14620:	2b00      	cmp	r3, #0
   14622:	d002      	beq.n	1462a <dir_read+0x184>
   14624:	687b      	ldr	r3, [r7, #4]
   14626:	2200      	movs	r2, #0
   14628:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
   1462a:	7dfb      	ldrb	r3, [r7, #23]
}
   1462c:	4618      	mov	r0, r3
   1462e:	3718      	adds	r7, #24
   14630:	46bd      	mov	sp, r7
   14632:	bd80      	pop	{r7, pc}

00014634 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
   14634:	b590      	push	{r4, r7, lr}
   14636:	b089      	sub	sp, #36	; 0x24
   14638:	af00      	add	r7, sp, #0
   1463a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   1463c:	687b      	ldr	r3, [r7, #4]
   1463e:	681b      	ldr	r3, [r3, #0]
   14640:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
   14642:	2100      	movs	r1, #0
   14644:	6878      	ldr	r0, [r7, #4]
   14646:	f7ff f8fa 	bl	1383e <dir_sdi>
   1464a:	4603      	mov	r3, r0
   1464c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
   1464e:	7ffb      	ldrb	r3, [r7, #31]
   14650:	2b00      	cmp	r3, #0
   14652:	d001      	beq.n	14658 <dir_find+0x24>
   14654:	7ffb      	ldrb	r3, [r7, #31]
   14656:	e111      	b.n	1487c <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   14658:	68fb      	ldr	r3, [r7, #12]
   1465a:	781b      	ldrb	r3, [r3, #0]
   1465c:	2b04      	cmp	r3, #4
   1465e:	d163      	bne.n	14728 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
   14660:	68fb      	ldr	r3, [r7, #12]
   14662:	68db      	ldr	r3, [r3, #12]
   14664:	4618      	mov	r0, r3
   14666:	f7ff fce4 	bl	14032 <xname_sum>
   1466a:	4603      	mov	r3, r0
   1466c:	817b      	strh	r3, [r7, #10]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
   1466e:	e04e      	b.n	1470e <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
   14670:	68fb      	ldr	r3, [r7, #12]
   14672:	691b      	ldr	r3, [r3, #16]
   14674:	3324      	adds	r3, #36	; 0x24
   14676:	4618      	mov	r0, r3
   14678:	f7fd ff0e 	bl	12498 <ld_word>
   1467c:	4603      	mov	r3, r0
   1467e:	461a      	mov	r2, r3
   14680:	897b      	ldrh	r3, [r7, #10]
   14682:	4293      	cmp	r3, r2
   14684:	d000      	beq.n	14688 <dir_find+0x54>
   14686:	e042      	b.n	1470e <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   14688:	68fb      	ldr	r3, [r7, #12]
   1468a:	691b      	ldr	r3, [r3, #16]
   1468c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
   14690:	76fb      	strb	r3, [r7, #27]
   14692:	2340      	movs	r3, #64	; 0x40
   14694:	617b      	str	r3, [r7, #20]
   14696:	2300      	movs	r3, #0
   14698:	613b      	str	r3, [r7, #16]
   1469a:	e028      	b.n	146ee <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
   1469c:	697b      	ldr	r3, [r7, #20]
   1469e:	f003 031f 	and.w	r3, r3, #31
   146a2:	2b00      	cmp	r3, #0
   146a4:	d102      	bne.n	146ac <dir_find+0x78>
   146a6:	697b      	ldr	r3, [r7, #20]
   146a8:	3302      	adds	r3, #2
   146aa:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
   146ac:	68fb      	ldr	r3, [r7, #12]
   146ae:	691a      	ldr	r2, [r3, #16]
   146b0:	697b      	ldr	r3, [r7, #20]
   146b2:	4413      	add	r3, r2
   146b4:	4618      	mov	r0, r3
   146b6:	f7fd feef 	bl	12498 <ld_word>
   146ba:	4603      	mov	r3, r0
   146bc:	4618      	mov	r0, r3
   146be:	f003 fb55 	bl	17d6c <ff_wtoupper>
   146c2:	4604      	mov	r4, r0
   146c4:	68fb      	ldr	r3, [r7, #12]
   146c6:	68da      	ldr	r2, [r3, #12]
   146c8:	693b      	ldr	r3, [r7, #16]
   146ca:	005b      	lsls	r3, r3, #1
   146cc:	4413      	add	r3, r2
   146ce:	881b      	ldrh	r3, [r3, #0]
   146d0:	4618      	mov	r0, r3
   146d2:	f003 fb4b 	bl	17d6c <ff_wtoupper>
   146d6:	4603      	mov	r3, r0
   146d8:	429c      	cmp	r4, r3
   146da:	d10c      	bne.n	146f6 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
   146dc:	7efb      	ldrb	r3, [r7, #27]
   146de:	3b01      	subs	r3, #1
   146e0:	76fb      	strb	r3, [r7, #27]
   146e2:	697b      	ldr	r3, [r7, #20]
   146e4:	3302      	adds	r3, #2
   146e6:	617b      	str	r3, [r7, #20]
   146e8:	693b      	ldr	r3, [r7, #16]
   146ea:	3301      	adds	r3, #1
   146ec:	613b      	str	r3, [r7, #16]
   146ee:	7efb      	ldrb	r3, [r7, #27]
   146f0:	2b00      	cmp	r3, #0
   146f2:	d1d3      	bne.n	1469c <dir_find+0x68>
   146f4:	e000      	b.n	146f8 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
   146f6:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
   146f8:	7efb      	ldrb	r3, [r7, #27]
   146fa:	2b00      	cmp	r3, #0
   146fc:	d107      	bne.n	1470e <dir_find+0xda>
   146fe:	68fb      	ldr	r3, [r7, #12]
   14700:	68da      	ldr	r2, [r3, #12]
   14702:	693b      	ldr	r3, [r7, #16]
   14704:	005b      	lsls	r3, r3, #1
   14706:	4413      	add	r3, r2
   14708:	881b      	ldrh	r3, [r3, #0]
   1470a:	2b00      	cmp	r3, #0
   1470c:	d009      	beq.n	14722 <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
   1470e:	2100      	movs	r1, #0
   14710:	6878      	ldr	r0, [r7, #4]
   14712:	f7ff fec8 	bl	144a6 <dir_read>
   14716:	4603      	mov	r3, r0
   14718:	77fb      	strb	r3, [r7, #31]
   1471a:	7ffb      	ldrb	r3, [r7, #31]
   1471c:	2b00      	cmp	r3, #0
   1471e:	d0a7      	beq.n	14670 <dir_find+0x3c>
   14720:	e000      	b.n	14724 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
   14722:	bf00      	nop
		}
		return res;
   14724:	7ffb      	ldrb	r3, [r7, #31]
   14726:	e0a9      	b.n	1487c <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   14728:	23ff      	movs	r3, #255	; 0xff
   1472a:	773b      	strb	r3, [r7, #28]
   1472c:	7f3b      	ldrb	r3, [r7, #28]
   1472e:	777b      	strb	r3, [r7, #29]
   14730:	687b      	ldr	r3, [r7, #4]
   14732:	f04f 32ff 	mov.w	r2, #4294967295
   14736:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
   14738:	687b      	ldr	r3, [r7, #4]
   1473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1473c:	4619      	mov	r1, r3
   1473e:	68f8      	ldr	r0, [r7, #12]
   14740:	f7fe f9ba 	bl	12ab8 <move_window>
   14744:	4603      	mov	r3, r0
   14746:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
   14748:	7ffb      	ldrb	r3, [r7, #31]
   1474a:	2b00      	cmp	r3, #0
   1474c:	f040 8090 	bne.w	14870 <dir_find+0x23c>
		c = dp->dir[DIR_Name];
   14750:	687b      	ldr	r3, [r7, #4]
   14752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   14754:	781b      	ldrb	r3, [r3, #0]
   14756:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   14758:	7fbb      	ldrb	r3, [r7, #30]
   1475a:	2b00      	cmp	r3, #0
   1475c:	d102      	bne.n	14764 <dir_find+0x130>
   1475e:	2304      	movs	r3, #4
   14760:	77fb      	strb	r3, [r7, #31]
   14762:	e08a      	b.n	1487a <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
   14764:	687b      	ldr	r3, [r7, #4]
   14766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   14768:	330b      	adds	r3, #11
   1476a:	781b      	ldrb	r3, [r3, #0]
   1476c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14770:	727b      	strb	r3, [r7, #9]
   14772:	687b      	ldr	r3, [r7, #4]
   14774:	7a7a      	ldrb	r2, [r7, #9]
   14776:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   14778:	7fbb      	ldrb	r3, [r7, #30]
   1477a:	2be5      	cmp	r3, #229	; 0xe5
   1477c:	d007      	beq.n	1478e <dir_find+0x15a>
   1477e:	7a7b      	ldrb	r3, [r7, #9]
   14780:	f003 0308 	and.w	r3, r3, #8
   14784:	2b00      	cmp	r3, #0
   14786:	d009      	beq.n	1479c <dir_find+0x168>
   14788:	7a7b      	ldrb	r3, [r7, #9]
   1478a:	2b0f      	cmp	r3, #15
   1478c:	d006      	beq.n	1479c <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   1478e:	23ff      	movs	r3, #255	; 0xff
   14790:	777b      	strb	r3, [r7, #29]
   14792:	687b      	ldr	r3, [r7, #4]
   14794:	f04f 32ff 	mov.w	r2, #4294967295
   14798:	64da      	str	r2, [r3, #76]	; 0x4c
   1479a:	e05e      	b.n	1485a <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   1479c:	7a7b      	ldrb	r3, [r7, #9]
   1479e:	2b0f      	cmp	r3, #15
   147a0:	d136      	bne.n	14810 <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
   147a2:	687b      	ldr	r3, [r7, #4]
   147a4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   147a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
   147ac:	2b00      	cmp	r3, #0
   147ae:	d154      	bne.n	1485a <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
   147b0:	7fbb      	ldrb	r3, [r7, #30]
   147b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
   147b6:	2b00      	cmp	r3, #0
   147b8:	d00d      	beq.n	147d6 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
   147ba:	687b      	ldr	r3, [r7, #4]
   147bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   147be:	7b5b      	ldrb	r3, [r3, #13]
   147c0:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
   147c2:	7fbb      	ldrb	r3, [r7, #30]
   147c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   147c8:	77bb      	strb	r3, [r7, #30]
   147ca:	7fbb      	ldrb	r3, [r7, #30]
   147cc:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
   147ce:	687b      	ldr	r3, [r7, #4]
   147d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   147d2:	687b      	ldr	r3, [r7, #4]
   147d4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
   147d6:	7fba      	ldrb	r2, [r7, #30]
   147d8:	7f7b      	ldrb	r3, [r7, #29]
   147da:	429a      	cmp	r2, r3
   147dc:	d115      	bne.n	1480a <dir_find+0x1d6>
   147de:	687b      	ldr	r3, [r7, #4]
   147e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   147e2:	330d      	adds	r3, #13
   147e4:	781b      	ldrb	r3, [r3, #0]
   147e6:	7f3a      	ldrb	r2, [r7, #28]
   147e8:	429a      	cmp	r2, r3
   147ea:	d10e      	bne.n	1480a <dir_find+0x1d6>
   147ec:	68fb      	ldr	r3, [r7, #12]
   147ee:	68da      	ldr	r2, [r3, #12]
   147f0:	687b      	ldr	r3, [r7, #4]
   147f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   147f4:	4619      	mov	r1, r3
   147f6:	4610      	mov	r0, r2
   147f8:	f7ff f9e8 	bl	13bcc <cmp_lfn>
   147fc:	4603      	mov	r3, r0
   147fe:	2b00      	cmp	r3, #0
   14800:	d003      	beq.n	1480a <dir_find+0x1d6>
   14802:	7f7b      	ldrb	r3, [r7, #29]
   14804:	3b01      	subs	r3, #1
   14806:	b2db      	uxtb	r3, r3
   14808:	e000      	b.n	1480c <dir_find+0x1d8>
   1480a:	23ff      	movs	r3, #255	; 0xff
   1480c:	777b      	strb	r3, [r7, #29]
   1480e:	e024      	b.n	1485a <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   14810:	7f7b      	ldrb	r3, [r7, #29]
   14812:	2b00      	cmp	r3, #0
   14814:	d109      	bne.n	1482a <dir_find+0x1f6>
   14816:	687b      	ldr	r3, [r7, #4]
   14818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1481a:	4618      	mov	r0, r3
   1481c:	f7ff fbb5 	bl	13f8a <sum_sfn>
   14820:	4603      	mov	r3, r0
   14822:	461a      	mov	r2, r3
   14824:	7f3b      	ldrb	r3, [r7, #28]
   14826:	4293      	cmp	r3, r2
   14828:	d024      	beq.n	14874 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   1482a:	687b      	ldr	r3, [r7, #4]
   1482c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   14830:	f003 0301 	and.w	r3, r3, #1
   14834:	2b00      	cmp	r3, #0
   14836:	d10a      	bne.n	1484e <dir_find+0x21a>
   14838:	687b      	ldr	r3, [r7, #4]
   1483a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   1483c:	687b      	ldr	r3, [r7, #4]
   1483e:	3340      	adds	r3, #64	; 0x40
   14840:	220b      	movs	r2, #11
   14842:	4619      	mov	r1, r3
   14844:	f7fe f82b 	bl	1289e <mem_cmp>
   14848:	4603      	mov	r3, r0
   1484a:	2b00      	cmp	r3, #0
   1484c:	d014      	beq.n	14878 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
   1484e:	23ff      	movs	r3, #255	; 0xff
   14850:	777b      	strb	r3, [r7, #29]
   14852:	687b      	ldr	r3, [r7, #4]
   14854:	f04f 32ff 	mov.w	r2, #4294967295
   14858:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
   1485a:	2100      	movs	r1, #0
   1485c:	6878      	ldr	r0, [r7, #4]
   1485e:	f7ff f874 	bl	1394a <dir_next>
   14862:	4603      	mov	r3, r0
   14864:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
   14866:	7ffb      	ldrb	r3, [r7, #31]
   14868:	2b00      	cmp	r3, #0
   1486a:	f43f af65 	beq.w	14738 <dir_find+0x104>
   1486e:	e004      	b.n	1487a <dir_find+0x246>
		if (res != FR_OK) break;
   14870:	bf00      	nop
   14872:	e002      	b.n	1487a <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
   14874:	bf00      	nop
   14876:	e000      	b.n	1487a <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
   14878:	bf00      	nop

	return res;
   1487a:	7ffb      	ldrb	r3, [r7, #31]
}
   1487c:	4618      	mov	r0, r3
   1487e:	3724      	adds	r7, #36	; 0x24
   14880:	46bd      	mov	sp, r7
   14882:	bd90      	pop	{r4, r7, pc}

00014884 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
   14884:	b5f0      	push	{r4, r5, r6, r7, lr}
   14886:	b0a1      	sub	sp, #132	; 0x84
   14888:	af00      	add	r7, sp, #0
   1488a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
   1488c:	687b      	ldr	r3, [r7, #4]
   1488e:	681b      	ldr	r3, [r3, #0]
   14890:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
   14892:	687b      	ldr	r3, [r7, #4]
   14894:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   14898:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
   1489c:	2b00      	cmp	r3, #0
   1489e:	d001      	beq.n	148a4 <dir_register+0x20>
   148a0:	2306      	movs	r3, #6
   148a2:	e199      	b.n	14bd8 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
   148a4:	2300      	movs	r3, #0
   148a6:	677b      	str	r3, [r7, #116]	; 0x74
   148a8:	e002      	b.n	148b0 <dir_register+0x2c>
   148aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   148ac:	3301      	adds	r3, #1
   148ae:	677b      	str	r3, [r7, #116]	; 0x74
   148b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   148b2:	68da      	ldr	r2, [r3, #12]
   148b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   148b6:	005b      	lsls	r3, r3, #1
   148b8:	4413      	add	r3, r2
   148ba:	881b      	ldrh	r3, [r3, #0]
   148bc:	2b00      	cmp	r3, #0
   148be:	d1f4      	bne.n	148aa <dir_register+0x26>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
   148c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   148c2:	781b      	ldrb	r3, [r3, #0]
   148c4:	2b04      	cmp	r3, #4
   148c6:	f040 80aa 	bne.w	14a1e <dir_register+0x19a>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
   148ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   148cc:	330e      	adds	r3, #14
   148ce:	4aa8      	ldr	r2, [pc, #672]	; (14b70 <dir_register+0x2ec>)
   148d0:	fba2 2303 	umull	r2, r3, r2, r3
   148d4:	08db      	lsrs	r3, r3, #3
   148d6:	3302      	adds	r3, #2
   148d8:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
   148da:	6f39      	ldr	r1, [r7, #112]	; 0x70
   148dc:	6878      	ldr	r0, [r7, #4]
   148de:	f7ff f8d9 	bl	13a94 <dir_alloc>
   148e2:	4603      	mov	r3, r0
   148e4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
   148e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   148ec:	2b00      	cmp	r3, #0
   148ee:	d002      	beq.n	148f6 <dir_register+0x72>
   148f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   148f4:	e170      	b.n	14bd8 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
   148f6:	687b      	ldr	r3, [r7, #4]
   148f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   148fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   148fc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
   14900:	3b01      	subs	r3, #1
   14902:	015b      	lsls	r3, r3, #5
   14904:	1ad2      	subs	r2, r2, r3
   14906:	687b      	ldr	r3, [r7, #4]
   14908:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
   1490a:	687b      	ldr	r3, [r7, #4]
   1490c:	79db      	ldrb	r3, [r3, #7]
   1490e:	f003 0304 	and.w	r3, r3, #4
   14912:	2b00      	cmp	r3, #0
   14914:	d079      	beq.n	14a0a <dir_register+0x186>
			dp->obj.stat &= ~4;
   14916:	687b      	ldr	r3, [r7, #4]
   14918:	79db      	ldrb	r3, [r3, #7]
   1491a:	f023 0304 	bic.w	r3, r3, #4
   1491e:	b2da      	uxtb	r2, r3
   14920:	687b      	ldr	r3, [r7, #4]
   14922:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
   14924:	687b      	ldr	r3, [r7, #4]
   14926:	4618      	mov	r0, r3
   14928:	f7fe fc82 	bl	13230 <fill_first_frag>
   1492c:	4603      	mov	r3, r0
   1492e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
   14932:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14936:	2b00      	cmp	r3, #0
   14938:	d002      	beq.n	14940 <dir_register+0xbc>
   1493a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1493e:	e14b      	b.n	14bd8 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
   14940:	6878      	ldr	r0, [r7, #4]
   14942:	687b      	ldr	r3, [r7, #4]
   14944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14946:	f04f 32ff 	mov.w	r2, #4294967295
   1494a:	4619      	mov	r1, r3
   1494c:	f7fe fc9f 	bl	1328e <fill_last_frag>
   14950:	4603      	mov	r3, r0
   14952:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
   14956:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1495a:	2b00      	cmp	r3, #0
   1495c:	d002      	beq.n	14964 <dir_register+0xe0>
   1495e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14962:	e139      	b.n	14bd8 <dir_register+0x354>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
   14964:	687b      	ldr	r3, [r7, #4]
   14966:	689b      	ldr	r3, [r3, #8]
   14968:	2b00      	cmp	r3, #0
   1496a:	d04e      	beq.n	14a0a <dir_register+0x186>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
   1496c:	687a      	ldr	r2, [r7, #4]
   1496e:	f107 0308 	add.w	r3, r7, #8
   14972:	4611      	mov	r1, r2
   14974:	4618      	mov	r0, r3
   14976:	f7ff fc94 	bl	142a2 <load_obj_xdir>
   1497a:	4603      	mov	r3, r0
   1497c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
   14980:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14984:	2b00      	cmp	r3, #0
   14986:	d002      	beq.n	1498e <dir_register+0x10a>
   14988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   1498c:	e124      	b.n	14bd8 <dir_register+0x354>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
   1498e:	687b      	ldr	r3, [r7, #4]
   14990:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   14994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14996:	895b      	ldrh	r3, [r3, #10]
   14998:	025b      	lsls	r3, r3, #9
   1499a:	f04f 0400 	mov.w	r4, #0
   1499e:	18cd      	adds	r5, r1, r3
   149a0:	eb42 0604 	adc.w	r6, r2, r4
   149a4:	687b      	ldr	r3, [r7, #4]
   149a6:	e9c3 5604 	strd	r5, r6, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
   149aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   149ac:	691b      	ldr	r3, [r3, #16]
   149ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
   149b2:	687b      	ldr	r3, [r7, #4]
   149b4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   149b8:	461a      	mov	r2, r3
   149ba:	4623      	mov	r3, r4
   149bc:	4608      	mov	r0, r1
   149be:	f7fd feac 	bl	1271a <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
   149c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   149c4:	691b      	ldr	r3, [r3, #16]
   149c6:	f103 0128 	add.w	r1, r3, #40	; 0x28
   149ca:	687b      	ldr	r3, [r7, #4]
   149cc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   149d0:	461a      	mov	r2, r3
   149d2:	4623      	mov	r3, r4
   149d4:	4608      	mov	r0, r1
   149d6:	f7fd fea0 	bl	1271a <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
   149da:	687b      	ldr	r3, [r7, #4]
   149dc:	79da      	ldrb	r2, [r3, #7]
   149de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   149e0:	691b      	ldr	r3, [r3, #16]
   149e2:	3321      	adds	r3, #33	; 0x21
   149e4:	f042 0201 	orr.w	r2, r2, #1
   149e8:	b2d2      	uxtb	r2, r2
   149ea:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
   149ec:	f107 0308 	add.w	r3, r7, #8
   149f0:	4618      	mov	r0, r3
   149f2:	f7ff fc94 	bl	1431e <store_xdir>
   149f6:	4603      	mov	r3, r0
   149f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
   149fc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14a00:	2b00      	cmp	r3, #0
   14a02:	d002      	beq.n	14a0a <dir_register+0x186>
   14a04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14a08:	e0e6      	b.n	14bd8 <dir_register+0x354>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
   14a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14a0c:	691a      	ldr	r2, [r3, #16]
   14a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14a10:	68db      	ldr	r3, [r3, #12]
   14a12:	4619      	mov	r1, r3
   14a14:	4610      	mov	r0, r2
   14a16:	f7ff fcdd 	bl	143d4 <create_xdir>
		return FR_OK;
   14a1a:	2300      	movs	r3, #0
   14a1c:	e0dc      	b.n	14bd8 <dir_register+0x354>
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
   14a1e:	687b      	ldr	r3, [r7, #4]
   14a20:	f103 0140 	add.w	r1, r3, #64	; 0x40
   14a24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   14a28:	220c      	movs	r2, #12
   14a2a:	4618      	mov	r0, r3
   14a2c:	f7fd fefc 	bl	12828 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   14a30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   14a34:	f003 0301 	and.w	r3, r3, #1
   14a38:	2b00      	cmp	r3, #0
   14a3a:	d033      	beq.n	14aa4 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
   14a3c:	687b      	ldr	r3, [r7, #4]
   14a3e:	2240      	movs	r2, #64	; 0x40
   14a40:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
   14a44:	2301      	movs	r3, #1
   14a46:	67bb      	str	r3, [r7, #120]	; 0x78
   14a48:	e016      	b.n	14a78 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
   14a4a:	687b      	ldr	r3, [r7, #4]
   14a4c:	f103 0040 	add.w	r0, r3, #64	; 0x40
   14a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14a52:	68da      	ldr	r2, [r3, #12]
   14a54:	f107 015c 	add.w	r1, r7, #92	; 0x5c
   14a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a5a:	f7ff f9f3 	bl	13e44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
   14a5e:	6878      	ldr	r0, [r7, #4]
   14a60:	f7ff fde8 	bl	14634 <dir_find>
   14a64:	4603      	mov	r3, r0
   14a66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
   14a6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14a6e:	2b00      	cmp	r3, #0
   14a70:	d106      	bne.n	14a80 <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
   14a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a74:	3301      	adds	r3, #1
   14a76:	67bb      	str	r3, [r7, #120]	; 0x78
   14a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a7a:	2b63      	cmp	r3, #99	; 0x63
   14a7c:	d9e5      	bls.n	14a4a <dir_register+0x1c6>
   14a7e:	e000      	b.n	14a82 <dir_register+0x1fe>
			if (res != FR_OK) break;
   14a80:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   14a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a84:	2b64      	cmp	r3, #100	; 0x64
   14a86:	d101      	bne.n	14a8c <dir_register+0x208>
   14a88:	2307      	movs	r3, #7
   14a8a:	e0a5      	b.n	14bd8 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   14a8c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14a90:	2b04      	cmp	r3, #4
   14a92:	d002      	beq.n	14a9a <dir_register+0x216>
   14a94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14a98:	e09e      	b.n	14bd8 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
   14a9a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
   14a9e:	687b      	ldr	r3, [r7, #4]
   14aa0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
   14aa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   14aa8:	f003 0302 	and.w	r3, r3, #2
   14aac:	2b00      	cmp	r3, #0
   14aae:	d007      	beq.n	14ac0 <dir_register+0x23c>
   14ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   14ab2:	330c      	adds	r3, #12
   14ab4:	4a2f      	ldr	r2, [pc, #188]	; (14b74 <dir_register+0x2f0>)
   14ab6:	fba2 2303 	umull	r2, r3, r2, r3
   14aba:	089b      	lsrs	r3, r3, #2
   14abc:	3301      	adds	r3, #1
   14abe:	e000      	b.n	14ac2 <dir_register+0x23e>
   14ac0:	2301      	movs	r3, #1
   14ac2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
   14ac4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   14ac6:	6878      	ldr	r0, [r7, #4]
   14ac8:	f7fe ffe4 	bl	13a94 <dir_alloc>
   14acc:	4603      	mov	r3, r0
   14ace:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
   14ad2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14ad6:	2b00      	cmp	r3, #0
   14ad8:	d14f      	bne.n	14b7a <dir_register+0x2f6>
   14ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14adc:	3b01      	subs	r3, #1
   14ade:	673b      	str	r3, [r7, #112]	; 0x70
   14ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14ae2:	2b00      	cmp	r3, #0
   14ae4:	d049      	beq.n	14b7a <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
   14ae6:	687b      	ldr	r3, [r7, #4]
   14ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   14aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14aec:	015b      	lsls	r3, r3, #5
   14aee:	1ad3      	subs	r3, r2, r3
   14af0:	4619      	mov	r1, r3
   14af2:	6878      	ldr	r0, [r7, #4]
   14af4:	f7fe fea3 	bl	1383e <dir_sdi>
   14af8:	4603      	mov	r3, r0
   14afa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
   14afe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14b02:	2b00      	cmp	r3, #0
   14b04:	d139      	bne.n	14b7a <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
   14b06:	687b      	ldr	r3, [r7, #4]
   14b08:	3340      	adds	r3, #64	; 0x40
   14b0a:	4618      	mov	r0, r3
   14b0c:	f7ff fa3d 	bl	13f8a <sum_sfn>
   14b10:	4603      	mov	r3, r0
   14b12:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
   14b16:	687b      	ldr	r3, [r7, #4]
   14b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14b1a:	4619      	mov	r1, r3
   14b1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   14b1e:	f7fd ffcb 	bl	12ab8 <move_window>
   14b22:	4603      	mov	r3, r0
   14b24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
   14b28:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14b2c:	2b00      	cmp	r3, #0
   14b2e:	d123      	bne.n	14b78 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
   14b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14b32:	68d8      	ldr	r0, [r3, #12]
   14b34:	687b      	ldr	r3, [r7, #4]
   14b36:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   14b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14b3a:	b2da      	uxtb	r2, r3
   14b3c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   14b40:	f7ff f918 	bl	13d74 <put_lfn>
				fs->wflag = 1;
   14b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14b46:	2201      	movs	r2, #1
   14b48:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
   14b4a:	2100      	movs	r1, #0
   14b4c:	6878      	ldr	r0, [r7, #4]
   14b4e:	f7fe fefc 	bl	1394a <dir_next>
   14b52:	4603      	mov	r3, r0
   14b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
   14b58:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14b5c:	2b00      	cmp	r3, #0
   14b5e:	d10c      	bne.n	14b7a <dir_register+0x2f6>
   14b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14b62:	3b01      	subs	r3, #1
   14b64:	673b      	str	r3, [r7, #112]	; 0x70
   14b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   14b68:	2b00      	cmp	r3, #0
   14b6a:	d1d4      	bne.n	14b16 <dir_register+0x292>
   14b6c:	e005      	b.n	14b7a <dir_register+0x2f6>
   14b6e:	bf00      	nop
   14b70:	88888889 	.word	0x88888889
   14b74:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
   14b78:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
   14b7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14b7e:	2b00      	cmp	r3, #0
   14b80:	d128      	bne.n	14bd4 <dir_register+0x350>
		res = move_window(fs, dp->sect);
   14b82:	687b      	ldr	r3, [r7, #4]
   14b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14b86:	4619      	mov	r1, r3
   14b88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   14b8a:	f7fd ff95 	bl	12ab8 <move_window>
   14b8e:	4603      	mov	r3, r0
   14b90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
   14b94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
   14b98:	2b00      	cmp	r3, #0
   14b9a:	d11b      	bne.n	14bd4 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
   14b9c:	687b      	ldr	r3, [r7, #4]
   14b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   14ba0:	2220      	movs	r2, #32
   14ba2:	2100      	movs	r1, #0
   14ba4:	4618      	mov	r0, r3
   14ba6:	f7fd fe60 	bl	1286a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
   14baa:	687b      	ldr	r3, [r7, #4]
   14bac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
   14bae:	687b      	ldr	r3, [r7, #4]
   14bb0:	3340      	adds	r3, #64	; 0x40
   14bb2:	220b      	movs	r2, #11
   14bb4:	4619      	mov	r1, r3
   14bb6:	f7fd fe37 	bl	12828 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
   14bba:	687b      	ldr	r3, [r7, #4]
   14bbc:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
   14bc0:	687b      	ldr	r3, [r7, #4]
   14bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   14bc4:	330c      	adds	r3, #12
   14bc6:	f002 0218 	and.w	r2, r2, #24
   14bca:	b2d2      	uxtb	r2, r2
   14bcc:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
   14bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   14bd0:	2201      	movs	r2, #1
   14bd2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
   14bd4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
   14bd8:	4618      	mov	r0, r3
   14bda:	3784      	adds	r7, #132	; 0x84
   14bdc:	46bd      	mov	sp, r7
   14bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014be0 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
   14be0:	b580      	push	{r7, lr}
   14be2:	b08a      	sub	sp, #40	; 0x28
   14be4:	af00      	add	r7, sp, #0
   14be6:	6078      	str	r0, [r7, #4]
   14be8:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
   14bea:	683b      	ldr	r3, [r7, #0]
   14bec:	681b      	ldr	r3, [r3, #0]
   14bee:	60bb      	str	r3, [r7, #8]
   14bf0:	687b      	ldr	r3, [r7, #4]
   14bf2:	681b      	ldr	r3, [r3, #0]
   14bf4:	68db      	ldr	r3, [r3, #12]
   14bf6:	613b      	str	r3, [r7, #16]
   14bf8:	2300      	movs	r3, #0
   14bfa:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
   14bfc:	f107 0308 	add.w	r3, r7, #8
   14c00:	4618      	mov	r0, r3
   14c02:	f7fd fed8 	bl	129b6 <tchar2uni>
   14c06:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
   14c08:	68fb      	ldr	r3, [r7, #12]
   14c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
   14c0e:	d101      	bne.n	14c14 <create_name+0x34>
   14c10:	2306      	movs	r3, #6
   14c12:	e1af      	b.n	14f74 <create_name+0x394>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
   14c14:	68fb      	ldr	r3, [r7, #12]
   14c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   14c1a:	d309      	bcc.n	14c30 <create_name+0x50>
   14c1c:	68fb      	ldr	r3, [r7, #12]
   14c1e:	0c19      	lsrs	r1, r3, #16
   14c20:	697b      	ldr	r3, [r7, #20]
   14c22:	1c5a      	adds	r2, r3, #1
   14c24:	617a      	str	r2, [r7, #20]
   14c26:	005b      	lsls	r3, r3, #1
   14c28:	693a      	ldr	r2, [r7, #16]
   14c2a:	4413      	add	r3, r2
   14c2c:	b28a      	uxth	r2, r1
   14c2e:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
   14c30:	68fb      	ldr	r3, [r7, #12]
   14c32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
   14c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14c36:	2b1f      	cmp	r3, #31
   14c38:	d920      	bls.n	14c7c <create_name+0x9c>
   14c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14c3c:	2b2f      	cmp	r3, #47	; 0x2f
   14c3e:	d01d      	beq.n	14c7c <create_name+0x9c>
   14c40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14c42:	2b5c      	cmp	r3, #92	; 0x5c
   14c44:	d01a      	beq.n	14c7c <create_name+0x9c>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
   14c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14c48:	2b7f      	cmp	r3, #127	; 0x7f
   14c4a:	d809      	bhi.n	14c60 <create_name+0x80>
   14c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14c4e:	4619      	mov	r1, r3
   14c50:	48a2      	ldr	r0, [pc, #648]	; (14edc <create_name+0x2fc>)
   14c52:	f7fd fe4b 	bl	128ec <chk_chr>
   14c56:	4603      	mov	r3, r0
   14c58:	2b00      	cmp	r3, #0
   14c5a:	d001      	beq.n	14c60 <create_name+0x80>
   14c5c:	2306      	movs	r3, #6
   14c5e:	e189      	b.n	14f74 <create_name+0x394>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
   14c60:	697b      	ldr	r3, [r7, #20]
   14c62:	2bfe      	cmp	r3, #254	; 0xfe
   14c64:	d901      	bls.n	14c6a <create_name+0x8a>
   14c66:	2306      	movs	r3, #6
   14c68:	e184      	b.n	14f74 <create_name+0x394>
		lfn[di++] = wc;					/* Store the Unicode character */
   14c6a:	697b      	ldr	r3, [r7, #20]
   14c6c:	1c5a      	adds	r2, r3, #1
   14c6e:	617a      	str	r2, [r7, #20]
   14c70:	005b      	lsls	r3, r3, #1
   14c72:	693a      	ldr	r2, [r7, #16]
   14c74:	4413      	add	r3, r2
   14c76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   14c78:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
   14c7a:	e7bf      	b.n	14bfc <create_name+0x1c>
	}
	if (wc < ' ') {				/* End of path? */
   14c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14c7e:	2b1f      	cmp	r3, #31
   14c80:	d803      	bhi.n	14c8a <create_name+0xaa>
		cf = NS_LAST;			/* Set last segment flag */
   14c82:	2304      	movs	r3, #4
   14c84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   14c88:	e00e      	b.n	14ca8 <create_name+0xc8>
	} else {
		cf = 0;					/* Next segment follows */
   14c8a:	2300      	movs	r3, #0
   14c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
   14c90:	e002      	b.n	14c98 <create_name+0xb8>
   14c92:	68bb      	ldr	r3, [r7, #8]
   14c94:	3301      	adds	r3, #1
   14c96:	60bb      	str	r3, [r7, #8]
   14c98:	68bb      	ldr	r3, [r7, #8]
   14c9a:	781b      	ldrb	r3, [r3, #0]
   14c9c:	2b2f      	cmp	r3, #47	; 0x2f
   14c9e:	d0f8      	beq.n	14c92 <create_name+0xb2>
   14ca0:	68bb      	ldr	r3, [r7, #8]
   14ca2:	781b      	ldrb	r3, [r3, #0]
   14ca4:	2b5c      	cmp	r3, #92	; 0x5c
   14ca6:	d0f4      	beq.n	14c92 <create_name+0xb2>
	}
	*path = p;					/* Return pointer to the next segment */
   14ca8:	68ba      	ldr	r2, [r7, #8]
   14caa:	683b      	ldr	r3, [r7, #0]
   14cac:	601a      	str	r2, [r3, #0]
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
   14cae:	e011      	b.n	14cd4 <create_name+0xf4>
		wc = lfn[di - 1];
   14cb0:	697b      	ldr	r3, [r7, #20]
   14cb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   14cb6:	3b01      	subs	r3, #1
   14cb8:	005b      	lsls	r3, r3, #1
   14cba:	693a      	ldr	r2, [r7, #16]
   14cbc:	4413      	add	r3, r2
   14cbe:	881b      	ldrh	r3, [r3, #0]
   14cc0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
   14cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14cc4:	2b20      	cmp	r3, #32
   14cc6:	d002      	beq.n	14cce <create_name+0xee>
   14cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14cca:	2b2e      	cmp	r3, #46	; 0x2e
   14ccc:	d106      	bne.n	14cdc <create_name+0xfc>
		di--;
   14cce:	697b      	ldr	r3, [r7, #20]
   14cd0:	3b01      	subs	r3, #1
   14cd2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
   14cd4:	697b      	ldr	r3, [r7, #20]
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	d1ea      	bne.n	14cb0 <create_name+0xd0>
   14cda:	e000      	b.n	14cde <create_name+0xfe>
		if (wc != ' ' && wc != '.') break;
   14cdc:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
   14cde:	697b      	ldr	r3, [r7, #20]
   14ce0:	005b      	lsls	r3, r3, #1
   14ce2:	693a      	ldr	r2, [r7, #16]
   14ce4:	4413      	add	r3, r2
   14ce6:	2200      	movs	r2, #0
   14ce8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
   14cea:	697b      	ldr	r3, [r7, #20]
   14cec:	2b00      	cmp	r3, #0
   14cee:	d101      	bne.n	14cf4 <create_name+0x114>
   14cf0:	2306      	movs	r3, #6
   14cf2:	e13f      	b.n	14f74 <create_name+0x394>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
   14cf4:	2300      	movs	r3, #0
   14cf6:	61bb      	str	r3, [r7, #24]
   14cf8:	e002      	b.n	14d00 <create_name+0x120>
   14cfa:	69bb      	ldr	r3, [r7, #24]
   14cfc:	3301      	adds	r3, #1
   14cfe:	61bb      	str	r3, [r7, #24]
   14d00:	69bb      	ldr	r3, [r7, #24]
   14d02:	005b      	lsls	r3, r3, #1
   14d04:	693a      	ldr	r2, [r7, #16]
   14d06:	4413      	add	r3, r2
   14d08:	881b      	ldrh	r3, [r3, #0]
   14d0a:	2b20      	cmp	r3, #32
   14d0c:	d0f5      	beq.n	14cfa <create_name+0x11a>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
   14d0e:	69bb      	ldr	r3, [r7, #24]
   14d10:	2b00      	cmp	r3, #0
   14d12:	d106      	bne.n	14d22 <create_name+0x142>
   14d14:	69bb      	ldr	r3, [r7, #24]
   14d16:	005b      	lsls	r3, r3, #1
   14d18:	693a      	ldr	r2, [r7, #16]
   14d1a:	4413      	add	r3, r2
   14d1c:	881b      	ldrh	r3, [r3, #0]
   14d1e:	2b2e      	cmp	r3, #46	; 0x2e
   14d20:	d109      	bne.n	14d36 <create_name+0x156>
   14d22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14d26:	f043 0303 	orr.w	r3, r3, #3
   14d2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
   14d2e:	e002      	b.n	14d36 <create_name+0x156>
   14d30:	697b      	ldr	r3, [r7, #20]
   14d32:	3b01      	subs	r3, #1
   14d34:	617b      	str	r3, [r7, #20]
   14d36:	697b      	ldr	r3, [r7, #20]
   14d38:	2b00      	cmp	r3, #0
   14d3a:	d009      	beq.n	14d50 <create_name+0x170>
   14d3c:	697b      	ldr	r3, [r7, #20]
   14d3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   14d42:	3b01      	subs	r3, #1
   14d44:	005b      	lsls	r3, r3, #1
   14d46:	693a      	ldr	r2, [r7, #16]
   14d48:	4413      	add	r3, r2
   14d4a:	881b      	ldrh	r3, [r3, #0]
   14d4c:	2b2e      	cmp	r3, #46	; 0x2e
   14d4e:	d1ef      	bne.n	14d30 <create_name+0x150>

	mem_set(dp->fn, ' ', 11);
   14d50:	687b      	ldr	r3, [r7, #4]
   14d52:	3340      	adds	r3, #64	; 0x40
   14d54:	220b      	movs	r2, #11
   14d56:	2120      	movs	r1, #32
   14d58:	4618      	mov	r0, r3
   14d5a:	f7fd fd86 	bl	1286a <mem_set>
	i = b = 0; ni = 8;
   14d5e:	2300      	movs	r3, #0
   14d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   14d64:	2300      	movs	r3, #0
   14d66:	623b      	str	r3, [r7, #32]
   14d68:	2308      	movs	r3, #8
   14d6a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
   14d6c:	69bb      	ldr	r3, [r7, #24]
   14d6e:	1c5a      	adds	r2, r3, #1
   14d70:	61ba      	str	r2, [r7, #24]
   14d72:	005b      	lsls	r3, r3, #1
   14d74:	693a      	ldr	r2, [r7, #16]
   14d76:	4413      	add	r3, r2
   14d78:	881b      	ldrh	r3, [r3, #0]
   14d7a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
   14d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14d7e:	2b00      	cmp	r3, #0
   14d80:	f000 80aa 	beq.w	14ed8 <create_name+0x2f8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
   14d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14d86:	2b20      	cmp	r3, #32
   14d88:	d006      	beq.n	14d98 <create_name+0x1b8>
   14d8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14d8c:	2b2e      	cmp	r3, #46	; 0x2e
   14d8e:	d10a      	bne.n	14da6 <create_name+0x1c6>
   14d90:	69ba      	ldr	r2, [r7, #24]
   14d92:	697b      	ldr	r3, [r7, #20]
   14d94:	429a      	cmp	r2, r3
   14d96:	d006      	beq.n	14da6 <create_name+0x1c6>
			cf |= NS_LOSS | NS_LFN;
   14d98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14d9c:	f043 0303 	orr.w	r3, r3, #3
   14da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
   14da4:	e097      	b.n	14ed6 <create_name+0x2f6>
		}

		if (i >= ni || si == di) {		/* End of field? */
   14da6:	6a3a      	ldr	r2, [r7, #32]
   14da8:	69fb      	ldr	r3, [r7, #28]
   14daa:	429a      	cmp	r2, r3
   14dac:	d203      	bcs.n	14db6 <create_name+0x1d6>
   14dae:	69ba      	ldr	r2, [r7, #24]
   14db0:	697b      	ldr	r3, [r7, #20]
   14db2:	429a      	cmp	r2, r3
   14db4:	d123      	bne.n	14dfe <create_name+0x21e>
			if (ni == 11) {				/* Name extension overflow? */
   14db6:	69fb      	ldr	r3, [r7, #28]
   14db8:	2b0b      	cmp	r3, #11
   14dba:	d106      	bne.n	14dca <create_name+0x1ea>
				cf |= NS_LOSS | NS_LFN;
   14dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14dc0:	f043 0303 	orr.w	r3, r3, #3
   14dc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   14dc8:	e08d      	b.n	14ee6 <create_name+0x306>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
   14dca:	69ba      	ldr	r2, [r7, #24]
   14dcc:	697b      	ldr	r3, [r7, #20]
   14dce:	429a      	cmp	r2, r3
   14dd0:	d005      	beq.n	14dde <create_name+0x1fe>
   14dd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14dd6:	f043 0303 	orr.w	r3, r3, #3
   14dda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
   14dde:	69ba      	ldr	r2, [r7, #24]
   14de0:	697b      	ldr	r3, [r7, #20]
   14de2:	429a      	cmp	r2, r3
   14de4:	d87e      	bhi.n	14ee4 <create_name+0x304>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
   14de6:	697b      	ldr	r3, [r7, #20]
   14de8:	61bb      	str	r3, [r7, #24]
   14dea:	2308      	movs	r3, #8
   14dec:	623b      	str	r3, [r7, #32]
   14dee:	230b      	movs	r3, #11
   14df0:	61fb      	str	r3, [r7, #28]
   14df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14df6:	009b      	lsls	r3, r3, #2
   14df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
   14dfc:	e06b      	b.n	14ed6 <create_name+0x2f6>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
   14dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e00:	2b7f      	cmp	r3, #127	; 0x7f
   14e02:	d911      	bls.n	14e28 <create_name+0x248>
			cf |= NS_LFN;	/* LFN entry needs to be created */
   14e04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14e08:	f043 0302 	orr.w	r3, r3, #2
   14e0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
   14e10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e12:	4618      	mov	r0, r3
   14e14:	f002 ffaa 	bl	17d6c <ff_wtoupper>
   14e18:	4603      	mov	r3, r0
   14e1a:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   14e1e:	4618      	mov	r0, r3
   14e20:	f002 fef0 	bl	17c04 <ff_uni2oem>
   14e24:	4603      	mov	r3, r0
   14e26:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
   14e28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e2a:	2bff      	cmp	r3, #255	; 0xff
   14e2c:	d91a      	bls.n	14e64 <create_name+0x284>
			if (i >= ni - 1) {			/* Field overflow? */
   14e2e:	69fb      	ldr	r3, [r7, #28]
   14e30:	3b01      	subs	r3, #1
   14e32:	6a3a      	ldr	r2, [r7, #32]
   14e34:	429a      	cmp	r2, r3
   14e36:	d308      	bcc.n	14e4a <create_name+0x26a>
				cf |= NS_LOSS | NS_LFN;
   14e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14e3c:	f043 0303 	orr.w	r3, r3, #3
   14e40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
   14e44:	69fb      	ldr	r3, [r7, #28]
   14e46:	623b      	str	r3, [r7, #32]
   14e48:	e045      	b.n	14ed6 <create_name+0x2f6>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
   14e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e4c:	0a1b      	lsrs	r3, r3, #8
   14e4e:	b299      	uxth	r1, r3
   14e50:	6a3b      	ldr	r3, [r7, #32]
   14e52:	1c5a      	adds	r2, r3, #1
   14e54:	623a      	str	r2, [r7, #32]
   14e56:	b2c9      	uxtb	r1, r1
   14e58:	687a      	ldr	r2, [r7, #4]
   14e5a:	4413      	add	r3, r2
   14e5c:	460a      	mov	r2, r1
   14e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   14e62:	e02e      	b.n	14ec2 <create_name+0x2e2>
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
   14e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e66:	2b00      	cmp	r3, #0
   14e68:	d007      	beq.n	14e7a <create_name+0x29a>
   14e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e6c:	4619      	mov	r1, r3
   14e6e:	481c      	ldr	r0, [pc, #112]	; (14ee0 <create_name+0x300>)
   14e70:	f7fd fd3c 	bl	128ec <chk_chr>
   14e74:	4603      	mov	r3, r0
   14e76:	2b00      	cmp	r3, #0
   14e78:	d008      	beq.n	14e8c <create_name+0x2ac>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   14e7a:	235f      	movs	r3, #95	; 0x5f
   14e7c:	84bb      	strh	r3, [r7, #36]	; 0x24
   14e7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14e82:	f043 0303 	orr.w	r3, r3, #3
   14e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   14e8a:	e01a      	b.n	14ec2 <create_name+0x2e2>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
   14e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e8e:	2b40      	cmp	r3, #64	; 0x40
   14e90:	d908      	bls.n	14ea4 <create_name+0x2c4>
   14e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14e94:	2b5a      	cmp	r3, #90	; 0x5a
   14e96:	d805      	bhi.n	14ea4 <create_name+0x2c4>
					b |= 2;
   14e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14e9c:	f043 0302 	orr.w	r3, r3, #2
   14ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
   14ea4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14ea6:	2b60      	cmp	r3, #96	; 0x60
   14ea8:	d90b      	bls.n	14ec2 <create_name+0x2e2>
   14eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14eac:	2b7a      	cmp	r3, #122	; 0x7a
   14eae:	d808      	bhi.n	14ec2 <create_name+0x2e2>
					b |= 1; wc -= 0x20;
   14eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14eb4:	f043 0301 	orr.w	r3, r3, #1
   14eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   14ebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   14ebe:	3b20      	subs	r3, #32
   14ec0:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
   14ec2:	6a3b      	ldr	r3, [r7, #32]
   14ec4:	1c5a      	adds	r2, r3, #1
   14ec6:	623a      	str	r2, [r7, #32]
   14ec8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   14eca:	b2d1      	uxtb	r1, r2
   14ecc:	687a      	ldr	r2, [r7, #4]
   14ece:	4413      	add	r3, r2
   14ed0:	460a      	mov	r2, r1
   14ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
   14ed6:	e749      	b.n	14d6c <create_name+0x18c>
		if (wc == 0) break;				/* Break on end of the LFN */
   14ed8:	bf00      	nop
   14eda:	e004      	b.n	14ee6 <create_name+0x306>
   14edc:	0001a168 	.word	0x0001a168
   14ee0:	0001a174 	.word	0x0001a174
			if (si > di) break;						/* No name extension? */
   14ee4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
   14ee6:	687b      	ldr	r3, [r7, #4]
   14ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   14eec:	2be5      	cmp	r3, #229	; 0xe5
   14eee:	d103      	bne.n	14ef8 <create_name+0x318>
   14ef0:	687b      	ldr	r3, [r7, #4]
   14ef2:	2205      	movs	r2, #5
   14ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
   14ef8:	69fb      	ldr	r3, [r7, #28]
   14efa:	2b08      	cmp	r3, #8
   14efc:	d104      	bne.n	14f08 <create_name+0x328>
   14efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14f02:	009b      	lsls	r3, r3, #2
   14f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
   14f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14f0c:	f003 030c 	and.w	r3, r3, #12
   14f10:	2b0c      	cmp	r3, #12
   14f12:	d005      	beq.n	14f20 <create_name+0x340>
   14f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14f18:	f003 0303 	and.w	r3, r3, #3
   14f1c:	2b03      	cmp	r3, #3
   14f1e:	d105      	bne.n	14f2c <create_name+0x34c>
   14f20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14f24:	f043 0302 	orr.w	r3, r3, #2
   14f28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
   14f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14f30:	f003 0302 	and.w	r3, r3, #2
   14f34:	2b00      	cmp	r3, #0
   14f36:	d117      	bne.n	14f68 <create_name+0x388>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
   14f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14f3c:	f003 0301 	and.w	r3, r3, #1
   14f40:	2b00      	cmp	r3, #0
   14f42:	d005      	beq.n	14f50 <create_name+0x370>
   14f44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14f48:	f043 0310 	orr.w	r3, r3, #16
   14f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
   14f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   14f54:	f003 0304 	and.w	r3, r3, #4
   14f58:	2b00      	cmp	r3, #0
   14f5a:	d005      	beq.n	14f68 <create_name+0x388>
   14f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
   14f60:	f043 0308 	orr.w	r3, r3, #8
   14f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
   14f68:	687b      	ldr	r3, [r7, #4]
   14f6a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   14f6e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
   14f72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
   14f74:	4618      	mov	r0, r3
   14f76:	3728      	adds	r7, #40	; 0x28
   14f78:	46bd      	mov	sp, r7
   14f7a:	bd80      	pop	{r7, pc}

00014f7c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
   14f7c:	b590      	push	{r4, r7, lr}
   14f7e:	b087      	sub	sp, #28
   14f80:	af00      	add	r7, sp, #0
   14f82:	6078      	str	r0, [r7, #4]
   14f84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
   14f86:	687b      	ldr	r3, [r7, #4]
   14f88:	681b      	ldr	r3, [r3, #0]
   14f8a:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
   14f8c:	e002      	b.n	14f94 <follow_path+0x18>
   14f8e:	683b      	ldr	r3, [r7, #0]
   14f90:	3301      	adds	r3, #1
   14f92:	603b      	str	r3, [r7, #0]
   14f94:	683b      	ldr	r3, [r7, #0]
   14f96:	781b      	ldrb	r3, [r3, #0]
   14f98:	2b2f      	cmp	r3, #47	; 0x2f
   14f9a:	d0f8      	beq.n	14f8e <follow_path+0x12>
   14f9c:	683b      	ldr	r3, [r7, #0]
   14f9e:	781b      	ldrb	r3, [r3, #0]
   14fa0:	2b5c      	cmp	r3, #92	; 0x5c
   14fa2:	d0f4      	beq.n	14f8e <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
   14fa4:	687b      	ldr	r3, [r7, #4]
   14fa6:	2200      	movs	r2, #0
   14fa8:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
   14faa:	687b      	ldr	r3, [r7, #4]
   14fac:	2200      	movs	r2, #0
   14fae:	61da      	str	r2, [r3, #28]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
   14fb0:	683b      	ldr	r3, [r7, #0]
   14fb2:	781b      	ldrb	r3, [r3, #0]
   14fb4:	2b1f      	cmp	r3, #31
   14fb6:	d80a      	bhi.n	14fce <follow_path+0x52>
		dp->fn[NSFLAG] = NS_NONAME;
   14fb8:	687b      	ldr	r3, [r7, #4]
   14fba:	2280      	movs	r2, #128	; 0x80
   14fbc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
   14fc0:	2100      	movs	r1, #0
   14fc2:	6878      	ldr	r0, [r7, #4]
   14fc4:	f7fe fc3b 	bl	1383e <dir_sdi>
   14fc8:	4603      	mov	r3, r0
   14fca:	75fb      	strb	r3, [r7, #23]
   14fcc:	e05f      	b.n	1508e <follow_path+0x112>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
   14fce:	463b      	mov	r3, r7
   14fd0:	4619      	mov	r1, r3
   14fd2:	6878      	ldr	r0, [r7, #4]
   14fd4:	f7ff fe04 	bl	14be0 <create_name>
   14fd8:	4603      	mov	r3, r0
   14fda:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
   14fdc:	7dfb      	ldrb	r3, [r7, #23]
   14fde:	2b00      	cmp	r3, #0
   14fe0:	d150      	bne.n	15084 <follow_path+0x108>
			res = dir_find(dp);				/* Find an object with the segment name */
   14fe2:	6878      	ldr	r0, [r7, #4]
   14fe4:	f7ff fb26 	bl	14634 <dir_find>
   14fe8:	4603      	mov	r3, r0
   14fea:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
   14fec:	687b      	ldr	r3, [r7, #4]
   14fee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
   14ff2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
   14ff4:	7dfb      	ldrb	r3, [r7, #23]
   14ff6:	2b00      	cmp	r3, #0
   14ff8:	d00a      	beq.n	15010 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
   14ffa:	7dfb      	ldrb	r3, [r7, #23]
   14ffc:	2b04      	cmp	r3, #4
   14ffe:	d143      	bne.n	15088 <follow_path+0x10c>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
   15000:	7bfb      	ldrb	r3, [r7, #15]
   15002:	f003 0304 	and.w	r3, r3, #4
   15006:	2b00      	cmp	r3, #0
   15008:	d13e      	bne.n	15088 <follow_path+0x10c>
   1500a:	2305      	movs	r3, #5
   1500c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
   1500e:	e03b      	b.n	15088 <follow_path+0x10c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
   15010:	7bfb      	ldrb	r3, [r7, #15]
   15012:	f003 0304 	and.w	r3, r3, #4
   15016:	2b00      	cmp	r3, #0
   15018:	d138      	bne.n	1508c <follow_path+0x110>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
   1501a:	687b      	ldr	r3, [r7, #4]
   1501c:	799b      	ldrb	r3, [r3, #6]
   1501e:	f003 0310 	and.w	r3, r3, #16
   15022:	2b00      	cmp	r3, #0
   15024:	d102      	bne.n	1502c <follow_path+0xb0>
				res = FR_NO_PATH; break;
   15026:	2305      	movs	r3, #5
   15028:	75fb      	strb	r3, [r7, #23]
   1502a:	e030      	b.n	1508e <follow_path+0x112>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
   1502c:	693b      	ldr	r3, [r7, #16]
   1502e:	781b      	ldrb	r3, [r3, #0]
   15030:	2b04      	cmp	r3, #4
   15032:	d117      	bne.n	15064 <follow_path+0xe8>
				dp->obj.c_scl = dp->obj.sclust;
   15034:	687b      	ldr	r3, [r7, #4]
   15036:	689a      	ldr	r2, [r3, #8]
   15038:	687b      	ldr	r3, [r7, #4]
   1503a:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
   1503c:	687b      	ldr	r3, [r7, #4]
   1503e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   15042:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15046:	687a      	ldr	r2, [r7, #4]
   15048:	79d2      	ldrb	r2, [r2, #7]
   1504a:	431a      	orrs	r2, r3
   1504c:	687b      	ldr	r3, [r7, #4]
   1504e:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
   15050:	687b      	ldr	r3, [r7, #4]
   15052:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   15054:	687b      	ldr	r3, [r7, #4]
   15056:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
   15058:	687b      	ldr	r3, [r7, #4]
   1505a:	4619      	mov	r1, r3
   1505c:	6938      	ldr	r0, [r7, #16]
   1505e:	f7ff f8f7 	bl	14250 <init_alloc_info>
   15062:	e7b4      	b.n	14fce <follow_path+0x52>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
   15064:	693b      	ldr	r3, [r7, #16]
   15066:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   1506a:	687b      	ldr	r3, [r7, #4]
   1506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1506e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   15072:	4413      	add	r3, r2
   15074:	4619      	mov	r1, r3
   15076:	6938      	ldr	r0, [r7, #16]
   15078:	f7fe fd68 	bl	13b4c <ld_clust>
   1507c:	4602      	mov	r2, r0
   1507e:	687b      	ldr	r3, [r7, #4]
   15080:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
   15082:	e7a4      	b.n	14fce <follow_path+0x52>
			if (res != FR_OK) break;
   15084:	bf00      	nop
   15086:	e002      	b.n	1508e <follow_path+0x112>
				break;
   15088:	bf00      	nop
   1508a:	e000      	b.n	1508e <follow_path+0x112>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
   1508c:	bf00      	nop
			}
		}
	}

	return res;
   1508e:	7dfb      	ldrb	r3, [r7, #23]
}
   15090:	4618      	mov	r0, r3
   15092:	371c      	adds	r7, #28
   15094:	46bd      	mov	sp, r7
   15096:	bd90      	pop	{r4, r7, pc}

00015098 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
   15098:	b480      	push	{r7}
   1509a:	b089      	sub	sp, #36	; 0x24
   1509c:	af00      	add	r7, sp, #0
   1509e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
   150a0:	f04f 33ff 	mov.w	r3, #4294967295
   150a4:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
   150a6:	687b      	ldr	r3, [r7, #4]
   150a8:	681b      	ldr	r3, [r3, #0]
   150aa:	613b      	str	r3, [r7, #16]
   150ac:	693b      	ldr	r3, [r7, #16]
   150ae:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
   150b0:	693b      	ldr	r3, [r7, #16]
   150b2:	2b00      	cmp	r3, #0
   150b4:	d101      	bne.n	150ba <get_ldnumber+0x22>
   150b6:	697b      	ldr	r3, [r7, #20]
   150b8:	e02d      	b.n	15116 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
   150ba:	69fb      	ldr	r3, [r7, #28]
   150bc:	1c5a      	adds	r2, r3, #1
   150be:	61fa      	str	r2, [r7, #28]
   150c0:	781b      	ldrb	r3, [r3, #0]
   150c2:	73fb      	strb	r3, [r7, #15]
   150c4:	7bfb      	ldrb	r3, [r7, #15]
   150c6:	2b1f      	cmp	r3, #31
   150c8:	d902      	bls.n	150d0 <get_ldnumber+0x38>
   150ca:	7bfb      	ldrb	r3, [r7, #15]
   150cc:	2b3a      	cmp	r3, #58	; 0x3a
   150ce:	d1f4      	bne.n	150ba <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
   150d0:	7bfb      	ldrb	r3, [r7, #15]
   150d2:	2b3a      	cmp	r3, #58	; 0x3a
   150d4:	d11c      	bne.n	15110 <get_ldnumber+0x78>
		i = FF_VOLUMES;
   150d6:	2301      	movs	r3, #1
   150d8:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
   150da:	693b      	ldr	r3, [r7, #16]
   150dc:	781b      	ldrb	r3, [r3, #0]
   150de:	2b2f      	cmp	r3, #47	; 0x2f
   150e0:	d90c      	bls.n	150fc <get_ldnumber+0x64>
   150e2:	693b      	ldr	r3, [r7, #16]
   150e4:	781b      	ldrb	r3, [r3, #0]
   150e6:	2b39      	cmp	r3, #57	; 0x39
   150e8:	d808      	bhi.n	150fc <get_ldnumber+0x64>
   150ea:	693b      	ldr	r3, [r7, #16]
   150ec:	3302      	adds	r3, #2
   150ee:	69fa      	ldr	r2, [r7, #28]
   150f0:	429a      	cmp	r2, r3
   150f2:	d103      	bne.n	150fc <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
   150f4:	693b      	ldr	r3, [r7, #16]
   150f6:	781b      	ldrb	r3, [r3, #0]
   150f8:	3b30      	subs	r3, #48	; 0x30
   150fa:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
   150fc:	69bb      	ldr	r3, [r7, #24]
   150fe:	2b00      	cmp	r3, #0
   15100:	dc04      	bgt.n	1510c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
   15102:	69bb      	ldr	r3, [r7, #24]
   15104:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
   15106:	687b      	ldr	r3, [r7, #4]
   15108:	69fa      	ldr	r2, [r7, #28]
   1510a:	601a      	str	r2, [r3, #0]
		}
		return vol;
   1510c:	697b      	ldr	r3, [r7, #20]
   1510e:	e002      	b.n	15116 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
   15110:	2300      	movs	r3, #0
   15112:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
   15114:	697b      	ldr	r3, [r7, #20]
}
   15116:	4618      	mov	r0, r3
   15118:	3724      	adds	r7, #36	; 0x24
   1511a:	46bd      	mov	sp, r7
   1511c:	f85d 7b04 	ldr.w	r7, [sp], #4
   15120:	4770      	bx	lr
	...

00015124 <check_fs>:

static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Valid BS but not FAT, 3:Invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
   15124:	b580      	push	{r7, lr}
   15126:	b082      	sub	sp, #8
   15128:	af00      	add	r7, sp, #0
   1512a:	6078      	str	r0, [r7, #4]
   1512c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
   1512e:	687b      	ldr	r3, [r7, #4]
   15130:	2200      	movs	r2, #0
   15132:	70da      	strb	r2, [r3, #3]
   15134:	687b      	ldr	r3, [r7, #4]
   15136:	f04f 32ff 	mov.w	r2, #4294967295
   1513a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
   1513c:	6839      	ldr	r1, [r7, #0]
   1513e:	6878      	ldr	r0, [r7, #4]
   15140:	f7fd fcba 	bl	12ab8 <move_window>
   15144:	4603      	mov	r3, r0
   15146:	2b00      	cmp	r3, #0
   15148:	d001      	beq.n	1514e <check_fs+0x2a>
   1514a:	2304      	movs	r3, #4
   1514c:	e044      	b.n	151d8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot signature (always here regardless of the sector size) */
   1514e:	687b      	ldr	r3, [r7, #4]
   15150:	333c      	adds	r3, #60	; 0x3c
   15152:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
   15156:	4618      	mov	r0, r3
   15158:	f7fd f99e 	bl	12498 <ld_word>
   1515c:	4603      	mov	r3, r0
   1515e:	461a      	mov	r2, r3
   15160:	f64a 2355 	movw	r3, #43605	; 0xaa55
   15164:	429a      	cmp	r2, r3
   15166:	d001      	beq.n	1516c <check_fs+0x48>
   15168:	2303      	movs	r3, #3
   1516a:	e035      	b.n	151d8 <check_fs+0xb4>

	if (FF_FS_EXFAT && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
   1516c:	687b      	ldr	r3, [r7, #4]
   1516e:	333c      	adds	r3, #60	; 0x3c
   15170:	220b      	movs	r2, #11
   15172:	491b      	ldr	r1, [pc, #108]	; (151e0 <check_fs+0xbc>)
   15174:	4618      	mov	r0, r3
   15176:	f7fd fb92 	bl	1289e <mem_cmp>
   1517a:	4603      	mov	r3, r0
   1517c:	2b00      	cmp	r3, #0
   1517e:	d101      	bne.n	15184 <check_fs+0x60>
   15180:	2301      	movs	r3, #1
   15182:	e029      	b.n	151d8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
   15184:	687b      	ldr	r3, [r7, #4]
   15186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1518a:	2be9      	cmp	r3, #233	; 0xe9
   1518c:	d009      	beq.n	151a2 <check_fs+0x7e>
   1518e:	687b      	ldr	r3, [r7, #4]
   15190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   15194:	2beb      	cmp	r3, #235	; 0xeb
   15196:	d004      	beq.n	151a2 <check_fs+0x7e>
   15198:	687b      	ldr	r3, [r7, #4]
   1519a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1519e:	2be8      	cmp	r3, #232	; 0xe8
   151a0:	d119      	bne.n	151d6 <check_fs+0xb2>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
   151a2:	687b      	ldr	r3, [r7, #4]
   151a4:	333c      	adds	r3, #60	; 0x3c
   151a6:	3336      	adds	r3, #54	; 0x36
   151a8:	2203      	movs	r2, #3
   151aa:	490e      	ldr	r1, [pc, #56]	; (151e4 <check_fs+0xc0>)
   151ac:	4618      	mov	r0, r3
   151ae:	f7fd fb76 	bl	1289e <mem_cmp>
   151b2:	4603      	mov	r3, r0
   151b4:	2b00      	cmp	r3, #0
   151b6:	d101      	bne.n	151bc <check_fs+0x98>
   151b8:	2300      	movs	r3, #0
   151ba:	e00d      	b.n	151d8 <check_fs+0xb4>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
   151bc:	687b      	ldr	r3, [r7, #4]
   151be:	333c      	adds	r3, #60	; 0x3c
   151c0:	3352      	adds	r3, #82	; 0x52
   151c2:	2205      	movs	r2, #5
   151c4:	4908      	ldr	r1, [pc, #32]	; (151e8 <check_fs+0xc4>)
   151c6:	4618      	mov	r0, r3
   151c8:	f7fd fb69 	bl	1289e <mem_cmp>
   151cc:	4603      	mov	r3, r0
   151ce:	2b00      	cmp	r3, #0
   151d0:	d101      	bne.n	151d6 <check_fs+0xb2>
   151d2:	2300      	movs	r3, #0
   151d4:	e000      	b.n	151d8 <check_fs+0xb4>
	}
	return 2;	/* Valid BS but not FAT */
   151d6:	2302      	movs	r3, #2
}
   151d8:	4618      	mov	r0, r3
   151da:	3708      	adds	r7, #8
   151dc:	46bd      	mov	sp, r7
   151de:	bd80      	pop	{r7, pc}
   151e0:	0001a17c 	.word	0x0001a17c
   151e4:	0001a188 	.word	0x0001a188
   151e8:	0001a18c 	.word	0x0001a18c

000151ec <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:auto, 1..:forced */
)
{
   151ec:	b580      	push	{r7, lr}
   151ee:	b088      	sub	sp, #32
   151f0:	af00      	add	r7, sp, #0
   151f2:	6078      	str	r0, [r7, #4]
   151f4:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
   151f6:	2100      	movs	r1, #0
   151f8:	6878      	ldr	r0, [r7, #4]
   151fa:	f7ff ff93 	bl	15124 <check_fs>
   151fe:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, not a BS or disk error */
   15200:	69bb      	ldr	r3, [r7, #24]
   15202:	2b02      	cmp	r3, #2
   15204:	d007      	beq.n	15216 <find_volume+0x2a>
   15206:	69bb      	ldr	r3, [r7, #24]
   15208:	2b02      	cmp	r3, #2
   1520a:	d802      	bhi.n	15212 <find_volume+0x26>
   1520c:	683b      	ldr	r3, [r7, #0]
   1520e:	2b00      	cmp	r3, #0
   15210:	d101      	bne.n	15216 <find_volume+0x2a>
   15212:	69bb      	ldr	r3, [r7, #24]
   15214:	e048      	b.n	152a8 <find_volume+0xbc>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   15216:	2300      	movs	r3, #0
   15218:	61fb      	str	r3, [r7, #28]
   1521a:	e015      	b.n	15248 <find_volume+0x5c>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
   1521c:	687b      	ldr	r3, [r7, #4]
   1521e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   15222:	69fb      	ldr	r3, [r7, #28]
   15224:	011b      	lsls	r3, r3, #4
   15226:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
   1522a:	4413      	add	r3, r2
   1522c:	4618      	mov	r0, r3
   1522e:	f7fd f94b 	bl	124c8 <ld_dword>
   15232:	4602      	mov	r2, r0
   15234:	69fb      	ldr	r3, [r7, #28]
   15236:	009b      	lsls	r3, r3, #2
   15238:	f107 0120 	add.w	r1, r7, #32
   1523c:	440b      	add	r3, r1
   1523e:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
   15242:	69fb      	ldr	r3, [r7, #28]
   15244:	3301      	adds	r3, #1
   15246:	61fb      	str	r3, [r7, #28]
   15248:	69fb      	ldr	r3, [r7, #28]
   1524a:	2b03      	cmp	r3, #3
   1524c:	d9e6      	bls.n	1521c <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
   1524e:	683b      	ldr	r3, [r7, #0]
   15250:	2b00      	cmp	r3, #0
   15252:	d002      	beq.n	1525a <find_volume+0x6e>
   15254:	683b      	ldr	r3, [r7, #0]
   15256:	3b01      	subs	r3, #1
   15258:	e000      	b.n	1525c <find_volume+0x70>
   1525a:	2300      	movs	r3, #0
   1525c:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
   1525e:	69fb      	ldr	r3, [r7, #28]
   15260:	009b      	lsls	r3, r3, #2
   15262:	f107 0220 	add.w	r2, r7, #32
   15266:	4413      	add	r3, r2
   15268:	f853 3c18 	ldr.w	r3, [r3, #-24]
   1526c:	2b00      	cmp	r3, #0
   1526e:	d00c      	beq.n	1528a <find_volume+0x9e>
   15270:	69fb      	ldr	r3, [r7, #28]
   15272:	009b      	lsls	r3, r3, #2
   15274:	f107 0220 	add.w	r2, r7, #32
   15278:	4413      	add	r3, r2
   1527a:	f853 3c18 	ldr.w	r3, [r3, #-24]
   1527e:	4619      	mov	r1, r3
   15280:	6878      	ldr	r0, [r7, #4]
   15282:	f7ff ff4f 	bl	15124 <check_fs>
   15286:	4603      	mov	r3, r0
   15288:	e000      	b.n	1528c <find_volume+0xa0>
   1528a:	2303      	movs	r3, #3
   1528c:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
   1528e:	683b      	ldr	r3, [r7, #0]
   15290:	2b00      	cmp	r3, #0
   15292:	d108      	bne.n	152a6 <find_volume+0xba>
   15294:	69bb      	ldr	r3, [r7, #24]
   15296:	2b01      	cmp	r3, #1
   15298:	d905      	bls.n	152a6 <find_volume+0xba>
   1529a:	69fb      	ldr	r3, [r7, #28]
   1529c:	3301      	adds	r3, #1
   1529e:	61fb      	str	r3, [r7, #28]
   152a0:	69fb      	ldr	r3, [r7, #28]
   152a2:	2b03      	cmp	r3, #3
   152a4:	d9db      	bls.n	1525e <find_volume+0x72>
	return fmt;
   152a6:	69bb      	ldr	r3, [r7, #24]
}
   152a8:	4618      	mov	r0, r3
   152aa:	3720      	adds	r7, #32
   152ac:	46bd      	mov	sp, r7
   152ae:	bd80      	pop	{r7, pc}

000152b0 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
   152b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   152b4:	b097      	sub	sp, #92	; 0x5c
   152b6:	af00      	add	r7, sp, #0
   152b8:	60f8      	str	r0, [r7, #12]
   152ba:	60b9      	str	r1, [r7, #8]
   152bc:	4613      	mov	r3, r2
   152be:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
   152c0:	68bb      	ldr	r3, [r7, #8]
   152c2:	2200      	movs	r2, #0
   152c4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
   152c6:	68f8      	ldr	r0, [r7, #12]
   152c8:	f7ff fee6 	bl	15098 <get_ldnumber>
   152cc:	63b8      	str	r0, [r7, #56]	; 0x38
	if (vol < 0) return FR_INVALID_DRIVE;
   152ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   152d0:	2b00      	cmp	r3, #0
   152d2:	da01      	bge.n	152d8 <mount_volume+0x28>
   152d4:	230b      	movs	r3, #11
   152d6:	e31e      	b.n	15916 <mount_volume+0x666>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
   152d8:	4aae      	ldr	r2, [pc, #696]	; (15594 <mount_volume+0x2e4>)
   152da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   152dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   152e0:	637b      	str	r3, [r7, #52]	; 0x34
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
   152e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   152e4:	2b00      	cmp	r3, #0
   152e6:	d101      	bne.n	152ec <mount_volume+0x3c>
   152e8:	230c      	movs	r3, #12
   152ea:	e314      	b.n	15916 <mount_volume+0x666>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
   152ec:	68bb      	ldr	r3, [r7, #8]
   152ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   152f0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
   152f2:	79fb      	ldrb	r3, [r7, #7]
   152f4:	f023 0301 	bic.w	r3, r3, #1
   152f8:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
   152fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   152fc:	781b      	ldrb	r3, [r3, #0]
   152fe:	2b00      	cmp	r3, #0
   15300:	d01a      	beq.n	15338 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
   15302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15304:	785b      	ldrb	r3, [r3, #1]
   15306:	4618      	mov	r0, r3
   15308:	f7fc ff5a 	bl	121c0 <disk_status>
   1530c:	4603      	mov	r3, r0
   1530e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
   15312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   15316:	f003 0301 	and.w	r3, r3, #1
   1531a:	2b00      	cmp	r3, #0
   1531c:	d10c      	bne.n	15338 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
   1531e:	79fb      	ldrb	r3, [r7, #7]
   15320:	2b00      	cmp	r3, #0
   15322:	d007      	beq.n	15334 <mount_volume+0x84>
   15324:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   15328:	f003 0304 	and.w	r3, r3, #4
   1532c:	2b00      	cmp	r3, #0
   1532e:	d001      	beq.n	15334 <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
   15330:	230a      	movs	r3, #10
   15332:	e2f0      	b.n	15916 <mount_volume+0x666>
			}
			return FR_OK;				/* The filesystem object is already valid */
   15334:	2300      	movs	r3, #0
   15336:	e2ee      	b.n	15916 <mount_volume+0x666>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
   15338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1533a:	2200      	movs	r2, #0
   1533c:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
   1533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15340:	b2da      	uxtb	r2, r3
   15342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15344:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
   15346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15348:	785b      	ldrb	r3, [r3, #1]
   1534a:	4618      	mov	r0, r3
   1534c:	f7fc ff49 	bl	121e2 <disk_initialize>
   15350:	4603      	mov	r3, r0
   15352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
   15356:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1535a:	f003 0301 	and.w	r3, r3, #1
   1535e:	2b00      	cmp	r3, #0
   15360:	d001      	beq.n	15366 <mount_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
   15362:	2303      	movs	r3, #3
   15364:	e2d7      	b.n	15916 <mount_volume+0x666>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
   15366:	79fb      	ldrb	r3, [r7, #7]
   15368:	2b00      	cmp	r3, #0
   1536a:	d007      	beq.n	1537c <mount_volume+0xcc>
   1536c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   15370:	f003 0304 	and.w	r3, r3, #4
   15374:	2b00      	cmp	r3, #0
   15376:	d001      	beq.n	1537c <mount_volume+0xcc>
		return FR_WRITE_PROTECTED;
   15378:	230a      	movs	r3, #10
   1537a:	e2cc      	b.n	15916 <mount_volume+0x666>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the drive */
	fmt = find_volume(fs, LD2PT(vol));
   1537c:	2100      	movs	r1, #0
   1537e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   15380:	f7ff ff34 	bl	151ec <find_volume>
   15384:	64b8      	str	r0, [r7, #72]	; 0x48
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
   15386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15388:	2b04      	cmp	r3, #4
   1538a:	d101      	bne.n	15390 <mount_volume+0xe0>
   1538c:	2301      	movs	r3, #1
   1538e:	e2c2      	b.n	15916 <mount_volume+0x666>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
   15390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15392:	2b01      	cmp	r3, #1
   15394:	d901      	bls.n	1539a <mount_volume+0xea>
   15396:	230d      	movs	r3, #13
   15398:	e2bd      	b.n	15916 <mount_volume+0x666>
	bsect = fs->winsect;					/* Volume location */
   1539a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1539e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
   153a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   153a2:	2b01      	cmp	r3, #1
   153a4:	f040 8139 	bne.w	1561a <mount_volume+0x36a>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
   153a8:	230b      	movs	r3, #11
   153aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   153ac:	e002      	b.n	153b4 <mount_volume+0x104>
   153ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   153b0:	3301      	adds	r3, #1
   153b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   153b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   153b6:	2b3f      	cmp	r3, #63	; 0x3f
   153b8:	d806      	bhi.n	153c8 <mount_volume+0x118>
   153ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   153bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   153be:	4413      	add	r3, r2
   153c0:	333c      	adds	r3, #60	; 0x3c
   153c2:	781b      	ldrb	r3, [r3, #0]
   153c4:	2b00      	cmp	r3, #0
   153c6:	d0f2      	beq.n	153ae <mount_volume+0xfe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
   153c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   153ca:	2b3f      	cmp	r3, #63	; 0x3f
   153cc:	d801      	bhi.n	153d2 <mount_volume+0x122>
   153ce:	230d      	movs	r3, #13
   153d0:	e2a1      	b.n	15916 <mount_volume+0x666>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
   153d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153d4:	333c      	adds	r3, #60	; 0x3c
   153d6:	3368      	adds	r3, #104	; 0x68
   153d8:	4618      	mov	r0, r3
   153da:	f7fd f85d 	bl	12498 <ld_word>
   153de:	4603      	mov	r3, r0
   153e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   153e4:	d001      	beq.n	153ea <mount_volume+0x13a>
   153e6:	230d      	movs	r3, #13
   153e8:	e295      	b.n	15916 <mount_volume+0x666>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
   153ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153ec:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   153f0:	2b09      	cmp	r3, #9
   153f2:	d001      	beq.n	153f8 <mount_volume+0x148>
			return FR_NO_FILESYSTEM;
   153f4:	230d      	movs	r3, #13
   153f6:	e28e      	b.n	15916 <mount_volume+0x666>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
   153f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   153fa:	333c      	adds	r3, #60	; 0x3c
   153fc:	3348      	adds	r3, #72	; 0x48
   153fe:	4618      	mov	r0, r3
   15400:	f7fd f885 	bl	1250e <ld_qword>
   15404:	460a      	mov	r2, r1
   15406:	4601      	mov	r1, r0
   15408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1540a:	f04f 0400 	mov.w	r4, #0
   1540e:	eb11 0803 	adds.w	r8, r1, r3
   15412:	eb42 0904 	adc.w	r9, r2, r4
   15416:	e9c7 8908 	strd	r8, r9, [r7, #32]
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
   1541a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
   1541e:	2c01      	cmp	r4, #1
   15420:	bf08      	it	eq
   15422:	2b00      	cmpeq	r3, #0
   15424:	d301      	bcc.n	1542a <mount_volume+0x17a>
   15426:	230d      	movs	r3, #13
   15428:	e275      	b.n	15916 <mount_volume+0x666>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
   1542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1542c:	333c      	adds	r3, #60	; 0x3c
   1542e:	3354      	adds	r3, #84	; 0x54
   15430:	4618      	mov	r0, r3
   15432:	f7fd f849 	bl	124c8 <ld_dword>
   15436:	4602      	mov	r2, r0
   15438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1543a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
   1543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1543e:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
   15442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15444:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
   15446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15448:	789b      	ldrb	r3, [r3, #2]
   1544a:	2b01      	cmp	r3, #1
   1544c:	d001      	beq.n	15452 <mount_volume+0x1a2>
   1544e:	230d      	movs	r3, #13
   15450:	e261      	b.n	15916 <mount_volume+0x666>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
   15452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15454:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
   15458:	461a      	mov	r2, r3
   1545a:	2301      	movs	r3, #1
   1545c:	4093      	lsls	r3, r2
   1545e:	b29a      	uxth	r2, r3
   15460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15462:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
   15464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15466:	895b      	ldrh	r3, [r3, #10]
   15468:	2b00      	cmp	r3, #0
   1546a:	d101      	bne.n	15470 <mount_volume+0x1c0>
   1546c:	230d      	movs	r3, #13
   1546e:	e252      	b.n	15916 <mount_volume+0x666>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
   15470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15472:	333c      	adds	r3, #60	; 0x3c
   15474:	335c      	adds	r3, #92	; 0x5c
   15476:	4618      	mov	r0, r3
   15478:	f7fd f826 	bl	124c8 <ld_dword>
   1547c:	61f8      	str	r0, [r7, #28]
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
   1547e:	69fb      	ldr	r3, [r7, #28]
   15480:	4a45      	ldr	r2, [pc, #276]	; (15598 <mount_volume+0x2e8>)
   15482:	4293      	cmp	r3, r2
   15484:	d901      	bls.n	1548a <mount_volume+0x1da>
   15486:	230d      	movs	r3, #13
   15488:	e245      	b.n	15916 <mount_volume+0x666>
		fs->n_fatent = nclst + 2;
   1548a:	69fb      	ldr	r3, [r7, #28]
   1548c:	1c9a      	adds	r2, r3, #2
   1548e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15490:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
   15492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15496:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
   15498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1549a:	333c      	adds	r3, #60	; 0x3c
   1549c:	3358      	adds	r3, #88	; 0x58
   1549e:	4618      	mov	r0, r3
   154a0:	f7fd f812 	bl	124c8 <ld_dword>
   154a4:	4602      	mov	r2, r0
   154a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   154a8:	441a      	add	r2, r3
   154aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154ac:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
   154ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154b0:	333c      	adds	r3, #60	; 0x3c
   154b2:	3350      	adds	r3, #80	; 0x50
   154b4:	4618      	mov	r0, r3
   154b6:	f7fd f807 	bl	124c8 <ld_dword>
   154ba:	4602      	mov	r2, r0
   154bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   154be:	441a      	add	r2, r3
   154c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154c2:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
   154c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   154c8:	4619      	mov	r1, r3
   154ca:	f04f 0200 	mov.w	r2, #0
   154ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154d0:	895b      	ldrh	r3, [r3, #10]
   154d2:	4618      	mov	r0, r3
   154d4:	69fb      	ldr	r3, [r7, #28]
   154d6:	fb03 f300 	mul.w	r3, r3, r0
   154da:	f04f 0400 	mov.w	r4, #0
   154de:	18cd      	adds	r5, r1, r3
   154e0:	eb42 0604 	adc.w	r6, r2, r4
   154e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
   154e8:	42b4      	cmp	r4, r6
   154ea:	bf08      	it	eq
   154ec:	42ab      	cmpeq	r3, r5
   154ee:	d201      	bcs.n	154f4 <mount_volume+0x244>
   154f0:	230d      	movs	r3, #13
   154f2:	e210      	b.n	15916 <mount_volume+0x666>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
   154f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   154f6:	333c      	adds	r3, #60	; 0x3c
   154f8:	3360      	adds	r3, #96	; 0x60
   154fa:	4618      	mov	r0, r3
   154fc:	f7fc ffe4 	bl	124c8 <ld_dword>
   15500:	4602      	mov	r2, r0
   15502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15504:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
   15506:	2300      	movs	r3, #0
   15508:	63fb      	str	r3, [r7, #60]	; 0x3c
   1550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1550c:	647b      	str	r3, [r7, #68]	; 0x44
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
   1550e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15510:	2b00      	cmp	r3, #0
   15512:	d11c      	bne.n	1554e <mount_volume+0x29e>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
   15514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15516:	895b      	ldrh	r3, [r3, #10]
   15518:	461a      	mov	r2, r3
   1551a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1551c:	4293      	cmp	r3, r2
   1551e:	d301      	bcc.n	15524 <mount_volume+0x274>
   15520:	230d      	movs	r3, #13
   15522:	e1f8      	b.n	15916 <mount_volume+0x666>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
   15524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15528:	4619      	mov	r1, r3
   1552a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1552c:	f7fd fb60 	bl	12bf0 <clst2sect>
   15530:	4602      	mov	r2, r0
   15532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   15534:	4413      	add	r3, r2
   15536:	4619      	mov	r1, r3
   15538:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1553a:	f7fd fabd 	bl	12ab8 <move_window>
   1553e:	4603      	mov	r3, r0
   15540:	2b00      	cmp	r3, #0
   15542:	d001      	beq.n	15548 <mount_volume+0x298>
   15544:	2301      	movs	r3, #1
   15546:	e1e6      	b.n	15916 <mount_volume+0x666>
				so++;
   15548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1554a:	3301      	adds	r3, #1
   1554c:	647b      	str	r3, [r7, #68]	; 0x44
			}
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
   1554e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   15550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15552:	4413      	add	r3, r2
   15554:	333c      	adds	r3, #60	; 0x3c
   15556:	781b      	ldrb	r3, [r3, #0]
   15558:	2b81      	cmp	r3, #129	; 0x81
   1555a:	d005      	beq.n	15568 <mount_volume+0x2b8>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
   1555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1555e:	3320      	adds	r3, #32
   15560:	f3c3 0308 	ubfx	r3, r3, #0, #9
   15564:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (i == 0) {
   15566:	e7d2      	b.n	1550e <mount_volume+0x25e>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
   15568:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
   1556a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1556c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   15570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   15572:	3314      	adds	r3, #20
   15574:	4413      	add	r3, r2
   15576:	4618      	mov	r0, r3
   15578:	f7fc ffa6 	bl	124c8 <ld_dword>
   1557c:	6438      	str	r0, [r7, #64]	; 0x40
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
   1557e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   15580:	2b01      	cmp	r3, #1
   15582:	d904      	bls.n	1558e <mount_volume+0x2de>
   15584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15586:	69db      	ldr	r3, [r3, #28]
   15588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1558a:	429a      	cmp	r2, r3
   1558c:	d306      	bcc.n	1559c <mount_volume+0x2ec>
   1558e:	230d      	movs	r3, #13
   15590:	e1c1      	b.n	15916 <mount_volume+0x666>
   15592:	bf00      	nop
   15594:	10000574 	.word	0x10000574
   15598:	7ffffffd 	.word	0x7ffffffd
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
   1559c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1559e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   155a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   155a2:	895b      	ldrh	r3, [r3, #10]
   155a4:	4619      	mov	r1, r3
   155a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155a8:	3b02      	subs	r3, #2
   155aa:	fb03 f301 	mul.w	r3, r3, r1
   155ae:	441a      	add	r2, r3
   155b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   155b2:	635a      	str	r2, [r3, #52]	; 0x34
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
   155b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   155b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   155b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155ba:	09db      	lsrs	r3, r3, #7
   155bc:	4413      	add	r3, r2
   155be:	4619      	mov	r1, r3
   155c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   155c2:	f7fd fa79 	bl	12ab8 <move_window>
   155c6:	4603      	mov	r3, r0
   155c8:	2b00      	cmp	r3, #0
   155ca:	d001      	beq.n	155d0 <mount_volume+0x320>
   155cc:	2301      	movs	r3, #1
   155ce:	e1a2      	b.n	15916 <mount_volume+0x666>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
   155d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   155d2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
   155d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   155dc:	009b      	lsls	r3, r3, #2
   155de:	4413      	add	r3, r2
   155e0:	4618      	mov	r0, r3
   155e2:	f7fc ff71 	bl	124c8 <ld_dword>
   155e6:	61b8      	str	r0, [r7, #24]
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
   155e8:	69bb      	ldr	r3, [r7, #24]
   155ea:	f1b3 3fff 	cmp.w	r3, #4294967295
   155ee:	d008      	beq.n	15602 <mount_volume+0x352>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
   155f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   155f2:	3301      	adds	r3, #1
   155f4:	643b      	str	r3, [r7, #64]	; 0x40
   155f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   155f8:	69bb      	ldr	r3, [r7, #24]
   155fa:	429a      	cmp	r2, r3
   155fc:	d0da      	beq.n	155b4 <mount_volume+0x304>
   155fe:	230d      	movs	r3, #13
   15600:	e189      	b.n	15916 <mount_volume+0x666>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
   15602:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   15604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15606:	f04f 32ff 	mov.w	r2, #4294967295
   1560a:	619a      	str	r2, [r3, #24]
   1560c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1560e:	699a      	ldr	r2, [r3, #24]
   15610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15612:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
   15614:	2304      	movs	r3, #4
   15616:	64bb      	str	r3, [r7, #72]	; 0x48
   15618:	e168      	b.n	158ec <mount_volume+0x63c>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
   1561a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1561c:	333c      	adds	r3, #60	; 0x3c
   1561e:	330b      	adds	r3, #11
   15620:	4618      	mov	r0, r3
   15622:	f7fc ff39 	bl	12498 <ld_word>
   15626:	4603      	mov	r3, r0
   15628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1562c:	d001      	beq.n	15632 <mount_volume+0x382>
   1562e:	230d      	movs	r3, #13
   15630:	e171      	b.n	15916 <mount_volume+0x666>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
   15632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15634:	333c      	adds	r3, #60	; 0x3c
   15636:	3316      	adds	r3, #22
   15638:	4618      	mov	r0, r3
   1563a:	f7fc ff2d 	bl	12498 <ld_word>
   1563e:	4603      	mov	r3, r0
   15640:	653b      	str	r3, [r7, #80]	; 0x50
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
   15642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15644:	2b00      	cmp	r3, #0
   15646:	d106      	bne.n	15656 <mount_volume+0x3a6>
   15648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1564a:	333c      	adds	r3, #60	; 0x3c
   1564c:	3324      	adds	r3, #36	; 0x24
   1564e:	4618      	mov	r0, r3
   15650:	f7fc ff3a 	bl	124c8 <ld_dword>
   15654:	6538      	str	r0, [r7, #80]	; 0x50
		fs->fsize = fasize;
   15656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1565a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
   1565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1565e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
   15662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15664:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
   15666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15668:	789b      	ldrb	r3, [r3, #2]
   1566a:	2b01      	cmp	r3, #1
   1566c:	d005      	beq.n	1567a <mount_volume+0x3ca>
   1566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15670:	789b      	ldrb	r3, [r3, #2]
   15672:	2b02      	cmp	r3, #2
   15674:	d001      	beq.n	1567a <mount_volume+0x3ca>
   15676:	230d      	movs	r3, #13
   15678:	e14d      	b.n	15916 <mount_volume+0x666>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
   1567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1567c:	789b      	ldrb	r3, [r3, #2]
   1567e:	461a      	mov	r2, r3
   15680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   15682:	fb02 f303 	mul.w	r3, r2, r3
   15686:	653b      	str	r3, [r7, #80]	; 0x50

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
   15688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1568a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
   1568e:	b29a      	uxth	r2, r3
   15690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15692:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   15694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15696:	895b      	ldrh	r3, [r3, #10]
   15698:	2b00      	cmp	r3, #0
   1569a:	d008      	beq.n	156ae <mount_volume+0x3fe>
   1569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1569e:	895b      	ldrh	r3, [r3, #10]
   156a0:	461a      	mov	r2, r3
   156a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156a4:	895b      	ldrh	r3, [r3, #10]
   156a6:	3b01      	subs	r3, #1
   156a8:	4013      	ands	r3, r2
   156aa:	2b00      	cmp	r3, #0
   156ac:	d001      	beq.n	156b2 <mount_volume+0x402>
   156ae:	230d      	movs	r3, #13
   156b0:	e131      	b.n	15916 <mount_volume+0x666>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
   156b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156b4:	333c      	adds	r3, #60	; 0x3c
   156b6:	3311      	adds	r3, #17
   156b8:	4618      	mov	r0, r3
   156ba:	f7fc feed 	bl	12498 <ld_word>
   156be:	4603      	mov	r3, r0
   156c0:	461a      	mov	r2, r3
   156c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156c4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
   156c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156c8:	891b      	ldrh	r3, [r3, #8]
   156ca:	f003 030f 	and.w	r3, r3, #15
   156ce:	b29b      	uxth	r3, r3
   156d0:	2b00      	cmp	r3, #0
   156d2:	d001      	beq.n	156d8 <mount_volume+0x428>
   156d4:	230d      	movs	r3, #13
   156d6:	e11e      	b.n	15916 <mount_volume+0x666>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
   156d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156da:	333c      	adds	r3, #60	; 0x3c
   156dc:	3313      	adds	r3, #19
   156de:	4618      	mov	r0, r3
   156e0:	f7fc feda 	bl	12498 <ld_word>
   156e4:	4603      	mov	r3, r0
   156e6:	657b      	str	r3, [r7, #84]	; 0x54
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
   156e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   156ea:	2b00      	cmp	r3, #0
   156ec:	d106      	bne.n	156fc <mount_volume+0x44c>
   156ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156f0:	333c      	adds	r3, #60	; 0x3c
   156f2:	3320      	adds	r3, #32
   156f4:	4618      	mov	r0, r3
   156f6:	f7fc fee7 	bl	124c8 <ld_dword>
   156fa:	6578      	str	r0, [r7, #84]	; 0x54

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
   156fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   156fe:	333c      	adds	r3, #60	; 0x3c
   15700:	330e      	adds	r3, #14
   15702:	4618      	mov	r0, r3
   15704:	f7fc fec8 	bl	12498 <ld_word>
   15708:	4603      	mov	r3, r0
   1570a:	82fb      	strh	r3, [r7, #22]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
   1570c:	8afb      	ldrh	r3, [r7, #22]
   1570e:	2b00      	cmp	r3, #0
   15710:	d101      	bne.n	15716 <mount_volume+0x466>
   15712:	230d      	movs	r3, #13
   15714:	e0ff      	b.n	15916 <mount_volume+0x666>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
   15716:	8afa      	ldrh	r2, [r7, #22]
   15718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1571a:	4413      	add	r3, r2
   1571c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1571e:	8912      	ldrh	r2, [r2, #8]
   15720:	0912      	lsrs	r2, r2, #4
   15722:	b292      	uxth	r2, r2
   15724:	4413      	add	r3, r2
   15726:	613b      	str	r3, [r7, #16]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
   15728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1572a:	693b      	ldr	r3, [r7, #16]
   1572c:	429a      	cmp	r2, r3
   1572e:	d201      	bcs.n	15734 <mount_volume+0x484>
   15730:	230d      	movs	r3, #13
   15732:	e0f0      	b.n	15916 <mount_volume+0x666>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
   15734:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15736:	693b      	ldr	r3, [r7, #16]
   15738:	1ad3      	subs	r3, r2, r3
   1573a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   1573c:	8952      	ldrh	r2, [r2, #10]
   1573e:	fbb3 f3f2 	udiv	r3, r3, r2
   15742:	61fb      	str	r3, [r7, #28]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   15744:	69fb      	ldr	r3, [r7, #28]
   15746:	2b00      	cmp	r3, #0
   15748:	d101      	bne.n	1574e <mount_volume+0x49e>
   1574a:	230d      	movs	r3, #13
   1574c:	e0e3      	b.n	15916 <mount_volume+0x666>
		fmt = 0;
   1574e:	2300      	movs	r3, #0
   15750:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
   15752:	69fb      	ldr	r3, [r7, #28]
   15754:	4a72      	ldr	r2, [pc, #456]	; (15920 <mount_volume+0x670>)
   15756:	4293      	cmp	r3, r2
   15758:	d801      	bhi.n	1575e <mount_volume+0x4ae>
   1575a:	2303      	movs	r3, #3
   1575c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
   1575e:	69fb      	ldr	r3, [r7, #28]
   15760:	f64f 72f5 	movw	r2, #65525	; 0xfff5
   15764:	4293      	cmp	r3, r2
   15766:	d801      	bhi.n	1576c <mount_volume+0x4bc>
   15768:	2302      	movs	r3, #2
   1576a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
   1576c:	69fb      	ldr	r3, [r7, #28]
   1576e:	f640 72f5 	movw	r2, #4085	; 0xff5
   15772:	4293      	cmp	r3, r2
   15774:	d801      	bhi.n	1577a <mount_volume+0x4ca>
   15776:	2301      	movs	r3, #1
   15778:	64bb      	str	r3, [r7, #72]	; 0x48
		if (fmt == 0) return FR_NO_FILESYSTEM;
   1577a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1577c:	2b00      	cmp	r3, #0
   1577e:	d101      	bne.n	15784 <mount_volume+0x4d4>
   15780:	230d      	movs	r3, #13
   15782:	e0c8      	b.n	15916 <mount_volume+0x666>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
   15784:	69fb      	ldr	r3, [r7, #28]
   15786:	1c9a      	adds	r2, r3, #2
   15788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1578a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
   1578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1578e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15790:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
   15792:	8afa      	ldrh	r2, [r7, #22]
   15794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15796:	441a      	add	r2, r3
   15798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1579a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
   1579c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1579e:	693b      	ldr	r3, [r7, #16]
   157a0:	441a      	add	r2, r3
   157a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157a4:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
   157a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   157a8:	2b03      	cmp	r3, #3
   157aa:	d11e      	bne.n	157ea <mount_volume+0x53a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
   157ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157ae:	333c      	adds	r3, #60	; 0x3c
   157b0:	332a      	adds	r3, #42	; 0x2a
   157b2:	4618      	mov	r0, r3
   157b4:	f7fc fe70 	bl	12498 <ld_word>
   157b8:	4603      	mov	r3, r0
   157ba:	2b00      	cmp	r3, #0
   157bc:	d001      	beq.n	157c2 <mount_volume+0x512>
   157be:	230d      	movs	r3, #13
   157c0:	e0a9      	b.n	15916 <mount_volume+0x666>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
   157c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157c4:	891b      	ldrh	r3, [r3, #8]
   157c6:	2b00      	cmp	r3, #0
   157c8:	d001      	beq.n	157ce <mount_volume+0x51e>
   157ca:	230d      	movs	r3, #13
   157cc:	e0a3      	b.n	15916 <mount_volume+0x666>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
   157ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157d0:	333c      	adds	r3, #60	; 0x3c
   157d2:	332c      	adds	r3, #44	; 0x2c
   157d4:	4618      	mov	r0, r3
   157d6:	f7fc fe77 	bl	124c8 <ld_dword>
   157da:	4602      	mov	r2, r0
   157dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157de:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
   157e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157e2:	69db      	ldr	r3, [r3, #28]
   157e4:	009b      	lsls	r3, r3, #2
   157e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   157e8:	e01e      	b.n	15828 <mount_volume+0x578>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   157ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157ec:	891b      	ldrh	r3, [r3, #8]
   157ee:	2b00      	cmp	r3, #0
   157f0:	d101      	bne.n	157f6 <mount_volume+0x546>
   157f2:	230d      	movs	r3, #13
   157f4:	e08f      	b.n	15916 <mount_volume+0x666>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
   157f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   157f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   157fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   157fc:	441a      	add	r2, r3
   157fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15800:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   15802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15804:	2b02      	cmp	r3, #2
   15806:	d103      	bne.n	15810 <mount_volume+0x560>
   15808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1580a:	69db      	ldr	r3, [r3, #28]
   1580c:	005b      	lsls	r3, r3, #1
   1580e:	e00a      	b.n	15826 <mount_volume+0x576>
   15810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15812:	69da      	ldr	r2, [r3, #28]
   15814:	4613      	mov	r3, r2
   15816:	005b      	lsls	r3, r3, #1
   15818:	4413      	add	r3, r2
   1581a:	085a      	lsrs	r2, r3, #1
   1581c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1581e:	69db      	ldr	r3, [r3, #28]
   15820:	f003 0301 	and.w	r3, r3, #1
   15824:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
   15826:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
   15828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1582a:	6a1a      	ldr	r2, [r3, #32]
   1582c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1582e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
   15832:	0a5b      	lsrs	r3, r3, #9
   15834:	429a      	cmp	r2, r3
   15836:	d201      	bcs.n	1583c <mount_volume+0x58c>
   15838:	230d      	movs	r3, #13
   1583a:	e06c      	b.n	15916 <mount_volume+0x666>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
   1583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1583e:	f04f 32ff 	mov.w	r2, #4294967295
   15842:	619a      	str	r2, [r3, #24]
   15844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15846:	699a      	ldr	r2, [r3, #24]
   15848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1584a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
   1584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1584e:	2280      	movs	r2, #128	; 0x80
   15850:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
   15852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   15854:	2b03      	cmp	r3, #3
   15856:	d149      	bne.n	158ec <mount_volume+0x63c>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
   15858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1585a:	333c      	adds	r3, #60	; 0x3c
   1585c:	3330      	adds	r3, #48	; 0x30
   1585e:	4618      	mov	r0, r3
   15860:	f7fc fe1a 	bl	12498 <ld_word>
   15864:	4603      	mov	r3, r0
   15866:	2b01      	cmp	r3, #1
   15868:	d140      	bne.n	158ec <mount_volume+0x63c>
			&& move_window(fs, bsect + 1) == FR_OK)
   1586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1586c:	3301      	adds	r3, #1
   1586e:	4619      	mov	r1, r3
   15870:	6b78      	ldr	r0, [r7, #52]	; 0x34
   15872:	f7fd f921 	bl	12ab8 <move_window>
   15876:	4603      	mov	r3, r0
   15878:	2b00      	cmp	r3, #0
   1587a:	d137      	bne.n	158ec <mount_volume+0x63c>
		{
			fs->fsi_flag = 0;
   1587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1587e:	2200      	movs	r2, #0
   15880:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
   15882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15884:	333c      	adds	r3, #60	; 0x3c
   15886:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
   1588a:	4618      	mov	r0, r3
   1588c:	f7fc fe04 	bl	12498 <ld_word>
   15890:	4603      	mov	r3, r0
   15892:	461a      	mov	r2, r3
   15894:	f64a 2355 	movw	r3, #43605	; 0xaa55
   15898:	429a      	cmp	r2, r3
   1589a:	d127      	bne.n	158ec <mount_volume+0x63c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
   1589c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1589e:	333c      	adds	r3, #60	; 0x3c
   158a0:	4618      	mov	r0, r3
   158a2:	f7fc fe11 	bl	124c8 <ld_dword>
   158a6:	4602      	mov	r2, r0
   158a8:	4b1e      	ldr	r3, [pc, #120]	; (15924 <mount_volume+0x674>)
   158aa:	429a      	cmp	r2, r3
   158ac:	d11e      	bne.n	158ec <mount_volume+0x63c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
   158ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158b0:	333c      	adds	r3, #60	; 0x3c
   158b2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
   158b6:	4618      	mov	r0, r3
   158b8:	f7fc fe06 	bl	124c8 <ld_dword>
   158bc:	4602      	mov	r2, r0
   158be:	4b1a      	ldr	r3, [pc, #104]	; (15928 <mount_volume+0x678>)
   158c0:	429a      	cmp	r2, r3
   158c2:	d113      	bne.n	158ec <mount_volume+0x63c>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
   158c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158c6:	333c      	adds	r3, #60	; 0x3c
   158c8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
   158cc:	4618      	mov	r0, r3
   158ce:	f7fc fdfb 	bl	124c8 <ld_dword>
   158d2:	4602      	mov	r2, r0
   158d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158d6:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
   158d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158da:	333c      	adds	r3, #60	; 0x3c
   158dc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
   158e0:	4618      	mov	r0, r3
   158e2:	f7fc fdf1 	bl	124c8 <ld_dword>
   158e6:	4602      	mov	r2, r0
   158e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158ea:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
   158ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   158ee:	b2da      	uxtb	r2, r3
   158f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   158f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
   158f4:	4b0d      	ldr	r3, [pc, #52]	; (1592c <mount_volume+0x67c>)
   158f6:	881b      	ldrh	r3, [r3, #0]
   158f8:	3301      	adds	r3, #1
   158fa:	b29a      	uxth	r2, r3
   158fc:	4b0b      	ldr	r3, [pc, #44]	; (1592c <mount_volume+0x67c>)
   158fe:	801a      	strh	r2, [r3, #0]
   15900:	4b0a      	ldr	r3, [pc, #40]	; (1592c <mount_volume+0x67c>)
   15902:	881a      	ldrh	r2, [r3, #0]
   15904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15906:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
   15908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1590a:	4a09      	ldr	r2, [pc, #36]	; (15930 <mount_volume+0x680>)
   1590c:	60da      	str	r2, [r3, #12]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
   1590e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15910:	4a08      	ldr	r2, [pc, #32]	; (15934 <mount_volume+0x684>)
   15912:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
   15914:	2300      	movs	r3, #0
}
   15916:	4618      	mov	r0, r3
   15918:	375c      	adds	r7, #92	; 0x5c
   1591a:	46bd      	mov	sp, r7
   1591c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15920:	0ffffff5 	.word	0x0ffffff5
   15924:	41615252 	.word	0x41615252
   15928:	61417272 	.word	0x61417272
   1592c:	10000578 	.word	0x10000578
   15930:	100007dc 	.word	0x100007dc
   15934:	1000057c 	.word	0x1000057c

00015938 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
   15938:	b580      	push	{r7, lr}
   1593a:	b084      	sub	sp, #16
   1593c:	af00      	add	r7, sp, #0
   1593e:	6078      	str	r0, [r7, #4]
   15940:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
   15942:	2309      	movs	r3, #9
   15944:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
   15946:	687b      	ldr	r3, [r7, #4]
   15948:	2b00      	cmp	r3, #0
   1594a:	d01c      	beq.n	15986 <validate+0x4e>
   1594c:	687b      	ldr	r3, [r7, #4]
   1594e:	681b      	ldr	r3, [r3, #0]
   15950:	2b00      	cmp	r3, #0
   15952:	d018      	beq.n	15986 <validate+0x4e>
   15954:	687b      	ldr	r3, [r7, #4]
   15956:	681b      	ldr	r3, [r3, #0]
   15958:	781b      	ldrb	r3, [r3, #0]
   1595a:	2b00      	cmp	r3, #0
   1595c:	d013      	beq.n	15986 <validate+0x4e>
   1595e:	687b      	ldr	r3, [r7, #4]
   15960:	889a      	ldrh	r2, [r3, #4]
   15962:	687b      	ldr	r3, [r7, #4]
   15964:	681b      	ldr	r3, [r3, #0]
   15966:	88db      	ldrh	r3, [r3, #6]
   15968:	429a      	cmp	r2, r3
   1596a:	d10c      	bne.n	15986 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
   1596c:	687b      	ldr	r3, [r7, #4]
   1596e:	681b      	ldr	r3, [r3, #0]
   15970:	785b      	ldrb	r3, [r3, #1]
   15972:	4618      	mov	r0, r3
   15974:	f7fc fc24 	bl	121c0 <disk_status>
   15978:	4603      	mov	r3, r0
   1597a:	f003 0301 	and.w	r3, r3, #1
   1597e:	2b00      	cmp	r3, #0
   15980:	d101      	bne.n	15986 <validate+0x4e>
			res = FR_OK;
   15982:	2300      	movs	r3, #0
   15984:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
   15986:	7bfb      	ldrb	r3, [r7, #15]
   15988:	2b00      	cmp	r3, #0
   1598a:	d102      	bne.n	15992 <validate+0x5a>
   1598c:	687b      	ldr	r3, [r7, #4]
   1598e:	681b      	ldr	r3, [r3, #0]
   15990:	e000      	b.n	15994 <validate+0x5c>
   15992:	2300      	movs	r3, #0
   15994:	683a      	ldr	r2, [r7, #0]
   15996:	6013      	str	r3, [r2, #0]
	return res;
   15998:	7bfb      	ldrb	r3, [r7, #15]
}
   1599a:	4618      	mov	r0, r3
   1599c:	3710      	adds	r7, #16
   1599e:	46bd      	mov	sp, r7
   159a0:	bd80      	pop	{r7, pc}
	...

000159a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
   159a4:	b580      	push	{r7, lr}
   159a6:	b088      	sub	sp, #32
   159a8:	af00      	add	r7, sp, #0
   159aa:	60f8      	str	r0, [r7, #12]
   159ac:	60b9      	str	r1, [r7, #8]
   159ae:	4613      	mov	r3, r2
   159b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
   159b2:	68bb      	ldr	r3, [r7, #8]
   159b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
   159b6:	f107 0310 	add.w	r3, r7, #16
   159ba:	4618      	mov	r0, r3
   159bc:	f7ff fb6c 	bl	15098 <get_ldnumber>
   159c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
   159c2:	69fb      	ldr	r3, [r7, #28]
   159c4:	2b00      	cmp	r3, #0
   159c6:	da01      	bge.n	159cc <f_mount+0x28>
   159c8:	230b      	movs	r3, #11
   159ca:	e025      	b.n	15a18 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
   159cc:	4a14      	ldr	r2, [pc, #80]	; (15a20 <f_mount+0x7c>)
   159ce:	69fb      	ldr	r3, [r7, #28]
   159d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   159d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
   159d6:	69bb      	ldr	r3, [r7, #24]
   159d8:	2b00      	cmp	r3, #0
   159da:	d002      	beq.n	159e2 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
   159dc:	69bb      	ldr	r3, [r7, #24]
   159de:	2200      	movs	r2, #0
   159e0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   159e2:	68fb      	ldr	r3, [r7, #12]
   159e4:	2b00      	cmp	r3, #0
   159e6:	d002      	beq.n	159ee <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
   159e8:	68fb      	ldr	r3, [r7, #12]
   159ea:	2200      	movs	r2, #0
   159ec:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
   159ee:	68fa      	ldr	r2, [r7, #12]
   159f0:	490b      	ldr	r1, [pc, #44]	; (15a20 <f_mount+0x7c>)
   159f2:	69fb      	ldr	r3, [r7, #28]
   159f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
   159f8:	79fb      	ldrb	r3, [r7, #7]
   159fa:	2b00      	cmp	r3, #0
   159fc:	d101      	bne.n	15a02 <f_mount+0x5e>
   159fe:	2300      	movs	r3, #0
   15a00:	e00a      	b.n	15a18 <f_mount+0x74>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
   15a02:	f107 010c 	add.w	r1, r7, #12
   15a06:	f107 0308 	add.w	r3, r7, #8
   15a0a:	2200      	movs	r2, #0
   15a0c:	4618      	mov	r0, r3
   15a0e:	f7ff fc4f 	bl	152b0 <mount_volume>
   15a12:	4603      	mov	r3, r0
   15a14:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
   15a16:	7dfb      	ldrb	r3, [r7, #23]
}
   15a18:	4618      	mov	r0, r3
   15a1a:	3720      	adds	r7, #32
   15a1c:	46bd      	mov	sp, r7
   15a1e:	bd80      	pop	{r7, pc}
   15a20:	10000574 	.word	0x10000574

00015a24 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   15a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a28:	b0a3      	sub	sp, #140	; 0x8c
   15a2a:	af00      	add	r7, sp, #0
   15a2c:	60f8      	str	r0, [r7, #12]
   15a2e:	60b9      	str	r1, [r7, #8]
   15a30:	4613      	mov	r3, r2
   15a32:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
   15a34:	68fb      	ldr	r3, [r7, #12]
   15a36:	2b00      	cmp	r3, #0
   15a38:	d101      	bne.n	15a3e <f_open+0x1a>
   15a3a:	2309      	movs	r3, #9
   15a3c:	e218      	b.n	15e70 <f_open+0x44c>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
   15a3e:	79fb      	ldrb	r3, [r7, #7]
   15a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a44:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
   15a46:	79fa      	ldrb	r2, [r7, #7]
   15a48:	f107 0114 	add.w	r1, r7, #20
   15a4c:	f107 0308 	add.w	r3, r7, #8
   15a50:	4618      	mov	r0, r3
   15a52:	f7ff fc2d 	bl	152b0 <mount_volume>
   15a56:	4603      	mov	r3, r0
   15a58:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	if (res == FR_OK) {
   15a5c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15a60:	2b00      	cmp	r3, #0
   15a62:	f040 81fc 	bne.w	15e5e <f_open+0x43a>
		dj.obj.fs = fs;
   15a66:	697b      	ldr	r3, [r7, #20]
   15a68:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
   15a6a:	68ba      	ldr	r2, [r7, #8]
   15a6c:	f107 0318 	add.w	r3, r7, #24
   15a70:	4611      	mov	r1, r2
   15a72:	4618      	mov	r0, r3
   15a74:	f7ff fa82 	bl	14f7c <follow_path>
   15a78:	4603      	mov	r3, r0
   15a7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
   15a7e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15a82:	2b00      	cmp	r3, #0
   15a84:	d107      	bne.n	15a96 <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
   15a86:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   15a8a:	b25b      	sxtb	r3, r3
   15a8c:	2b00      	cmp	r3, #0
   15a8e:	da02      	bge.n	15a96 <f_open+0x72>
				res = FR_INVALID_NAME;
   15a90:	2306      	movs	r3, #6
   15a92:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   15a96:	79fb      	ldrb	r3, [r7, #7]
   15a98:	f003 031c 	and.w	r3, r3, #28
   15a9c:	2b00      	cmp	r3, #0
   15a9e:	f000 80c8 	beq.w	15c32 <f_open+0x20e>
			if (res != FR_OK) {					/* No file, create new */
   15aa2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15aa6:	2b00      	cmp	r3, #0
   15aa8:	d010      	beq.n	15acc <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
   15aaa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15aae:	2b04      	cmp	r3, #4
   15ab0:	d107      	bne.n	15ac2 <f_open+0x9e>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
   15ab2:	f107 0318 	add.w	r3, r7, #24
   15ab6:	4618      	mov	r0, r3
   15ab8:	f7fe fee4 	bl	14884 <dir_register>
   15abc:	4603      	mov	r3, r0
   15abe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
   15ac2:	79fb      	ldrb	r3, [r7, #7]
   15ac4:	f043 0308 	orr.w	r3, r3, #8
   15ac8:	71fb      	strb	r3, [r7, #7]
   15aca:	e010      	b.n	15aee <f_open+0xca>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   15acc:	7fbb      	ldrb	r3, [r7, #30]
   15ace:	f003 0311 	and.w	r3, r3, #17
   15ad2:	2b00      	cmp	r3, #0
   15ad4:	d003      	beq.n	15ade <f_open+0xba>
					res = FR_DENIED;
   15ad6:	2307      	movs	r3, #7
   15ad8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
   15adc:	e007      	b.n	15aee <f_open+0xca>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
   15ade:	79fb      	ldrb	r3, [r7, #7]
   15ae0:	f003 0304 	and.w	r3, r3, #4
   15ae4:	2b00      	cmp	r3, #0
   15ae6:	d002      	beq.n	15aee <f_open+0xca>
   15ae8:	2308      	movs	r3, #8
   15aea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
   15aee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15af2:	2b00      	cmp	r3, #0
   15af4:	f040 80b7 	bne.w	15c66 <f_open+0x242>
   15af8:	79fb      	ldrb	r3, [r7, #7]
   15afa:	f003 0308 	and.w	r3, r3, #8
   15afe:	2b00      	cmp	r3, #0
   15b00:	f000 80b1 	beq.w	15c66 <f_open+0x242>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
   15b04:	697b      	ldr	r3, [r7, #20]
   15b06:	781b      	ldrb	r3, [r3, #0]
   15b08:	2b04      	cmp	r3, #4
   15b0a:	d14d      	bne.n	15ba8 <f_open+0x184>
					/* Get current allocation info */
					fp->obj.fs = fs;
   15b0c:	697a      	ldr	r2, [r7, #20]
   15b0e:	68fb      	ldr	r3, [r7, #12]
   15b10:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
   15b12:	697b      	ldr	r3, [r7, #20]
   15b14:	68fa      	ldr	r2, [r7, #12]
   15b16:	4611      	mov	r1, r2
   15b18:	4618      	mov	r0, r3
   15b1a:	f7fe fb99 	bl	14250 <init_alloc_info>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
   15b1e:	697b      	ldr	r3, [r7, #20]
   15b20:	691b      	ldr	r3, [r3, #16]
   15b22:	3302      	adds	r3, #2
   15b24:	221e      	movs	r2, #30
   15b26:	2100      	movs	r1, #0
   15b28:	4618      	mov	r0, r3
   15b2a:	f7fc fe9e 	bl	1286a <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
   15b2e:	697b      	ldr	r3, [r7, #20]
   15b30:	691b      	ldr	r3, [r3, #16]
   15b32:	3326      	adds	r3, #38	; 0x26
   15b34:	221a      	movs	r2, #26
   15b36:	2100      	movs	r1, #0
   15b38:	4618      	mov	r0, r3
   15b3a:	f7fc fe96 	bl	1286a <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
   15b3e:	697b      	ldr	r3, [r7, #20]
   15b40:	691b      	ldr	r3, [r3, #16]
   15b42:	3304      	adds	r3, #4
   15b44:	2220      	movs	r2, #32
   15b46:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
   15b48:	697b      	ldr	r3, [r7, #20]
   15b4a:	691b      	ldr	r3, [r3, #16]
   15b4c:	f103 0408 	add.w	r4, r3, #8
   15b50:	f7fc fc9a 	bl	12488 <get_fattime>
   15b54:	4603      	mov	r3, r0
   15b56:	4619      	mov	r1, r3
   15b58:	4620      	mov	r0, r4
   15b5a:	f7fc fdb2 	bl	126c2 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
   15b5e:	697b      	ldr	r3, [r7, #20]
   15b60:	691b      	ldr	r3, [r3, #16]
   15b62:	3321      	adds	r3, #33	; 0x21
   15b64:	2201      	movs	r2, #1
   15b66:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
   15b68:	f107 0318 	add.w	r3, r7, #24
   15b6c:	4618      	mov	r0, r3
   15b6e:	f7fe fbd6 	bl	1431e <store_xdir>
   15b72:	4603      	mov	r3, r0
   15b74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
   15b78:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d172      	bne.n	15c66 <f_open+0x242>
   15b80:	68fb      	ldr	r3, [r7, #12]
   15b82:	689b      	ldr	r3, [r3, #8]
   15b84:	2b00      	cmp	r3, #0
   15b86:	d06e      	beq.n	15c66 <f_open+0x242>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
   15b88:	68f8      	ldr	r0, [r7, #12]
   15b8a:	68fb      	ldr	r3, [r7, #12]
   15b8c:	689b      	ldr	r3, [r3, #8]
   15b8e:	2200      	movs	r2, #0
   15b90:	4619      	mov	r1, r3
   15b92:	f7fd fbad 	bl	132f0 <remove_chain>
   15b96:	4603      	mov	r3, r0
   15b98:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
   15b9c:	68fb      	ldr	r3, [r7, #12]
   15b9e:	689a      	ldr	r2, [r3, #8]
   15ba0:	697b      	ldr	r3, [r7, #20]
   15ba2:	3a01      	subs	r2, #1
   15ba4:	615a      	str	r2, [r3, #20]
   15ba6:	e05e      	b.n	15c66 <f_open+0x242>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
   15ba8:	697b      	ldr	r3, [r7, #20]
   15baa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15bac:	4611      	mov	r1, r2
   15bae:	4618      	mov	r0, r3
   15bb0:	f7fd ffcc 	bl	13b4c <ld_clust>
   15bb4:	6778      	str	r0, [r7, #116]	; 0x74
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
   15bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15bb8:	f103 040e 	add.w	r4, r3, #14
   15bbc:	f7fc fc64 	bl	12488 <get_fattime>
   15bc0:	4603      	mov	r3, r0
   15bc2:	4619      	mov	r1, r3
   15bc4:	4620      	mov	r0, r4
   15bc6:	f7fc fd7c 	bl	126c2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
   15bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15bcc:	330b      	adds	r3, #11
   15bce:	2220      	movs	r2, #32
   15bd0:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
   15bd2:	697b      	ldr	r3, [r7, #20]
   15bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
   15bd6:	2200      	movs	r2, #0
   15bd8:	4618      	mov	r0, r3
   15bda:	f7fd ffd6 	bl	13b8a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
   15bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15be0:	331c      	adds	r3, #28
   15be2:	2100      	movs	r1, #0
   15be4:	4618      	mov	r0, r3
   15be6:	f7fc fd6c 	bl	126c2 <st_dword>
					fs->wflag = 1;
   15bea:	697b      	ldr	r3, [r7, #20]
   15bec:	2201      	movs	r2, #1
   15bee:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
   15bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   15bf2:	2b00      	cmp	r3, #0
   15bf4:	d037      	beq.n	15c66 <f_open+0x242>
						sc = fs->winsect;
   15bf6:	697b      	ldr	r3, [r7, #20]
   15bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15bfa:	673b      	str	r3, [r7, #112]	; 0x70
						res = remove_chain(&dj.obj, cl, 0);
   15bfc:	f107 0318 	add.w	r3, r7, #24
   15c00:	2200      	movs	r2, #0
   15c02:	6f79      	ldr	r1, [r7, #116]	; 0x74
   15c04:	4618      	mov	r0, r3
   15c06:	f7fd fb73 	bl	132f0 <remove_chain>
   15c0a:	4603      	mov	r3, r0
   15c0c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						if (res == FR_OK) {
   15c10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15c14:	2b00      	cmp	r3, #0
   15c16:	d126      	bne.n	15c66 <f_open+0x242>
							res = move_window(fs, sc);
   15c18:	697b      	ldr	r3, [r7, #20]
   15c1a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   15c1c:	4618      	mov	r0, r3
   15c1e:	f7fc ff4b 	bl	12ab8 <move_window>
   15c22:	4603      	mov	r3, r0
   15c24:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
   15c28:	697b      	ldr	r3, [r7, #20]
   15c2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   15c2c:	3a01      	subs	r2, #1
   15c2e:	615a      	str	r2, [r3, #20]
   15c30:	e019      	b.n	15c66 <f_open+0x242>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
   15c32:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15c36:	2b00      	cmp	r3, #0
   15c38:	d115      	bne.n	15c66 <f_open+0x242>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
   15c3a:	7fbb      	ldrb	r3, [r7, #30]
   15c3c:	f003 0310 	and.w	r3, r3, #16
   15c40:	2b00      	cmp	r3, #0
   15c42:	d003      	beq.n	15c4c <f_open+0x228>
					res = FR_NO_FILE;
   15c44:	2304      	movs	r3, #4
   15c46:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
   15c4a:	e00c      	b.n	15c66 <f_open+0x242>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
   15c4c:	79fb      	ldrb	r3, [r7, #7]
   15c4e:	f003 0302 	and.w	r3, r3, #2
   15c52:	2b00      	cmp	r3, #0
   15c54:	d007      	beq.n	15c66 <f_open+0x242>
   15c56:	7fbb      	ldrb	r3, [r7, #30]
   15c58:	f003 0301 	and.w	r3, r3, #1
   15c5c:	2b00      	cmp	r3, #0
   15c5e:	d002      	beq.n	15c66 <f_open+0x242>
						res = FR_DENIED;
   15c60:	2307      	movs	r3, #7
   15c62:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					}
				}
			}
		}
		if (res == FR_OK) {
   15c66:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15c6a:	2b00      	cmp	r3, #0
   15c6c:	d10f      	bne.n	15c8e <f_open+0x26a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
   15c6e:	79fb      	ldrb	r3, [r7, #7]
   15c70:	f003 0308 	and.w	r3, r3, #8
   15c74:	2b00      	cmp	r3, #0
   15c76:	d003      	beq.n	15c80 <f_open+0x25c>
   15c78:	79fb      	ldrb	r3, [r7, #7]
   15c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15c7e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
   15c80:	697b      	ldr	r3, [r7, #20]
   15c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15c84:	68fb      	ldr	r3, [r7, #12]
   15c86:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
   15c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15c8a:	68fb      	ldr	r3, [r7, #12]
   15c8c:	64da      	str	r2, [r3, #76]	; 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
   15c8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15c92:	2b00      	cmp	r3, #0
   15c94:	f040 80e3 	bne.w	15e5e <f_open+0x43a>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
   15c98:	697b      	ldr	r3, [r7, #20]
   15c9a:	781b      	ldrb	r3, [r3, #0]
   15c9c:	2b04      	cmp	r3, #4
   15c9e:	d114      	bne.n	15cca <f_open+0x2a6>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
   15ca0:	6a3a      	ldr	r2, [r7, #32]
   15ca2:	68fb      	ldr	r3, [r7, #12]
   15ca4:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
   15ca6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
   15caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   15cae:	7ffa      	ldrb	r2, [r7, #31]
   15cb0:	431a      	orrs	r2, r3
   15cb2:	68fb      	ldr	r3, [r7, #12]
   15cb4:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
   15cb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   15cb8:	68fb      	ldr	r3, [r7, #12]
   15cba:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
   15cbc:	697b      	ldr	r3, [r7, #20]
   15cbe:	68fa      	ldr	r2, [r7, #12]
   15cc0:	4611      	mov	r1, r2
   15cc2:	4618      	mov	r0, r3
   15cc4:	f7fe fac4 	bl	14250 <init_alloc_info>
   15cc8:	e013      	b.n	15cf2 <f_open+0x2ce>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
   15cca:	697b      	ldr	r3, [r7, #20]
   15ccc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   15cce:	4611      	mov	r1, r2
   15cd0:	4618      	mov	r0, r3
   15cd2:	f7fd ff3b 	bl	13b4c <ld_clust>
   15cd6:	4602      	mov	r2, r0
   15cd8:	68fb      	ldr	r3, [r7, #12]
   15cda:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
   15cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   15cde:	331c      	adds	r3, #28
   15ce0:	4618      	mov	r0, r3
   15ce2:	f7fc fbf1 	bl	124c8 <ld_dword>
   15ce6:	4603      	mov	r3, r0
   15ce8:	f04f 0400 	mov.w	r4, #0
   15cec:	68fa      	ldr	r2, [r7, #12]
   15cee:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
   15cf2:	68fb      	ldr	r3, [r7, #12]
   15cf4:	2200      	movs	r2, #0
   15cf6:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
   15cf8:	697a      	ldr	r2, [r7, #20]
   15cfa:	68fb      	ldr	r3, [r7, #12]
   15cfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
   15cfe:	697b      	ldr	r3, [r7, #20]
   15d00:	88da      	ldrh	r2, [r3, #6]
   15d02:	68fb      	ldr	r3, [r7, #12]
   15d04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
   15d06:	68fb      	ldr	r3, [r7, #12]
   15d08:	79fa      	ldrb	r2, [r7, #7]
   15d0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
   15d0e:	68fb      	ldr	r3, [r7, #12]
   15d10:	2200      	movs	r2, #0
   15d12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
   15d16:	68fb      	ldr	r3, [r7, #12]
   15d18:	2200      	movs	r2, #0
   15d1a:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
   15d1c:	68fa      	ldr	r2, [r7, #12]
   15d1e:	f04f 0300 	mov.w	r3, #0
   15d22:	f04f 0400 	mov.w	r4, #0
   15d26:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
   15d2a:	68fb      	ldr	r3, [r7, #12]
   15d2c:	3354      	adds	r3, #84	; 0x54
   15d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15d32:	2100      	movs	r1, #0
   15d34:	4618      	mov	r0, r3
   15d36:	f7fc fd98 	bl	1286a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
   15d3a:	79fb      	ldrb	r3, [r7, #7]
   15d3c:	f003 0320 	and.w	r3, r3, #32
   15d40:	2b00      	cmp	r3, #0
   15d42:	f000 808c 	beq.w	15e5e <f_open+0x43a>
   15d46:	68fb      	ldr	r3, [r7, #12]
   15d48:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   15d4c:	4323      	orrs	r3, r4
   15d4e:	f000 8086 	beq.w	15e5e <f_open+0x43a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
   15d52:	68fb      	ldr	r3, [r7, #12]
   15d54:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   15d58:	68fa      	ldr	r2, [r7, #12]
   15d5a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
   15d5e:	697b      	ldr	r3, [r7, #20]
   15d60:	895b      	ldrh	r3, [r3, #10]
   15d62:	025b      	lsls	r3, r3, #9
   15d64:	66fb      	str	r3, [r7, #108]	; 0x6c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
   15d66:	68fb      	ldr	r3, [r7, #12]
   15d68:	689b      	ldr	r3, [r3, #8]
   15d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   15d6e:	68fb      	ldr	r3, [r7, #12]
   15d70:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   15d74:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
   15d78:	e021      	b.n	15dbe <f_open+0x39a>
					clst = get_fat(&fp->obj, clst);
   15d7a:	68fb      	ldr	r3, [r7, #12]
   15d7c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
   15d80:	4618      	mov	r0, r3
   15d82:	f7fc ff55 	bl	12c30 <get_fat>
   15d86:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					if (clst <= 1) res = FR_INT_ERR;
   15d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   15d8e:	2b01      	cmp	r3, #1
   15d90:	d802      	bhi.n	15d98 <f_open+0x374>
   15d92:	2302      	movs	r3, #2
   15d94:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
   15d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   15d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
   15da0:	d102      	bne.n	15da8 <f_open+0x384>
   15da2:	2301      	movs	r3, #1
   15da4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
   15da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   15daa:	f04f 0400 	mov.w	r4, #0
   15dae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
   15db2:	ebb1 0803 	subs.w	r8, r1, r3
   15db6:	eb62 0904 	sbc.w	r9, r2, r4
   15dba:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
   15dbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	d109      	bne.n	15dda <f_open+0x3b6>
   15dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   15dc8:	4619      	mov	r1, r3
   15dca:	f04f 0200 	mov.w	r2, #0
   15dce:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
   15dd2:	42a2      	cmp	r2, r4
   15dd4:	bf08      	it	eq
   15dd6:	4299      	cmpeq	r1, r3
   15dd8:	d3cf      	bcc.n	15d7a <f_open+0x356>
				}
				fp->clust = clst;
   15dda:	68fb      	ldr	r3, [r7, #12]
   15ddc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   15de0:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
   15de2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15de6:	2b00      	cmp	r3, #0
   15de8:	d139      	bne.n	15e5e <f_open+0x43a>
   15dea:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
   15dee:	f240 11ff 	movw	r1, #511	; 0x1ff
   15df2:	f04f 0200 	mov.w	r2, #0
   15df6:	ea03 0501 	and.w	r5, r3, r1
   15dfa:	ea04 0602 	and.w	r6, r4, r2
   15dfe:	ea55 0306 	orrs.w	r3, r5, r6
   15e02:	d02c      	beq.n	15e5e <f_open+0x43a>
					sc = clst2sect(fs, clst);
   15e04:	697b      	ldr	r3, [r7, #20]
   15e06:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
   15e0a:	4618      	mov	r0, r3
   15e0c:	f7fc fef0 	bl	12bf0 <clst2sect>
   15e10:	6738      	str	r0, [r7, #112]	; 0x70
					if (sc == 0) {
   15e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   15e14:	2b00      	cmp	r3, #0
   15e16:	d103      	bne.n	15e20 <f_open+0x3fc>
						res = FR_INT_ERR;
   15e18:	2302      	movs	r3, #2
   15e1a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
   15e1e:	e01e      	b.n	15e5e <f_open+0x43a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
   15e20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
   15e24:	f04f 0300 	mov.w	r3, #0
   15e28:	f04f 0400 	mov.w	r4, #0
   15e2c:	0a4b      	lsrs	r3, r1, #9
   15e2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   15e32:	0a54      	lsrs	r4, r2, #9
   15e34:	461a      	mov	r2, r3
   15e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   15e38:	441a      	add	r2, r3
   15e3a:	68fb      	ldr	r3, [r7, #12]
   15e3c:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
   15e3e:	697b      	ldr	r3, [r7, #20]
   15e40:	7858      	ldrb	r0, [r3, #1]
   15e42:	68fb      	ldr	r3, [r7, #12]
   15e44:	f103 0154 	add.w	r1, r3, #84	; 0x54
   15e48:	68fb      	ldr	r3, [r7, #12]
   15e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   15e4c:	2301      	movs	r3, #1
   15e4e:	f7fc f9e7 	bl	12220 <disk_read>
   15e52:	4603      	mov	r3, r0
   15e54:	2b00      	cmp	r3, #0
   15e56:	d002      	beq.n	15e5e <f_open+0x43a>
   15e58:	2301      	movs	r3, #1
   15e5a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
   15e5e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   15e62:	2b00      	cmp	r3, #0
   15e64:	d002      	beq.n	15e6c <f_open+0x448>
   15e66:	68fb      	ldr	r3, [r7, #12]
   15e68:	2200      	movs	r2, #0
   15e6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
   15e6c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
   15e70:	4618      	mov	r0, r3
   15e72:	378c      	adds	r7, #140	; 0x8c
   15e74:	46bd      	mov	sp, r7
   15e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00015e7a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
   15e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e7e:	b091      	sub	sp, #68	; 0x44
   15e80:	af00      	add	r7, sp, #0
   15e82:	60f8      	str	r0, [r7, #12]
   15e84:	60b9      	str	r1, [r7, #8]
   15e86:	607a      	str	r2, [r7, #4]
   15e88:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	uint32_t *rbuff = (uint32_t*)buff;
   15e8a:	68bb      	ldr	r3, [r7, #8]
   15e8c:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
   15e8e:	683b      	ldr	r3, [r7, #0]
   15e90:	2200      	movs	r2, #0
   15e92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
   15e94:	68fb      	ldr	r3, [r7, #12]
   15e96:	f107 0214 	add.w	r2, r7, #20
   15e9a:	4611      	mov	r1, r2
   15e9c:	4618      	mov	r0, r3
   15e9e:	f7ff fd4b 	bl	15938 <validate>
   15ea2:	4603      	mov	r3, r0
   15ea4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   15ea8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   15eac:	2b00      	cmp	r3, #0
   15eae:	d108      	bne.n	15ec2 <f_read+0x48>
   15eb0:	68fb      	ldr	r3, [r7, #12]
   15eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   15eb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   15eba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   15ebe:	2b00      	cmp	r3, #0
   15ec0:	d002      	beq.n	15ec8 <f_read+0x4e>
   15ec2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   15ec6:	e149      	b.n	1615c <f_read+0x2e2>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
   15ec8:	68fb      	ldr	r3, [r7, #12]
   15eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   15ece:	f003 0301 	and.w	r3, r3, #1
   15ed2:	2b00      	cmp	r3, #0
   15ed4:	d101      	bne.n	15eda <f_read+0x60>
   15ed6:	2307      	movs	r3, #7
   15ed8:	e140      	b.n	1615c <f_read+0x2e2>
	remain = fp->obj.objsize - fp->fptr;
   15eda:	68fb      	ldr	r3, [r7, #12]
   15edc:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   15ee0:	68fb      	ldr	r3, [r7, #12]
   15ee2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   15ee6:	ebb1 0a03 	subs.w	sl, r1, r3
   15eea:	eb62 0b04 	sbc.w	fp, r2, r4
   15eee:	e9c7 ab08 	strd	sl, fp, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   15ef2:	687b      	ldr	r3, [r7, #4]
   15ef4:	f04f 0400 	mov.w	r4, #0
   15ef8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
   15efc:	42a2      	cmp	r2, r4
   15efe:	bf08      	it	eq
   15f00:	4299      	cmpeq	r1, r3
   15f02:	f080 8126 	bcs.w	16152 <f_read+0x2d8>
   15f06:	6a3b      	ldr	r3, [r7, #32]
   15f08:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
   15f0a:	e122      	b.n	16152 <f_read+0x2d8>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
   15f0c:	68fb      	ldr	r3, [r7, #12]
   15f0e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   15f12:	f240 11ff 	movw	r1, #511	; 0x1ff
   15f16:	f04f 0200 	mov.w	r2, #0
   15f1a:	ea03 0501 	and.w	r5, r3, r1
   15f1e:	ea04 0602 	and.w	r6, r4, r2
   15f22:	ea55 0306 	orrs.w	r3, r5, r6
   15f26:	f040 80dc 	bne.w	160e2 <f_read+0x268>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
   15f2a:	68fb      	ldr	r3, [r7, #12]
   15f2c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
   15f30:	f04f 0300 	mov.w	r3, #0
   15f34:	f04f 0400 	mov.w	r4, #0
   15f38:	0a4b      	lsrs	r3, r1, #9
   15f3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   15f3e:	0a54      	lsrs	r4, r2, #9
   15f40:	461a      	mov	r2, r3
   15f42:	697b      	ldr	r3, [r7, #20]
   15f44:	895b      	ldrh	r3, [r3, #10]
   15f46:	3b01      	subs	r3, #1
   15f48:	4013      	ands	r3, r2
   15f4a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
   15f4c:	69fb      	ldr	r3, [r7, #28]
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d134      	bne.n	15fbc <f_read+0x142>
				if (fp->fptr == 0) {			/* On the top of the file? */
   15f52:	68fb      	ldr	r3, [r7, #12]
   15f54:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   15f58:	4323      	orrs	r3, r4
   15f5a:	d103      	bne.n	15f64 <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
   15f5c:	68fb      	ldr	r3, [r7, #12]
   15f5e:	689b      	ldr	r3, [r3, #8]
   15f60:	63bb      	str	r3, [r7, #56]	; 0x38
   15f62:	e015      	b.n	15f90 <f_read+0x116>
				} else {						/* Middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
   15f64:	68fb      	ldr	r3, [r7, #12]
   15f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   15f68:	2b00      	cmp	r3, #0
   15f6a:	d009      	beq.n	15f80 <f_read+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   15f6c:	68fb      	ldr	r3, [r7, #12]
   15f6e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   15f72:	461a      	mov	r2, r3
   15f74:	4623      	mov	r3, r4
   15f76:	68f8      	ldr	r0, [r7, #12]
   15f78:	f7fd fbd7 	bl	1372a <clmt_clust>
   15f7c:	63b8      	str	r0, [r7, #56]	; 0x38
   15f7e:	e007      	b.n	15f90 <f_read+0x116>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
   15f80:	68fa      	ldr	r2, [r7, #12]
   15f82:	68fb      	ldr	r3, [r7, #12]
   15f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15f86:	4619      	mov	r1, r3
   15f88:	4610      	mov	r0, r2
   15f8a:	f7fc fe51 	bl	12c30 <get_fat>
   15f8e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
   15f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15f92:	2b01      	cmp	r3, #1
   15f94:	d805      	bhi.n	15fa2 <f_read+0x128>
   15f96:	68fb      	ldr	r3, [r7, #12]
   15f98:	2202      	movs	r2, #2
   15f9a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   15f9e:	2302      	movs	r3, #2
   15fa0:	e0dc      	b.n	1615c <f_read+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   15fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
   15fa8:	d105      	bne.n	15fb6 <f_read+0x13c>
   15faa:	68fb      	ldr	r3, [r7, #12]
   15fac:	2201      	movs	r2, #1
   15fae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   15fb2:	2301      	movs	r3, #1
   15fb4:	e0d2      	b.n	1615c <f_read+0x2e2>
				fp->clust = clst;				/* Update current cluster */
   15fb6:	68fb      	ldr	r3, [r7, #12]
   15fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   15fba:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   15fbc:	697a      	ldr	r2, [r7, #20]
   15fbe:	68fb      	ldr	r3, [r7, #12]
   15fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   15fc2:	4619      	mov	r1, r3
   15fc4:	4610      	mov	r0, r2
   15fc6:	f7fc fe13 	bl	12bf0 <clst2sect>
   15fca:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   15fcc:	69bb      	ldr	r3, [r7, #24]
   15fce:	2b00      	cmp	r3, #0
   15fd0:	d105      	bne.n	15fde <f_read+0x164>
   15fd2:	68fb      	ldr	r3, [r7, #12]
   15fd4:	2202      	movs	r2, #2
   15fd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   15fda:	2302      	movs	r3, #2
   15fdc:	e0be      	b.n	1615c <f_read+0x2e2>
			sect += csect;
   15fde:	69ba      	ldr	r2, [r7, #24]
   15fe0:	69fb      	ldr	r3, [r7, #28]
   15fe2:	4413      	add	r3, r2
   15fe4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
   15fe6:	687b      	ldr	r3, [r7, #4]
   15fe8:	0a5b      	lsrs	r3, r3, #9
   15fea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
   15fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15fee:	2b00      	cmp	r3, #0
   15ff0:	d03b      	beq.n	1606a <f_read+0x1f0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   15ff2:	69fa      	ldr	r2, [r7, #28]
   15ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15ff6:	4413      	add	r3, r2
   15ff8:	697a      	ldr	r2, [r7, #20]
   15ffa:	8952      	ldrh	r2, [r2, #10]
   15ffc:	4293      	cmp	r3, r2
   15ffe:	d905      	bls.n	1600c <f_read+0x192>
					cc = fs->csize - csect;
   16000:	697b      	ldr	r3, [r7, #20]
   16002:	895b      	ldrh	r3, [r3, #10]
   16004:	461a      	mov	r2, r3
   16006:	69fb      	ldr	r3, [r7, #28]
   16008:	1ad3      	subs	r3, r2, r3
   1600a:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   1600c:	697b      	ldr	r3, [r7, #20]
   1600e:	7858      	ldrb	r0, [r3, #1]
   16010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16012:	69ba      	ldr	r2, [r7, #24]
   16014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16016:	f7fc f903 	bl	12220 <disk_read>
   1601a:	4603      	mov	r3, r0
   1601c:	2b00      	cmp	r3, #0
   1601e:	d005      	beq.n	1602c <f_read+0x1b2>
   16020:	68fb      	ldr	r3, [r7, #12]
   16022:	2201      	movs	r2, #1
   16024:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   16028:	2301      	movs	r3, #1
   1602a:	e097      	b.n	1615c <f_read+0x2e2>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
   1602c:	68fb      	ldr	r3, [r7, #12]
   1602e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   16032:	b25b      	sxtb	r3, r3
   16034:	2b00      	cmp	r3, #0
   16036:	da14      	bge.n	16062 <f_read+0x1e8>
   16038:	68fb      	ldr	r3, [r7, #12]
   1603a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1603c:	69bb      	ldr	r3, [r7, #24]
   1603e:	1ad3      	subs	r3, r2, r3
   16040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16042:	429a      	cmp	r2, r3
   16044:	d90d      	bls.n	16062 <f_read+0x1e8>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
   16046:	68fb      	ldr	r3, [r7, #12]
   16048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1604a:	69bb      	ldr	r3, [r7, #24]
   1604c:	1ad3      	subs	r3, r2, r3
   1604e:	02db      	lsls	r3, r3, #11
   16050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16052:	18d0      	adds	r0, r2, r3
   16054:	68fb      	ldr	r3, [r7, #12]
   16056:	3354      	adds	r3, #84	; 0x54
   16058:	f44f 7200 	mov.w	r2, #512	; 0x200
   1605c:	4619      	mov	r1, r3
   1605e:	f7fc fbe3 	bl	12828 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
   16062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16064:	025b      	lsls	r3, r3, #9
   16066:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
   16068:	e057      	b.n	1611a <f_read+0x2a0>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
   1606a:	68fb      	ldr	r3, [r7, #12]
   1606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1606e:	69ba      	ldr	r2, [r7, #24]
   16070:	429a      	cmp	r2, r3
   16072:	d033      	beq.n	160dc <f_read+0x262>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
   16074:	68fb      	ldr	r3, [r7, #12]
   16076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1607a:	b25b      	sxtb	r3, r3
   1607c:	2b00      	cmp	r3, #0
   1607e:	da1b      	bge.n	160b8 <f_read+0x23e>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   16080:	697b      	ldr	r3, [r7, #20]
   16082:	7858      	ldrb	r0, [r3, #1]
   16084:	68fb      	ldr	r3, [r7, #12]
   16086:	f103 0154 	add.w	r1, r3, #84	; 0x54
   1608a:	68fb      	ldr	r3, [r7, #12]
   1608c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1608e:	2301      	movs	r3, #1
   16090:	f7fc f8fc 	bl	1228c <disk_write>
   16094:	4603      	mov	r3, r0
   16096:	2b00      	cmp	r3, #0
   16098:	d005      	beq.n	160a6 <f_read+0x22c>
   1609a:	68fb      	ldr	r3, [r7, #12]
   1609c:	2201      	movs	r2, #1
   1609e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   160a2:	2301      	movs	r3, #1
   160a4:	e05a      	b.n	1615c <f_read+0x2e2>
					fp->flag &= (BYTE)~FA_DIRTY;
   160a6:	68fb      	ldr	r3, [r7, #12]
   160a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   160ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   160b0:	b2da      	uxtb	r2, r3
   160b2:	68fb      	ldr	r3, [r7, #12]
   160b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
   160b8:	697b      	ldr	r3, [r7, #20]
   160ba:	7858      	ldrb	r0, [r3, #1]
   160bc:	68fb      	ldr	r3, [r7, #12]
   160be:	f103 0154 	add.w	r1, r3, #84	; 0x54
   160c2:	2301      	movs	r3, #1
   160c4:	69ba      	ldr	r2, [r7, #24]
   160c6:	f7fc f8ab 	bl	12220 <disk_read>
   160ca:	4603      	mov	r3, r0
   160cc:	2b00      	cmp	r3, #0
   160ce:	d005      	beq.n	160dc <f_read+0x262>
   160d0:	68fb      	ldr	r3, [r7, #12]
   160d2:	2201      	movs	r2, #1
   160d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   160d8:	2301      	movs	r3, #1
   160da:	e03f      	b.n	1615c <f_read+0x2e2>
			}
#endif
			fp->sect = sect;
   160dc:	68fb      	ldr	r3, [r7, #12]
   160de:	69ba      	ldr	r2, [r7, #24]
   160e0:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   160e2:	68fb      	ldr	r3, [r7, #12]
   160e4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   160e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   160ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
   160f0:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
   160f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   160f4:	687b      	ldr	r3, [r7, #4]
   160f6:	429a      	cmp	r2, r3
   160f8:	d901      	bls.n	160fe <f_read+0x284>
   160fa:	687b      	ldr	r3, [r7, #4]
   160fc:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
   160fe:	68fb      	ldr	r3, [r7, #12]
   16100:	f103 0254 	add.w	r2, r3, #84	; 0x54
   16104:	68fb      	ldr	r3, [r7, #12]
   16106:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   1610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1610e:	4413      	add	r3, r2
   16110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   16112:	4619      	mov	r1, r3
   16114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   16116:	f7fc fb87 	bl	12828 <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
   1611a:	687a      	ldr	r2, [r7, #4]
   1611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1611e:	1ad3      	subs	r3, r2, r3
   16120:	607b      	str	r3, [r7, #4]
   16122:	683b      	ldr	r3, [r7, #0]
   16124:	681a      	ldr	r2, [r3, #0]
   16126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16128:	441a      	add	r2, r3
   1612a:	683b      	ldr	r3, [r7, #0]
   1612c:	601a      	str	r2, [r3, #0]
   1612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16130:	009b      	lsls	r3, r3, #2
   16132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16134:	4413      	add	r3, r2
   16136:	62fb      	str	r3, [r7, #44]	; 0x2c
   16138:	68fb      	ldr	r3, [r7, #12]
   1613a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
   1613e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16140:	f04f 0400 	mov.w	r4, #0
   16144:	eb11 0803 	adds.w	r8, r1, r3
   16148:	eb42 0904 	adc.w	r9, r2, r4
   1614c:	68fb      	ldr	r3, [r7, #12]
   1614e:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
	for ( ;  btr;								/* Repeat until btr bytes read */
   16152:	687b      	ldr	r3, [r7, #4]
   16154:	2b00      	cmp	r3, #0
   16156:	f47f aed9 	bne.w	15f0c <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
   1615a:	2300      	movs	r3, #0
}
   1615c:	4618      	mov	r0, r3
   1615e:	3744      	adds	r7, #68	; 0x44
   16160:	46bd      	mov	sp, r7
   16162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016166 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
   16166:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1616a:	b08d      	sub	sp, #52	; 0x34
   1616c:	af00      	add	r7, sp, #0
   1616e:	60f8      	str	r0, [r7, #12]
   16170:	60b9      	str	r1, [r7, #8]
   16172:	607a      	str	r2, [r7, #4]
   16174:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
   16176:	68bb      	ldr	r3, [r7, #8]
   16178:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
   1617a:	683b      	ldr	r3, [r7, #0]
   1617c:	2200      	movs	r2, #0
   1617e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
   16180:	68fb      	ldr	r3, [r7, #12]
   16182:	f107 0210 	add.w	r2, r7, #16
   16186:	4611      	mov	r1, r2
   16188:	4618      	mov	r0, r3
   1618a:	f7ff fbd5 	bl	15938 <validate>
   1618e:	4603      	mov	r3, r0
   16190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
   16194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   16198:	2b00      	cmp	r3, #0
   1619a:	d108      	bne.n	161ae <f_write+0x48>
   1619c:	68fb      	ldr	r3, [r7, #12]
   1619e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   161a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   161a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   161aa:	2b00      	cmp	r3, #0
   161ac:	d002      	beq.n	161b4 <f_write+0x4e>
   161ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   161b2:	e18b      	b.n	164cc <f_write+0x366>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
   161b4:	68fb      	ldr	r3, [r7, #12]
   161b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   161ba:	f003 0302 	and.w	r3, r3, #2
   161be:	2b00      	cmp	r3, #0
   161c0:	d101      	bne.n	161c6 <f_write+0x60>
   161c2:	2307      	movs	r3, #7
   161c4:	e182      	b.n	164cc <f_write+0x366>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
   161c6:	693b      	ldr	r3, [r7, #16]
   161c8:	781b      	ldrb	r3, [r3, #0]
   161ca:	2b04      	cmp	r3, #4
   161cc:	f000 816e 	beq.w	164ac <f_write+0x346>
   161d0:	68fb      	ldr	r3, [r7, #12]
   161d2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   161d6:	461a      	mov	r2, r3
   161d8:	687b      	ldr	r3, [r7, #4]
   161da:	441a      	add	r2, r3
   161dc:	68fb      	ldr	r3, [r7, #12]
   161de:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   161e2:	429a      	cmp	r2, r3
   161e4:	f080 8162 	bcs.w	164ac <f_write+0x346>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
   161e8:	68fb      	ldr	r3, [r7, #12]
   161ea:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   161ee:	43db      	mvns	r3, r3
   161f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
   161f2:	e15b      	b.n	164ac <f_write+0x346>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
   161f4:	68fb      	ldr	r3, [r7, #12]
   161f6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   161fa:	f240 11ff 	movw	r1, #511	; 0x1ff
   161fe:	f04f 0200 	mov.w	r2, #0
   16202:	ea03 0501 	and.w	r5, r3, r1
   16206:	ea04 0602 	and.w	r6, r4, r2
   1620a:	ea55 0306 	orrs.w	r3, r5, r6
   1620e:	f040 80fe 	bne.w	1640e <f_write+0x2a8>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
   16212:	68fb      	ldr	r3, [r7, #12]
   16214:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
   16218:	f04f 0300 	mov.w	r3, #0
   1621c:	f04f 0400 	mov.w	r4, #0
   16220:	0a4b      	lsrs	r3, r1, #9
   16222:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
   16226:	0a54      	lsrs	r4, r2, #9
   16228:	461a      	mov	r2, r3
   1622a:	693b      	ldr	r3, [r7, #16]
   1622c:	895b      	ldrh	r3, [r3, #10]
   1622e:	3b01      	subs	r3, #1
   16230:	4013      	ands	r3, r2
   16232:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
   16234:	69bb      	ldr	r3, [r7, #24]
   16236:	2b00      	cmp	r3, #0
   16238:	d148      	bne.n	162cc <f_write+0x166>
				if (fp->fptr == 0) {		/* On the top of the file? */
   1623a:	68fb      	ldr	r3, [r7, #12]
   1623c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   16240:	4323      	orrs	r3, r4
   16242:	d10c      	bne.n	1625e <f_write+0xf8>
					clst = fp->obj.sclust;	/* Follow from the origin */
   16244:	68fb      	ldr	r3, [r7, #12]
   16246:	689b      	ldr	r3, [r3, #8]
   16248:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
   1624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1624c:	2b00      	cmp	r3, #0
   1624e:	d11c      	bne.n	1628a <f_write+0x124>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
   16250:	68fb      	ldr	r3, [r7, #12]
   16252:	2100      	movs	r1, #0
   16254:	4618      	mov	r0, r3
   16256:	f7fd f92d 	bl	134b4 <create_chain>
   1625a:	62b8      	str	r0, [r7, #40]	; 0x28
   1625c:	e015      	b.n	1628a <f_write+0x124>
					}
				} else {					/* On the middle or end of the file */
#if FF_USE_FASTSEEK
					if (fp->cltbl) {
   1625e:	68fb      	ldr	r3, [r7, #12]
   16260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   16262:	2b00      	cmp	r3, #0
   16264:	d009      	beq.n	1627a <f_write+0x114>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
   16266:	68fb      	ldr	r3, [r7, #12]
   16268:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   1626c:	461a      	mov	r2, r3
   1626e:	4623      	mov	r3, r4
   16270:	68f8      	ldr	r0, [r7, #12]
   16272:	f7fd fa5a 	bl	1372a <clmt_clust>
   16276:	62b8      	str	r0, [r7, #40]	; 0x28
   16278:	e007      	b.n	1628a <f_write+0x124>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   1627a:	68fa      	ldr	r2, [r7, #12]
   1627c:	68fb      	ldr	r3, [r7, #12]
   1627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16280:	4619      	mov	r1, r3
   16282:	4610      	mov	r0, r2
   16284:	f7fd f916 	bl	134b4 <create_chain>
   16288:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   1628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1628c:	2b00      	cmp	r3, #0
   1628e:	f000 8112 	beq.w	164b6 <f_write+0x350>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
   16292:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16294:	2b01      	cmp	r3, #1
   16296:	d105      	bne.n	162a4 <f_write+0x13e>
   16298:	68fb      	ldr	r3, [r7, #12]
   1629a:	2202      	movs	r2, #2
   1629c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   162a0:	2302      	movs	r3, #2
   162a2:	e113      	b.n	164cc <f_write+0x366>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
   162a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   162a6:	f1b3 3fff 	cmp.w	r3, #4294967295
   162aa:	d105      	bne.n	162b8 <f_write+0x152>
   162ac:	68fb      	ldr	r3, [r7, #12]
   162ae:	2201      	movs	r2, #1
   162b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   162b4:	2301      	movs	r3, #1
   162b6:	e109      	b.n	164cc <f_write+0x366>
				fp->clust = clst;			/* Update current cluster */
   162b8:	68fb      	ldr	r3, [r7, #12]
   162ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
   162bc:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
   162be:	68fb      	ldr	r3, [r7, #12]
   162c0:	689b      	ldr	r3, [r3, #8]
   162c2:	2b00      	cmp	r3, #0
   162c4:	d102      	bne.n	162cc <f_write+0x166>
   162c6:	68fb      	ldr	r3, [r7, #12]
   162c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   162ca:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
   162cc:	68fb      	ldr	r3, [r7, #12]
   162ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   162d2:	b25b      	sxtb	r3, r3
   162d4:	2b00      	cmp	r3, #0
   162d6:	da1b      	bge.n	16310 <f_write+0x1aa>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
   162d8:	693b      	ldr	r3, [r7, #16]
   162da:	7858      	ldrb	r0, [r3, #1]
   162dc:	68fb      	ldr	r3, [r7, #12]
   162de:	f103 0154 	add.w	r1, r3, #84	; 0x54
   162e2:	68fb      	ldr	r3, [r7, #12]
   162e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   162e6:	2301      	movs	r3, #1
   162e8:	f7fb ffd0 	bl	1228c <disk_write>
   162ec:	4603      	mov	r3, r0
   162ee:	2b00      	cmp	r3, #0
   162f0:	d005      	beq.n	162fe <f_write+0x198>
   162f2:	68fb      	ldr	r3, [r7, #12]
   162f4:	2201      	movs	r2, #1
   162f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   162fa:	2301      	movs	r3, #1
   162fc:	e0e6      	b.n	164cc <f_write+0x366>
				fp->flag &= (BYTE)~FA_DIRTY;
   162fe:	68fb      	ldr	r3, [r7, #12]
   16300:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   16304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16308:	b2da      	uxtb	r2, r3
   1630a:	68fb      	ldr	r3, [r7, #12]
   1630c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
   16310:	693a      	ldr	r2, [r7, #16]
   16312:	68fb      	ldr	r3, [r7, #12]
   16314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16316:	4619      	mov	r1, r3
   16318:	4610      	mov	r0, r2
   1631a:	f7fc fc69 	bl	12bf0 <clst2sect>
   1631e:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
   16320:	697b      	ldr	r3, [r7, #20]
   16322:	2b00      	cmp	r3, #0
   16324:	d105      	bne.n	16332 <f_write+0x1cc>
   16326:	68fb      	ldr	r3, [r7, #12]
   16328:	2202      	movs	r2, #2
   1632a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   1632e:	2302      	movs	r3, #2
   16330:	e0cc      	b.n	164cc <f_write+0x366>
			sect += csect;
   16332:	697a      	ldr	r2, [r7, #20]
   16334:	69bb      	ldr	r3, [r7, #24]
   16336:	4413      	add	r3, r2
   16338:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
   1633a:	687b      	ldr	r3, [r7, #4]
   1633c:	0a5b      	lsrs	r3, r3, #9
   1633e:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
   16340:	6a3b      	ldr	r3, [r7, #32]
   16342:	2b00      	cmp	r3, #0
   16344:	d03f      	beq.n	163c6 <f_write+0x260>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
   16346:	69ba      	ldr	r2, [r7, #24]
   16348:	6a3b      	ldr	r3, [r7, #32]
   1634a:	4413      	add	r3, r2
   1634c:	693a      	ldr	r2, [r7, #16]
   1634e:	8952      	ldrh	r2, [r2, #10]
   16350:	4293      	cmp	r3, r2
   16352:	d905      	bls.n	16360 <f_write+0x1fa>
					cc = fs->csize - csect;
   16354:	693b      	ldr	r3, [r7, #16]
   16356:	895b      	ldrh	r3, [r3, #10]
   16358:	461a      	mov	r2, r3
   1635a:	69bb      	ldr	r3, [r7, #24]
   1635c:	1ad3      	subs	r3, r2, r3
   1635e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
   16360:	693b      	ldr	r3, [r7, #16]
   16362:	7858      	ldrb	r0, [r3, #1]
   16364:	6a3b      	ldr	r3, [r7, #32]
   16366:	697a      	ldr	r2, [r7, #20]
   16368:	69f9      	ldr	r1, [r7, #28]
   1636a:	f7fb ff8f 	bl	1228c <disk_write>
   1636e:	4603      	mov	r3, r0
   16370:	2b00      	cmp	r3, #0
   16372:	d005      	beq.n	16380 <f_write+0x21a>
   16374:	68fb      	ldr	r3, [r7, #12]
   16376:	2201      	movs	r2, #1
   16378:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   1637c:	2301      	movs	r3, #1
   1637e:	e0a5      	b.n	164cc <f_write+0x366>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
   16380:	68fb      	ldr	r3, [r7, #12]
   16382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   16384:	697b      	ldr	r3, [r7, #20]
   16386:	1ad3      	subs	r3, r2, r3
   16388:	6a3a      	ldr	r2, [r7, #32]
   1638a:	429a      	cmp	r2, r3
   1638c:	d917      	bls.n	163be <f_write+0x258>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
   1638e:	68fb      	ldr	r3, [r7, #12]
   16390:	f103 0054 	add.w	r0, r3, #84	; 0x54
   16394:	68fb      	ldr	r3, [r7, #12]
   16396:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   16398:	697b      	ldr	r3, [r7, #20]
   1639a:	1ad3      	subs	r3, r2, r3
   1639c:	025b      	lsls	r3, r3, #9
   1639e:	69fa      	ldr	r2, [r7, #28]
   163a0:	4413      	add	r3, r2
   163a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   163a6:	4619      	mov	r1, r3
   163a8:	f7fc fa3e 	bl	12828 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
   163ac:	68fb      	ldr	r3, [r7, #12]
   163ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   163b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   163b6:	b2da      	uxtb	r2, r3
   163b8:	68fb      	ldr	r3, [r7, #12]
   163ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
   163be:	6a3b      	ldr	r3, [r7, #32]
   163c0:	025b      	lsls	r3, r3, #9
   163c2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
   163c4:	e048      	b.n	16458 <f_write+0x2f2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   163c6:	68fb      	ldr	r3, [r7, #12]
   163c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   163ca:	697a      	ldr	r2, [r7, #20]
   163cc:	429a      	cmp	r2, r3
   163ce:	d01b      	beq.n	16408 <f_write+0x2a2>
				fp->fptr < fp->obj.objsize &&
   163d0:	68fb      	ldr	r3, [r7, #12]
   163d2:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
   163d6:	68fb      	ldr	r3, [r7, #12]
   163d8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
   163dc:	42a2      	cmp	r2, r4
   163de:	bf08      	it	eq
   163e0:	4299      	cmpeq	r1, r3
   163e2:	d211      	bcs.n	16408 <f_write+0x2a2>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
   163e4:	693b      	ldr	r3, [r7, #16]
   163e6:	7858      	ldrb	r0, [r3, #1]
   163e8:	68fb      	ldr	r3, [r7, #12]
   163ea:	f103 0154 	add.w	r1, r3, #84	; 0x54
   163ee:	2301      	movs	r3, #1
   163f0:	697a      	ldr	r2, [r7, #20]
   163f2:	f7fb ff15 	bl	12220 <disk_read>
   163f6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
   163f8:	2b00      	cmp	r3, #0
   163fa:	d005      	beq.n	16408 <f_write+0x2a2>
					ABORT(fs, FR_DISK_ERR);
   163fc:	68fb      	ldr	r3, [r7, #12]
   163fe:	2201      	movs	r2, #1
   16400:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   16404:	2301      	movs	r3, #1
   16406:	e061      	b.n	164cc <f_write+0x366>
			}
#endif
			fp->sect = sect;
   16408:	68fb      	ldr	r3, [r7, #12]
   1640a:	697a      	ldr	r2, [r7, #20]
   1640c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
   1640e:	68fb      	ldr	r3, [r7, #12]
   16410:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   16414:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16418:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
   1641c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
   1641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16420:	687b      	ldr	r3, [r7, #4]
   16422:	429a      	cmp	r2, r3
   16424:	d901      	bls.n	1642a <f_write+0x2c4>
   16426:	687b      	ldr	r3, [r7, #4]
   16428:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
   1642a:	68fb      	ldr	r3, [r7, #12]
   1642c:	f103 0254 	add.w	r2, r3, #84	; 0x54
   16430:	68fb      	ldr	r3, [r7, #12]
   16432:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
   16436:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1643a:	4413      	add	r3, r2
   1643c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1643e:	69f9      	ldr	r1, [r7, #28]
   16440:	4618      	mov	r0, r3
   16442:	f7fc f9f1 	bl	12828 <mem_cpy>
		fp->flag |= FA_DIRTY;
   16446:	68fb      	ldr	r3, [r7, #12]
   16448:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1644c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   16450:	b2da      	uxtb	r2, r3
   16452:	68fb      	ldr	r3, [r7, #12]
   16454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
   16458:	687a      	ldr	r2, [r7, #4]
   1645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1645c:	1ad3      	subs	r3, r2, r3
   1645e:	607b      	str	r3, [r7, #4]
   16460:	683b      	ldr	r3, [r7, #0]
   16462:	681a      	ldr	r2, [r3, #0]
   16464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16466:	441a      	add	r2, r3
   16468:	683b      	ldr	r3, [r7, #0]
   1646a:	601a      	str	r2, [r3, #0]
   1646c:	69fa      	ldr	r2, [r7, #28]
   1646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16470:	4413      	add	r3, r2
   16472:	61fb      	str	r3, [r7, #28]
   16474:	68fb      	ldr	r3, [r7, #12]
   16476:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
   1647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1647c:	f04f 0400 	mov.w	r4, #0
   16480:	eb11 0803 	adds.w	r8, r1, r3
   16484:	eb42 0904 	adc.w	r9, r2, r4
   16488:	68fb      	ldr	r3, [r7, #12]
   1648a:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
   1648e:	68fb      	ldr	r3, [r7, #12]
   16490:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   16494:	68fa      	ldr	r2, [r7, #12]
   16496:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
   1649a:	4294      	cmp	r4, r2
   1649c:	bf08      	it	eq
   1649e:	428b      	cmpeq	r3, r1
   164a0:	d201      	bcs.n	164a6 <f_write+0x340>
   164a2:	460b      	mov	r3, r1
   164a4:	4614      	mov	r4, r2
   164a6:	68fa      	ldr	r2, [r7, #12]
   164a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	for ( ;  btw;							/* Repeat until all data written */
   164ac:	687b      	ldr	r3, [r7, #4]
   164ae:	2b00      	cmp	r3, #0
   164b0:	f47f aea0 	bne.w	161f4 <f_write+0x8e>
   164b4:	e000      	b.n	164b8 <f_write+0x352>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   164b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
   164b8:	68fb      	ldr	r3, [r7, #12]
   164ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   164be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   164c2:	b2da      	uxtb	r2, r3
   164c4:	68fb      	ldr	r3, [r7, #12]
   164c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
   164ca:	2300      	movs	r3, #0
}
   164cc:	4618      	mov	r0, r3
   164ce:	3734      	adds	r7, #52	; 0x34
   164d0:	46bd      	mov	sp, r7
   164d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000164d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
   164d6:	b590      	push	{r4, r7, lr}
   164d8:	b09b      	sub	sp, #108	; 0x6c
   164da:	af00      	add	r7, sp, #0
   164dc:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
   164de:	687b      	ldr	r3, [r7, #4]
   164e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
   164e4:	4611      	mov	r1, r2
   164e6:	4618      	mov	r0, r3
   164e8:	f7ff fa26 	bl	15938 <validate>
   164ec:	4603      	mov	r3, r0
   164ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
   164f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   164f6:	2b00      	cmp	r3, #0
   164f8:	f040 8109 	bne.w	1670e <f_sync+0x238>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
   164fc:	687b      	ldr	r3, [r7, #4]
   164fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   16502:	f003 0340 	and.w	r3, r3, #64	; 0x40
   16506:	2b00      	cmp	r3, #0
   16508:	f000 8101 	beq.w	1670e <f_sync+0x238>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
   1650c:	687b      	ldr	r3, [r7, #4]
   1650e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   16512:	b25b      	sxtb	r3, r3
   16514:	2b00      	cmp	r3, #0
   16516:	da17      	bge.n	16548 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
   16518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1651a:	7858      	ldrb	r0, [r3, #1]
   1651c:	687b      	ldr	r3, [r7, #4]
   1651e:	f103 0154 	add.w	r1, r3, #84	; 0x54
   16522:	687b      	ldr	r3, [r7, #4]
   16524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   16526:	2301      	movs	r3, #1
   16528:	f7fb feb0 	bl	1228c <disk_write>
   1652c:	4603      	mov	r3, r0
   1652e:	2b00      	cmp	r3, #0
   16530:	d001      	beq.n	16536 <f_sync+0x60>
   16532:	2301      	movs	r3, #1
   16534:	e0ed      	b.n	16712 <f_sync+0x23c>
				fp->flag &= (BYTE)~FA_DIRTY;
   16536:	687b      	ldr	r3, [r7, #4]
   16538:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1653c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   16540:	b2da      	uxtb	r2, r3
   16542:	687b      	ldr	r3, [r7, #4]
   16544:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
   16548:	f7fb ff9e 	bl	12488 <get_fattime>
   1654c:	6638      	str	r0, [r7, #96]	; 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
   1654e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16550:	781b      	ldrb	r3, [r3, #0]
   16552:	2b04      	cmp	r3, #4
   16554:	f040 8090 	bne.w	16678 <f_sync+0x1a2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
   16558:	687b      	ldr	r3, [r7, #4]
   1655a:	4618      	mov	r0, r3
   1655c:	f7fc fe68 	bl	13230 <fill_first_frag>
   16560:	4603      	mov	r3, r0
   16562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
   16566:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   1656a:	2b00      	cmp	r3, #0
   1656c:	d10a      	bne.n	16584 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
   1656e:	6878      	ldr	r0, [r7, #4]
   16570:	687b      	ldr	r3, [r7, #4]
   16572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   16574:	f04f 32ff 	mov.w	r2, #4294967295
   16578:	4619      	mov	r1, r3
   1657a:	f7fc fe88 	bl	1328e <fill_last_frag>
   1657e:	4603      	mov	r3, r0
   16580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
   16584:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   16588:	2b00      	cmp	r3, #0
   1658a:	f040 80c0 	bne.w	1670e <f_sync+0x238>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
   1658e:	687a      	ldr	r2, [r7, #4]
   16590:	f107 0308 	add.w	r3, r7, #8
   16594:	4611      	mov	r1, r2
   16596:	4618      	mov	r0, r3
   16598:	f7fd fe83 	bl	142a2 <load_obj_xdir>
   1659c:	4603      	mov	r3, r0
   1659e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
   165a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   165a6:	2b00      	cmp	r3, #0
   165a8:	f040 80b1 	bne.w	1670e <f_sync+0x238>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
   165ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   165ae:	691b      	ldr	r3, [r3, #16]
   165b0:	3304      	adds	r3, #4
   165b2:	781a      	ldrb	r2, [r3, #0]
   165b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   165b6:	691b      	ldr	r3, [r3, #16]
   165b8:	3304      	adds	r3, #4
   165ba:	f042 0220 	orr.w	r2, r2, #32
   165be:	b2d2      	uxtb	r2, r2
   165c0:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
   165c2:	687b      	ldr	r3, [r7, #4]
   165c4:	79da      	ldrb	r2, [r3, #7]
   165c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   165c8:	691b      	ldr	r3, [r3, #16]
   165ca:	3321      	adds	r3, #33	; 0x21
   165cc:	f042 0201 	orr.w	r2, r2, #1
   165d0:	b2d2      	uxtb	r2, r2
   165d2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
   165d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   165d6:	691b      	ldr	r3, [r3, #16]
   165d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
   165dc:	687b      	ldr	r3, [r7, #4]
   165de:	689b      	ldr	r3, [r3, #8]
   165e0:	4619      	mov	r1, r3
   165e2:	4610      	mov	r0, r2
   165e4:	f7fc f86d 	bl	126c2 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
   165e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   165ea:	691b      	ldr	r3, [r3, #16]
   165ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
   165f0:	687b      	ldr	r3, [r7, #4]
   165f2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   165f6:	461a      	mov	r2, r3
   165f8:	4623      	mov	r3, r4
   165fa:	4608      	mov	r0, r1
   165fc:	f7fc f88d 	bl	1271a <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
   16600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16602:	691b      	ldr	r3, [r3, #16]
   16604:	f103 0128 	add.w	r1, r3, #40	; 0x28
   16608:	687b      	ldr	r3, [r7, #4]
   1660a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   1660e:	461a      	mov	r2, r3
   16610:	4623      	mov	r3, r4
   16612:	4608      	mov	r0, r1
   16614:	f7fc f881 	bl	1271a <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
   16618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1661a:	691b      	ldr	r3, [r3, #16]
   1661c:	330c      	adds	r3, #12
   1661e:	6e39      	ldr	r1, [r7, #96]	; 0x60
   16620:	4618      	mov	r0, r3
   16622:	f7fc f84e 	bl	126c2 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
   16626:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16628:	691b      	ldr	r3, [r3, #16]
   1662a:	3315      	adds	r3, #21
   1662c:	2200      	movs	r2, #0
   1662e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
   16630:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16632:	691b      	ldr	r3, [r3, #16]
   16634:	3310      	adds	r3, #16
   16636:	2100      	movs	r1, #0
   16638:	4618      	mov	r0, r3
   1663a:	f7fc f842 	bl	126c2 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
   1663e:	f107 0308 	add.w	r3, r7, #8
   16642:	4618      	mov	r0, r3
   16644:	f7fd fe6b 	bl	1431e <store_xdir>
   16648:	4603      	mov	r3, r0
   1664a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
   1664e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   16652:	2b00      	cmp	r3, #0
   16654:	d15b      	bne.n	1670e <f_sync+0x238>
							res = sync_fs(fs);
   16656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16658:	4618      	mov	r0, r3
   1665a:	f7fc fa5b 	bl	12b14 <sync_fs>
   1665e:	4603      	mov	r3, r0
   16660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
   16664:	687b      	ldr	r3, [r7, #4]
   16666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   1666a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1666e:	b2da      	uxtb	r2, r3
   16670:	687b      	ldr	r3, [r7, #4]
   16672:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   16676:	e04a      	b.n	1670e <f_sync+0x238>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
   16678:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1667a:	687b      	ldr	r3, [r7, #4]
   1667c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1667e:	4619      	mov	r1, r3
   16680:	4610      	mov	r0, r2
   16682:	f7fc fa19 	bl	12ab8 <move_window>
   16686:	4603      	mov	r3, r0
   16688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
   1668c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   16690:	2b00      	cmp	r3, #0
   16692:	d13c      	bne.n	1670e <f_sync+0x238>
					dir = fp->dir_ptr;
   16694:	687b      	ldr	r3, [r7, #4]
   16696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   16698:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
   1669a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1669c:	330b      	adds	r3, #11
   1669e:	781a      	ldrb	r2, [r3, #0]
   166a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   166a2:	330b      	adds	r3, #11
   166a4:	f042 0220 	orr.w	r2, r2, #32
   166a8:	b2d2      	uxtb	r2, r2
   166aa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
   166ac:	687b      	ldr	r3, [r7, #4]
   166ae:	6818      	ldr	r0, [r3, #0]
   166b0:	687b      	ldr	r3, [r7, #4]
   166b2:	689b      	ldr	r3, [r3, #8]
   166b4:	461a      	mov	r2, r3
   166b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   166b8:	f7fd fa67 	bl	13b8a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
   166bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   166be:	f103 021c 	add.w	r2, r3, #28
   166c2:	687b      	ldr	r3, [r7, #4]
   166c4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
   166c8:	4619      	mov	r1, r3
   166ca:	4610      	mov	r0, r2
   166cc:	f7fb fff9 	bl	126c2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
   166d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   166d2:	3316      	adds	r3, #22
   166d4:	6e39      	ldr	r1, [r7, #96]	; 0x60
   166d6:	4618      	mov	r0, r3
   166d8:	f7fb fff3 	bl	126c2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
   166dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   166de:	3312      	adds	r3, #18
   166e0:	2100      	movs	r1, #0
   166e2:	4618      	mov	r0, r3
   166e4:	f7fb ffd2 	bl	1268c <st_word>
					fs->wflag = 1;
   166e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   166ea:	2201      	movs	r2, #1
   166ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
   166ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   166f0:	4618      	mov	r0, r3
   166f2:	f7fc fa0f 	bl	12b14 <sync_fs>
   166f6:	4603      	mov	r3, r0
   166f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
   166fc:	687b      	ldr	r3, [r7, #4]
   166fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   16702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   16706:	b2da      	uxtb	r2, r3
   16708:	687b      	ldr	r3, [r7, #4]
   1670a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
   1670e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
   16712:	4618      	mov	r0, r3
   16714:	376c      	adds	r7, #108	; 0x6c
   16716:	46bd      	mov	sp, r7
   16718:	bd90      	pop	{r4, r7, pc}

0001671a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
   1671a:	b580      	push	{r7, lr}
   1671c:	b084      	sub	sp, #16
   1671e:	af00      	add	r7, sp, #0
   16720:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
   16722:	6878      	ldr	r0, [r7, #4]
   16724:	f7ff fed7 	bl	164d6 <f_sync>
   16728:	4603      	mov	r3, r0
   1672a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
   1672c:	7bfb      	ldrb	r3, [r7, #15]
   1672e:	2b00      	cmp	r3, #0
   16730:	d10e      	bne.n	16750 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
   16732:	687b      	ldr	r3, [r7, #4]
   16734:	f107 0208 	add.w	r2, r7, #8
   16738:	4611      	mov	r1, r2
   1673a:	4618      	mov	r0, r3
   1673c:	f7ff f8fc 	bl	15938 <validate>
   16740:	4603      	mov	r3, r0
   16742:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
   16744:	7bfb      	ldrb	r3, [r7, #15]
   16746:	2b00      	cmp	r3, #0
   16748:	d102      	bne.n	16750 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
   1674a:	687b      	ldr	r3, [r7, #4]
   1674c:	2200      	movs	r2, #0
   1674e:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
   16750:	7bfb      	ldrb	r3, [r7, #15]
}
   16752:	4618      	mov	r0, r3
   16754:	3710      	adds	r7, #16
   16756:	46bd      	mov	sp, r7
   16758:	bd80      	pop	{r7, pc}
	...

0001675c <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	UINT sys,			/* System ID (for only MBR, temp setting) and bit8:GPT */
	BYTE* buf			/* Working buffer for a sector */
)
{
   1675c:	b580      	push	{r7, lr}
   1675e:	b08e      	sub	sp, #56	; 0x38
   16760:	af00      	add	r7, sp, #0
   16762:	60b9      	str	r1, [r7, #8]
   16764:	607a      	str	r2, [r7, #4]
   16766:	603b      	str	r3, [r7, #0]
   16768:	4603      	mov	r3, r0
   1676a:	73fb      	strb	r3, [r7, #15]
	LBA_t sz_drv;
	DWORD sz_drv32, s_lba32, n_lba32;
	BYTE *pte, hd, n_hd, sc, n_sc;

	/* Get drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
   1676c:	f107 0210 	add.w	r2, r7, #16
   16770:	7bfb      	ldrb	r3, [r7, #15]
   16772:	2101      	movs	r1, #1
   16774:	4618      	mov	r0, r3
   16776:	f7fb fdc9 	bl	1230c <disk_ioctl>
   1677a:	4603      	mov	r3, r0
   1677c:	2b00      	cmp	r3, #0
   1677e:	d001      	beq.n	16784 <create_partition+0x28>
   16780:	2301      	movs	r3, #1
   16782:	e109      	b.n	16998 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{					/* Create partitions in MBR */
		sz_drv32 = (DWORD)sz_drv;
   16784:	693b      	ldr	r3, [r7, #16]
   16786:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;		/* Determine drive CHS without any consideration of the drive geometry */
   16788:	233f      	movs	r3, #63	; 0x3f
   1678a:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
   1678c:	2308      	movs	r3, #8
   1678e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   16792:	e004      	b.n	1679e <create_partition+0x42>
   16794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   16798:	005b      	lsls	r3, r3, #1
   1679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1679e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   167a2:	2b00      	cmp	r3, #0
   167a4:	d00a      	beq.n	167bc <create_partition+0x60>
   167a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   167aa:	6a3a      	ldr	r2, [r7, #32]
   167ac:	fbb2 f2f3 	udiv	r2, r2, r3
   167b0:	7ffb      	ldrb	r3, [r7, #31]
   167b2:	fbb2 f3f3 	udiv	r3, r2, r3
   167b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   167ba:	d8eb      	bhi.n	16794 <create_partition+0x38>
		if (n_hd == 0) n_hd = 255;	/* Number of heads needs to be <256 */
   167bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   167c0:	2b00      	cmp	r3, #0
   167c2:	d102      	bne.n	167ca <create_partition+0x6e>
   167c4:	23ff      	movs	r3, #255	; 0xff
   167c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		mem_set(buf, 0, FF_MAX_SS);	/* Clear MBR */
   167ca:	f44f 7200 	mov.w	r2, #512	; 0x200
   167ce:	2100      	movs	r1, #0
   167d0:	6838      	ldr	r0, [r7, #0]
   167d2:	f7fc f84a 	bl	1286a <mem_set>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
   167d6:	683b      	ldr	r3, [r7, #0]
   167d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
   167dc:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, s_lba32 = n_sc; i < 4 && s_lba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32) {
   167de:	2300      	movs	r3, #0
   167e0:	637b      	str	r3, [r7, #52]	; 0x34
   167e2:	7ffb      	ldrb	r3, [r7, #31]
   167e4:	633b      	str	r3, [r7, #48]	; 0x30
   167e6:	e0b6      	b.n	16956 <create_partition+0x1fa>
			n_lba32 = (DWORD)plst[i];	/* Get partition size */
   167e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   167ea:	009b      	lsls	r3, r3, #2
   167ec:	68ba      	ldr	r2, [r7, #8]
   167ee:	4413      	add	r3, r2
   167f0:	681b      	ldr	r3, [r3, #0]
   167f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (n_lba32 <= 100) n_lba32 = (n_lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32;	/* Size in percentage? */
   167f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167f6:	2b64      	cmp	r3, #100	; 0x64
   167f8:	d80d      	bhi.n	16816 <create_partition+0xba>
   167fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   167fc:	2b64      	cmp	r3, #100	; 0x64
   167fe:	d008      	beq.n	16812 <create_partition+0xb6>
   16800:	6a3b      	ldr	r3, [r7, #32]
   16802:	4a67      	ldr	r2, [pc, #412]	; (169a0 <create_partition+0x244>)
   16804:	fba2 2303 	umull	r2, r3, r2, r3
   16808:	095b      	lsrs	r3, r3, #5
   1680a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1680c:	fb02 f303 	mul.w	r3, r2, r3
   16810:	e000      	b.n	16814 <create_partition+0xb8>
   16812:	6a3b      	ldr	r3, [r7, #32]
   16814:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (s_lba32 + n_lba32 > sz_drv32 || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba32;	/* Clip at drive size */
   16816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1681a:	4413      	add	r3, r2
   1681c:	6a3a      	ldr	r2, [r7, #32]
   1681e:	429a      	cmp	r2, r3
   16820:	d305      	bcc.n	1682e <create_partition+0xd2>
   16822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16826:	4413      	add	r3, r2
   16828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1682a:	429a      	cmp	r2, r3
   1682c:	d903      	bls.n	16836 <create_partition+0xda>
   1682e:	6a3a      	ldr	r2, [r7, #32]
   16830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16832:	1ad3      	subs	r3, r2, r3
   16834:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (n_lba32 == 0) break;	/* End of table or no sector to allocate? */
   16836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16838:	2b00      	cmp	r3, #0
   1683a:	f000 8098 	beq.w	1696e <create_partition+0x212>

			st_dword(pte + PTE_StLba, s_lba32);		/* Start LBA */
   1683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16840:	3308      	adds	r3, #8
   16842:	6b39      	ldr	r1, [r7, #48]	; 0x30
   16844:	4618      	mov	r0, r3
   16846:	f7fb ff3c 	bl	126c2 <st_dword>
			st_dword(pte + PTE_SizLba, n_lba32);	/* Number of sectors */
   1684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1684c:	330c      	adds	r3, #12
   1684e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16850:	4618      	mov	r0, r3
   16852:	f7fb ff36 	bl	126c2 <st_dword>
			pte[PTE_System] = (BYTE)sys;			/* System type */
   16856:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16858:	3304      	adds	r3, #4
   1685a:	687a      	ldr	r2, [r7, #4]
   1685c:	b2d2      	uxtb	r2, r2
   1685e:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(s_lba32 / n_sc / n_hd);		/* Start cylinder */
   16860:	7ffb      	ldrb	r3, [r7, #31]
   16862:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16864:	fbb2 f2f3 	udiv	r2, r2, r3
   16868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1686c:	fbb2 f3f3 	udiv	r3, r2, r3
   16870:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(s_lba32 / n_sc % n_hd);		/* Start head */
   16872:	7ffb      	ldrb	r3, [r7, #31]
   16874:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16876:	fbb2 f3f3 	udiv	r3, r2, r3
   1687a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   1687e:	fbb3 f1f2 	udiv	r1, r3, r2
   16882:	fb02 f201 	mul.w	r2, r2, r1
   16886:	1a9b      	subs	r3, r3, r2
   16888:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(s_lba32 % n_sc + 1);		/* Start sector */
   1688a:	7ffa      	ldrb	r2, [r7, #31]
   1688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1688e:	fbb3 f1f2 	udiv	r1, r3, r2
   16892:	fb02 f201 	mul.w	r2, r2, r1
   16896:	1a9b      	subs	r3, r3, r2
   16898:	b2db      	uxtb	r3, r3
   1689a:	3301      	adds	r3, #1
   1689c:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
   1689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168a0:	3301      	adds	r3, #1
   168a2:	7dfa      	ldrb	r2, [r7, #23]
   168a4:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   168a6:	69bb      	ldr	r3, [r7, #24]
   168a8:	089b      	lsrs	r3, r3, #2
   168aa:	b2db      	uxtb	r3, r3
   168ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   168b0:	b2d9      	uxtb	r1, r3
   168b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168b4:	3302      	adds	r3, #2
   168b6:	7dba      	ldrb	r2, [r7, #22]
   168b8:	430a      	orrs	r2, r1
   168ba:	b2d2      	uxtb	r2, r2
   168bc:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
   168be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   168c0:	3303      	adds	r3, #3
   168c2:	69ba      	ldr	r2, [r7, #24]
   168c4:	b2d2      	uxtb	r2, r2
   168c6:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((s_lba32 + n_lba32 - 1) / n_sc / n_hd);	/* End cylinder */
   168c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   168ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   168cc:	4413      	add	r3, r2
   168ce:	1e5a      	subs	r2, r3, #1
   168d0:	7ffb      	ldrb	r3, [r7, #31]
   168d2:	fbb2 f2f3 	udiv	r2, r2, r3
   168d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   168da:	fbb2 f3f3 	udiv	r3, r2, r3
   168de:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((s_lba32 + n_lba32 - 1) / n_sc % n_hd);	/* End head */
   168e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   168e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   168e4:	4413      	add	r3, r2
   168e6:	1e5a      	subs	r2, r3, #1
   168e8:	7ffb      	ldrb	r3, [r7, #31]
   168ea:	fbb2 f3f3 	udiv	r3, r2, r3
   168ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   168f2:	fbb3 f1f2 	udiv	r1, r3, r2
   168f6:	fb02 f201 	mul.w	r2, r2, r1
   168fa:	1a9b      	subs	r3, r3, r2
   168fc:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((s_lba32 + n_lba32 - 1) % n_sc + 1);	/* End sector */
   168fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16902:	4413      	add	r3, r2
   16904:	3b01      	subs	r3, #1
   16906:	7ffa      	ldrb	r2, [r7, #31]
   16908:	fbb3 f1f2 	udiv	r1, r3, r2
   1690c:	fb02 f201 	mul.w	r2, r2, r1
   16910:	1a9b      	subs	r3, r3, r2
   16912:	b2db      	uxtb	r3, r3
   16914:	3301      	adds	r3, #1
   16916:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
   16918:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1691a:	3305      	adds	r3, #5
   1691c:	7dfa      	ldrb	r2, [r7, #23]
   1691e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
   16920:	69bb      	ldr	r3, [r7, #24]
   16922:	089b      	lsrs	r3, r3, #2
   16924:	b2db      	uxtb	r3, r3
   16926:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1692a:	b2d9      	uxtb	r1, r3
   1692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1692e:	3306      	adds	r3, #6
   16930:	7dba      	ldrb	r2, [r7, #22]
   16932:	430a      	orrs	r2, r1
   16934:	b2d2      	uxtb	r2, r2
   16936:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
   16938:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1693a:	3307      	adds	r3, #7
   1693c:	69ba      	ldr	r2, [r7, #24]
   1693e:	b2d2      	uxtb	r2, r2
   16940:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
   16942:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16944:	3310      	adds	r3, #16
   16946:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, s_lba32 = n_sc; i < 4 && s_lba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32) {
   16948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1694a:	3301      	adds	r3, #1
   1694c:	637b      	str	r3, [r7, #52]	; 0x34
   1694e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16952:	4413      	add	r3, r2
   16954:	633b      	str	r3, [r7, #48]	; 0x30
   16956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16958:	2b03      	cmp	r3, #3
   1695a:	d809      	bhi.n	16970 <create_partition+0x214>
   1695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1695e:	2b00      	cmp	r3, #0
   16960:	d006      	beq.n	16970 <create_partition+0x214>
   16962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16964:	6a3b      	ldr	r3, [r7, #32]
   16966:	429a      	cmp	r2, r3
   16968:	f4ff af3e 	bcc.w	167e8 <create_partition+0x8c>
   1696c:	e000      	b.n	16970 <create_partition+0x214>
			if (n_lba32 == 0) break;	/* End of table or no sector to allocate? */
   1696e:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
   16970:	683b      	ldr	r3, [r7, #0]
   16972:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
   16976:	f64a 2155 	movw	r1, #43605	; 0xaa55
   1697a:	4618      	mov	r0, r3
   1697c:	f7fb fe86 	bl	1268c <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
   16980:	7bf8      	ldrb	r0, [r7, #15]
   16982:	2301      	movs	r3, #1
   16984:	2200      	movs	r2, #0
   16986:	6839      	ldr	r1, [r7, #0]
   16988:	f7fb fc80 	bl	1228c <disk_write>
   1698c:	4603      	mov	r3, r0
   1698e:	2b00      	cmp	r3, #0
   16990:	d001      	beq.n	16996 <create_partition+0x23a>
   16992:	2301      	movs	r3, #1
   16994:	e000      	b.n	16998 <create_partition+0x23c>
	}

	return FR_OK;
   16996:	2300      	movs	r3, #0
}
   16998:	4618      	mov	r0, r3
   1699a:	3738      	adds	r7, #56	; 0x38
   1699c:	46bd      	mov	sp, r7
   1699e:	bd80      	pop	{r7, pc}
   169a0:	51eb851f 	.word	0x51eb851f

000169a4 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
   169a4:	b590      	push	{r4, r7, lr}
   169a6:	b0ab      	sub	sp, #172	; 0xac
   169a8:	af00      	add	r7, sp, #0
   169aa:	60f8      	str	r0, [r7, #12]
   169ac:	60b9      	str	r1, [r7, #8]
   169ae:	607a      	str	r2, [r7, #4]
   169b0:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT fr;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
   169b2:	f107 030c 	add.w	r3, r7, #12
   169b6:	4618      	mov	r0, r3
   169b8:	f7fe fb6e 	bl	15098 <get_ldnumber>
   169bc:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
   169be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   169c0:	2b00      	cmp	r3, #0
   169c2:	da02      	bge.n	169ca <f_mkfs+0x26>
   169c4:	230b      	movs	r3, #11
   169c6:	f001 b918 	b.w	17bfa <f_mkfs+0x1256>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
   169ca:	4aba      	ldr	r2, [pc, #744]	; (16cb4 <f_mkfs+0x310>)
   169cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   169ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169d2:	2b00      	cmp	r3, #0
   169d4:	d005      	beq.n	169e2 <f_mkfs+0x3e>
   169d6:	4ab7      	ldr	r2, [pc, #732]	; (16cb4 <f_mkfs+0x310>)
   169d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   169da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   169de:	2200      	movs	r2, #0
   169e0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);			/* Physical drive */
   169e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   169e4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
   169e8:	2300      	movs	r3, #0
   169ea:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
   169ee:	68bb      	ldr	r3, [r7, #8]
   169f0:	2b00      	cmp	r3, #0
   169f2:	d101      	bne.n	169f8 <f_mkfs+0x54>
   169f4:	4bb0      	ldr	r3, [pc, #704]	; (16cb8 <f_mkfs+0x314>)
   169f6:	60bb      	str	r3, [r7, #8]

	/* Get physical drive status (sz_drv, sz_blk, ss) */
	ds = disk_initialize(pdrv);
   169f8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
   169fc:	4618      	mov	r0, r3
   169fe:	f7fb fbf0 	bl	121e2 <disk_initialize>
   16a02:	4603      	mov	r3, r0
   16a04:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	if (ds & STA_NOINIT) return FR_NOT_READY;
   16a08:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   16a0c:	f003 0301 	and.w	r3, r3, #1
   16a10:	2b00      	cmp	r3, #0
   16a12:	d002      	beq.n	16a1a <f_mkfs+0x76>
   16a14:	2303      	movs	r3, #3
   16a16:	f001 b8f0 	b.w	17bfa <f_mkfs+0x1256>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
   16a1a:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
   16a1e:	f003 0304 	and.w	r3, r3, #4
   16a22:	2b00      	cmp	r3, #0
   16a24:	d002      	beq.n	16a2c <f_mkfs+0x88>
   16a26:	230a      	movs	r3, #10
   16a28:	f001 b8e7 	b.w	17bfa <f_mkfs+0x1256>
	sz_blk = opt->align;
   16a2c:	68bb      	ldr	r3, [r7, #8]
   16a2e:	685b      	ldr	r3, [r3, #4]
   16a30:	62bb      	str	r3, [r7, #40]	; 0x28
	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
   16a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a34:	2b00      	cmp	r3, #0
   16a36:	d10c      	bne.n	16a52 <f_mkfs+0xae>
   16a38:	f107 0228 	add.w	r2, r7, #40	; 0x28
   16a3c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
   16a40:	2103      	movs	r1, #3
   16a42:	4618      	mov	r0, r3
   16a44:	f7fb fc62 	bl	1230c <disk_ioctl>
   16a48:	4603      	mov	r3, r0
   16a4a:	2b00      	cmp	r3, #0
   16a4c:	d001      	beq.n	16a52 <f_mkfs+0xae>
   16a4e:	2301      	movs	r3, #1
   16a50:	62bb      	str	r3, [r7, #40]	; 0x28
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
   16a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a54:	2b00      	cmp	r3, #0
   16a56:	d009      	beq.n	16a6c <f_mkfs+0xc8>
   16a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   16a5e:	d805      	bhi.n	16a6c <f_mkfs+0xc8>
   16a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a62:	1e5a      	subs	r2, r3, #1
   16a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16a66:	4013      	ands	r3, r2
   16a68:	2b00      	cmp	r3, #0
   16a6a:	d001      	beq.n	16a70 <f_mkfs+0xcc>
   16a6c:	2301      	movs	r3, #1
   16a6e:	62bb      	str	r3, [r7, #40]	; 0x28
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
   16a70:	f44f 7300 	mov.w	r3, #512	; 0x200
   16a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
#endif
	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
   16a78:	68bb      	ldr	r3, [r7, #8]
   16a7a:	781b      	ldrb	r3, [r3, #0]
   16a7c:	f003 030f 	and.w	r3, r3, #15
   16a80:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
   16a84:	68bb      	ldr	r3, [r7, #8]
   16a86:	785b      	ldrb	r3, [r3, #1]
   16a88:	2b00      	cmp	r3, #0
   16a8a:	d006      	beq.n	16a9a <f_mkfs+0xf6>
   16a8c:	68bb      	ldr	r3, [r7, #8]
   16a8e:	785b      	ldrb	r3, [r3, #1]
   16a90:	2b02      	cmp	r3, #2
   16a92:	d802      	bhi.n	16a9a <f_mkfs+0xf6>
   16a94:	68bb      	ldr	r3, [r7, #8]
   16a96:	785b      	ldrb	r3, [r3, #1]
   16a98:	e000      	b.n	16a9c <f_mkfs+0xf8>
   16a9a:	2301      	movs	r3, #1
   16a9c:	64bb      	str	r3, [r7, #72]	; 0x48
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
   16a9e:	68bb      	ldr	r3, [r7, #8]
   16aa0:	689b      	ldr	r3, [r3, #8]
   16aa2:	2b00      	cmp	r3, #0
   16aa4:	d014      	beq.n	16ad0 <f_mkfs+0x12c>
   16aa6:	68bb      	ldr	r3, [r7, #8]
   16aa8:	689b      	ldr	r3, [r3, #8]
   16aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   16aae:	d80f      	bhi.n	16ad0 <f_mkfs+0x12c>
   16ab0:	68bb      	ldr	r3, [r7, #8]
   16ab2:	689b      	ldr	r3, [r3, #8]
   16ab4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   16ab8:	0952      	lsrs	r2, r2, #5
   16aba:	b292      	uxth	r2, r2
   16abc:	fbb3 f1f2 	udiv	r1, r3, r2
   16ac0:	fb02 f201 	mul.w	r2, r2, r1
   16ac4:	1a9b      	subs	r3, r3, r2
   16ac6:	2b00      	cmp	r3, #0
   16ac8:	d102      	bne.n	16ad0 <f_mkfs+0x12c>
   16aca:	68bb      	ldr	r3, [r7, #8]
   16acc:	689b      	ldr	r3, [r3, #8]
   16ace:	e001      	b.n	16ad4 <f_mkfs+0x130>
   16ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
   16ad4:	647b      	str	r3, [r7, #68]	; 0x44
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
   16ad6:	68bb      	ldr	r3, [r7, #8]
   16ad8:	68db      	ldr	r3, [r3, #12]
   16ada:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   16ade:	d80a      	bhi.n	16af6 <f_mkfs+0x152>
   16ae0:	68bb      	ldr	r3, [r7, #8]
   16ae2:	68da      	ldr	r2, [r3, #12]
   16ae4:	68bb      	ldr	r3, [r7, #8]
   16ae6:	68db      	ldr	r3, [r3, #12]
   16ae8:	3b01      	subs	r3, #1
   16aea:	4013      	ands	r3, r2
   16aec:	2b00      	cmp	r3, #0
   16aee:	d102      	bne.n	16af6 <f_mkfs+0x152>
   16af0:	68bb      	ldr	r3, [r7, #8]
   16af2:	68db      	ldr	r3, [r3, #12]
   16af4:	e000      	b.n	16af8 <f_mkfs+0x154>
   16af6:	2300      	movs	r3, #0
   16af8:	67fb      	str	r3, [r7, #124]	; 0x7c
	sz_au /= ss;	/* Byte --> Sector */
   16afa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16afe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   16b00:	fbb2 f3f3 	udiv	r3, r2, r3
   16b04:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
   16b06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16b0a:	683a      	ldr	r2, [r7, #0]
   16b0c:	fbb2 f3f3 	udiv	r3, r2, r3
   16b10:	643b      	str	r3, [r7, #64]	; 0x40
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
   16b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16b14:	2b00      	cmp	r3, #0
   16b16:	d102      	bne.n	16b1e <f_mkfs+0x17a>
   16b18:	2311      	movs	r3, #17
   16b1a:	f001 b86e 	b.w	17bfa <f_mkfs+0x1256>
	buf = (BYTE*)work;		/* Working buffer */
   16b1e:	687b      	ldr	r3, [r7, #4]
   16b20:	63fb      	str	r3, [r7, #60]	; 0x3c
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
   16b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16b24:	2b00      	cmp	r3, #0
   16b26:	d102      	bne.n	16b2e <f_mkfs+0x18a>
   16b28:	2311      	movs	r3, #17
   16b2a:	f001 b866 	b.w	17bfa <f_mkfs+0x1256>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
   16b2e:	2300      	movs	r3, #0
   16b30:	627b      	str	r3, [r7, #36]	; 0x24
   16b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   16b38:	f107 0224 	add.w	r2, r7, #36	; 0x24
   16b3c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
   16b40:	2101      	movs	r1, #1
   16b42:	4618      	mov	r0, r3
   16b44:	f7fb fbe2 	bl	1230c <disk_ioctl>
   16b48:	4603      	mov	r3, r0
   16b4a:	2b00      	cmp	r3, #0
   16b4c:	d002      	beq.n	16b54 <f_mkfs+0x1b0>
   16b4e:	2301      	movs	r3, #1
   16b50:	f001 b853 	b.w	17bfa <f_mkfs+0x1256>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
   16b54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   16b58:	f003 0308 	and.w	r3, r3, #8
   16b5c:	2b00      	cmp	r3, #0
   16b5e:	d10a      	bne.n	16b76 <f_mkfs+0x1d2>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
   16b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16b62:	2b3f      	cmp	r3, #63	; 0x3f
   16b64:	d907      	bls.n	16b76 <f_mkfs+0x1d2>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
   16b66:	233f      	movs	r3, #63	; 0x3f
   16b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   16b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16b6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16b72:	1ad3      	subs	r3, r2, r3
   16b74:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
   16b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16b78:	2b7f      	cmp	r3, #127	; 0x7f
   16b7a:	d802      	bhi.n	16b82 <f_mkfs+0x1de>
   16b7c:	230e      	movs	r3, #14
   16b7e:	f001 b83c 	b.w	17bfa <f_mkfs+0x1256>
	/* Now start to create a FAT volume at b_vol and sz_vol */

	do {	/* Pre-determine the FAT type */
		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
   16b82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   16b86:	f003 0304 	and.w	r3, r3, #4
   16b8a:	2b00      	cmp	r3, #0
   16b8c:	d010      	beq.n	16bb0 <f_mkfs+0x20c>
			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 64MS or sz_au > 128S ? */
   16b8e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   16b92:	f003 0307 	and.w	r3, r3, #7
   16b96:	2b04      	cmp	r3, #4
   16b98:	d006      	beq.n	16ba8 <f_mkfs+0x204>
   16b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
   16ba0:	d202      	bcs.n	16ba8 <f_mkfs+0x204>
   16ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16ba4:	2b80      	cmp	r3, #128	; 0x80
   16ba6:	d903      	bls.n	16bb0 <f_mkfs+0x20c>
				fsty = FS_EXFAT; break;
   16ba8:	2304      	movs	r3, #4
   16baa:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
   16bae:	e020      	b.n	16bf2 <f_mkfs+0x24e>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
   16bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16bb2:	2b80      	cmp	r3, #128	; 0x80
   16bb4:	d901      	bls.n	16bba <f_mkfs+0x216>
   16bb6:	2380      	movs	r3, #128	; 0x80
   16bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
   16bba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   16bbe:	f003 0302 	and.w	r3, r3, #2
   16bc2:	2b00      	cmp	r3, #0
   16bc4:	d009      	beq.n	16bda <f_mkfs+0x236>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
   16bc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   16bca:	f003 0301 	and.w	r3, r3, #1
   16bce:	2b00      	cmp	r3, #0
   16bd0:	d103      	bne.n	16bda <f_mkfs+0x236>
				fsty = FS_FAT32; break;
   16bd2:	2303      	movs	r3, #3
   16bd4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
   16bd8:	e00b      	b.n	16bf2 <f_mkfs+0x24e>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
   16bda:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   16bde:	f003 0301 	and.w	r3, r3, #1
   16be2:	2b00      	cmp	r3, #0
   16be4:	d102      	bne.n	16bec <f_mkfs+0x248>
   16be6:	2313      	movs	r3, #19
   16be8:	f001 b807 	b.w	17bfa <f_mkfs+0x1256>
		fsty = FS_FAT16;
   16bec:	2302      	movs	r3, #2
   16bee:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	} while (0);

#if FF_FS_EXFAT
	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
   16bf2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   16bf6:	2b04      	cmp	r3, #4
   16bf8:	f040 8463 	bne.w	174c2 <f_mkfs+0xb1e>
		DWORD szb_bit, szb_case, sum, nb, cl, tbl[3];
		WCHAR ch, si;
		UINT j, st;
		BYTE b;

		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
   16bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   16c02:	d202      	bcs.n	16c0a <f_mkfs+0x266>
   16c04:	230e      	movs	r3, #14
   16c06:	f000 bff8 	b.w	17bfa <f_mkfs+0x1256>
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Determine FAT location, data location and number of clusters */
		if (sz_au == 0) {	/* AU auto-selection */
   16c0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16c0c:	2b00      	cmp	r3, #0
   16c0e:	d10e      	bne.n	16c2e <f_mkfs+0x28a>
			sz_au = 8;
   16c10:	2308      	movs	r3, #8
   16c12:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
   16c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   16c1a:	d301      	bcc.n	16c20 <f_mkfs+0x27c>
   16c1c:	2340      	movs	r3, #64	; 0x40
   16c1e:	67fb      	str	r3, [r7, #124]	; 0x7c
			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
   16c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
   16c26:	d302      	bcc.n	16c2e <f_mkfs+0x28a>
   16c28:	f44f 7380 	mov.w	r3, #256	; 0x100
   16c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
		}
		b_fat = b_vol + 32;										/* FAT start at offset 32 */
   16c2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16c32:	3320      	adds	r3, #32
   16c34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
   16c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16c3c:	fbb2 f3f3 	udiv	r3, r2, r3
   16c40:	3302      	adds	r3, #2
   16c42:	009a      	lsls	r2, r3, #2
   16c44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16c48:	4413      	add	r3, r2
   16c4a:	1e5a      	subs	r2, r3, #1
   16c4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16c50:	fbb2 f3f3 	udiv	r3, r2, r3
   16c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase block boundary */
   16c58:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   16c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   16c60:	441a      	add	r2, r3
   16c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16c64:	4413      	add	r3, r2
   16c66:	1e5a      	subs	r2, r3, #1
   16c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16c6a:	425b      	negs	r3, r3
   16c6c:	4013      	ands	r3, r2
   16c6e:	63bb      	str	r3, [r7, #56]	; 0x38
		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   16c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16c76:	1ad2      	subs	r2, r2, r3
   16c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c7a:	085b      	lsrs	r3, r3, #1
   16c7c:	429a      	cmp	r2, r3
   16c7e:	d302      	bcc.n	16c86 <f_mkfs+0x2e2>
   16c80:	230e      	movs	r3, #14
   16c82:	f000 bfba 	b.w	17bfa <f_mkfs+0x1256>
		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
   16c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   16c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16c8c:	1ad2      	subs	r2, r2, r3
   16c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16c90:	441a      	add	r2, r3
   16c92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16c94:	fbb2 f3f3 	udiv	r3, r2, r3
   16c98:	637b      	str	r3, [r7, #52]	; 0x34
		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
   16c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16c9c:	2b0f      	cmp	r3, #15
   16c9e:	d802      	bhi.n	16ca6 <f_mkfs+0x302>
   16ca0:	230e      	movs	r3, #14
   16ca2:	f000 bfaa 	b.w	17bfa <f_mkfs+0x1256>
		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */
   16ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ca8:	4a04      	ldr	r2, [pc, #16]	; (16cbc <f_mkfs+0x318>)
   16caa:	4293      	cmp	r3, r2
   16cac:	d908      	bls.n	16cc0 <f_mkfs+0x31c>
   16cae:	230e      	movs	r3, #14
   16cb0:	f000 bfa3 	b.w	17bfa <f_mkfs+0x1256>
   16cb4:	10000574 	.word	0x10000574
   16cb8:	0001a1d8 	.word	0x0001a1d8
   16cbc:	7ffffffd 	.word	0x7ffffffd

		szb_bit = (n_clst + 7) / 8;							/* Size of allocation bitmap */
   16cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16cc2:	3307      	adds	r3, #7
   16cc4:	08db      	lsrs	r3, r3, #3
   16cc6:	633b      	str	r3, [r7, #48]	; 0x30
		tbl[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
   16cc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16ccc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   16cce:	fb02 f203 	mul.w	r2, r2, r3
   16cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16cd4:	4413      	add	r3, r2
   16cd6:	1e5a      	subs	r2, r3, #1
   16cd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16cdc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   16cde:	fb01 f303 	mul.w	r3, r1, r3
   16ce2:	fbb2 f3f3 	udiv	r3, r2, r3
   16ce6:	613b      	str	r3, [r7, #16]

		/* Create a compressed up-case table */
		sect = b_data + sz_au * tbl[0];	/* Table start sector */
   16ce8:	693b      	ldr	r3, [r7, #16]
   16cea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   16cec:	fb02 f303 	mul.w	r3, r2, r3
   16cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16cf2:	4413      	add	r3, r2
   16cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sum = 0;						/* Table checksum to be stored in the 82 entry */
   16cf8:	2300      	movs	r3, #0
   16cfa:	673b      	str	r3, [r7, #112]	; 0x70
		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
   16cfc:	2300      	movs	r3, #0
   16cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
   16d00:	2300      	movs	r3, #0
   16d02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   16d06:	2300      	movs	r3, #0
   16d08:	67bb      	str	r3, [r7, #120]	; 0x78
   16d0a:	2300      	movs	r3, #0
   16d0c:	663b      	str	r3, [r7, #96]	; 0x60
   16d0e:	2300      	movs	r3, #0
   16d10:	677b      	str	r3, [r7, #116]	; 0x74
		do {
			switch (st) {
   16d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   16d14:	2b00      	cmp	r3, #0
   16d16:	d003      	beq.n	16d20 <f_mkfs+0x37c>
   16d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   16d1a:	2b01      	cmp	r3, #1
   16d1c:	d041      	beq.n	16da2 <f_mkfs+0x3fe>
   16d1e:	e050      	b.n	16dc2 <f_mkfs+0x41e>
			case 0:
				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
   16d20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16d24:	4618      	mov	r0, r3
   16d26:	f001 f821 	bl	17d6c <ff_wtoupper>
   16d2a:	4603      	mov	r3, r0
   16d2c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				if (ch != si) {
   16d30:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
   16d34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16d38:	429a      	cmp	r2, r3
   16d3a:	d005      	beq.n	16d48 <f_mkfs+0x3a4>
					si++; break;		/* Store the up-case char if exist */
   16d3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16d40:	3301      	adds	r3, #1
   16d42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   16d46:	e04a      	b.n	16dde <f_mkfs+0x43a>
				}
				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get run length of no-case block */
   16d48:	2301      	movs	r3, #1
   16d4a:	663b      	str	r3, [r7, #96]	; 0x60
   16d4c:	e002      	b.n	16d54 <f_mkfs+0x3b0>
   16d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16d50:	3301      	adds	r3, #1
   16d52:	663b      	str	r3, [r7, #96]	; 0x60
   16d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16d56:	b29a      	uxth	r2, r3
   16d58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16d5c:	4413      	add	r3, r2
   16d5e:	b29b      	uxth	r3, r3
   16d60:	2b00      	cmp	r3, #0
   16d62:	d012      	beq.n	16d8a <f_mkfs+0x3e6>
   16d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16d66:	b29a      	uxth	r2, r3
   16d68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16d6c:	4413      	add	r3, r2
   16d6e:	b29b      	uxth	r3, r3
   16d70:	461c      	mov	r4, r3
   16d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16d74:	b29a      	uxth	r2, r3
   16d76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16d7a:	4413      	add	r3, r2
   16d7c:	b29b      	uxth	r3, r3
   16d7e:	4618      	mov	r0, r3
   16d80:	f000 fff4 	bl	17d6c <ff_wtoupper>
   16d84:	4603      	mov	r3, r0
   16d86:	429c      	cmp	r4, r3
   16d88:	d0e1      	beq.n	16d4e <f_mkfs+0x3aa>
				if (j >= 128) {
   16d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16d8c:	2b7f      	cmp	r3, #127	; 0x7f
   16d8e:	d906      	bls.n	16d9e <f_mkfs+0x3fa>
					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
   16d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16d94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
   16d98:	2302      	movs	r3, #2
   16d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   16d9c:	e01f      	b.n	16dde <f_mkfs+0x43a>
				}
				st = 1;			/* Do not compress short run */
   16d9e:	2301      	movs	r3, #1
   16da0:	65fb      	str	r3, [r7, #92]	; 0x5c
				/* go to next case */
			case 1:
				ch = si++;		/* Fill the short run */
   16da2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16da6:	1c5a      	adds	r2, r3, #1
   16da8:	f8a7 2064 	strh.w	r2, [r7, #100]	; 0x64
   16dac:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
				if (--j == 0) st = 0;
   16db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16db2:	3b01      	subs	r3, #1
   16db4:	663b      	str	r3, [r7, #96]	; 0x60
   16db6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16db8:	2b00      	cmp	r3, #0
   16dba:	d10f      	bne.n	16ddc <f_mkfs+0x438>
   16dbc:	2300      	movs	r3, #0
   16dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
				break;
   16dc0:	e00c      	b.n	16ddc <f_mkfs+0x438>

			default:
				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
   16dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16dc4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
   16dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16dca:	b29a      	uxth	r2, r3
   16dcc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16dd0:	4413      	add	r3, r2
   16dd2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				st = 0;
   16dd6:	2300      	movs	r3, #0
   16dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   16dda:	e000      	b.n	16dde <f_mkfs+0x43a>
				break;
   16ddc:	bf00      	nop
			}
			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
   16dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16de2:	4413      	add	r3, r2
   16de4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
   16de8:	b2d2      	uxtb	r2, r2
   16dea:	701a      	strb	r2, [r3, #0]
   16dec:	781b      	ldrb	r3, [r3, #0]
   16dee:	6f39      	ldr	r1, [r7, #112]	; 0x70
   16df0:	4618      	mov	r0, r3
   16df2:	f7fd f952 	bl	1409a <xsum32>
   16df6:	6738      	str	r0, [r7, #112]	; 0x70
			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
   16df8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
   16dfc:	0a1b      	lsrs	r3, r3, #8
   16dfe:	b299      	uxth	r1, r3
   16e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16e02:	3301      	adds	r3, #1
   16e04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16e06:	4413      	add	r3, r2
   16e08:	b2ca      	uxtb	r2, r1
   16e0a:	701a      	strb	r2, [r3, #0]
   16e0c:	781b      	ldrb	r3, [r3, #0]
   16e0e:	6f39      	ldr	r1, [r7, #112]	; 0x70
   16e10:	4618      	mov	r0, r3
   16e12:	f7fd f942 	bl	1409a <xsum32>
   16e16:	6738      	str	r0, [r7, #112]	; 0x70
			i += 2; szb_case += 2;
   16e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16e1a:	3302      	adds	r3, #2
   16e1c:	67bb      	str	r3, [r7, #120]	; 0x78
   16e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16e20:	3302      	adds	r3, #2
   16e22:	677b      	str	r3, [r7, #116]	; 0x74
			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
   16e24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16e28:	2b00      	cmp	r3, #0
   16e2a:	d007      	beq.n	16e3c <f_mkfs+0x498>
   16e2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16e30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16e32:	fb02 f303 	mul.w	r3, r2, r3
   16e36:	6fba      	ldr	r2, [r7, #120]	; 0x78
   16e38:	429a      	cmp	r2, r3
   16e3a:	d122      	bne.n	16e82 <f_mkfs+0x4de>
				n = (i + ss - 1) / ss;
   16e3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   16e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16e42:	4413      	add	r3, r2
   16e44:	1e5a      	subs	r2, r3, #1
   16e46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16e4a:	fbb2 f3f3 	udiv	r3, r2, r3
   16e4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   16e52:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   16e56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   16e5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   16e5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16e60:	f7fb fa14 	bl	1228c <disk_write>
   16e64:	4603      	mov	r3, r0
   16e66:	2b00      	cmp	r3, #0
   16e68:	d002      	beq.n	16e70 <f_mkfs+0x4cc>
   16e6a:	2301      	movs	r3, #1
   16e6c:	f000 bec5 	b.w	17bfa <f_mkfs+0x1256>
				sect += n; i = 0;
   16e70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   16e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   16e78:	4413      	add	r3, r2
   16e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   16e7e:	2300      	movs	r3, #0
   16e80:	67bb      	str	r3, [r7, #120]	; 0x78
			}
		} while (si);
   16e82:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16e86:	2b00      	cmp	r3, #0
   16e88:	f47f af43 	bne.w	16d12 <f_mkfs+0x36e>
		tbl[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
   16e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16e90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   16e92:	fb02 f203 	mul.w	r2, r2, r3
   16e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   16e98:	4413      	add	r3, r2
   16e9a:	1e5a      	subs	r2, r3, #1
   16e9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16ea0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
   16ea2:	fb01 f303 	mul.w	r3, r1, r3
   16ea6:	fbb2 f3f3 	udiv	r3, r2, r3
   16eaa:	617b      	str	r3, [r7, #20]
		tbl[2] = 1;										/* Number of root dir clusters */
   16eac:	2301      	movs	r3, #1
   16eae:	61bb      	str	r3, [r7, #24]

		/* Initialize the allocation bitmap */
		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
   16eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   16eb6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   16eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16ebc:	4413      	add	r3, r2
   16ebe:	1e5a      	subs	r2, r3, #1
   16ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16ec4:	fbb2 f3f3 	udiv	r3, r2, r3
   16ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
   16ecc:	693a      	ldr	r2, [r7, #16]
   16ece:	697b      	ldr	r3, [r7, #20]
   16ed0:	441a      	add	r2, r3
   16ed2:	69bb      	ldr	r3, [r7, #24]
   16ed4:	4413      	add	r3, r2
   16ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
		do {
			mem_set(buf, 0, sz_buf * ss);
   16ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16edc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16ede:	fb02 f303 	mul.w	r3, r2, r3
   16ee2:	461a      	mov	r2, r3
   16ee4:	2100      	movs	r1, #0
   16ee6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   16ee8:	f7fb fcbf 	bl	1286a <mem_set>
			for (i = 0; nb >= 8 && i < sz_buf * ss; buf[i++] = 0xFF, nb -= 8) ;
   16eec:	2300      	movs	r3, #0
   16eee:	67bb      	str	r3, [r7, #120]	; 0x78
   16ef0:	e009      	b.n	16f06 <f_mkfs+0x562>
   16ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16ef4:	1c5a      	adds	r2, r3, #1
   16ef6:	67ba      	str	r2, [r7, #120]	; 0x78
   16ef8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16efa:	4413      	add	r3, r2
   16efc:	22ff      	movs	r2, #255	; 0xff
   16efe:	701a      	strb	r2, [r3, #0]
   16f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16f02:	3b08      	subs	r3, #8
   16f04:	66fb      	str	r3, [r7, #108]	; 0x6c
   16f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16f08:	2b07      	cmp	r3, #7
   16f0a:	d907      	bls.n	16f1c <f_mkfs+0x578>
   16f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16f12:	fb02 f303 	mul.w	r3, r2, r3
   16f16:	6fba      	ldr	r2, [r7, #120]	; 0x78
   16f18:	429a      	cmp	r2, r3
   16f1a:	d3ea      	bcc.n	16ef2 <f_mkfs+0x54e>
			for (b = 1; nb != 0 && i < sz_buf * ss; buf[i] |= b, b <<= 1, nb--) ;
   16f1c:	2301      	movs	r3, #1
   16f1e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   16f22:	e013      	b.n	16f4c <f_mkfs+0x5a8>
   16f24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16f28:	4413      	add	r3, r2
   16f2a:	7819      	ldrb	r1, [r3, #0]
   16f2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16f2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16f30:	4413      	add	r3, r2
   16f32:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
   16f36:	430a      	orrs	r2, r1
   16f38:	b2d2      	uxtb	r2, r2
   16f3a:	701a      	strb	r2, [r3, #0]
   16f3c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   16f40:	005b      	lsls	r3, r3, #1
   16f42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   16f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16f48:	3b01      	subs	r3, #1
   16f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
   16f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16f4e:	2b00      	cmp	r3, #0
   16f50:	d007      	beq.n	16f62 <f_mkfs+0x5be>
   16f52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16f58:	fb02 f303 	mul.w	r3, r2, r3
   16f5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
   16f5e:	429a      	cmp	r2, r3
   16f60:	d3e0      	bcc.n	16f24 <f_mkfs+0x580>
			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
   16f62:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   16f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16f68:	4293      	cmp	r3, r2
   16f6a:	bf28      	it	cs
   16f6c:	4613      	movcs	r3, r2
   16f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   16f72:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   16f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   16f7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   16f7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   16f80:	f7fb f984 	bl	1228c <disk_write>
   16f84:	4603      	mov	r3, r0
   16f86:	2b00      	cmp	r3, #0
   16f88:	d002      	beq.n	16f90 <f_mkfs+0x5ec>
   16f8a:	2301      	movs	r3, #1
   16f8c:	f000 be35 	b.w	17bfa <f_mkfs+0x1256>
			sect += n; nsect -= n;
   16f90:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   16f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   16f98:	4413      	add	r3, r2
   16f9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   16f9e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   16fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   16fa6:	1ad3      	subs	r3, r2, r3
   16fa8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		} while (nsect);
   16fac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   16fb0:	2b00      	cmp	r3, #0
   16fb2:	d191      	bne.n	16ed8 <f_mkfs+0x534>

		/* Initialize the FAT */
		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
   16fb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   16fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   16fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   16fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		j = nb = cl = 0;
   16fc4:	2300      	movs	r3, #0
   16fc6:	66bb      	str	r3, [r7, #104]	; 0x68
   16fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16fca:	66fb      	str	r3, [r7, #108]	; 0x6c
   16fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   16fce:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			mem_set(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write index */
   16fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   16fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   16fd6:	fb02 f303 	mul.w	r3, r2, r3
   16fda:	461a      	mov	r2, r3
   16fdc:	2100      	movs	r1, #0
   16fde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   16fe0:	f7fb fc43 	bl	1286a <mem_set>
   16fe4:	2300      	movs	r3, #0
   16fe6:	67bb      	str	r3, [r7, #120]	; 0x78
			if (cl == 0) {	/* Set FAT [0] and FAT[1] */
   16fe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16fea:	2b00      	cmp	r3, #0
   16fec:	d134      	bne.n	17058 <f_mkfs+0x6b4>
				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
   16fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   16ff2:	4413      	add	r3, r2
   16ff4:	f06f 0107 	mvn.w	r1, #7
   16ff8:	4618      	mov	r0, r3
   16ffa:	f7fb fb62 	bl	126c2 <st_dword>
   16ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17000:	3304      	adds	r3, #4
   17002:	67bb      	str	r3, [r7, #120]	; 0x78
   17004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17006:	3301      	adds	r3, #1
   17008:	66bb      	str	r3, [r7, #104]	; 0x68
				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
   1700a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1700c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1700e:	4413      	add	r3, r2
   17010:	f04f 31ff 	mov.w	r1, #4294967295
   17014:	4618      	mov	r0, r3
   17016:	f7fb fb54 	bl	126c2 <st_dword>
   1701a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1701c:	3304      	adds	r3, #4
   1701e:	67bb      	str	r3, [r7, #120]	; 0x78
   17020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17022:	3301      	adds	r3, #1
   17024:	66bb      	str	r3, [r7, #104]	; 0x68
			}
			do {			/* Create chains of bitmap, up-case and root dir */
				while (nb != 0 && i < sz_buf * ss) {	/* Create a chain */
   17026:	e017      	b.n	17058 <f_mkfs+0x6b4>
					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
   17028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1702a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1702c:	441a      	add	r2, r3
   1702e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   17030:	2b01      	cmp	r3, #1
   17032:	d902      	bls.n	1703a <f_mkfs+0x696>
   17034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   17036:	3301      	adds	r3, #1
   17038:	e001      	b.n	1703e <f_mkfs+0x69a>
   1703a:	f04f 33ff 	mov.w	r3, #4294967295
   1703e:	4619      	mov	r1, r3
   17040:	4610      	mov	r0, r2
   17042:	f7fb fb3e 	bl	126c2 <st_dword>
					i += 4; cl++; nb--;
   17046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17048:	3304      	adds	r3, #4
   1704a:	67bb      	str	r3, [r7, #120]	; 0x78
   1704c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1704e:	3301      	adds	r3, #1
   17050:	66bb      	str	r3, [r7, #104]	; 0x68
   17052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   17054:	3b01      	subs	r3, #1
   17056:	66fb      	str	r3, [r7, #108]	; 0x6c
				while (nb != 0 && i < sz_buf * ss) {	/* Create a chain */
   17058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1705a:	2b00      	cmp	r3, #0
   1705c:	d007      	beq.n	1706e <f_mkfs+0x6ca>
   1705e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17064:	fb02 f303 	mul.w	r3, r2, r3
   17068:	6fba      	ldr	r2, [r7, #120]	; 0x78
   1706a:	429a      	cmp	r2, r3
   1706c:	d3dc      	bcc.n	17028 <f_mkfs+0x684>
				}
				if (nb == 0 && j < 3) nb = tbl[j++];	/* Next chain */
   1706e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   17070:	2b00      	cmp	r3, #0
   17072:	d10c      	bne.n	1708e <f_mkfs+0x6ea>
   17074:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   17076:	2b02      	cmp	r3, #2
   17078:	d809      	bhi.n	1708e <f_mkfs+0x6ea>
   1707a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1707c:	1c5a      	adds	r2, r3, #1
   1707e:	663a      	str	r2, [r7, #96]	; 0x60
   17080:	009b      	lsls	r3, r3, #2
   17082:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   17086:	4413      	add	r3, r2
   17088:	f853 3c98 	ldr.w	r3, [r3, #-152]
   1708c:	66fb      	str	r3, [r7, #108]	; 0x6c
			} while (nb != 0 && i < sz_buf * ss);
   1708e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   17090:	2b00      	cmp	r3, #0
   17092:	d007      	beq.n	170a4 <f_mkfs+0x700>
   17094:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1709a:	fb02 f303 	mul.w	r3, r2, r3
   1709e:	6fba      	ldr	r2, [r7, #120]	; 0x78
   170a0:	429a      	cmp	r2, r3
   170a2:	d3d9      	bcc.n	17058 <f_mkfs+0x6b4>
			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
   170a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   170a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   170aa:	4293      	cmp	r3, r2
   170ac:	bf28      	it	cs
   170ae:	4613      	movcs	r3, r2
   170b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   170b4:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   170b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   170bc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   170c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   170c2:	f7fb f8e3 	bl	1228c <disk_write>
   170c6:	4603      	mov	r3, r0
   170c8:	2b00      	cmp	r3, #0
   170ca:	d002      	beq.n	170d2 <f_mkfs+0x72e>
   170cc:	2301      	movs	r3, #1
   170ce:	f000 bd94 	b.w	17bfa <f_mkfs+0x1256>
			sect += n; nsect -= n;
   170d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   170d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   170da:	4413      	add	r3, r2
   170dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   170e0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   170e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   170e8:	1ad3      	subs	r3, r2, r3
   170ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		} while (nsect);
   170ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   170f2:	2b00      	cmp	r3, #0
   170f4:	f47f af6c 	bne.w	16fd0 <f_mkfs+0x62c>

		/* Initialize the root directory */
		mem_set(buf, 0, sz_buf * ss);
   170f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   170fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   170fe:	fb02 f303 	mul.w	r3, r2, r3
   17102:	461a      	mov	r2, r3
   17104:	2100      	movs	r1, #0
   17106:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17108:	f7fb fbaf 	bl	1286a <mem_set>
		buf[SZDIRE * 0 + 0] = ET_VLABEL;					/* Volume label entry (no label) */
   1710c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1710e:	2283      	movs	r2, #131	; 0x83
   17110:	701a      	strb	r2, [r3, #0]
		buf[SZDIRE * 1 + 0] = ET_BITMAP;					/* Bitmap entry */
   17112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17114:	3320      	adds	r3, #32
   17116:	2281      	movs	r2, #129	; 0x81
   17118:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 1 + 20, 2);					/*  cluster */
   1711a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1711c:	3334      	adds	r3, #52	; 0x34
   1711e:	2102      	movs	r1, #2
   17120:	4618      	mov	r0, r3
   17122:	f7fb face 	bl	126c2 <st_dword>
		st_dword(buf + SZDIRE * 1 + 24, szb_bit);			/*  size */
   17126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17128:	3338      	adds	r3, #56	; 0x38
   1712a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1712c:	4618      	mov	r0, r3
   1712e:	f7fb fac8 	bl	126c2 <st_dword>
		buf[SZDIRE * 2 + 0] = ET_UPCASE;					/* Up-case table entry */
   17132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17134:	3340      	adds	r3, #64	; 0x40
   17136:	2282      	movs	r2, #130	; 0x82
   17138:	701a      	strb	r2, [r3, #0]
		st_dword(buf + SZDIRE * 2 + 4, sum);				/*  sum */
   1713a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1713c:	3344      	adds	r3, #68	; 0x44
   1713e:	6f39      	ldr	r1, [r7, #112]	; 0x70
   17140:	4618      	mov	r0, r3
   17142:	f7fb fabe 	bl	126c2 <st_dword>
		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);		/*  cluster */
   17146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17148:	f103 0254 	add.w	r2, r3, #84	; 0x54
   1714c:	693b      	ldr	r3, [r7, #16]
   1714e:	3302      	adds	r3, #2
   17150:	4619      	mov	r1, r3
   17152:	4610      	mov	r0, r2
   17154:	f7fb fab5 	bl	126c2 <st_dword>
		st_dword(buf + SZDIRE * 2 + 24, szb_case);			/*  size */
   17158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1715a:	3358      	adds	r3, #88	; 0x58
   1715c:	6f79      	ldr	r1, [r7, #116]	; 0x74
   1715e:	4618      	mov	r0, r3
   17160:	f7fb faaf 	bl	126c2 <st_dword>
		sect = b_data + sz_au * (tbl[0] + tbl[1]); nsect = sz_au;	/* Start of the root directory and number of sectors */
   17164:	693a      	ldr	r2, [r7, #16]
   17166:	697b      	ldr	r3, [r7, #20]
   17168:	4413      	add	r3, r2
   1716a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   1716c:	fb02 f303 	mul.w	r3, r2, r3
   17170:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17172:	4413      	add	r3, r2
   17174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   17178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1717a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		do {	/* Fill root directory sectors */
			n = (nsect > sz_buf) ? sz_buf : nsect;
   1717e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   17182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17184:	4293      	cmp	r3, r2
   17186:	bf28      	it	cs
   17188:	4613      	movcs	r3, r2
   1718a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   1718e:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17196:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1719a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1719c:	f7fb f876 	bl	1228c <disk_write>
   171a0:	4603      	mov	r3, r0
   171a2:	2b00      	cmp	r3, #0
   171a4:	d002      	beq.n	171ac <f_mkfs+0x808>
   171a6:	2301      	movs	r3, #1
   171a8:	f000 bd27 	b.w	17bfa <f_mkfs+0x1256>
			mem_set(buf, 0, ss);
   171ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   171b0:	461a      	mov	r2, r3
   171b2:	2100      	movs	r1, #0
   171b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   171b6:	f7fb fb58 	bl	1286a <mem_set>
			sect += n; nsect -= n;
   171ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   171be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   171c2:	4413      	add	r3, r2
   171c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   171c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   171cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   171d0:	1ad3      	subs	r3, r2, r3
   171d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		} while (nsect);
   171d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   171da:	2b00      	cmp	r3, #0
   171dc:	d1cf      	bne.n	1717e <f_mkfs+0x7da>

		/* Create two set of the exFAT VBR blocks */
		sect = b_vol;
   171de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   171e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (n = 0; n < 2; n++) {
   171e6:	2300      	movs	r3, #0
   171e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   171ec:	e163      	b.n	174b6 <f_mkfs+0xb12>
			/* Main record (+0) */
			mem_set(buf, 0, ss);
   171ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   171f2:	461a      	mov	r2, r3
   171f4:	2100      	movs	r1, #0
   171f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   171f8:	f7fb fb37 	bl	1286a <mem_set>
			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
   171fc:	220b      	movs	r2, #11
   171fe:	49bb      	ldr	r1, [pc, #748]	; (174ec <f_mkfs+0xb48>)
   17200:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17202:	f7fb fb11 	bl	12828 <mem_cpy>
			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
   17206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17208:	f103 0140 	add.w	r1, r3, #64	; 0x40
   1720c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   17210:	f04f 0400 	mov.w	r4, #0
   17214:	461a      	mov	r2, r3
   17216:	4623      	mov	r3, r4
   17218:	4608      	mov	r0, r1
   1721a:	f7fb fa7e 	bl	1271a <st_qword>
			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
   1721e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17220:	f103 0148 	add.w	r1, r3, #72	; 0x48
   17224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17226:	f04f 0400 	mov.w	r4, #0
   1722a:	461a      	mov	r2, r3
   1722c:	4623      	mov	r3, r4
   1722e:	4608      	mov	r0, r1
   17230:	f7fb fa73 	bl	1271a <st_qword>
			st_dword(buf + BPB_FatOfsEx, (DWORD)(b_fat - b_vol));	/* FAT offset [sector] */
   17234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17236:	f103 0050 	add.w	r0, r3, #80	; 0x50
   1723a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   1723e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   17242:	1ad3      	subs	r3, r2, r3
   17244:	4619      	mov	r1, r3
   17246:	f7fb fa3c 	bl	126c2 <st_dword>
			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
   1724a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1724c:	3354      	adds	r3, #84	; 0x54
   1724e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   17252:	4618      	mov	r0, r3
   17254:	f7fb fa35 	bl	126c2 <st_dword>
			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
   17258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1725a:	f103 0058 	add.w	r0, r3, #88	; 0x58
   1725e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17260:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   17264:	1ad3      	subs	r3, r2, r3
   17266:	4619      	mov	r1, r3
   17268:	f7fb fa2b 	bl	126c2 <st_dword>
			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
   1726c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1726e:	335c      	adds	r3, #92	; 0x5c
   17270:	6b79      	ldr	r1, [r7, #52]	; 0x34
   17272:	4618      	mov	r0, r3
   17274:	f7fb fa25 	bl	126c2 <st_dword>
			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
   17278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1727a:	f103 0060 	add.w	r0, r3, #96	; 0x60
   1727e:	693a      	ldr	r2, [r7, #16]
   17280:	697b      	ldr	r3, [r7, #20]
   17282:	4413      	add	r3, r2
   17284:	3302      	adds	r3, #2
   17286:	4619      	mov	r1, r3
   17288:	f7fb fa1b 	bl	126c2 <st_dword>
			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
   1728c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1728e:	f103 0464 	add.w	r4, r3, #100	; 0x64
   17292:	f7fb f8f9 	bl	12488 <get_fattime>
   17296:	4603      	mov	r3, r0
   17298:	4619      	mov	r1, r3
   1729a:	4620      	mov	r0, r4
   1729c:	f7fb fa11 	bl	126c2 <st_dword>
			st_word(buf + BPB_FSVerEx, 0x100);						/* Filesystem version (1.00) */
   172a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   172a2:	3368      	adds	r3, #104	; 0x68
   172a4:	f44f 7180 	mov.w	r1, #256	; 0x100
   172a8:	4618      	mov	r0, r3
   172aa:	f7fb f9ef 	bl	1268c <st_word>
			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector size [byte] */
   172ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   172b0:	336c      	adds	r3, #108	; 0x6c
   172b2:	2200      	movs	r2, #0
   172b4:	701a      	strb	r2, [r3, #0]
   172b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   172ba:	67bb      	str	r3, [r7, #120]	; 0x78
   172bc:	e005      	b.n	172ca <f_mkfs+0x926>
   172be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   172c0:	336c      	adds	r3, #108	; 0x6c
   172c2:	781a      	ldrb	r2, [r3, #0]
   172c4:	3201      	adds	r2, #1
   172c6:	b2d2      	uxtb	r2, r2
   172c8:	701a      	strb	r2, [r3, #0]
   172ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   172cc:	085b      	lsrs	r3, r3, #1
   172ce:	67bb      	str	r3, [r7, #120]	; 0x78
   172d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   172d2:	2b00      	cmp	r3, #0
   172d4:	d1f3      	bne.n	172be <f_mkfs+0x91a>
			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster size [sector] */
   172d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   172d8:	336d      	adds	r3, #109	; 0x6d
   172da:	2200      	movs	r2, #0
   172dc:	701a      	strb	r2, [r3, #0]
   172de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   172e0:	67bb      	str	r3, [r7, #120]	; 0x78
   172e2:	e005      	b.n	172f0 <f_mkfs+0x94c>
   172e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   172e6:	336d      	adds	r3, #109	; 0x6d
   172e8:	781a      	ldrb	r2, [r3, #0]
   172ea:	3201      	adds	r2, #1
   172ec:	b2d2      	uxtb	r2, r2
   172ee:	701a      	strb	r2, [r3, #0]
   172f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   172f2:	085b      	lsrs	r3, r3, #1
   172f4:	67bb      	str	r3, [r7, #120]	; 0x78
   172f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   172f8:	2b00      	cmp	r3, #0
   172fa:	d1f3      	bne.n	172e4 <f_mkfs+0x940>
			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
   172fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   172fe:	336e      	adds	r3, #110	; 0x6e
   17300:	2201      	movs	r2, #1
   17302:	701a      	strb	r2, [r3, #0]
			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
   17304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17306:	336f      	adds	r3, #111	; 0x6f
   17308:	2280      	movs	r2, #128	; 0x80
   1730a:	701a      	strb	r2, [r3, #0]
			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
   1730c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1730e:	3378      	adds	r3, #120	; 0x78
   17310:	f64f 61eb 	movw	r1, #65259	; 0xfeeb
   17314:	4618      	mov	r0, r3
   17316:	f7fb f9b9 	bl	1268c <st_word>
			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
   1731a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1731c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
   17320:	f64a 2155 	movw	r1, #43605	; 0xaa55
   17324:	4618      	mov	r0, r3
   17326:	f7fb f9b1 	bl	1268c <st_word>
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   1732a:	2300      	movs	r3, #0
   1732c:	673b      	str	r3, [r7, #112]	; 0x70
   1732e:	2300      	movs	r3, #0
   17330:	67bb      	str	r3, [r7, #120]	; 0x78
   17332:	e014      	b.n	1735e <f_mkfs+0x9ba>
				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], sum);
   17334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17336:	2b6a      	cmp	r3, #106	; 0x6a
   17338:	d00e      	beq.n	17358 <f_mkfs+0x9b4>
   1733a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1733c:	2b6b      	cmp	r3, #107	; 0x6b
   1733e:	d00b      	beq.n	17358 <f_mkfs+0x9b4>
   17340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17342:	2b70      	cmp	r3, #112	; 0x70
   17344:	d008      	beq.n	17358 <f_mkfs+0x9b4>
   17346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1734a:	4413      	add	r3, r2
   1734c:	781b      	ldrb	r3, [r3, #0]
   1734e:	6f39      	ldr	r1, [r7, #112]	; 0x70
   17350:	4618      	mov	r0, r3
   17352:	f7fc fea2 	bl	1409a <xsum32>
   17356:	6738      	str	r0, [r7, #112]	; 0x70
			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
   17358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1735a:	3301      	adds	r3, #1
   1735c:	67bb      	str	r3, [r7, #120]	; 0x78
   1735e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17362:	6fba      	ldr	r2, [r7, #120]	; 0x78
   17364:	429a      	cmp	r2, r3
   17366:	d3e5      	bcc.n	17334 <f_mkfs+0x990>
			}
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   17368:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   1736c:	1c53      	adds	r3, r2, #1
   1736e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   17372:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17376:	2301      	movs	r3, #1
   17378:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1737a:	f7fa ff87 	bl	1228c <disk_write>
   1737e:	4603      	mov	r3, r0
   17380:	2b00      	cmp	r3, #0
   17382:	d002      	beq.n	1738a <f_mkfs+0x9e6>
   17384:	2301      	movs	r3, #1
   17386:	f000 bc38 	b.w	17bfa <f_mkfs+0x1256>
			/* Extended bootstrap record (+1..+8) */
			mem_set(buf, 0, ss);
   1738a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   1738e:	461a      	mov	r2, r3
   17390:	2100      	movs	r1, #0
   17392:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17394:	f7fb fa69 	bl	1286a <mem_set>
			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
   17398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   1739c:	3b02      	subs	r3, #2
   1739e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   173a0:	4413      	add	r3, r2
   173a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
   173a6:	4618      	mov	r0, r3
   173a8:	f7fb f970 	bl	1268c <st_word>
			for (j = 1; j < 9; j++) {
   173ac:	2301      	movs	r3, #1
   173ae:	663b      	str	r3, [r7, #96]	; 0x60
   173b0:	e026      	b.n	17400 <f_mkfs+0xa5c>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
   173b2:	2300      	movs	r3, #0
   173b4:	67bb      	str	r3, [r7, #120]	; 0x78
   173b6:	e00a      	b.n	173ce <f_mkfs+0xa2a>
   173b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   173ba:	1c5a      	adds	r2, r3, #1
   173bc:	67ba      	str	r2, [r7, #120]	; 0x78
   173be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   173c0:	4413      	add	r3, r2
   173c2:	781b      	ldrb	r3, [r3, #0]
   173c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
   173c6:	4618      	mov	r0, r3
   173c8:	f7fc fe67 	bl	1409a <xsum32>
   173cc:	6738      	str	r0, [r7, #112]	; 0x70
   173ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   173d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
   173d4:	429a      	cmp	r2, r3
   173d6:	d3ef      	bcc.n	173b8 <f_mkfs+0xa14>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   173d8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   173dc:	1c53      	adds	r3, r2, #1
   173de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   173e2:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   173e6:	2301      	movs	r3, #1
   173e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   173ea:	f7fa ff4f 	bl	1228c <disk_write>
   173ee:	4603      	mov	r3, r0
   173f0:	2b00      	cmp	r3, #0
   173f2:	d002      	beq.n	173fa <f_mkfs+0xa56>
   173f4:	2301      	movs	r3, #1
   173f6:	f000 bc00 	b.w	17bfa <f_mkfs+0x1256>
			for (j = 1; j < 9; j++) {
   173fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   173fc:	3301      	adds	r3, #1
   173fe:	663b      	str	r3, [r7, #96]	; 0x60
   17400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   17402:	2b08      	cmp	r3, #8
   17404:	d9d5      	bls.n	173b2 <f_mkfs+0xa0e>
			}
			/* OEM/Reserved record (+9..+10) */
			mem_set(buf, 0, ss);
   17406:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   1740a:	461a      	mov	r2, r3
   1740c:	2100      	movs	r1, #0
   1740e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17410:	f7fb fa2b 	bl	1286a <mem_set>
			for ( ; j < 11; j++) {
   17414:	e025      	b.n	17462 <f_mkfs+0xabe>
				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
   17416:	2300      	movs	r3, #0
   17418:	67bb      	str	r3, [r7, #120]	; 0x78
   1741a:	e00a      	b.n	17432 <f_mkfs+0xa8e>
   1741c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1741e:	1c5a      	adds	r2, r3, #1
   17420:	67ba      	str	r2, [r7, #120]	; 0x78
   17422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17424:	4413      	add	r3, r2
   17426:	781b      	ldrb	r3, [r3, #0]
   17428:	6f39      	ldr	r1, [r7, #112]	; 0x70
   1742a:	4618      	mov	r0, r3
   1742c:	f7fc fe35 	bl	1409a <xsum32>
   17430:	6738      	str	r0, [r7, #112]	; 0x70
   17432:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17436:	6fba      	ldr	r2, [r7, #120]	; 0x78
   17438:	429a      	cmp	r2, r3
   1743a:	d3ef      	bcc.n	1741c <f_mkfs+0xa78>
				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   1743c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   17440:	1c53      	adds	r3, r2, #1
   17442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   17446:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   1744a:	2301      	movs	r3, #1
   1744c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1744e:	f7fa ff1d 	bl	1228c <disk_write>
   17452:	4603      	mov	r3, r0
   17454:	2b00      	cmp	r3, #0
   17456:	d001      	beq.n	1745c <f_mkfs+0xab8>
   17458:	2301      	movs	r3, #1
   1745a:	e3ce      	b.n	17bfa <f_mkfs+0x1256>
			for ( ; j < 11; j++) {
   1745c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1745e:	3301      	adds	r3, #1
   17460:	663b      	str	r3, [r7, #96]	; 0x60
   17462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   17464:	2b0a      	cmp	r3, #10
   17466:	d9d6      	bls.n	17416 <f_mkfs+0xa72>
			}
			/* Sum record (+11) */
			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
   17468:	2300      	movs	r3, #0
   1746a:	67bb      	str	r3, [r7, #120]	; 0x78
   1746c:	e009      	b.n	17482 <f_mkfs+0xade>
   1746e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17472:	4413      	add	r3, r2
   17474:	6f39      	ldr	r1, [r7, #112]	; 0x70
   17476:	4618      	mov	r0, r3
   17478:	f7fb f923 	bl	126c2 <st_dword>
   1747c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1747e:	3304      	adds	r3, #4
   17480:	67bb      	str	r3, [r7, #120]	; 0x78
   17482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17486:	6fba      	ldr	r2, [r7, #120]	; 0x78
   17488:	429a      	cmp	r2, r3
   1748a:	d3f0      	bcc.n	1746e <f_mkfs+0xaca>
			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   1748c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   17490:	1c53      	adds	r3, r2, #1
   17492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   17496:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   1749a:	2301      	movs	r3, #1
   1749c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1749e:	f7fa fef5 	bl	1228c <disk_write>
   174a2:	4603      	mov	r3, r0
   174a4:	2b00      	cmp	r3, #0
   174a6:	d001      	beq.n	174ac <f_mkfs+0xb08>
   174a8:	2301      	movs	r3, #1
   174aa:	e3a6      	b.n	17bfa <f_mkfs+0x1256>
		for (n = 0; n < 2; n++) {
   174ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   174b0:	3301      	adds	r3, #1
   174b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   174b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   174ba:	2b01      	cmp	r3, #1
   174bc:	f67f ae97 	bls.w	171ee <f_mkfs+0x84a>
   174c0:	e350      	b.n	17b64 <f_mkfs+0x11c0>

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
   174c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   174c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
   174c8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   174cc:	2b03      	cmp	r3, #3
   174ce:	d14a      	bne.n	17566 <f_mkfs+0xbc2>
				if (pau == 0) {	/* AU auto-selection */
   174d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   174d4:	2b00      	cmp	r3, #0
   174d6:	d122      	bne.n	1751e <f_mkfs+0xb7a>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
   174d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   174da:	0c5b      	lsrs	r3, r3, #17
   174dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   174e0:	2300      	movs	r3, #0
   174e2:	67bb      	str	r3, [r7, #120]	; 0x78
   174e4:	2301      	movs	r3, #1
   174e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   174ea:	e009      	b.n	17500 <f_mkfs+0xb5c>
   174ec:	0001a17c 	.word	0x0001a17c
   174f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   174f2:	3301      	adds	r3, #1
   174f4:	67bb      	str	r3, [r7, #120]	; 0x78
   174f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   174fa:	005b      	lsls	r3, r3, #1
   174fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   17500:	4ab1      	ldr	r2, [pc, #708]	; (177c8 <f_mkfs+0xe24>)
   17502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   17508:	2b00      	cmp	r3, #0
   1750a:	d008      	beq.n	1751e <f_mkfs+0xb7a>
   1750c:	4aae      	ldr	r2, [pc, #696]	; (177c8 <f_mkfs+0xe24>)
   1750e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   17514:	461a      	mov	r2, r3
   17516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1751a:	4293      	cmp	r3, r2
   1751c:	d2e8      	bcs.n	174f0 <f_mkfs+0xb4c>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
   1751e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17520:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   17524:	fbb2 f3f3 	udiv	r3, r2, r3
   17528:	637b      	str	r3, [r7, #52]	; 0x34
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
   1752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1752c:	3302      	adds	r3, #2
   1752e:	009a      	lsls	r2, r3, #2
   17530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17534:	4413      	add	r3, r2
   17536:	1e5a      	subs	r2, r3, #1
   17538:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   1753c:	fbb2 f3f3 	udiv	r3, r2, r3
   17540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sz_rsv = 32;	/* Number of reserved sectors */
   17544:	2320      	movs	r3, #32
   17546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				sz_dir = 0;		/* No static directory */
   1754a:	2300      	movs	r3, #0
   1754c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
   17550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17552:	f64f 72f5 	movw	r2, #65525	; 0xfff5
   17556:	4293      	cmp	r3, r2
   17558:	d903      	bls.n	17562 <f_mkfs+0xbbe>
   1755a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1755c:	4a9b      	ldr	r2, [pc, #620]	; (177cc <f_mkfs+0xe28>)
   1755e:	4293      	cmp	r3, r2
   17560:	d95a      	bls.n	17618 <f_mkfs+0xc74>
   17562:	230e      	movs	r3, #14
   17564:	e349      	b.n	17bfa <f_mkfs+0x1256>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
   17566:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1756a:	2b00      	cmp	r3, #0
   1756c:	d120      	bne.n	175b0 <f_mkfs+0xc0c>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
   1756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17570:	0b1b      	lsrs	r3, r3, #12
   17572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
   17576:	2300      	movs	r3, #0
   17578:	67bb      	str	r3, [r7, #120]	; 0x78
   1757a:	2301      	movs	r3, #1
   1757c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   17580:	e007      	b.n	17592 <f_mkfs+0xbee>
   17582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17584:	3301      	adds	r3, #1
   17586:	67bb      	str	r3, [r7, #120]	; 0x78
   17588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1758c:	005b      	lsls	r3, r3, #1
   1758e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   17592:	4a8f      	ldr	r2, [pc, #572]	; (177d0 <f_mkfs+0xe2c>)
   17594:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d008      	beq.n	175b0 <f_mkfs+0xc0c>
   1759e:	4a8c      	ldr	r2, [pc, #560]	; (177d0 <f_mkfs+0xe2c>)
   175a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   175a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   175a6:	461a      	mov	r2, r3
   175a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   175ac:	4293      	cmp	r3, r2
   175ae:	d2e8      	bcs.n	17582 <f_mkfs+0xbde>
				}
				n_clst = (DWORD)sz_vol / pau;
   175b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   175b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   175b6:	fbb2 f3f3 	udiv	r3, r2, r3
   175ba:	637b      	str	r3, [r7, #52]	; 0x34
				if (n_clst > MAX_FAT12) {
   175bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   175be:	f640 72f5 	movw	r2, #4085	; 0xff5
   175c2:	4293      	cmp	r3, r2
   175c4:	d905      	bls.n	175d2 <f_mkfs+0xc2e>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
   175c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   175c8:	3302      	adds	r3, #2
   175ca:	005b      	lsls	r3, r3, #1
   175cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   175d0:	e00b      	b.n	175ea <f_mkfs+0xc46>
				} else {
					fsty = FS_FAT12;
   175d2:	2301      	movs	r3, #1
   175d4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
   175d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   175da:	4613      	mov	r3, r2
   175dc:	005b      	lsls	r3, r3, #1
   175de:	4413      	add	r3, r2
   175e0:	3301      	adds	r3, #1
   175e2:	085b      	lsrs	r3, r3, #1
   175e4:	3303      	adds	r3, #3
   175e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
   175ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   175ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   175f2:	4413      	add	r3, r2
   175f4:	1e5a      	subs	r2, r3, #1
   175f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   175fa:	fbb2 f3f3 	udiv	r3, r2, r3
   175fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sz_rsv = 1;						/* Number of reserved sectors */
   17602:	2301      	movs	r3, #1
   17604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
   17608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1760a:	015a      	lsls	r2, r3, #5
   1760c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17610:	fbb2 f3f3 	udiv	r3, r2, r3
   17614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
   17618:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   1761c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   17620:	4413      	add	r3, r2
   17622:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
   17626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1762a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1762c:	fb02 f203 	mul.w	r2, r2, r3
   17630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   17634:	4413      	add	r3, r2
   17636:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   1763a:	4413      	add	r3, r2
   1763c:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
   1763e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17642:	4413      	add	r3, r2
   17644:	1e5a      	subs	r2, r3, #1
   17646:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17648:	425b      	negs	r3, r3
   1764a:	401a      	ands	r2, r3
   1764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1764e:	1ad3      	subs	r3, r2, r3
   17650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
   17654:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17658:	2b03      	cmp	r3, #3
   1765a:	d10e      	bne.n	1767a <f_mkfs+0xcd6>
				sz_rsv += n; b_fat += n;
   1765c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   17660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17664:	4413      	add	r3, r2
   17666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   1766a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
   1766e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17672:	4413      	add	r3, r2
   17674:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   17678:	e023      	b.n	176c2 <f_mkfs+0xd1e>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
   1767a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1767e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17680:	fbb3 f2f2 	udiv	r2, r3, r2
   17684:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   17686:	fb01 f202 	mul.w	r2, r1, r2
   1768a:	1a9b      	subs	r3, r3, r2
   1768c:	2b00      	cmp	r3, #0
   1768e:	d00e      	beq.n	176ae <f_mkfs+0xd0a>
					n--; sz_rsv++; b_fat++;
   17690:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17694:	3b01      	subs	r3, #1
   17696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1769a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1769e:	3301      	adds	r3, #1
   176a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   176a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   176a8:	3301      	adds	r3, #1
   176aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				}
				sz_fat += n / n_fat;
   176ae:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   176b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   176b4:	fbb2 f3f3 	udiv	r3, r2, r3
   176b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   176bc:	4413      	add	r3, r2
   176be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
   176c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   176c6:	011a      	lsls	r2, r3, #4
   176c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   176ca:	441a      	add	r2, r3
   176cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   176d0:	1ad2      	subs	r2, r2, r3
   176d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176d4:	429a      	cmp	r2, r3
   176d6:	d901      	bls.n	176dc <f_mkfs+0xd38>
   176d8:	230e      	movs	r3, #14
   176da:	e28e      	b.n	17bfa <f_mkfs+0x1256>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
   176dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   176de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   176e2:	1ad2      	subs	r2, r2, r3
   176e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   176e8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   176ea:	fb01 f303 	mul.w	r3, r1, r3
   176ee:	1ad2      	subs	r2, r2, r3
   176f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   176f4:	1ad2      	subs	r2, r2, r3
   176f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   176fa:	fbb2 f3f3 	udiv	r3, r2, r3
   176fe:	637b      	str	r3, [r7, #52]	; 0x34
			if (fsty == FS_FAT32) {
   17700:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17704:	2b03      	cmp	r3, #3
   17706:	d110      	bne.n	1772a <f_mkfs+0xd86>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
   17708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1770a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
   1770e:	4293      	cmp	r3, r2
   17710:	d80b      	bhi.n	1772a <f_mkfs+0xd86>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   17712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17714:	2b00      	cmp	r3, #0
   17716:	d106      	bne.n	17726 <f_mkfs+0xd82>
   17718:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1771c:	085b      	lsrs	r3, r3, #1
   1771e:	67fb      	str	r3, [r7, #124]	; 0x7c
   17720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   17722:	2b00      	cmp	r3, #0
   17724:	d149      	bne.n	177ba <f_mkfs+0xe16>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   17726:	230e      	movs	r3, #14
   17728:	e267      	b.n	17bfa <f_mkfs+0x1256>
				}
			}
			if (fsty == FS_FAT16) {
   1772a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   1772e:	2b02      	cmp	r3, #2
   17730:	d138      	bne.n	177a4 <f_mkfs+0xe00>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
   17732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17734:	f64f 72f5 	movw	r2, #65525	; 0xfff5
   17738:	4293      	cmp	r3, r2
   1773a:	d922      	bls.n	17782 <f_mkfs+0xdde>
					if (sz_au == 0 && (pau * 2) <= 64) {
   1773c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1773e:	2b00      	cmp	r3, #0
   17740:	d109      	bne.n	17756 <f_mkfs+0xdb2>
   17742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   17746:	005b      	lsls	r3, r3, #1
   17748:	2b40      	cmp	r3, #64	; 0x40
   1774a:	d804      	bhi.n	17756 <f_mkfs+0xdb2>
						sz_au = pau * 2; continue;		/* Adjust cluster size and retry */
   1774c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   17750:	005b      	lsls	r3, r3, #1
   17752:	67fb      	str	r3, [r7, #124]	; 0x7c
   17754:	e036      	b.n	177c4 <f_mkfs+0xe20>
					}
					if ((fsopt & FM_FAT32)) {
   17756:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   1775a:	f003 0302 	and.w	r3, r3, #2
   1775e:	2b00      	cmp	r3, #0
   17760:	d003      	beq.n	1776a <f_mkfs+0xdc6>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
   17762:	2303      	movs	r3, #3
   17764:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
   17768:	e02c      	b.n	177c4 <f_mkfs+0xe20>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   1776a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1776c:	2b00      	cmp	r3, #0
   1776e:	d106      	bne.n	1777e <f_mkfs+0xdda>
   17770:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   17774:	005b      	lsls	r3, r3, #1
   17776:	67fb      	str	r3, [r7, #124]	; 0x7c
   17778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1777a:	2b80      	cmp	r3, #128	; 0x80
   1777c:	d91f      	bls.n	177be <f_mkfs+0xe1a>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   1777e:	230e      	movs	r3, #14
   17780:	e23b      	b.n	17bfa <f_mkfs+0x1256>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
   17782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17784:	f640 72f5 	movw	r2, #4085	; 0xff5
   17788:	4293      	cmp	r3, r2
   1778a:	d80b      	bhi.n	177a4 <f_mkfs+0xe00>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   1778c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1778e:	2b00      	cmp	r3, #0
   17790:	d106      	bne.n	177a0 <f_mkfs+0xdfc>
   17792:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   17796:	005b      	lsls	r3, r3, #1
   17798:	67fb      	str	r3, [r7, #124]	; 0x7c
   1779a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1779c:	2b80      	cmp	r3, #128	; 0x80
   1779e:	d910      	bls.n	177c2 <f_mkfs+0xe1e>
					LEAVE_MKFS(FR_MKFS_ABORTED);
   177a0:	230e      	movs	r3, #14
   177a2:	e22a      	b.n	17bfa <f_mkfs+0x1256>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
   177a4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   177a8:	2b01      	cmp	r3, #1
   177aa:	d113      	bne.n	177d4 <f_mkfs+0xe30>
   177ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   177ae:	f640 72f5 	movw	r2, #4085	; 0xff5
   177b2:	4293      	cmp	r3, r2
   177b4:	d90e      	bls.n	177d4 <f_mkfs+0xe30>
   177b6:	230e      	movs	r3, #14
   177b8:	e21f      	b.n	17bfa <f_mkfs+0x1256>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
   177ba:	bf00      	nop
   177bc:	e681      	b.n	174c2 <f_mkfs+0xb1e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   177be:	bf00      	nop
   177c0:	e67f      	b.n	174c2 <f_mkfs+0xb1e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
   177c2:	bf00      	nop
			pau = sz_au;
   177c4:	e67d      	b.n	174c2 <f_mkfs+0xb1e>
   177c6:	bf00      	nop
   177c8:	0001a1e8 	.word	0x0001a1e8
   177cc:	0ffffff5 	.word	0x0ffffff5
   177d0:	0001a1f8 	.word	0x0001a1f8

			/* Ok, it is the valid cluster configuration */
			break;
   177d4:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
   177d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   177da:	461a      	mov	r2, r3
   177dc:	2100      	movs	r1, #0
   177de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   177e0:	f7fb f843 	bl	1286a <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
   177e4:	220b      	movs	r2, #11
   177e6:	49c3      	ldr	r1, [pc, #780]	; (17af4 <f_mkfs+0x1150>)
   177e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   177ea:	f7fb f81d 	bl	12828 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
   177ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   177f0:	330b      	adds	r3, #11
   177f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
   177f6:	4611      	mov	r1, r2
   177f8:	4618      	mov	r0, r3
   177fa:	f7fa ff47 	bl	1268c <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
   177fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17800:	330d      	adds	r3, #13
   17802:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
   17806:	b2d2      	uxtb	r2, r2
   17808:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
   1780a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1780c:	330e      	adds	r3, #14
   1780e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   17812:	b292      	uxth	r2, r2
   17814:	4611      	mov	r1, r2
   17816:	4618      	mov	r0, r3
   17818:	f7fa ff38 	bl	1268c <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
   1781c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1781e:	3310      	adds	r3, #16
   17820:	6cba      	ldr	r2, [r7, #72]	; 0x48
   17822:	b2d2      	uxtb	r2, r2
   17824:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
   17826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17828:	f103 0211 	add.w	r2, r3, #17
   1782c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17830:	2b03      	cmp	r3, #3
   17832:	d002      	beq.n	1783a <f_mkfs+0xe96>
   17834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17836:	b29b      	uxth	r3, r3
   17838:	e000      	b.n	1783c <f_mkfs+0xe98>
   1783a:	2300      	movs	r3, #0
   1783c:	4619      	mov	r1, r3
   1783e:	4610      	mov	r0, r2
   17840:	f7fa ff24 	bl	1268c <st_word>
		if (sz_vol < 0x10000) {
   17844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1784a:	d208      	bcs.n	1785e <f_mkfs+0xeba>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
   1784c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1784e:	3313      	adds	r3, #19
   17850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17852:	b292      	uxth	r2, r2
   17854:	4611      	mov	r1, r2
   17856:	4618      	mov	r0, r3
   17858:	f7fa ff18 	bl	1268c <st_word>
   1785c:	e006      	b.n	1786c <f_mkfs+0xec8>
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
   1785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17860:	3320      	adds	r3, #32
   17862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   17864:	4611      	mov	r1, r2
   17866:	4618      	mov	r0, r3
   17868:	f7fa ff2b 	bl	126c2 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
   1786c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1786e:	3315      	adds	r3, #21
   17870:	22f8      	movs	r2, #248	; 0xf8
   17872:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
   17874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17876:	3318      	adds	r3, #24
   17878:	213f      	movs	r1, #63	; 0x3f
   1787a:	4618      	mov	r0, r3
   1787c:	f7fa ff06 	bl	1268c <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
   17880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17882:	331a      	adds	r3, #26
   17884:	21ff      	movs	r1, #255	; 0xff
   17886:	4618      	mov	r0, r3
   17888:	f7fa ff00 	bl	1268c <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
   1788c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1788e:	331c      	adds	r3, #28
   17890:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   17894:	4618      	mov	r0, r3
   17896:	f7fa ff14 	bl	126c2 <st_dword>
		if (fsty == FS_FAT32) {
   1789a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   1789e:	2b03      	cmp	r3, #3
   178a0:	d132      	bne.n	17908 <f_mkfs+0xf64>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
   178a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178a4:	f103 0443 	add.w	r4, r3, #67	; 0x43
   178a8:	f7fa fdee 	bl	12488 <get_fattime>
   178ac:	4603      	mov	r3, r0
   178ae:	4619      	mov	r1, r3
   178b0:	4620      	mov	r0, r4
   178b2:	f7fa ff06 	bl	126c2 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
   178b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178b8:	3324      	adds	r3, #36	; 0x24
   178ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
   178be:	4618      	mov	r0, r3
   178c0:	f7fa feff 	bl	126c2 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
   178c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178c6:	332c      	adds	r3, #44	; 0x2c
   178c8:	2102      	movs	r1, #2
   178ca:	4618      	mov	r0, r3
   178cc:	f7fa fef9 	bl	126c2 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
   178d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178d2:	3330      	adds	r3, #48	; 0x30
   178d4:	2101      	movs	r1, #1
   178d6:	4618      	mov	r0, r3
   178d8:	f7fa fed8 	bl	1268c <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
   178dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178de:	3332      	adds	r3, #50	; 0x32
   178e0:	2106      	movs	r1, #6
   178e2:	4618      	mov	r0, r3
   178e4:	f7fa fed2 	bl	1268c <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
   178e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178ea:	3340      	adds	r3, #64	; 0x40
   178ec:	2280      	movs	r2, #128	; 0x80
   178ee:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
   178f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178f2:	3342      	adds	r3, #66	; 0x42
   178f4:	2229      	movs	r2, #41	; 0x29
   178f6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   178f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   178fa:	3347      	adds	r3, #71	; 0x47
   178fc:	2213      	movs	r2, #19
   178fe:	497e      	ldr	r1, [pc, #504]	; (17af8 <f_mkfs+0x1154>)
   17900:	4618      	mov	r0, r3
   17902:	f7fa ff91 	bl	12828 <mem_cpy>
   17906:	e021      	b.n	1794c <f_mkfs+0xfa8>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
   17908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1790a:	f103 0427 	add.w	r4, r3, #39	; 0x27
   1790e:	f7fa fdbb 	bl	12488 <get_fattime>
   17912:	4603      	mov	r3, r0
   17914:	4619      	mov	r1, r3
   17916:	4620      	mov	r0, r4
   17918:	f7fa fed3 	bl	126c2 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
   1791c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1791e:	3316      	adds	r3, #22
   17920:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   17924:	b292      	uxth	r2, r2
   17926:	4611      	mov	r1, r2
   17928:	4618      	mov	r0, r3
   1792a:	f7fa feaf 	bl	1268c <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
   1792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17930:	3324      	adds	r3, #36	; 0x24
   17932:	2280      	movs	r2, #128	; 0x80
   17934:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
   17936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17938:	3326      	adds	r3, #38	; 0x26
   1793a:	2229      	movs	r2, #41	; 0x29
   1793c:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   1793e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17940:	332b      	adds	r3, #43	; 0x2b
   17942:	2213      	movs	r2, #19
   17944:	496d      	ldr	r1, [pc, #436]	; (17afc <f_mkfs+0x1158>)
   17946:	4618      	mov	r0, r3
   17948:	f7fa ff6e 	bl	12828 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
   1794c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1794e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
   17952:	f64a 2155 	movw	r1, #43605	; 0xaa55
   17956:	4618      	mov	r0, r3
   17958:	f7fa fe98 	bl	1268c <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
   1795c:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17960:	2301      	movs	r3, #1
   17962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   17966:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17968:	f7fa fc90 	bl	1228c <disk_write>
   1796c:	4603      	mov	r3, r0
   1796e:	2b00      	cmp	r3, #0
   17970:	d001      	beq.n	17976 <f_mkfs+0xfd2>
   17972:	2301      	movs	r3, #1
   17974:	e141      	b.n	17bfa <f_mkfs+0x1256>
		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
   17976:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   1797a:	2b03      	cmp	r3, #3
   1797c:	d144      	bne.n	17a08 <f_mkfs+0x1064>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
   1797e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   17982:	1d9a      	adds	r2, r3, #6
   17984:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17988:	2301      	movs	r3, #1
   1798a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1798c:	f7fa fc7e 	bl	1228c <disk_write>
			mem_set(buf, 0, ss);
   17990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17994:	461a      	mov	r2, r3
   17996:	2100      	movs	r1, #0
   17998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1799a:	f7fa ff66 	bl	1286a <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
   1799e:	4958      	ldr	r1, [pc, #352]	; (17b00 <f_mkfs+0x115c>)
   179a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   179a2:	f7fa fe8e 	bl	126c2 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
   179a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179a8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
   179ac:	4955      	ldr	r1, [pc, #340]	; (17b04 <f_mkfs+0x1160>)
   179ae:	4618      	mov	r0, r3
   179b0:	f7fa fe87 	bl	126c2 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
   179b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179b6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
   179ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   179bc:	3b01      	subs	r3, #1
   179be:	4619      	mov	r1, r3
   179c0:	4610      	mov	r0, r2
   179c2:	f7fa fe7e 	bl	126c2 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
   179c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
   179cc:	2102      	movs	r1, #2
   179ce:	4618      	mov	r0, r3
   179d0:	f7fa fe77 	bl	126c2 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
   179d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   179d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
   179da:	f64a 2155 	movw	r1, #43605	; 0xaa55
   179de:	4618      	mov	r0, r3
   179e0:	f7fa fe54 	bl	1268c <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
   179e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   179e8:	1dda      	adds	r2, r3, #7
   179ea:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   179ee:	2301      	movs	r3, #1
   179f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   179f2:	f7fa fc4b 	bl	1228c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
   179f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   179fa:	1c5a      	adds	r2, r3, #1
   179fc:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17a00:	2301      	movs	r3, #1
   17a02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17a04:	f7fa fc42 	bl	1228c <disk_write>
		}
		/* Initialize FAT area */
		mem_set(buf, 0, sz_buf * ss);
   17a08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17a0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17a0e:	fb02 f303 	mul.w	r3, r2, r3
   17a12:	461a      	mov	r2, r3
   17a14:	2100      	movs	r1, #0
   17a16:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17a18:	f7fa ff27 	bl	1286a <mem_set>
		sect = b_fat;		/* FAT start sector */
   17a1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   17a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   17a24:	2300      	movs	r3, #0
   17a26:	67bb      	str	r3, [r7, #120]	; 0x78
   17a28:	e059      	b.n	17ade <f_mkfs+0x113a>
			if (fsty == FS_FAT32) {
   17a2a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17a2e:	2b03      	cmp	r3, #3
   17a30:	d113      	bne.n	17a5a <f_mkfs+0x10b6>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
   17a32:	f06f 0107 	mvn.w	r1, #7
   17a36:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17a38:	f7fa fe43 	bl	126c2 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
   17a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a3e:	3304      	adds	r3, #4
   17a40:	f04f 31ff 	mov.w	r1, #4294967295
   17a44:	4618      	mov	r0, r3
   17a46:	f7fa fe3c 	bl	126c2 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
   17a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17a4c:	3308      	adds	r3, #8
   17a4e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
   17a52:	4618      	mov	r0, r3
   17a54:	f7fa fe35 	bl	126c2 <st_dword>
   17a58:	e00b      	b.n	17a72 <f_mkfs+0x10ce>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
   17a5a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17a5e:	2b01      	cmp	r3, #1
   17a60:	d101      	bne.n	17a66 <f_mkfs+0x10c2>
   17a62:	4b29      	ldr	r3, [pc, #164]	; (17b08 <f_mkfs+0x1164>)
   17a64:	e001      	b.n	17a6a <f_mkfs+0x10c6>
   17a66:	f06f 0307 	mvn.w	r3, #7
   17a6a:	4619      	mov	r1, r3
   17a6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17a6e:	f7fa fe28 	bl	126c2 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
   17a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   17a76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
   17a7a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   17a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17a80:	4293      	cmp	r3, r2
   17a82:	bf28      	it	cs
   17a84:	4613      	movcs	r3, r2
   17a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   17a8a:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17a8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17a92:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   17a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17a98:	f7fa fbf8 	bl	1228c <disk_write>
   17a9c:	4603      	mov	r3, r0
   17a9e:	2b00      	cmp	r3, #0
   17aa0:	d001      	beq.n	17aa6 <f_mkfs+0x1102>
   17aa2:	2301      	movs	r3, #1
   17aa4:	e0a9      	b.n	17bfa <f_mkfs+0x1256>
				mem_set(buf, 0, ss);	/* Rest of FAT all are cleared */
   17aa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
   17aaa:	461a      	mov	r2, r3
   17aac:	2100      	movs	r1, #0
   17aae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17ab0:	f7fa fedb 	bl	1286a <mem_set>
				sect += n; nsect -= n;
   17ab4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   17ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17abc:	4413      	add	r3, r2
   17abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   17ac2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   17ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17aca:	1ad3      	subs	r3, r2, r3
   17acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			} while (nsect);
   17ad0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   17ad4:	2b00      	cmp	r3, #0
   17ad6:	d1d0      	bne.n	17a7a <f_mkfs+0x10d6>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
   17ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   17ada:	3301      	adds	r3, #1
   17adc:	67bb      	str	r3, [r7, #120]	; 0x78
   17ade:	6fba      	ldr	r2, [r7, #120]	; 0x78
   17ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17ae2:	429a      	cmp	r2, r3
   17ae4:	d3a1      	bcc.n	17a2a <f_mkfs+0x1086>
		}
		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
   17ae6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17aea:	2b03      	cmp	r3, #3
   17aec:	d10e      	bne.n	17b0c <f_mkfs+0x1168>
   17aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   17af2:	e00d      	b.n	17b10 <f_mkfs+0x116c>
   17af4:	0001a194 	.word	0x0001a194
   17af8:	0001a1a0 	.word	0x0001a1a0
   17afc:	0001a1b4 	.word	0x0001a1b4
   17b00:	41615252 	.word	0x41615252
   17b04:	61417272 	.word	0x61417272
   17b08:	00fffff8 	.word	0x00fffff8
   17b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   17b10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
   17b14:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   17b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17b1a:	4293      	cmp	r3, r2
   17b1c:	bf28      	it	cs
   17b1e:	4613      	movcs	r3, r2
   17b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   17b24:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17b2c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   17b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17b32:	f7fa fbab 	bl	1228c <disk_write>
   17b36:	4603      	mov	r3, r0
   17b38:	2b00      	cmp	r3, #0
   17b3a:	d001      	beq.n	17b40 <f_mkfs+0x119c>
   17b3c:	2301      	movs	r3, #1
   17b3e:	e05c      	b.n	17bfa <f_mkfs+0x1256>
			sect += n; nsect -= n;
   17b40:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   17b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17b48:	4413      	add	r3, r2
   17b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   17b4e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   17b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   17b56:	1ad3      	subs	r3, r2, r3
   17b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		} while (nsect);
   17b5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   17b60:	2b00      	cmp	r3, #0
   17b62:	d1d7      	bne.n	17b14 <f_mkfs+0x1170>
	}

	/* A FAT volume has been created here */
	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
   17b64:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17b68:	2b04      	cmp	r3, #4
   17b6a:	d103      	bne.n	17b74 <f_mkfs+0x11d0>
		sys = 0x07;			/* exFAT */
   17b6c:	2307      	movs	r3, #7
   17b6e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
   17b72:	e018      	b.n	17ba6 <f_mkfs+0x1202>
	} else {
		if (fsty == FS_FAT32) {
   17b74:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17b78:	2b03      	cmp	r3, #3
   17b7a:	d103      	bne.n	17b84 <f_mkfs+0x11e0>
			sys = 0x0C;		/* FAT32X */
   17b7c:	230c      	movs	r3, #12
   17b7e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
   17b82:	e010      	b.n	17ba6 <f_mkfs+0x1202>
		} else {
			if (sz_vol >= 0x10000) {
   17b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17b8a:	d303      	bcc.n	17b94 <f_mkfs+0x11f0>
				sys = 0x06;	/* FAT12/16 (large) */
   17b8c:	2306      	movs	r3, #6
   17b8e:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
   17b92:	e008      	b.n	17ba6 <f_mkfs+0x1202>
			} else {
				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
   17b94:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   17b98:	2b02      	cmp	r3, #2
   17b9a:	d101      	bne.n	17ba0 <f_mkfs+0x11fc>
   17b9c:	2304      	movs	r3, #4
   17b9e:	e000      	b.n	17ba2 <f_mkfs+0x11fe>
   17ba0:	2301      	movs	r3, #1
   17ba2:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {	/* Create partition table if not in SFD */
   17ba6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
   17baa:	f003 0308 	and.w	r3, r3, #8
   17bae:	2b00      	cmp	r3, #0
   17bb0:	d116      	bne.n	17be0 <f_mkfs+0x123c>
			lba[0] = sz_vol, lba[1] = 0;
   17bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17bb4:	61fb      	str	r3, [r7, #28]
   17bb6:	2300      	movs	r3, #0
   17bb8:	623b      	str	r3, [r7, #32]
			fr = create_partition(pdrv, lba, sys, buf);
   17bba:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
   17bbe:	f107 011c 	add.w	r1, r7, #28
   17bc2:	f897 0053 	ldrb.w	r0, [r7, #83]	; 0x53
   17bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17bc8:	f7fe fdc8 	bl	1675c <create_partition>
   17bcc:	4603      	mov	r3, r0
   17bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (fr != FR_OK) LEAVE_MKFS(fr);
   17bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   17bd6:	2b00      	cmp	r3, #0
   17bd8:	d002      	beq.n	17be0 <f_mkfs+0x123c>
   17bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   17bde:	e00c      	b.n	17bfa <f_mkfs+0x1256>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
   17be0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
   17be4:	2200      	movs	r2, #0
   17be6:	2100      	movs	r1, #0
   17be8:	4618      	mov	r0, r3
   17bea:	f7fa fb8f 	bl	1230c <disk_ioctl>
   17bee:	4603      	mov	r3, r0
   17bf0:	2b00      	cmp	r3, #0
   17bf2:	d001      	beq.n	17bf8 <f_mkfs+0x1254>
   17bf4:	2301      	movs	r3, #1
   17bf6:	e000      	b.n	17bfa <f_mkfs+0x1256>

	LEAVE_MKFS(FR_OK);
   17bf8:	2300      	movs	r3, #0
}
   17bfa:	4618      	mov	r0, r3
   17bfc:	37ac      	adds	r7, #172	; 0xac
   17bfe:	46bd      	mov	sp, r7
   17c00:	bd90      	pop	{r4, r7, pc}
   17c02:	bf00      	nop

00017c04 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
   17c04:	b480      	push	{r7}
   17c06:	b08b      	sub	sp, #44	; 0x2c
   17c08:	af00      	add	r7, sp, #0
   17c0a:	6078      	str	r0, [r7, #4]
   17c0c:	460b      	mov	r3, r1
   17c0e:	807b      	strh	r3, [r7, #2]
	const WCHAR *p;
	WCHAR c = 0, uc;
   17c10:	2300      	movs	r3, #0
   17c12:	84fb      	strh	r3, [r7, #38]	; 0x26
	UINT i = 0, n, li, hi;
   17c14:	2300      	movs	r3, #0
   17c16:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
   17c18:	687b      	ldr	r3, [r7, #4]
   17c1a:	2b7f      	cmp	r3, #127	; 0x7f
   17c1c:	d802      	bhi.n	17c24 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
   17c1e:	687b      	ldr	r3, [r7, #4]
   17c20:	84fb      	strh	r3, [r7, #38]	; 0x26
   17c22:	e041      	b.n	17ca8 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
   17c24:	687b      	ldr	r3, [r7, #4]
   17c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17c2a:	d23d      	bcs.n	17ca8 <ff_uni2oem+0xa4>
   17c2c:	887b      	ldrh	r3, [r7, #2]
   17c2e:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
   17c32:	d139      	bne.n	17ca8 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
   17c34:	687b      	ldr	r3, [r7, #4]
   17c36:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
   17c38:	4b1f      	ldr	r3, [pc, #124]	; (17cb8 <ff_uni2oem+0xb4>)
   17c3a:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
   17c3c:	f641 43dd 	movw	r3, #7389	; 0x1cdd
   17c40:	617b      	str	r3, [r7, #20]
			li = 0;
   17c42:	2300      	movs	r3, #0
   17c44:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
   17c46:	2310      	movs	r3, #16
   17c48:	61fb      	str	r3, [r7, #28]
   17c4a:	e01e      	b.n	17c8a <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
   17c4c:	697a      	ldr	r2, [r7, #20]
   17c4e:	69bb      	ldr	r3, [r7, #24]
   17c50:	1ad3      	subs	r3, r2, r3
   17c52:	085b      	lsrs	r3, r3, #1
   17c54:	69ba      	ldr	r2, [r7, #24]
   17c56:	4413      	add	r3, r2
   17c58:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
   17c5a:	6a3b      	ldr	r3, [r7, #32]
   17c5c:	009b      	lsls	r3, r3, #2
   17c5e:	68fa      	ldr	r2, [r7, #12]
   17c60:	4413      	add	r3, r2
   17c62:	881b      	ldrh	r3, [r3, #0]
   17c64:	8a7a      	ldrh	r2, [r7, #18]
   17c66:	429a      	cmp	r2, r3
   17c68:	d013      	beq.n	17c92 <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
   17c6a:	6a3b      	ldr	r3, [r7, #32]
   17c6c:	009b      	lsls	r3, r3, #2
   17c6e:	68fa      	ldr	r2, [r7, #12]
   17c70:	4413      	add	r3, r2
   17c72:	881b      	ldrh	r3, [r3, #0]
   17c74:	8a7a      	ldrh	r2, [r7, #18]
   17c76:	429a      	cmp	r2, r3
   17c78:	d902      	bls.n	17c80 <ff_uni2oem+0x7c>
					li = i;
   17c7a:	6a3b      	ldr	r3, [r7, #32]
   17c7c:	61bb      	str	r3, [r7, #24]
   17c7e:	e001      	b.n	17c84 <ff_uni2oem+0x80>
				} else {
					hi = i;
   17c80:	6a3b      	ldr	r3, [r7, #32]
   17c82:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
   17c84:	69fb      	ldr	r3, [r7, #28]
   17c86:	3b01      	subs	r3, #1
   17c88:	61fb      	str	r3, [r7, #28]
   17c8a:	69fb      	ldr	r3, [r7, #28]
   17c8c:	2b00      	cmp	r3, #0
   17c8e:	d1dd      	bne.n	17c4c <ff_uni2oem+0x48>
   17c90:	e000      	b.n	17c94 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
   17c92:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
   17c94:	69fb      	ldr	r3, [r7, #28]
   17c96:	2b00      	cmp	r3, #0
   17c98:	d006      	beq.n	17ca8 <ff_uni2oem+0xa4>
   17c9a:	6a3b      	ldr	r3, [r7, #32]
   17c9c:	009b      	lsls	r3, r3, #2
   17c9e:	3302      	adds	r3, #2
   17ca0:	68fa      	ldr	r2, [r7, #12]
   17ca2:	4413      	add	r3, r2
   17ca4:	881b      	ldrh	r3, [r3, #0]
   17ca6:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}

	return c;
   17ca8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
   17caa:	4618      	mov	r0, r3
   17cac:	372c      	adds	r7, #44	; 0x2c
   17cae:	46bd      	mov	sp, r7
   17cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
   17cb4:	4770      	bx	lr
   17cb6:	bf00      	nop
   17cb8:	0001a208 	.word	0x0001a208

00017cbc <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
   17cbc:	b480      	push	{r7}
   17cbe:	b089      	sub	sp, #36	; 0x24
   17cc0:	af00      	add	r7, sp, #0
   17cc2:	4603      	mov	r3, r0
   17cc4:	460a      	mov	r2, r1
   17cc6:	80fb      	strh	r3, [r7, #6]
   17cc8:	4613      	mov	r3, r2
   17cca:	80bb      	strh	r3, [r7, #4]
	const WCHAR *p;
	WCHAR c = 0;
   17ccc:	2300      	movs	r3, #0
   17cce:	83fb      	strh	r3, [r7, #30]
	UINT i = 0, n, li, hi;
   17cd0:	2300      	movs	r3, #0
   17cd2:	61bb      	str	r3, [r7, #24]


	if (oem < 0x80) {	/* ASCII? */
   17cd4:	88fb      	ldrh	r3, [r7, #6]
   17cd6:	2b7f      	cmp	r3, #127	; 0x7f
   17cd8:	d802      	bhi.n	17ce0 <ff_oem2uni+0x24>
		c = oem;
   17cda:	88fb      	ldrh	r3, [r7, #6]
   17cdc:	83fb      	strh	r3, [r7, #30]
   17cde:	e03b      	b.n	17d58 <ff_oem2uni+0x9c>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
   17ce0:	88bb      	ldrh	r3, [r7, #4]
   17ce2:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
   17ce6:	d137      	bne.n	17d58 <ff_oem2uni+0x9c>
			p = CVTBL(oem2uni, FF_CODE_PAGE);
   17ce8:	4b1f      	ldr	r3, [pc, #124]	; (17d68 <ff_oem2uni+0xac>)
   17cea:	60bb      	str	r3, [r7, #8]
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
   17cec:	f641 43dd 	movw	r3, #7389	; 0x1cdd
   17cf0:	60fb      	str	r3, [r7, #12]
			li = 0;
   17cf2:	2300      	movs	r3, #0
   17cf4:	613b      	str	r3, [r7, #16]
			for (n = 16; n; n--) {
   17cf6:	2310      	movs	r3, #16
   17cf8:	617b      	str	r3, [r7, #20]
   17cfa:	e01e      	b.n	17d3a <ff_oem2uni+0x7e>
				i = li + (hi - li) / 2;
   17cfc:	68fa      	ldr	r2, [r7, #12]
   17cfe:	693b      	ldr	r3, [r7, #16]
   17d00:	1ad3      	subs	r3, r2, r3
   17d02:	085b      	lsrs	r3, r3, #1
   17d04:	693a      	ldr	r2, [r7, #16]
   17d06:	4413      	add	r3, r2
   17d08:	61bb      	str	r3, [r7, #24]
				if (oem == p[i * 2]) break;
   17d0a:	69bb      	ldr	r3, [r7, #24]
   17d0c:	009b      	lsls	r3, r3, #2
   17d0e:	68ba      	ldr	r2, [r7, #8]
   17d10:	4413      	add	r3, r2
   17d12:	881b      	ldrh	r3, [r3, #0]
   17d14:	88fa      	ldrh	r2, [r7, #6]
   17d16:	429a      	cmp	r2, r3
   17d18:	d013      	beq.n	17d42 <ff_oem2uni+0x86>
				if (oem > p[i * 2]) {
   17d1a:	69bb      	ldr	r3, [r7, #24]
   17d1c:	009b      	lsls	r3, r3, #2
   17d1e:	68ba      	ldr	r2, [r7, #8]
   17d20:	4413      	add	r3, r2
   17d22:	881b      	ldrh	r3, [r3, #0]
   17d24:	88fa      	ldrh	r2, [r7, #6]
   17d26:	429a      	cmp	r2, r3
   17d28:	d902      	bls.n	17d30 <ff_oem2uni+0x74>
					li = i;
   17d2a:	69bb      	ldr	r3, [r7, #24]
   17d2c:	613b      	str	r3, [r7, #16]
   17d2e:	e001      	b.n	17d34 <ff_oem2uni+0x78>
				} else {
					hi = i;
   17d30:	69bb      	ldr	r3, [r7, #24]
   17d32:	60fb      	str	r3, [r7, #12]
			for (n = 16; n; n--) {
   17d34:	697b      	ldr	r3, [r7, #20]
   17d36:	3b01      	subs	r3, #1
   17d38:	617b      	str	r3, [r7, #20]
   17d3a:	697b      	ldr	r3, [r7, #20]
   17d3c:	2b00      	cmp	r3, #0
   17d3e:	d1dd      	bne.n	17cfc <ff_oem2uni+0x40>
   17d40:	e000      	b.n	17d44 <ff_oem2uni+0x88>
				if (oem == p[i * 2]) break;
   17d42:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
   17d44:	697b      	ldr	r3, [r7, #20]
   17d46:	2b00      	cmp	r3, #0
   17d48:	d006      	beq.n	17d58 <ff_oem2uni+0x9c>
   17d4a:	69bb      	ldr	r3, [r7, #24]
   17d4c:	009b      	lsls	r3, r3, #2
   17d4e:	3302      	adds	r3, #2
   17d50:	68ba      	ldr	r2, [r7, #8]
   17d52:	4413      	add	r3, r2
   17d54:	881b      	ldrh	r3, [r3, #0]
   17d56:	83fb      	strh	r3, [r7, #30]
		}
	}

	return c;
   17d58:	8bfb      	ldrh	r3, [r7, #30]
}
   17d5a:	4618      	mov	r0, r3
   17d5c:	3724      	adds	r7, #36	; 0x24
   17d5e:	46bd      	mov	sp, r7
   17d60:	f85d 7b04 	ldr.w	r7, [sp], #4
   17d64:	4770      	bx	lr
   17d66:	bf00      	nop
   17d68:	00021580 	.word	0x00021580

00017d6c <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
   17d6c:	b480      	push	{r7}
   17d6e:	b087      	sub	sp, #28
   17d70:	af00      	add	r7, sp, #0
   17d72:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
   17d74:	687b      	ldr	r3, [r7, #4]
   17d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   17d7a:	d27d      	bcs.n	17e78 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
   17d7c:	687b      	ldr	r3, [r7, #4]
   17d7e:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
   17d80:	8a7b      	ldrh	r3, [r7, #18]
   17d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   17d86:	d201      	bcs.n	17d8c <ff_wtoupper+0x20>
   17d88:	4b3f      	ldr	r3, [pc, #252]	; (17e88 <ff_wtoupper+0x11c>)
   17d8a:	e000      	b.n	17d8e <ff_wtoupper+0x22>
   17d8c:	4b3f      	ldr	r3, [pc, #252]	; (17e8c <ff_wtoupper+0x120>)
   17d8e:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
   17d90:	697b      	ldr	r3, [r7, #20]
   17d92:	1c9a      	adds	r2, r3, #2
   17d94:	617a      	str	r2, [r7, #20]
   17d96:	881b      	ldrh	r3, [r3, #0]
   17d98:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
   17d9a:	8a3b      	ldrh	r3, [r7, #16]
   17d9c:	2b00      	cmp	r3, #0
   17d9e:	d069      	beq.n	17e74 <ff_wtoupper+0x108>
   17da0:	8a7a      	ldrh	r2, [r7, #18]
   17da2:	8a3b      	ldrh	r3, [r7, #16]
   17da4:	429a      	cmp	r2, r3
   17da6:	d365      	bcc.n	17e74 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
   17da8:	697b      	ldr	r3, [r7, #20]
   17daa:	1c9a      	adds	r2, r3, #2
   17dac:	617a      	str	r2, [r7, #20]
   17dae:	881b      	ldrh	r3, [r3, #0]
   17db0:	81fb      	strh	r3, [r7, #14]
   17db2:	89fb      	ldrh	r3, [r7, #14]
   17db4:	0a1b      	lsrs	r3, r3, #8
   17db6:	81bb      	strh	r3, [r7, #12]
   17db8:	89fb      	ldrh	r3, [r7, #14]
   17dba:	b2db      	uxtb	r3, r3
   17dbc:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
   17dbe:	8a7a      	ldrh	r2, [r7, #18]
   17dc0:	8a39      	ldrh	r1, [r7, #16]
   17dc2:	89fb      	ldrh	r3, [r7, #14]
   17dc4:	440b      	add	r3, r1
   17dc6:	429a      	cmp	r2, r3
   17dc8:	da4a      	bge.n	17e60 <ff_wtoupper+0xf4>
				switch (cmd) {
   17dca:	89bb      	ldrh	r3, [r7, #12]
   17dcc:	2b08      	cmp	r3, #8
   17dce:	d850      	bhi.n	17e72 <ff_wtoupper+0x106>
   17dd0:	a201      	add	r2, pc, #4	; (adr r2, 17dd8 <ff_wtoupper+0x6c>)
   17dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17dd6:	bf00      	nop
   17dd8:	00017dfd 	.word	0x00017dfd
   17ddc:	00017e0f 	.word	0x00017e0f
   17de0:	00017e25 	.word	0x00017e25
   17de4:	00017e2d 	.word	0x00017e2d
   17de8:	00017e35 	.word	0x00017e35
   17dec:	00017e3d 	.word	0x00017e3d
   17df0:	00017e45 	.word	0x00017e45
   17df4:	00017e4d 	.word	0x00017e4d
   17df8:	00017e55 	.word	0x00017e55
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
   17dfc:	8a7a      	ldrh	r2, [r7, #18]
   17dfe:	8a3b      	ldrh	r3, [r7, #16]
   17e00:	1ad3      	subs	r3, r2, r3
   17e02:	005b      	lsls	r3, r3, #1
   17e04:	697a      	ldr	r2, [r7, #20]
   17e06:	4413      	add	r3, r2
   17e08:	881b      	ldrh	r3, [r3, #0]
   17e0a:	827b      	strh	r3, [r7, #18]
   17e0c:	e027      	b.n	17e5e <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
   17e0e:	8a7a      	ldrh	r2, [r7, #18]
   17e10:	8a3b      	ldrh	r3, [r7, #16]
   17e12:	1ad3      	subs	r3, r2, r3
   17e14:	b29b      	uxth	r3, r3
   17e16:	f003 0301 	and.w	r3, r3, #1
   17e1a:	b29b      	uxth	r3, r3
   17e1c:	8a7a      	ldrh	r2, [r7, #18]
   17e1e:	1ad3      	subs	r3, r2, r3
   17e20:	827b      	strh	r3, [r7, #18]
   17e22:	e01c      	b.n	17e5e <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
   17e24:	8a7b      	ldrh	r3, [r7, #18]
   17e26:	3b10      	subs	r3, #16
   17e28:	827b      	strh	r3, [r7, #18]
   17e2a:	e018      	b.n	17e5e <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
   17e2c:	8a7b      	ldrh	r3, [r7, #18]
   17e2e:	3b20      	subs	r3, #32
   17e30:	827b      	strh	r3, [r7, #18]
   17e32:	e014      	b.n	17e5e <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
   17e34:	8a7b      	ldrh	r3, [r7, #18]
   17e36:	3b30      	subs	r3, #48	; 0x30
   17e38:	827b      	strh	r3, [r7, #18]
   17e3a:	e010      	b.n	17e5e <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
   17e3c:	8a7b      	ldrh	r3, [r7, #18]
   17e3e:	3b1a      	subs	r3, #26
   17e40:	827b      	strh	r3, [r7, #18]
   17e42:	e00c      	b.n	17e5e <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
   17e44:	8a7b      	ldrh	r3, [r7, #18]
   17e46:	3308      	adds	r3, #8
   17e48:	827b      	strh	r3, [r7, #18]
   17e4a:	e008      	b.n	17e5e <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
   17e4c:	8a7b      	ldrh	r3, [r7, #18]
   17e4e:	3b50      	subs	r3, #80	; 0x50
   17e50:	827b      	strh	r3, [r7, #18]
   17e52:	e004      	b.n	17e5e <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
   17e54:	8a7b      	ldrh	r3, [r7, #18]
   17e56:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
   17e5a:	827b      	strh	r3, [r7, #18]
   17e5c:	bf00      	nop
				}
				break;
   17e5e:	e008      	b.n	17e72 <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
   17e60:	89bb      	ldrh	r3, [r7, #12]
   17e62:	2b00      	cmp	r3, #0
   17e64:	d194      	bne.n	17d90 <ff_wtoupper+0x24>
   17e66:	89fb      	ldrh	r3, [r7, #14]
   17e68:	005b      	lsls	r3, r3, #1
   17e6a:	697a      	ldr	r2, [r7, #20]
   17e6c:	4413      	add	r3, r2
   17e6e:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
   17e70:	e78e      	b.n	17d90 <ff_wtoupper+0x24>
				break;
   17e72:	bf00      	nop
		}
		uni = uc;
   17e74:	8a7b      	ldrh	r3, [r7, #18]
   17e76:	607b      	str	r3, [r7, #4]
	}

	return uni;
   17e78:	687b      	ldr	r3, [r7, #4]
}
   17e7a:	4618      	mov	r0, r3
   17e7c:	371c      	adds	r7, #28
   17e7e:	46bd      	mov	sp, r7
   17e80:	f85d 7b04 	ldr.w	r7, [sp], #4
   17e84:	4770      	bx	lr
   17e86:	bf00      	nop
   17e88:	000288f8 	.word	0x000288f8
   17e8c:	00028aec 	.word	0x00028aec

00017e90 <am_bsp_uart_string_print>:
   17e90:	b510      	push	{r4, lr}
   17e92:	b086      	sub	sp, #24
   17e94:	7804      	ldrb	r4, [r0, #0]
   17e96:	2300      	movs	r3, #0
   17e98:	9300      	str	r3, [sp, #0]
   17e9a:	b13c      	cbz	r4, 17eac <am_bsp_uart_string_print+0x1c>
   17e9c:	4603      	mov	r3, r0
   17e9e:	f1c0 0201 	rsb	r2, r0, #1
   17ea2:	18d4      	adds	r4, r2, r3
   17ea4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   17ea8:	2900      	cmp	r1, #0
   17eaa:	d1fa      	bne.n	17ea2 <am_bsp_uart_string_print+0x12>
   17eac:	4b09      	ldr	r3, [pc, #36]	; (17ed4 <am_bsp_uart_string_print+0x44>)
   17eae:	9002      	str	r0, [sp, #8]
   17eb0:	2200      	movs	r2, #0
   17eb2:	6818      	ldr	r0, [r3, #0]
   17eb4:	9403      	str	r4, [sp, #12]
   17eb6:	f04f 33ff 	mov.w	r3, #4294967295
   17eba:	a901      	add	r1, sp, #4
   17ebc:	9304      	str	r3, [sp, #16]
   17ebe:	9201      	str	r2, [sp, #4]
   17ec0:	f8cd d014 	str.w	sp, [sp, #20]
   17ec4:	f001 fbae 	bl	19624 <am_hal_uart_transfer>
   17ec8:	9b00      	ldr	r3, [sp, #0]
   17eca:	42a3      	cmp	r3, r4
   17ecc:	d000      	beq.n	17ed0 <am_bsp_uart_string_print+0x40>
   17ece:	e7fe      	b.n	17ece <am_bsp_uart_string_print+0x3e>
   17ed0:	b006      	add	sp, #24
   17ed2:	bd10      	pop	{r4, pc}
   17ed4:	100009dc 	.word	0x100009dc

00017ed8 <am_bsp_iom_pins_enable>:
   17ed8:	2805      	cmp	r0, #5
   17eda:	f200 80ea 	bhi.w	180b2 <am_bsp_iom_pins_enable+0x1da>
   17ede:	ea41 0180 	orr.w	r1, r1, r0, lsl #2
   17ee2:	b508      	push	{r3, lr}
   17ee4:	2915      	cmp	r1, #21
   17ee6:	d817      	bhi.n	17f18 <am_bsp_iom_pins_enable+0x40>
   17ee8:	e8df f011 	tbh	[pc, r1, lsl #1]
   17eec:	00390023 	.word	0x00390023
   17ef0:	00160016 	.word	0x00160016
   17ef4:	005b0045 	.word	0x005b0045
   17ef8:	00160016 	.word	0x00160016
   17efc:	007d0067 	.word	0x007d0067
   17f00:	00160016 	.word	0x00160016
   17f04:	009f0089 	.word	0x009f0089
   17f08:	00160016 	.word	0x00160016
   17f0c:	00c100ab 	.word	0x00c100ab
   17f10:	00160016 	.word	0x00160016
   17f14:	001700cd 	.word	0x001700cd
   17f18:	bd08      	pop	{r3, pc}
   17f1a:	4b66      	ldr	r3, [pc, #408]	; (180b4 <am_bsp_iom_pins_enable+0x1dc>)
   17f1c:	2030      	movs	r0, #48	; 0x30
   17f1e:	6819      	ldr	r1, [r3, #0]
   17f20:	f000 f9a6 	bl	18270 <am_hal_gpio_pinconfig>
   17f24:	4b64      	ldr	r3, [pc, #400]	; (180b8 <am_bsp_iom_pins_enable+0x1e0>)
   17f26:	2031      	movs	r0, #49	; 0x31
   17f28:	6819      	ldr	r1, [r3, #0]
   17f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17f2e:	f000 b99f 	b.w	18270 <am_hal_gpio_pinconfig>
   17f32:	4b62      	ldr	r3, [pc, #392]	; (180bc <am_bsp_iom_pins_enable+0x1e4>)
   17f34:	2005      	movs	r0, #5
   17f36:	6819      	ldr	r1, [r3, #0]
   17f38:	f000 f99a 	bl	18270 <am_hal_gpio_pinconfig>
   17f3c:	4b60      	ldr	r3, [pc, #384]	; (180c0 <am_bsp_iom_pins_enable+0x1e8>)
   17f3e:	2006      	movs	r0, #6
   17f40:	6819      	ldr	r1, [r3, #0]
   17f42:	f000 f995 	bl	18270 <am_hal_gpio_pinconfig>
   17f46:	4b5f      	ldr	r3, [pc, #380]	; (180c4 <am_bsp_iom_pins_enable+0x1ec>)
   17f48:	2007      	movs	r0, #7
   17f4a:	6819      	ldr	r1, [r3, #0]
   17f4c:	f000 f990 	bl	18270 <am_hal_gpio_pinconfig>
   17f50:	4b5d      	ldr	r3, [pc, #372]	; (180c8 <am_bsp_iom_pins_enable+0x1f0>)
   17f52:	200b      	movs	r0, #11
   17f54:	6819      	ldr	r1, [r3, #0]
   17f56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17f5a:	f000 b989 	b.w	18270 <am_hal_gpio_pinconfig>
   17f5e:	4b5b      	ldr	r3, [pc, #364]	; (180cc <am_bsp_iom_pins_enable+0x1f4>)
   17f60:	2005      	movs	r0, #5
   17f62:	6819      	ldr	r1, [r3, #0]
   17f64:	f000 f984 	bl	18270 <am_hal_gpio_pinconfig>
   17f68:	4b59      	ldr	r3, [pc, #356]	; (180d0 <am_bsp_iom_pins_enable+0x1f8>)
   17f6a:	2006      	movs	r0, #6
   17f6c:	6819      	ldr	r1, [r3, #0]
   17f6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17f72:	f000 b97d 	b.w	18270 <am_hal_gpio_pinconfig>
   17f76:	4b57      	ldr	r3, [pc, #348]	; (180d4 <am_bsp_iom_pins_enable+0x1fc>)
   17f78:	2008      	movs	r0, #8
   17f7a:	6819      	ldr	r1, [r3, #0]
   17f7c:	f000 f978 	bl	18270 <am_hal_gpio_pinconfig>
   17f80:	4b55      	ldr	r3, [pc, #340]	; (180d8 <am_bsp_iom_pins_enable+0x200>)
   17f82:	2009      	movs	r0, #9
   17f84:	6819      	ldr	r1, [r3, #0]
   17f86:	f000 f973 	bl	18270 <am_hal_gpio_pinconfig>
   17f8a:	4b54      	ldr	r3, [pc, #336]	; (180dc <am_bsp_iom_pins_enable+0x204>)
   17f8c:	200a      	movs	r0, #10
   17f8e:	6819      	ldr	r1, [r3, #0]
   17f90:	f000 f96e 	bl	18270 <am_hal_gpio_pinconfig>
   17f94:	4b52      	ldr	r3, [pc, #328]	; (180e0 <am_bsp_iom_pins_enable+0x208>)
   17f96:	200e      	movs	r0, #14
   17f98:	6819      	ldr	r1, [r3, #0]
   17f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17f9e:	f000 b967 	b.w	18270 <am_hal_gpio_pinconfig>
   17fa2:	4b50      	ldr	r3, [pc, #320]	; (180e4 <am_bsp_iom_pins_enable+0x20c>)
   17fa4:	2008      	movs	r0, #8
   17fa6:	6819      	ldr	r1, [r3, #0]
   17fa8:	f000 f962 	bl	18270 <am_hal_gpio_pinconfig>
   17fac:	4b4e      	ldr	r3, [pc, #312]	; (180e8 <am_bsp_iom_pins_enable+0x210>)
   17fae:	2009      	movs	r0, #9
   17fb0:	6819      	ldr	r1, [r3, #0]
   17fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17fb6:	f000 b95b 	b.w	18270 <am_hal_gpio_pinconfig>
   17fba:	4b4c      	ldr	r3, [pc, #304]	; (180ec <am_bsp_iom_pins_enable+0x214>)
   17fbc:	201b      	movs	r0, #27
   17fbe:	6819      	ldr	r1, [r3, #0]
   17fc0:	f000 f956 	bl	18270 <am_hal_gpio_pinconfig>
   17fc4:	4b4a      	ldr	r3, [pc, #296]	; (180f0 <am_bsp_iom_pins_enable+0x218>)
   17fc6:	2019      	movs	r0, #25
   17fc8:	6819      	ldr	r1, [r3, #0]
   17fca:	f000 f951 	bl	18270 <am_hal_gpio_pinconfig>
   17fce:	4b49      	ldr	r3, [pc, #292]	; (180f4 <am_bsp_iom_pins_enable+0x21c>)
   17fd0:	201c      	movs	r0, #28
   17fd2:	6819      	ldr	r1, [r3, #0]
   17fd4:	f000 f94c 	bl	18270 <am_hal_gpio_pinconfig>
   17fd8:	4b47      	ldr	r3, [pc, #284]	; (180f8 <am_bsp_iom_pins_enable+0x220>)
   17fda:	200f      	movs	r0, #15
   17fdc:	6819      	ldr	r1, [r3, #0]
   17fde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17fe2:	f000 b945 	b.w	18270 <am_hal_gpio_pinconfig>
   17fe6:	4b45      	ldr	r3, [pc, #276]	; (180fc <am_bsp_iom_pins_enable+0x224>)
   17fe8:	201b      	movs	r0, #27
   17fea:	6819      	ldr	r1, [r3, #0]
   17fec:	f000 f940 	bl	18270 <am_hal_gpio_pinconfig>
   17ff0:	4b43      	ldr	r3, [pc, #268]	; (18100 <am_bsp_iom_pins_enable+0x228>)
   17ff2:	2019      	movs	r0, #25
   17ff4:	6819      	ldr	r1, [r3, #0]
   17ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17ffa:	f000 b939 	b.w	18270 <am_hal_gpio_pinconfig>
   17ffe:	4b41      	ldr	r3, [pc, #260]	; (18104 <am_bsp_iom_pins_enable+0x22c>)
   18000:	202a      	movs	r0, #42	; 0x2a
   18002:	6819      	ldr	r1, [r3, #0]
   18004:	f000 f934 	bl	18270 <am_hal_gpio_pinconfig>
   18008:	4b3f      	ldr	r3, [pc, #252]	; (18108 <am_bsp_iom_pins_enable+0x230>)
   1800a:	202b      	movs	r0, #43	; 0x2b
   1800c:	6819      	ldr	r1, [r3, #0]
   1800e:	f000 f92f 	bl	18270 <am_hal_gpio_pinconfig>
   18012:	4b3e      	ldr	r3, [pc, #248]	; (1810c <am_bsp_iom_pins_enable+0x234>)
   18014:	2026      	movs	r0, #38	; 0x26
   18016:	6819      	ldr	r1, [r3, #0]
   18018:	f000 f92a 	bl	18270 <am_hal_gpio_pinconfig>
   1801c:	4b3c      	ldr	r3, [pc, #240]	; (18110 <am_bsp_iom_pins_enable+0x238>)
   1801e:	200c      	movs	r0, #12
   18020:	6819      	ldr	r1, [r3, #0]
   18022:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18026:	f000 b923 	b.w	18270 <am_hal_gpio_pinconfig>
   1802a:	4b3a      	ldr	r3, [pc, #232]	; (18114 <am_bsp_iom_pins_enable+0x23c>)
   1802c:	202a      	movs	r0, #42	; 0x2a
   1802e:	6819      	ldr	r1, [r3, #0]
   18030:	f000 f91e 	bl	18270 <am_hal_gpio_pinconfig>
   18034:	4b38      	ldr	r3, [pc, #224]	; (18118 <am_bsp_iom_pins_enable+0x240>)
   18036:	202b      	movs	r0, #43	; 0x2b
   18038:	6819      	ldr	r1, [r3, #0]
   1803a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1803e:	f000 b917 	b.w	18270 <am_hal_gpio_pinconfig>
   18042:	4b36      	ldr	r3, [pc, #216]	; (1811c <am_bsp_iom_pins_enable+0x244>)
   18044:	2027      	movs	r0, #39	; 0x27
   18046:	6819      	ldr	r1, [r3, #0]
   18048:	f000 f912 	bl	18270 <am_hal_gpio_pinconfig>
   1804c:	4b34      	ldr	r3, [pc, #208]	; (18120 <am_bsp_iom_pins_enable+0x248>)
   1804e:	2028      	movs	r0, #40	; 0x28
   18050:	6819      	ldr	r1, [r3, #0]
   18052:	f000 f90d 	bl	18270 <am_hal_gpio_pinconfig>
   18056:	4b33      	ldr	r3, [pc, #204]	; (18124 <am_bsp_iom_pins_enable+0x24c>)
   18058:	202c      	movs	r0, #44	; 0x2c
   1805a:	6819      	ldr	r1, [r3, #0]
   1805c:	f000 f908 	bl	18270 <am_hal_gpio_pinconfig>
   18060:	4b31      	ldr	r3, [pc, #196]	; (18128 <am_bsp_iom_pins_enable+0x250>)
   18062:	200d      	movs	r0, #13
   18064:	6819      	ldr	r1, [r3, #0]
   18066:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1806a:	f000 b901 	b.w	18270 <am_hal_gpio_pinconfig>
   1806e:	4b2f      	ldr	r3, [pc, #188]	; (1812c <am_bsp_iom_pins_enable+0x254>)
   18070:	2027      	movs	r0, #39	; 0x27
   18072:	6819      	ldr	r1, [r3, #0]
   18074:	f000 f8fc 	bl	18270 <am_hal_gpio_pinconfig>
   18078:	4b2d      	ldr	r3, [pc, #180]	; (18130 <am_bsp_iom_pins_enable+0x258>)
   1807a:	2028      	movs	r0, #40	; 0x28
   1807c:	6819      	ldr	r1, [r3, #0]
   1807e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18082:	f000 b8f5 	b.w	18270 <am_hal_gpio_pinconfig>
   18086:	4b2b      	ldr	r3, [pc, #172]	; (18134 <am_bsp_iom_pins_enable+0x25c>)
   18088:	2030      	movs	r0, #48	; 0x30
   1808a:	6819      	ldr	r1, [r3, #0]
   1808c:	f000 f8f0 	bl	18270 <am_hal_gpio_pinconfig>
   18090:	4b29      	ldr	r3, [pc, #164]	; (18138 <am_bsp_iom_pins_enable+0x260>)
   18092:	2031      	movs	r0, #49	; 0x31
   18094:	6819      	ldr	r1, [r3, #0]
   18096:	f000 f8eb 	bl	18270 <am_hal_gpio_pinconfig>
   1809a:	4b28      	ldr	r3, [pc, #160]	; (1813c <am_bsp_iom_pins_enable+0x264>)
   1809c:	202f      	movs	r0, #47	; 0x2f
   1809e:	6819      	ldr	r1, [r3, #0]
   180a0:	f000 f8e6 	bl	18270 <am_hal_gpio_pinconfig>
   180a4:	4b26      	ldr	r3, [pc, #152]	; (18140 <am_bsp_iom_pins_enable+0x268>)
   180a6:	2010      	movs	r0, #16
   180a8:	6819      	ldr	r1, [r3, #0]
   180aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   180ae:	f000 b8df 	b.w	18270 <am_hal_gpio_pinconfig>
   180b2:	4770      	bx	lr
   180b4:	00028c60 	.word	0x00028c60
   180b8:	00028c64 	.word	0x00028c64
   180bc:	00028be4 	.word	0x00028be4
   180c0:	00028bdc 	.word	0x00028bdc
   180c4:	00028be0 	.word	0x00028be0
   180c8:	00028bd8 	.word	0x00028bd8
   180cc:	00028be8 	.word	0x00028be8
   180d0:	00028bec 	.word	0x00028bec
   180d4:	00028bfc 	.word	0x00028bfc
   180d8:	00028bf4 	.word	0x00028bf4
   180dc:	00028bf8 	.word	0x00028bf8
   180e0:	00028bf0 	.word	0x00028bf0
   180e4:	00028c00 	.word	0x00028c00
   180e8:	00028c04 	.word	0x00028c04
   180ec:	00028c14 	.word	0x00028c14
   180f0:	00028c0c 	.word	0x00028c0c
   180f4:	00028c10 	.word	0x00028c10
   180f8:	00028c08 	.word	0x00028c08
   180fc:	00028c18 	.word	0x00028c18
   18100:	00028c1c 	.word	0x00028c1c
   18104:	00028c2c 	.word	0x00028c2c
   18108:	00028c24 	.word	0x00028c24
   1810c:	00028c28 	.word	0x00028c28
   18110:	00028c20 	.word	0x00028c20
   18114:	00028c30 	.word	0x00028c30
   18118:	00028c34 	.word	0x00028c34
   1811c:	00028c44 	.word	0x00028c44
   18120:	00028c3c 	.word	0x00028c3c
   18124:	00028c40 	.word	0x00028c40
   18128:	00028c38 	.word	0x00028c38
   1812c:	00028c48 	.word	0x00028c48
   18130:	00028c4c 	.word	0x00028c4c
   18134:	00028c5c 	.word	0x00028c5c
   18138:	00028c54 	.word	0x00028c54
   1813c:	00028c58 	.word	0x00028c58
   18140:	00028c50 	.word	0x00028c50

00018144 <am_bsp_uart_printf_enable>:
   18144:	b510      	push	{r4, lr}
   18146:	4c10      	ldr	r4, [pc, #64]	; (18188 <am_bsp_uart_printf_enable+0x44>)
   18148:	4b10      	ldr	r3, [pc, #64]	; (1818c <am_bsp_uart_printf_enable+0x48>)
   1814a:	4621      	mov	r1, r4
   1814c:	2202      	movs	r2, #2
   1814e:	2000      	movs	r0, #0
   18150:	601a      	str	r2, [r3, #0]
   18152:	f001 f8c9 	bl	192e8 <am_hal_uart_initialize>
   18156:	2200      	movs	r2, #0
   18158:	4611      	mov	r1, r2
   1815a:	6820      	ldr	r0, [r4, #0]
   1815c:	f001 f8ec 	bl	19338 <am_hal_uart_power_control>
   18160:	6820      	ldr	r0, [r4, #0]
   18162:	490b      	ldr	r1, [pc, #44]	; (18190 <am_bsp_uart_printf_enable+0x4c>)
   18164:	f001 f960 	bl	19428 <am_hal_uart_configure>
   18168:	4b0a      	ldr	r3, [pc, #40]	; (18194 <am_bsp_uart_printf_enable+0x50>)
   1816a:	2030      	movs	r0, #48	; 0x30
   1816c:	6819      	ldr	r1, [r3, #0]
   1816e:	f000 f87f 	bl	18270 <am_hal_gpio_pinconfig>
   18172:	4b09      	ldr	r3, [pc, #36]	; (18198 <am_bsp_uart_printf_enable+0x54>)
   18174:	2031      	movs	r0, #49	; 0x31
   18176:	6819      	ldr	r1, [r3, #0]
   18178:	f000 f87a 	bl	18270 <am_hal_gpio_pinconfig>
   1817c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18180:	4806      	ldr	r0, [pc, #24]	; (1819c <am_bsp_uart_printf_enable+0x58>)
   18182:	f7f8 bbe9 	b.w	10958 <am_util_stdio_printf_init>
   18186:	bf00      	nop
   18188:	100009dc 	.word	0x100009dc
   1818c:	1000003c 	.word	0x1000003c
   18190:	00028ba8 	.word	0x00028ba8
   18194:	00028bd4 	.word	0x00028bd4
   18198:	00028bd0 	.word	0x00028bd0
   1819c:	00017e91 	.word	0x00017e91

000181a0 <am_hal_clkgen_status_get>:
   181a0:	b1a8      	cbz	r0, 181ce <am_hal_clkgen_status_get+0x2e>
   181a2:	b410      	push	{r4}
   181a4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
   181a8:	490a      	ldr	r1, [pc, #40]	; (181d4 <am_hal_clkgen_status_get+0x34>)
   181aa:	6994      	ldr	r4, [r2, #24]
   181ac:	4b0a      	ldr	r3, [pc, #40]	; (181d8 <am_hal_clkgen_status_get+0x38>)
   181ae:	f014 0f01 	tst.w	r4, #1
   181b2:	bf08      	it	eq
   181b4:	460b      	moveq	r3, r1
   181b6:	6003      	str	r3, [r0, #0]
   181b8:	69d3      	ldr	r3, [r2, #28]
   181ba:	f85d 4b04 	ldr.w	r4, [sp], #4
   181be:	f003 0201 	and.w	r2, r3, #1
   181c2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   181c6:	6042      	str	r2, [r0, #4]
   181c8:	7203      	strb	r3, [r0, #8]
   181ca:	2000      	movs	r0, #0
   181cc:	4770      	bx	lr
   181ce:	2006      	movs	r0, #6
   181d0:	4770      	bx	lr
   181d2:	bf00      	nop
   181d4:	02dc6c00 	.word	0x02dc6c00
   181d8:	016e3600 	.word	0x016e3600

000181dc <am_hal_flash_delay>:
   181dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   181e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   181e2:	075b      	lsls	r3, r3, #29
   181e4:	bf46      	itte	mi
   181e6:	0040      	lslmi	r0, r0, #1
   181e8:	230e      	movmi	r3, #14
   181ea:	230b      	movpl	r3, #11
   181ec:	4298      	cmp	r0, r3
   181ee:	d902      	bls.n	181f6 <am_hal_flash_delay+0x1a>
   181f0:	1ac0      	subs	r0, r0, r3
   181f2:	4b01      	ldr	r3, [pc, #4]	; (181f8 <am_hal_flash_delay+0x1c>)
   181f4:	4718      	bx	r3
   181f6:	4770      	bx	lr
   181f8:	0800009d 	.word	0x0800009d

000181fc <am_hal_flash_delay_status_check>:
   181fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18200:	f89d c020 	ldrb.w	ip, [sp, #32]
   18204:	4604      	mov	r4, r0
   18206:	460d      	mov	r5, r1
   18208:	4616      	mov	r6, r2
   1820a:	461f      	mov	r7, r3
   1820c:	f1bc 0f00 	cmp.w	ip, #0
   18210:	d015      	beq.n	1823e <am_hal_flash_delay_status_check+0x42>
   18212:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1826c <am_hal_flash_delay_status_check+0x70>
   18216:	f04f 2940 	mov.w	r9, #1073758208	; 0x40004000
   1821a:	e009      	b.n	18230 <am_hal_flash_delay_status_check+0x34>
   1821c:	b31c      	cbz	r4, 18266 <am_hal_flash_delay_status_check+0x6a>
   1821e:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
   18222:	f013 0f04 	tst.w	r3, #4
   18226:	bf0c      	ite	eq
   18228:	2005      	moveq	r0, #5
   1822a:	2012      	movne	r0, #18
   1822c:	3c01      	subs	r4, #1
   1822e:	47c0      	blx	r8
   18230:	6828      	ldr	r0, [r5, #0]
   18232:	4030      	ands	r0, r6
   18234:	42b8      	cmp	r0, r7
   18236:	d1f1      	bne.n	1821c <am_hal_flash_delay_status_check+0x20>
   18238:	2000      	movs	r0, #0
   1823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1823e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 1826c <am_hal_flash_delay_status_check+0x70>
   18242:	f04f 2840 	mov.w	r8, #1073758208	; 0x40004000
   18246:	e009      	b.n	1825c <am_hal_flash_delay_status_check+0x60>
   18248:	b16c      	cbz	r4, 18266 <am_hal_flash_delay_status_check+0x6a>
   1824a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1824e:	f013 0f04 	tst.w	r3, #4
   18252:	bf0c      	ite	eq
   18254:	2005      	moveq	r0, #5
   18256:	2012      	movne	r0, #18
   18258:	3c01      	subs	r4, #1
   1825a:	47c8      	blx	r9
   1825c:	6828      	ldr	r0, [r5, #0]
   1825e:	4030      	ands	r0, r6
   18260:	42b8      	cmp	r0, r7
   18262:	d0f1      	beq.n	18248 <am_hal_flash_delay_status_check+0x4c>
   18264:	e7e8      	b.n	18238 <am_hal_flash_delay_status_check+0x3c>
   18266:	2004      	movs	r0, #4
   18268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1826c:	0800009d 	.word	0x0800009d

00018270 <am_hal_gpio_pinconfig>:
   18270:	2831      	cmp	r0, #49	; 0x31
   18272:	f200 80bc 	bhi.w	183ee <am_hal_gpio_pinconfig+0x17e>
   18276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1827a:	4604      	mov	r4, r0
   1827c:	f011 07e0 	ands.w	r7, r1, #224	; 0xe0
   18280:	f001 0007 	and.w	r0, r1, #7
   18284:	b085      	sub	sp, #20
   18286:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1828a:	f3c1 03c1 	ubfx	r3, r1, #3, #2
   1828e:	d00f      	beq.n	182b0 <am_hal_gpio_pinconfig+0x40>
   18290:	f3c1 1642 	ubfx	r6, r1, #5, #3
   18294:	1db5      	adds	r5, r6, #6
   18296:	f005 0507 	and.w	r5, r5, #7
   1829a:	2d03      	cmp	r5, #3
   1829c:	f042 0201 	orr.w	r2, r2, #1
   182a0:	f240 80a7 	bls.w	183f2 <am_hal_gpio_pinconfig+0x182>
   182a4:	2fc0      	cmp	r7, #192	; 0xc0
   182a6:	f000 80eb 	beq.w	18480 <am_hal_gpio_pinconfig+0x210>
   182aa:	2f20      	cmp	r7, #32
   182ac:	f000 80ed 	beq.w	1848a <am_hal_gpio_pinconfig+0x21a>
   182b0:	b163      	cbz	r3, 182cc <am_hal_gpio_pinconfig+0x5c>
   182b2:	2b01      	cmp	r3, #1
   182b4:	f000 80dd 	beq.w	18472 <am_hal_gpio_pinconfig+0x202>
   182b8:	2b02      	cmp	r3, #2
   182ba:	f040 80c3 	bne.w	18444 <am_hal_gpio_pinconfig+0x1d4>
   182be:	4b7e      	ldr	r3, [pc, #504]	; (184b8 <am_hal_gpio_pinconfig+0x248>)
   182c0:	5d1b      	ldrb	r3, [r3, r4]
   182c2:	075b      	lsls	r3, r3, #29
   182c4:	f140 80be 	bpl.w	18444 <am_hal_gpio_pinconfig+0x1d4>
   182c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   182cc:	4b7b      	ldr	r3, [pc, #492]	; (184bc <am_hal_gpio_pinconfig+0x24c>)
   182ce:	4d7c      	ldr	r5, [pc, #496]	; (184c0 <am_hal_gpio_pinconfig+0x250>)
   182d0:	5d1b      	ldrb	r3, [r3, r4]
   182d2:	5d2d      	ldrb	r5, [r5, r4]
   182d4:	4103      	asrs	r3, r0
   182d6:	005b      	lsls	r3, r3, #1
   182d8:	f003 0302 	and.w	r3, r3, #2
   182dc:	4285      	cmp	r5, r0
   182de:	ea43 0302 	orr.w	r3, r3, r2
   182e2:	f000 8091 	beq.w	18408 <am_hal_gpio_pinconfig+0x198>
   182e6:	f3c1 2607 	ubfx	r6, r1, #8, #8
   182ea:	f3c1 2581 	ubfx	r5, r1, #10, #2
   182ee:	f3c1 3080 	ubfx	r0, r1, #14, #1
   182f2:	0a8a      	lsrs	r2, r1, #10
   182f4:	f006 070c 	and.w	r7, r6, #12
   182f8:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
   182fc:	f002 0208 	and.w	r2, r2, #8
   18300:	f3c1 3500 	ubfx	r5, r1, #12, #1
   18304:	2f04      	cmp	r7, #4
   18306:	ea42 0200 	orr.w	r2, r2, r0
   1830a:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
   1830e:	4628      	mov	r0, r5
   18310:	f000 80ac 	beq.w	1846c <am_hal_gpio_pinconfig+0x1fc>
   18314:	486b      	ldr	r0, [pc, #428]	; (184c4 <am_hal_gpio_pinconfig+0x254>)
   18316:	6800      	ldr	r0, [r0, #0]
   18318:	eba1 0800 	sub.w	r8, r1, r0
   1831c:	fab8 f888 	clz	r8, r8
   18320:	ea4f 1858 	mov.w	r8, r8, lsr #5
   18324:	f016 0f60 	tst.w	r6, #96	; 0x60
   18328:	bf04      	itt	eq
   1832a:	f3c1 30c0 	ubfxeq	r0, r1, #15, #1
   1832e:	f360 0200 	bfieq	r2, r0, #0, #1
   18332:	00a6      	lsls	r6, r4, #2
   18334:	f3c1 2101 	ubfx	r1, r1, #8, #2
   18338:	2902      	cmp	r1, #2
   1833a:	ea4f 05c4 	mov.w	r5, r4, lsl #3
   1833e:	f000 808e 	beq.w	1845e <am_hal_gpio_pinconfig+0x1ee>
   18342:	2903      	cmp	r1, #3
   18344:	f000 8082 	beq.w	1844c <am_hal_gpio_pinconfig+0x1dc>
   18348:	2901      	cmp	r1, #1
   1834a:	bf08      	it	eq
   1834c:	f043 0304 	orreq.w	r3, r3, #4
   18350:	f005 0518 	and.w	r5, r5, #24
   18354:	f04f 0900 	mov.w	r9, #0
   18358:	f006 061c 	and.w	r6, r6, #28
   1835c:	210f      	movs	r1, #15
   1835e:	40b1      	lsls	r1, r6
   18360:	27ff      	movs	r7, #255	; 0xff
   18362:	fa02 f606 	lsl.w	r6, r2, r6
   18366:	43ca      	mvns	r2, r1
   18368:	40af      	lsls	r7, r5
   1836a:	9201      	str	r2, [sp, #4]
   1836c:	fa03 f505 	lsl.w	r5, r3, r5
   18370:	f000 f902 	bl	18578 <am_hal_interrupt_master_disable>
   18374:	f024 0b03 	bic.w	fp, r4, #3
   18378:	ea4f 0a54 	mov.w	sl, r4, lsr #1
   1837c:	f10b 4c80 	add.w	ip, fp, #1073741824	; 0x40000000
   18380:	4b51      	ldr	r3, [pc, #324]	; (184c8 <am_hal_gpio_pinconfig+0x258>)
   18382:	4952      	ldr	r1, [pc, #328]	; (184cc <am_hal_gpio_pinconfig+0x25c>)
   18384:	9a01      	ldr	r2, [sp, #4]
   18386:	9003      	str	r0, [sp, #12]
   18388:	43ff      	mvns	r7, r7
   1838a:	f02a 0a03 	bic.w	sl, sl, #3
   1838e:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
   18392:	f1b8 0f00 	cmp.w	r8, #0
   18396:	d00b      	beq.n	183b0 <am_hal_gpio_pinconfig+0x140>
   18398:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
   1839c:	f004 081f 	and.w	r8, r4, #31
   183a0:	484b      	ldr	r0, [pc, #300]	; (184d0 <am_hal_gpio_pinconfig+0x260>)
   183a2:	f00e 0e04 	and.w	lr, lr, #4
   183a6:	2401      	movs	r4, #1
   183a8:	fa04 f408 	lsl.w	r4, r4, r8
   183ac:	f84e 4000 	str.w	r4, [lr, r0]
   183b0:	4848      	ldr	r0, [pc, #288]	; (184d4 <am_hal_gpio_pinconfig+0x264>)
   183b2:	2473      	movs	r4, #115	; 0x73
   183b4:	6604      	str	r4, [r0, #96]	; 0x60
   183b6:	f8dc 4000 	ldr.w	r4, [ip]
   183ba:	403c      	ands	r4, r7
   183bc:	4325      	orrs	r5, r4
   183be:	f8cc 5000 	str.w	r5, [ip]
   183c2:	f85a 4003 	ldr.w	r4, [sl, r3]
   183c6:	4022      	ands	r2, r4
   183c8:	4332      	orrs	r2, r6
   183ca:	f84a 2003 	str.w	r2, [sl, r3]
   183ce:	f85b 3001 	ldr.w	r3, [fp, r1]
   183d2:	401f      	ands	r7, r3
   183d4:	2400      	movs	r4, #0
   183d6:	ea47 0709 	orr.w	r7, r7, r9
   183da:	f84b 7001 	str.w	r7, [fp, r1]
   183de:	6604      	str	r4, [r0, #96]	; 0x60
   183e0:	9803      	ldr	r0, [sp, #12]
   183e2:	f000 f8cd 	bl	18580 <am_hal_interrupt_master_set>
   183e6:	4620      	mov	r0, r4
   183e8:	b005      	add	sp, #20
   183ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183ee:	2006      	movs	r0, #6
   183f0:	4770      	bx	lr
   183f2:	4d31      	ldr	r5, [pc, #196]	; (184b8 <am_hal_gpio_pinconfig+0x248>)
   183f4:	5d2d      	ldrb	r5, [r5, r4]
   183f6:	3e02      	subs	r6, #2
   183f8:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
   183fc:	07ee      	lsls	r6, r5, #31
   183fe:	d547      	bpl.n	18490 <am_hal_gpio_pinconfig+0x220>
   18400:	2b00      	cmp	r3, #0
   18402:	f43f af63 	beq.w	182cc <am_hal_gpio_pinconfig+0x5c>
   18406:	e754      	b.n	182b2 <am_hal_gpio_pinconfig+0x42>
   18408:	f3c1 4202 	ubfx	r2, r1, #16, #3
   1840c:	2a07      	cmp	r2, #7
   1840e:	d041      	beq.n	18494 <am_hal_gpio_pinconfig+0x224>
   18410:	4d31      	ldr	r5, [pc, #196]	; (184d8 <am_hal_gpio_pinconfig+0x268>)
   18412:	4610      	mov	r0, r2
   18414:	f815 6024 	ldrb.w	r6, [r5, r4, lsl #2]
   18418:	f3c1 42c1 	ubfx	r2, r1, #19, #2
   1841c:	ea42 1000 	orr.w	r0, r2, r0, lsl #4
   18420:	4286      	cmp	r6, r0
   18422:	d039      	beq.n	18498 <am_hal_gpio_pinconfig+0x228>
   18424:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   18428:	00a6      	lsls	r6, r4, #2
   1842a:	786a      	ldrb	r2, [r5, #1]
   1842c:	4282      	cmp	r2, r0
   1842e:	d03d      	beq.n	184ac <am_hal_gpio_pinconfig+0x23c>
   18430:	78aa      	ldrb	r2, [r5, #2]
   18432:	4282      	cmp	r2, r0
   18434:	d03c      	beq.n	184b0 <am_hal_gpio_pinconfig+0x240>
   18436:	78ea      	ldrb	r2, [r5, #3]
   18438:	4282      	cmp	r2, r0
   1843a:	d03b      	beq.n	184b4 <am_hal_gpio_pinconfig+0x244>
   1843c:	4827      	ldr	r0, [pc, #156]	; (184dc <am_hal_gpio_pinconfig+0x26c>)
   1843e:	b005      	add	sp, #20
   18440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18444:	4826      	ldr	r0, [pc, #152]	; (184e0 <am_hal_gpio_pinconfig+0x270>)
   18446:	b005      	add	sp, #20
   18448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1844c:	f005 0518 	and.w	r5, r5, #24
   18450:	f04f 0901 	mov.w	r9, #1
   18454:	f043 0304 	orr.w	r3, r3, #4
   18458:	fa09 f905 	lsl.w	r9, r9, r5
   1845c:	e77c      	b.n	18358 <am_hal_gpio_pinconfig+0xe8>
   1845e:	f005 0518 	and.w	r5, r5, #24
   18462:	f04f 0901 	mov.w	r9, #1
   18466:	fa09 f905 	lsl.w	r9, r9, r5
   1846a:	e775      	b.n	18358 <am_hal_gpio_pinconfig+0xe8>
   1846c:	f04f 0801 	mov.w	r8, #1
   18470:	e758      	b.n	18324 <am_hal_gpio_pinconfig+0xb4>
   18472:	4b11      	ldr	r3, [pc, #68]	; (184b8 <am_hal_gpio_pinconfig+0x248>)
   18474:	5d1b      	ldrb	r3, [r3, r4]
   18476:	079d      	lsls	r5, r3, #30
   18478:	d5e4      	bpl.n	18444 <am_hal_gpio_pinconfig+0x1d4>
   1847a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1847e:	e725      	b.n	182cc <am_hal_gpio_pinconfig+0x5c>
   18480:	2c14      	cmp	r4, #20
   18482:	f43f af15 	beq.w	182b0 <am_hal_gpio_pinconfig+0x40>
   18486:	4817      	ldr	r0, [pc, #92]	; (184e4 <am_hal_gpio_pinconfig+0x274>)
   18488:	e7ae      	b.n	183e8 <am_hal_gpio_pinconfig+0x178>
   1848a:	2c14      	cmp	r4, #20
   1848c:	f47f af10 	bne.w	182b0 <am_hal_gpio_pinconfig+0x40>
   18490:	4815      	ldr	r0, [pc, #84]	; (184e8 <am_hal_gpio_pinconfig+0x278>)
   18492:	e7a9      	b.n	183e8 <am_hal_gpio_pinconfig+0x178>
   18494:	4815      	ldr	r0, [pc, #84]	; (184ec <am_hal_gpio_pinconfig+0x27c>)
   18496:	e7a7      	b.n	183e8 <am_hal_gpio_pinconfig+0x178>
   18498:	2200      	movs	r2, #0
   1849a:	00a6      	lsls	r6, r4, #2
   1849c:	0052      	lsls	r2, r2, #1
   1849e:	f3c1 5040 	ubfx	r0, r1, #21, #1
   184a2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
   184a6:	f04f 0800 	mov.w	r8, #0
   184aa:	e743      	b.n	18334 <am_hal_gpio_pinconfig+0xc4>
   184ac:	2201      	movs	r2, #1
   184ae:	e7f5      	b.n	1849c <am_hal_gpio_pinconfig+0x22c>
   184b0:	2202      	movs	r2, #2
   184b2:	e7f3      	b.n	1849c <am_hal_gpio_pinconfig+0x22c>
   184b4:	2203      	movs	r2, #3
   184b6:	e7f1      	b.n	1849c <am_hal_gpio_pinconfig+0x22c>
   184b8:	00028c6c 	.word	0x00028c6c
   184bc:	00028ca0 	.word	0x00028ca0
   184c0:	00028d9c 	.word	0x00028d9c
   184c4:	00028c68 	.word	0x00028c68
   184c8:	40010040 	.word	0x40010040
   184cc:	400100e0 	.word	0x400100e0
   184d0:	400100b4 	.word	0x400100b4
   184d4:	40010000 	.word	0x40010000
   184d8:	00028cd4 	.word	0x00028cd4
   184dc:	08000104 	.word	0x08000104
   184e0:	08000102 	.word	0x08000102
   184e4:	08000101 	.word	0x08000101
   184e8:	08000100 	.word	0x08000100
   184ec:	08000103 	.word	0x08000103

000184f0 <am_hal_gpio_state_write>:
   184f0:	2831      	cmp	r0, #49	; 0x31
   184f2:	d81a      	bhi.n	1852a <am_hal_gpio_state_write+0x3a>
   184f4:	b570      	push	{r4, r5, r6, lr}
   184f6:	2905      	cmp	r1, #5
   184f8:	b082      	sub	sp, #8
   184fa:	460d      	mov	r5, r1
   184fc:	d812      	bhi.n	18524 <am_hal_gpio_state_write+0x34>
   184fe:	f000 031f 	and.w	r3, r0, #31
   18502:	2201      	movs	r2, #1
   18504:	08c0      	lsrs	r0, r0, #3
   18506:	f000 0404 	and.w	r4, r0, #4
   1850a:	fa02 f603 	lsl.w	r6, r2, r3
   1850e:	f000 f833 	bl	18578 <am_hal_interrupt_master_disable>
   18512:	3d01      	subs	r5, #1
   18514:	9001      	str	r0, [sp, #4]
   18516:	2d04      	cmp	r5, #4
   18518:	d821      	bhi.n	1855e <am_hal_gpio_state_write+0x6e>
   1851a:	e8df f005 	tbb	[pc, r5]
   1851e:	1512      	.short	0x1512
   18520:	1d1a      	.short	0x1d1a
   18522:	08          	.byte	0x08
   18523:	00          	.byte	0x00
   18524:	2006      	movs	r0, #6
   18526:	b002      	add	sp, #8
   18528:	bd70      	pop	{r4, r5, r6, pc}
   1852a:	2005      	movs	r0, #5
   1852c:	4770      	bx	lr
   1852e:	4a0d      	ldr	r2, [pc, #52]	; (18564 <am_hal_gpio_state_write+0x74>)
   18530:	58a3      	ldr	r3, [r4, r2]
   18532:	4073      	eors	r3, r6
   18534:	50a3      	str	r3, [r4, r2]
   18536:	9801      	ldr	r0, [sp, #4]
   18538:	f000 f822 	bl	18580 <am_hal_interrupt_master_set>
   1853c:	2000      	movs	r0, #0
   1853e:	b002      	add	sp, #8
   18540:	bd70      	pop	{r4, r5, r6, pc}
   18542:	4b09      	ldr	r3, [pc, #36]	; (18568 <am_hal_gpio_state_write+0x78>)
   18544:	50e6      	str	r6, [r4, r3]
   18546:	e7f6      	b.n	18536 <am_hal_gpio_state_write+0x46>
   18548:	4a08      	ldr	r2, [pc, #32]	; (1856c <am_hal_gpio_state_write+0x7c>)
   1854a:	58a3      	ldr	r3, [r4, r2]
   1854c:	4073      	eors	r3, r6
   1854e:	50a3      	str	r3, [r4, r2]
   18550:	e7f1      	b.n	18536 <am_hal_gpio_state_write+0x46>
   18552:	4b04      	ldr	r3, [pc, #16]	; (18564 <am_hal_gpio_state_write+0x74>)
   18554:	50e6      	str	r6, [r4, r3]
   18556:	e7ee      	b.n	18536 <am_hal_gpio_state_write+0x46>
   18558:	4b05      	ldr	r3, [pc, #20]	; (18570 <am_hal_gpio_state_write+0x80>)
   1855a:	50e6      	str	r6, [r4, r3]
   1855c:	e7eb      	b.n	18536 <am_hal_gpio_state_write+0x46>
   1855e:	4b05      	ldr	r3, [pc, #20]	; (18574 <am_hal_gpio_state_write+0x84>)
   18560:	50e6      	str	r6, [r4, r3]
   18562:	e7e8      	b.n	18536 <am_hal_gpio_state_write+0x46>
   18564:	400100b4 	.word	0x400100b4
   18568:	40010090 	.word	0x40010090
   1856c:	40010088 	.word	0x40010088
   18570:	400100a8 	.word	0x400100a8
   18574:	40010098 	.word	0x40010098

00018578 <am_hal_interrupt_master_disable>:
   18578:	f3ef 8010 	mrs	r0, PRIMASK
   1857c:	b672      	cpsid	i
   1857e:	4770      	bx	lr

00018580 <am_hal_interrupt_master_set>:
   18580:	f380 8810 	msr	PRIMASK, r0
   18584:	4770      	bx	lr
   18586:	bf00      	nop

00018588 <internal_iom_reset_on_error>:
   18588:	b570      	push	{r4, r5, r6, lr}
   1858a:	6844      	ldr	r4, [r0, #4]
   1858c:	f8d0 0864 	ldr.w	r0, [r0, #2148]	; 0x864
   18590:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
   18594:	3404      	adds	r4, #4
   18596:	0324      	lsls	r4, r4, #12
   18598:	2300      	movs	r3, #0
   1859a:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
   1859e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   185a2:	050b      	lsls	r3, r1, #20
   185a4:	d52a      	bpl.n	185fc <internal_iom_reset_on_error+0x74>
   185a6:	f8d4 3280 	ldr.w	r3, [r4, #640]	; 0x280
   185aa:	079e      	lsls	r6, r3, #30
   185ac:	d457      	bmi.n	1865e <internal_iom_reset_on_error+0xd6>
   185ae:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   185b2:	079a      	lsls	r2, r3, #30
   185b4:	d508      	bpl.n	185c8 <internal_iom_reset_on_error+0x40>
   185b6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   185ba:	f3c3 4307 	ubfx	r3, r3, #16, #8
   185be:	2b03      	cmp	r3, #3
   185c0:	d9f5      	bls.n	185ae <internal_iom_reset_on_error+0x26>
   185c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185c6:	e7f6      	b.n	185b6 <internal_iom_reset_on_error+0x2e>
   185c8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   185cc:	f003 0306 	and.w	r3, r3, #6
   185d0:	2b04      	cmp	r3, #4
   185d2:	d1f9      	bne.n	185c8 <internal_iom_reset_on_error+0x40>
   185d4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   185d8:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
   185dc:	d00e      	beq.n	185fc <internal_iom_reset_on_error+0x74>
   185de:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   185e2:	f3c3 4307 	ubfx	r3, r3, #16, #8
   185e6:	2b03      	cmp	r3, #3
   185e8:	d9f4      	bls.n	185d4 <internal_iom_reset_on_error+0x4c>
   185ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   185ee:	e7f6      	b.n	185de <internal_iom_reset_on_error+0x56>
   185f0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   185f4:	f003 0306 	and.w	r3, r3, #6
   185f8:	2b04      	cmp	r3, #4
   185fa:	d1f9      	bne.n	185f0 <internal_iom_reset_on_error+0x68>
   185fc:	06cb      	lsls	r3, r1, #27
   185fe:	d406      	bmi.n	1860e <internal_iom_reset_on_error+0x86>
   18600:	f04f 33ff 	mov.w	r3, #4294967295
   18604:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
   18608:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
   1860c:	bd70      	pop	{r4, r5, r6, pc}
   1860e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
   18612:	f003 0306 	and.w	r3, r3, #6
   18616:	2b04      	cmp	r3, #4
   18618:	d1f9      	bne.n	1860e <internal_iom_reset_on_error+0x86>
   1861a:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   1861e:	f36f 1304 	bfc	r3, #4, #1
   18622:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
   18626:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
   1862a:	f36f 0341 	bfc	r3, #1, #1
   1862e:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   18632:	0040      	lsls	r0, r0, #1
   18634:	f7ff fdd2 	bl	181dc <am_hal_flash_delay>
   18638:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
   1863c:	f043 0302 	orr.w	r3, r3, #2
   18640:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
   18644:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
   18648:	f043 0310 	orr.w	r3, r3, #16
   1864c:	f884 3214 	strb.w	r3, [r4, #532]	; 0x214
   18650:	f04f 33ff 	mov.w	r3, #4294967295
   18654:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
   18658:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
   1865c:	bd70      	pop	{r4, r5, r6, pc}
   1865e:	f8d4 2288 	ldr.w	r2, [r4, #648]	; 0x288
   18662:	4e07      	ldr	r6, [pc, #28]	; (18680 <internal_iom_reset_on_error+0xf8>)
   18664:	2a00      	cmp	r2, #0
   18666:	d0c3      	beq.n	185f0 <internal_iom_reset_on_error+0x68>
   18668:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1866c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18670:	2b03      	cmp	r3, #3
   18672:	d9f9      	bls.n	18668 <internal_iom_reset_on_error+0xe0>
   18674:	2a04      	cmp	r2, #4
   18676:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
   1867a:	d9b9      	bls.n	185f0 <internal_iom_reset_on_error+0x68>
   1867c:	3a04      	subs	r2, #4
   1867e:	e7f1      	b.n	18664 <internal_iom_reset_on_error+0xdc>
   18680:	deadbeef 	.word	0xdeadbeef

00018684 <am_hal_iom_uninitialize>:
   18684:	b398      	cbz	r0, 186ee <am_hal_iom_uninitialize+0x6a>
   18686:	b538      	push	{r3, r4, r5, lr}
   18688:	6803      	ldr	r3, [r0, #0]
   1868a:	4a1a      	ldr	r2, [pc, #104]	; (186f4 <am_hal_iom_uninitialize+0x70>)
   1868c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18690:	4293      	cmp	r3, r2
   18692:	4604      	mov	r4, r0
   18694:	d108      	bne.n	186a8 <am_hal_iom_uninitialize+0x24>
   18696:	78c3      	ldrb	r3, [r0, #3]
   18698:	079b      	lsls	r3, r3, #30
   1869a:	d407      	bmi.n	186ac <am_hal_iom_uninitialize+0x28>
   1869c:	78e3      	ldrb	r3, [r4, #3]
   1869e:	f36f 0300 	bfc	r3, #0, #1
   186a2:	70e3      	strb	r3, [r4, #3]
   186a4:	2000      	movs	r0, #0
   186a6:	bd38      	pop	{r3, r4, r5, pc}
   186a8:	2002      	movs	r0, #2
   186aa:	bd38      	pop	{r3, r4, r5, pc}
   186ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
   186ae:	2d00      	cmp	r5, #0
   186b0:	d1f4      	bne.n	1869c <am_hal_iom_uninitialize+0x18>
   186b2:	6843      	ldr	r3, [r0, #4]
   186b4:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   186b8:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   186bc:	3304      	adds	r3, #4
   186be:	031b      	lsls	r3, r3, #12
   186c0:	f893 2214 	ldrb.w	r2, [r3, #532]	; 0x214
   186c4:	f365 0200 	bfi	r2, r5, #0, #1
   186c8:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
   186cc:	f893 2214 	ldrb.w	r2, [r3, #532]	; 0x214
   186d0:	f365 1204 	bfi	r2, r5, #4, #1
   186d4:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
   186d8:	b120      	cbz	r0, 186e4 <am_hal_iom_uninitialize+0x60>
   186da:	2101      	movs	r1, #1
   186dc:	f001 fa28 	bl	19b30 <am_hal_cmdq_term>
   186e0:	f8c4 5828 	str.w	r5, [r4, #2088]	; 0x828
   186e4:	78e3      	ldrb	r3, [r4, #3]
   186e6:	f36f 0341 	bfc	r3, #1, #1
   186ea:	70e3      	strb	r3, [r4, #3]
   186ec:	e7d6      	b.n	1869c <am_hal_iom_uninitialize+0x18>
   186ee:	2002      	movs	r0, #2
   186f0:	4770      	bx	lr
   186f2:	bf00      	nop
   186f4:	01123456 	.word	0x01123456

000186f8 <am_hal_iom_initialize>:
   186f8:	2805      	cmp	r0, #5
   186fa:	d817      	bhi.n	1872c <am_hal_iom_initialize+0x34>
   186fc:	b1d9      	cbz	r1, 18736 <am_hal_iom_initialize+0x3e>
   186fe:	b4f0      	push	{r4, r5, r6, r7}
   18700:	4e0e      	ldr	r6, [pc, #56]	; (1873c <am_hal_iom_initialize+0x44>)
   18702:	f640 04a4 	movw	r4, #2212	; 0x8a4
   18706:	fb04 f400 	mul.w	r4, r4, r0
   1870a:	1935      	adds	r5, r6, r4
   1870c:	4602      	mov	r2, r0
   1870e:	78eb      	ldrb	r3, [r5, #3]
   18710:	f013 0301 	ands.w	r3, r3, #1
   18714:	d10c      	bne.n	18730 <am_hal_iom_initialize+0x38>
   18716:	5930      	ldr	r0, [r6, r4]
   18718:	4f09      	ldr	r7, [pc, #36]	; (18740 <am_hal_iom_initialize+0x48>)
   1871a:	f000 407c 	and.w	r0, r0, #4227858432	; 0xfc000000
   1871e:	4307      	orrs	r7, r0
   18720:	5137      	str	r7, [r6, r4]
   18722:	4618      	mov	r0, r3
   18724:	606a      	str	r2, [r5, #4]
   18726:	600d      	str	r5, [r1, #0]
   18728:	bcf0      	pop	{r4, r5, r6, r7}
   1872a:	4770      	bx	lr
   1872c:	2005      	movs	r0, #5
   1872e:	4770      	bx	lr
   18730:	2007      	movs	r0, #7
   18732:	bcf0      	pop	{r4, r5, r6, r7}
   18734:	4770      	bx	lr
   18736:	2006      	movs	r0, #6
   18738:	4770      	bx	lr
   1873a:	bf00      	nop
   1873c:	10001404 	.word	0x10001404
   18740:	01123456 	.word	0x01123456

00018744 <am_hal_iom_enable>:
   18744:	2800      	cmp	r0, #0
   18746:	d068      	beq.n	1881a <am_hal_iom_enable+0xd6>
   18748:	b570      	push	{r4, r5, r6, lr}
   1874a:	6803      	ldr	r3, [r0, #0]
   1874c:	4a34      	ldr	r2, [pc, #208]	; (18820 <am_hal_iom_enable+0xdc>)
   1874e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18752:	4293      	cmp	r3, r2
   18754:	b084      	sub	sp, #16
   18756:	4604      	mov	r4, r0
   18758:	d150      	bne.n	187fc <am_hal_iom_enable+0xb8>
   1875a:	78c3      	ldrb	r3, [r0, #3]
   1875c:	079b      	lsls	r3, r3, #30
   1875e:	d450      	bmi.n	18802 <am_hal_iom_enable+0xbe>
   18760:	6840      	ldr	r0, [r0, #4]
   18762:	7a22      	ldrb	r2, [r4, #8]
   18764:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
   18768:	3304      	adds	r3, #4
   1876a:	0319      	lsls	r1, r3, #12
   1876c:	3a00      	subs	r2, #0
   1876e:	f8d1 3214 	ldr.w	r3, [r1, #532]	; 0x214
   18772:	bf18      	it	ne
   18774:	2201      	movne	r2, #1
   18776:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1877a:	429a      	cmp	r2, r3
   1877c:	bf0c      	ite	eq
   1877e:	2301      	moveq	r3, #1
   18780:	2310      	movne	r3, #16
   18782:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
   18786:	68e3      	ldr	r3, [r4, #12]
   18788:	b38b      	cbz	r3, 187ee <am_hal_iom_enable+0xaa>
   1878a:	6922      	ldr	r2, [r4, #16]
   1878c:	4e25      	ldr	r6, [pc, #148]	; (18824 <am_hal_iom_enable+0xe0>)
   1878e:	9302      	str	r3, [sp, #8]
   18790:	2300      	movs	r3, #0
   18792:	6263      	str	r3, [r4, #36]	; 0x24
   18794:	61e3      	str	r3, [r4, #28]
   18796:	f8c1 62a4 	str.w	r6, [r1, #676]	; 0x2a4
   1879a:	f44f 7680 	mov.w	r6, #256	; 0x100
   1879e:	0855      	lsrs	r5, r2, #1
   187a0:	f8c4 3854 	str.w	r3, [r4, #2132]	; 0x854
   187a4:	f884 383c 	strb.w	r3, [r4, #2108]	; 0x83c
   187a8:	f8c4 3838 	str.w	r3, [r4, #2104]	; 0x838
   187ac:	f8c4 3844 	str.w	r3, [r4, #2116]	; 0x844
   187b0:	f8c4 3840 	str.w	r3, [r4, #2112]	; 0x840
   187b4:	f8c4 3830 	str.w	r3, [r4, #2096]	; 0x830
   187b8:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
   187bc:	6223      	str	r3, [r4, #32]
   187be:	f8c4 385c 	str.w	r3, [r4, #2140]	; 0x85c
   187c2:	b2c0      	uxtb	r0, r0
   187c4:	2301      	movs	r3, #1
   187c6:	f8a4 682c 	strh.w	r6, [r4, #2092]	; 0x82c
   187ca:	f604 0228 	addw	r2, r4, #2088	; 0x828
   187ce:	a901      	add	r1, sp, #4
   187d0:	f88d 300c 	strb.w	r3, [sp, #12]
   187d4:	9501      	str	r5, [sp, #4]
   187d6:	f001 f92f 	bl	19a38 <am_hal_cmdq_init>
   187da:	6863      	ldr	r3, [r4, #4]
   187dc:	b9a0      	cbnz	r0, 18808 <am_hal_iom_enable+0xc4>
   187de:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   187e2:	3304      	adds	r3, #4
   187e4:	031b      	lsls	r3, r3, #12
   187e6:	2202      	movs	r2, #2
   187e8:	6226      	str	r6, [r4, #32]
   187ea:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
   187ee:	78e3      	ldrb	r3, [r4, #3]
   187f0:	2000      	movs	r0, #0
   187f2:	f043 0302 	orr.w	r3, r3, #2
   187f6:	70e3      	strb	r3, [r4, #3]
   187f8:	b004      	add	sp, #16
   187fa:	bd70      	pop	{r4, r5, r6, pc}
   187fc:	2002      	movs	r0, #2
   187fe:	b004      	add	sp, #16
   18800:	bd70      	pop	{r4, r5, r6, pc}
   18802:	2000      	movs	r0, #0
   18804:	b004      	add	sp, #16
   18806:	bd70      	pop	{r4, r5, r6, pc}
   18808:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1880c:	3304      	adds	r3, #4
   1880e:	031b      	lsls	r3, r3, #12
   18810:	2202      	movs	r2, #2
   18812:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
   18816:	b004      	add	sp, #16
   18818:	bd70      	pop	{r4, r5, r6, pc}
   1881a:	2002      	movs	r0, #2
   1881c:	4770      	bx	lr
   1881e:	bf00      	nop
   18820:	01123456 	.word	0x01123456
   18824:	00800040 	.word	0x00800040

00018828 <am_hal_iom_disable>:
   18828:	b538      	push	{r3, r4, r5, lr}
   1882a:	b358      	cbz	r0, 18884 <am_hal_iom_disable+0x5c>
   1882c:	6803      	ldr	r3, [r0, #0]
   1882e:	4a18      	ldr	r2, [pc, #96]	; (18890 <am_hal_iom_disable+0x68>)
   18830:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18834:	4293      	cmp	r3, r2
   18836:	4604      	mov	r4, r0
   18838:	d124      	bne.n	18884 <am_hal_iom_disable+0x5c>
   1883a:	78c5      	ldrb	r5, [r0, #3]
   1883c:	f015 0502 	ands.w	r5, r5, #2
   18840:	d01e      	beq.n	18880 <am_hal_iom_disable+0x58>
   18842:	6a45      	ldr	r5, [r0, #36]	; 0x24
   18844:	bb0d      	cbnz	r5, 1888a <am_hal_iom_disable+0x62>
   18846:	6843      	ldr	r3, [r0, #4]
   18848:	f8d0 0828 	ldr.w	r0, [r0, #2088]	; 0x828
   1884c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   18850:	3304      	adds	r3, #4
   18852:	031b      	lsls	r3, r3, #12
   18854:	f893 2214 	ldrb.w	r2, [r3, #532]	; 0x214
   18858:	f365 0200 	bfi	r2, r5, #0, #1
   1885c:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
   18860:	f893 2214 	ldrb.w	r2, [r3, #532]	; 0x214
   18864:	f365 1204 	bfi	r2, r5, #4, #1
   18868:	f883 2214 	strb.w	r2, [r3, #532]	; 0x214
   1886c:	b120      	cbz	r0, 18878 <am_hal_iom_disable+0x50>
   1886e:	2101      	movs	r1, #1
   18870:	f001 f95e 	bl	19b30 <am_hal_cmdq_term>
   18874:	f8c4 5828 	str.w	r5, [r4, #2088]	; 0x828
   18878:	78e3      	ldrb	r3, [r4, #3]
   1887a:	f36f 0341 	bfc	r3, #1, #1
   1887e:	70e3      	strb	r3, [r4, #3]
   18880:	4628      	mov	r0, r5
   18882:	bd38      	pop	{r3, r4, r5, pc}
   18884:	2502      	movs	r5, #2
   18886:	4628      	mov	r0, r5
   18888:	bd38      	pop	{r3, r4, r5, pc}
   1888a:	2503      	movs	r5, #3
   1888c:	e7f8      	b.n	18880 <am_hal_iom_disable+0x58>
   1888e:	bf00      	nop
   18890:	01123456 	.word	0x01123456

00018894 <am_hal_iom_power_ctrl>:
   18894:	2800      	cmp	r0, #0
   18896:	f000 80b6 	beq.w	18a06 <am_hal_iom_power_ctrl+0x172>
   1889a:	b570      	push	{r4, r5, r6, lr}
   1889c:	6803      	ldr	r3, [r0, #0]
   1889e:	4604      	mov	r4, r0
   188a0:	4867      	ldr	r0, [pc, #412]	; (18a40 <am_hal_iom_power_ctrl+0x1ac>)
   188a2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   188a6:	4283      	cmp	r3, r0
   188a8:	b082      	sub	sp, #8
   188aa:	d15a      	bne.n	18962 <am_hal_iom_power_ctrl+0xce>
   188ac:	2900      	cmp	r1, #0
   188ae:	d05e      	beq.n	1896e <am_hal_iom_power_ctrl+0xda>
   188b0:	3901      	subs	r1, #1
   188b2:	2901      	cmp	r1, #1
   188b4:	d858      	bhi.n	18968 <am_hal_iom_power_ctrl+0xd4>
   188b6:	78e3      	ldrb	r3, [r4, #3]
   188b8:	6860      	ldr	r0, [r4, #4]
   188ba:	0799      	lsls	r1, r3, #30
   188bc:	d50e      	bpl.n	188dc <am_hal_iom_power_ctrl+0x48>
   188be:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
   188c2:	3304      	adds	r3, #4
   188c4:	031b      	lsls	r3, r3, #12
   188c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
   188ca:	f003 0306 	and.w	r3, r3, #6
   188ce:	2b04      	cmp	r3, #4
   188d0:	f040 80a4 	bne.w	18a1c <am_hal_iom_power_ctrl+0x188>
   188d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   188d6:	2b00      	cmp	r3, #0
   188d8:	f040 80a0 	bne.w	18a1c <am_hal_iom_power_ctrl+0x188>
   188dc:	b3d2      	cbz	r2, 18954 <am_hal_iom_power_ctrl+0xc0>
   188de:	f500 23a0 	add.w	r3, r0, #327680	; 0x50000
   188e2:	3304      	adds	r3, #4
   188e4:	031b      	lsls	r3, r3, #12
   188e6:	2201      	movs	r2, #1
   188e8:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
   188ec:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
   188f0:	f8c4 586c 	str.w	r5, [r4, #2156]	; 0x86c
   188f4:	f8d3 5214 	ldr.w	r5, [r3, #532]	; 0x214
   188f8:	f8c4 1874 	str.w	r1, [r4, #2164]	; 0x874
   188fc:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
   18900:	f8c4 5878 	str.w	r5, [r4, #2168]	; 0x878
   18904:	f8d3 5298 	ldr.w	r5, [r3, #664]	; 0x298
   18908:	f8c4 187c 	str.w	r1, [r4, #2172]	; 0x87c
   1890c:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
   18910:	f8c4 5880 	str.w	r5, [r4, #2176]	; 0x880
   18914:	f8d3 52a8 	ldr.w	r5, [r3, #680]	; 0x2a8
   18918:	f8c4 1884 	str.w	r1, [r4, #2180]	; 0x884
   1891c:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
   18920:	f8c4 5888 	str.w	r5, [r4, #2184]	; 0x888
   18924:	f8d3 52b0 	ldr.w	r5, [r3, #688]	; 0x2b0
   18928:	f8c4 188c 	str.w	r1, [r4, #2188]	; 0x88c
   1892c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   18930:	f8c4 5890 	str.w	r5, [r4, #2192]	; 0x890
   18934:	f8d3 5400 	ldr.w	r5, [r3, #1024]	; 0x400
   18938:	f8c4 1894 	str.w	r1, [r4, #2196]	; 0x894
   1893c:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   18940:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
   18944:	f8c4 3870 	str.w	r3, [r4, #2160]	; 0x870
   18948:	f8c4 5898 	str.w	r5, [r4, #2200]	; 0x898
   1894c:	f8c4 189c 	str.w	r1, [r4, #2204]	; 0x89c
   18950:	f884 2868 	strb.w	r2, [r4, #2152]	; 0x868
   18954:	3002      	adds	r0, #2
   18956:	b2c0      	uxtb	r0, r0
   18958:	f000 fc9a 	bl	19290 <am_hal_pwrctrl_periph_disable>
   1895c:	2000      	movs	r0, #0
   1895e:	b002      	add	sp, #8
   18960:	bd70      	pop	{r4, r5, r6, pc}
   18962:	2002      	movs	r0, #2
   18964:	b002      	add	sp, #8
   18966:	bd70      	pop	{r4, r5, r6, pc}
   18968:	2006      	movs	r0, #6
   1896a:	b002      	add	sp, #8
   1896c:	bd70      	pop	{r4, r5, r6, pc}
   1896e:	2a00      	cmp	r2, #0
   18970:	d04b      	beq.n	18a0a <am_hal_iom_power_ctrl+0x176>
   18972:	f894 3868 	ldrb.w	r3, [r4, #2152]	; 0x868
   18976:	2b00      	cmp	r3, #0
   18978:	d052      	beq.n	18a20 <am_hal_iom_power_ctrl+0x18c>
   1897a:	6860      	ldr	r0, [r4, #4]
   1897c:	3002      	adds	r0, #2
   1897e:	b2c0      	uxtb	r0, r0
   18980:	f000 fc5c 	bl	1923c <am_hal_pwrctrl_periph_enable>
   18984:	6863      	ldr	r3, [r4, #4]
   18986:	f8d4 586c 	ldr.w	r5, [r4, #2156]	; 0x86c
   1898a:	f8d4 0878 	ldr.w	r0, [r4, #2168]	; 0x878
   1898e:	f8d4 1880 	ldr.w	r1, [r4, #2176]	; 0x880
   18992:	f8d4 6874 	ldr.w	r6, [r4, #2164]	; 0x874
   18996:	f8d4 287c 	ldr.w	r2, [r4, #2172]	; 0x87c
   1899a:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   1899e:	3304      	adds	r3, #4
   189a0:	031b      	lsls	r3, r3, #12
   189a2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
   189a6:	f8d4 5888 	ldr.w	r5, [r4, #2184]	; 0x888
   189aa:	f8c3 6210 	str.w	r6, [r3, #528]	; 0x210
   189ae:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
   189b2:	f8d4 088c 	ldr.w	r0, [r4, #2188]	; 0x88c
   189b6:	f8c3 1298 	str.w	r1, [r3, #664]	; 0x298
   189ba:	f8d4 1890 	ldr.w	r1, [r4, #2192]	; 0x890
   189be:	f8c3 52a8 	str.w	r5, [r3, #680]	; 0x2a8
   189c2:	f8d4 5894 	ldr.w	r5, [r4, #2196]	; 0x894
   189c6:	f8c3 02ac 	str.w	r0, [r3, #684]	; 0x2ac
   189ca:	f8d4 0898 	ldr.w	r0, [r4, #2200]	; 0x898
   189ce:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
   189d2:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
   189d6:	f8c3 5300 	str.w	r5, [r3, #768]	; 0x300
   189da:	f8d4 5870 	ldr.w	r5, [r4, #2160]	; 0x870
   189de:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
   189e2:	f894 0884 	ldrb.w	r0, [r4, #2180]	; 0x884
   189e6:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
   189ea:	f022 0101 	bic.w	r1, r2, #1
   189ee:	07d2      	lsls	r2, r2, #31
   189f0:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
   189f4:	f8c3 02a4 	str.w	r0, [r3, #676]	; 0x2a4
   189f8:	f8c3 1294 	str.w	r1, [r3, #660]	; 0x294
   189fc:	d412      	bmi.n	18a24 <am_hal_iom_power_ctrl+0x190>
   189fe:	2000      	movs	r0, #0
   18a00:	f884 0868 	strb.w	r0, [r4, #2152]	; 0x868
   18a04:	e7ae      	b.n	18964 <am_hal_iom_power_ctrl+0xd0>
   18a06:	2002      	movs	r0, #2
   18a08:	4770      	bx	lr
   18a0a:	6860      	ldr	r0, [r4, #4]
   18a0c:	9201      	str	r2, [sp, #4]
   18a0e:	3002      	adds	r0, #2
   18a10:	b2c0      	uxtb	r0, r0
   18a12:	f000 fc13 	bl	1923c <am_hal_pwrctrl_periph_enable>
   18a16:	9a01      	ldr	r2, [sp, #4]
   18a18:	4610      	mov	r0, r2
   18a1a:	e7a3      	b.n	18964 <am_hal_iom_power_ctrl+0xd0>
   18a1c:	2003      	movs	r0, #3
   18a1e:	e7a1      	b.n	18964 <am_hal_iom_power_ctrl+0xd0>
   18a20:	2007      	movs	r0, #7
   18a22:	e79f      	b.n	18964 <am_hal_iom_power_ctrl+0xd0>
   18a24:	6a62      	ldr	r2, [r4, #36]	; 0x24
   18a26:	b92a      	cbnz	r2, 18a34 <am_hal_iom_power_ctrl+0x1a0>
   18a28:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
   18a2c:	f503 7326 	add.w	r3, r3, #664	; 0x298
   18a30:	e9c2 3200 	strd	r3, r2, [r2]
   18a34:	f8d4 0828 	ldr.w	r0, [r4, #2088]	; 0x828
   18a38:	f001 f85c 	bl	19af4 <am_hal_cmdq_enable>
   18a3c:	e7df      	b.n	189fe <am_hal_iom_power_ctrl+0x16a>
   18a3e:	bf00      	nop
   18a40:	01123456 	.word	0x01123456

00018a44 <am_hal_iom_configure>:
   18a44:	2800      	cmp	r0, #0
   18a46:	d06b      	beq.n	18b20 <am_hal_iom_configure+0xdc>
   18a48:	6803      	ldr	r3, [r0, #0]
   18a4a:	4abe      	ldr	r2, [pc, #760]	; (18d44 <am_hal_iom_configure+0x300>)
   18a4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18a50:	4293      	cmp	r3, r2
   18a52:	d165      	bne.n	18b20 <am_hal_iom_configure+0xdc>
   18a54:	2900      	cmp	r1, #0
   18a56:	f000 813b 	beq.w	18cd0 <am_hal_iom_configure+0x28c>
   18a5a:	6843      	ldr	r3, [r0, #4]
   18a5c:	2b05      	cmp	r3, #5
   18a5e:	f200 8137 	bhi.w	18cd0 <am_hal_iom_configure+0x28c>
   18a62:	78c2      	ldrb	r2, [r0, #3]
   18a64:	0792      	lsls	r2, r2, #30
   18a66:	f100 8138 	bmi.w	18cda <am_hal_iom_configure+0x296>
   18a6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a6e:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
   18a72:	3304      	adds	r3, #4
   18a74:	780a      	ldrb	r2, [r1, #0]
   18a76:	7202      	strb	r2, [r0, #8]
   18a78:	031b      	lsls	r3, r3, #12
   18a7a:	f241 0410 	movw	r4, #4112	; 0x1010
   18a7e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
   18a82:	2a00      	cmp	r2, #0
   18a84:	d04e      	beq.n	18b24 <am_hal_iom_configure+0xe0>
   18a86:	2a01      	cmp	r2, #1
   18a88:	f040 8129 	bne.w	18cde <am_hal_iom_configure+0x29a>
   18a8c:	684c      	ldr	r4, [r1, #4]
   18a8e:	4aae      	ldr	r2, [pc, #696]	; (18d48 <am_hal_iom_configure+0x304>)
   18a90:	4294      	cmp	r4, r2
   18a92:	f000 8144 	beq.w	18d1e <am_hal_iom_configure+0x2da>
   18a96:	4aad      	ldr	r2, [pc, #692]	; (18d4c <am_hal_iom_configure+0x308>)
   18a98:	4294      	cmp	r4, r2
   18a9a:	f000 813a 	beq.w	18d12 <am_hal_iom_configure+0x2ce>
   18a9e:	4aac      	ldr	r2, [pc, #688]	; (18d50 <am_hal_iom_configure+0x30c>)
   18aa0:	4294      	cmp	r4, r2
   18aa2:	f000 812f 	beq.w	18d04 <am_hal_iom_configure+0x2c0>
   18aa6:	4aab      	ldr	r2, [pc, #684]	; (18d54 <am_hal_iom_configure+0x310>)
   18aa8:	fbb2 f2f4 	udiv	r2, r2, r4
   18aac:	3a01      	subs	r2, #1
   18aae:	2aff      	cmp	r2, #255	; 0xff
   18ab0:	f240 811c 	bls.w	18cec <am_hal_iom_configure+0x2a8>
   18ab4:	4aa8      	ldr	r2, [pc, #672]	; (18d58 <am_hal_iom_configure+0x314>)
   18ab6:	fbb2 f2f4 	udiv	r2, r2, r4
   18aba:	3a01      	subs	r2, #1
   18abc:	2aff      	cmp	r2, #255	; 0xff
   18abe:	f240 8137 	bls.w	18d30 <am_hal_iom_configure+0x2ec>
   18ac2:	4aa6      	ldr	r2, [pc, #664]	; (18d5c <am_hal_iom_configure+0x318>)
   18ac4:	fbb2 f2f4 	udiv	r2, r2, r4
   18ac8:	3a01      	subs	r2, #1
   18aca:	2aff      	cmp	r2, #255	; 0xff
   18acc:	f240 812d 	bls.w	18d2a <am_hal_iom_configure+0x2e6>
   18ad0:	4aa3      	ldr	r2, [pc, #652]	; (18d60 <am_hal_iom_configure+0x31c>)
   18ad2:	fbb2 f2f4 	udiv	r2, r2, r4
   18ad6:	3a01      	subs	r2, #1
   18ad8:	2aff      	cmp	r2, #255	; 0xff
   18ada:	f240 812c 	bls.w	18d36 <am_hal_iom_configure+0x2f2>
   18ade:	4aa1      	ldr	r2, [pc, #644]	; (18d64 <am_hal_iom_configure+0x320>)
   18ae0:	fbb2 f2f4 	udiv	r2, r2, r4
   18ae4:	3a01      	subs	r2, #1
   18ae6:	2aff      	cmp	r2, #255	; 0xff
   18ae8:	f240 8128 	bls.w	18d3c <am_hal_iom_configure+0x2f8>
   18aec:	4a9e      	ldr	r2, [pc, #632]	; (18d68 <am_hal_iom_configure+0x324>)
   18aee:	fbb2 f2f4 	udiv	r2, r2, r4
   18af2:	3a01      	subs	r2, #1
   18af4:	2aff      	cmp	r2, #255	; 0xff
   18af6:	bf98      	it	ls
   18af8:	f44f 65e0 	movls.w	r5, #1792	; 0x700
   18afc:	f200 80ea 	bhi.w	18cd4 <am_hal_iom_configure+0x290>
   18b00:	0856      	lsrs	r6, r2, #1
   18b02:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
   18b06:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
   18b0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   18b0e:	4d97      	ldr	r5, [pc, #604]	; (18d6c <am_hal_iom_configure+0x328>)
   18b10:	f8c3 5400 	str.w	r5, [r3, #1024]	; 0x400
   18b14:	f042 0201 	orr.w	r2, r2, #1
   18b18:	4d95      	ldr	r5, [pc, #596]	; (18d70 <am_hal_iom_configure+0x32c>)
   18b1a:	fbb5 f4f4 	udiv	r4, r5, r4
   18b1e:	e0b3      	b.n	18c88 <am_hal_iom_configure+0x244>
   18b20:	2002      	movs	r0, #2
   18b22:	4770      	bx	lr
   18b24:	7a0f      	ldrb	r7, [r1, #8]
   18b26:	2f03      	cmp	r7, #3
   18b28:	f200 80d4 	bhi.w	18cd4 <am_hal_iom_configure+0x290>
   18b2c:	684e      	ldr	r6, [r1, #4]
   18b2e:	4a90      	ldr	r2, [pc, #576]	; (18d70 <am_hal_iom_configure+0x32c>)
   18b30:	4296      	cmp	r6, r2
   18b32:	f200 80cf 	bhi.w	18cd4 <am_hal_iom_configure+0x290>
   18b36:	fbb2 f4f6 	udiv	r4, r2, r6
   18b3a:	2e00      	cmp	r6, #0
   18b3c:	f000 80d9 	beq.w	18cf2 <am_hal_iom_configure+0x2ae>
   18b40:	fb06 2214 	mls	r2, r6, r4, r2
   18b44:	2a00      	cmp	r2, #0
   18b46:	bf0c      	ite	eq
   18b48:	4625      	moveq	r5, r4
   18b4a:	1c65      	addne	r5, r4, #1
   18b4c:	f1c5 0c00 	rsb	ip, r5, #0
   18b50:	ea0c 0c05 	and.w	ip, ip, r5
   18b54:	fabc fc8c 	clz	ip, ip
   18b58:	f1cc 0c1f 	rsb	ip, ip, #31
   18b5c:	f1bc 0f06 	cmp.w	ip, #6
   18b60:	bfa8      	it	ge
   18b62:	f04f 0c06 	movge.w	ip, #6
   18b66:	f5b6 6f37 	cmp.w	r6, #2928	; 0xb70
   18b6a:	f240 80ba 	bls.w	18ce2 <am_hal_iom_configure+0x29e>
   18b6e:	f8df e224 	ldr.w	lr, [pc, #548]	; 18d94 <am_hal_iom_configure+0x350>
   18b72:	f5a6 0274 	sub.w	r2, r6, #15990784	; 0xf40000
   18b76:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
   18b7a:	4572      	cmp	r2, lr
   18b7c:	bf35      	itete	cc
   18b7e:	f44f 6200 	movcc.w	r2, #2048	; 0x800
   18b82:	2200      	movcs	r2, #0
   18b84:	f04f 0803 	movcc.w	r8, #3
   18b88:	f04f 0801 	movcs.w	r8, #1
   18b8c:	fa08 fe0c 	lsl.w	lr, r8, ip
   18b90:	fbb5 fafe 	udiv	sl, r5, lr
   18b94:	fb0e 5e1a 	mls	lr, lr, sl, r5
   18b98:	f1be 0f00 	cmp.w	lr, #0
   18b9c:	bf18      	it	ne
   18b9e:	f10a 0a01 	addne.w	sl, sl, #1
   18ba2:	faba f98a 	clz	r9, sl
   18ba6:	f1c9 091f 	rsb	r9, r9, #31
   18baa:	f1b9 0f07 	cmp.w	r9, #7
   18bae:	f240 80a2 	bls.w	18cf6 <am_hal_iom_configure+0x2b2>
   18bb2:	f1ac 0c07 	sub.w	ip, ip, #7
   18bb6:	44cc      	add	ip, r9
   18bb8:	f10c 0e01 	add.w	lr, ip, #1
   18bbc:	f1be 0f07 	cmp.w	lr, #7
   18bc0:	f200 8097 	bhi.w	18cf2 <am_hal_iom_configure+0x2ae>
   18bc4:	f1a9 0907 	sub.w	r9, r9, #7
   18bc8:	f04f 0b01 	mov.w	fp, #1
   18bcc:	fa0b fb09 	lsl.w	fp, fp, r9
   18bd0:	f10b 3bff 	add.w	fp, fp, #4294967295
   18bd4:	ea0b 0b0a 	and.w	fp, fp, sl
   18bd8:	fa2a f909 	lsr.w	r9, sl, r9
   18bdc:	f1bb 0f00 	cmp.w	fp, #0
   18be0:	bf0c      	ite	eq
   18be2:	46ca      	moveq	sl, r9
   18be4:	f109 0a01 	addne.w	sl, r9, #1
   18be8:	f8df 9168 	ldr.w	r9, [pc, #360]	; 18d54 <am_hal_iom_configure+0x310>
   18bec:	454e      	cmp	r6, r9
   18bee:	f10a 39ff 	add.w	r9, sl, #4294967295
   18bf2:	f080 8083 	bcs.w	18cfc <am_hal_iom_configure+0x2b8>
   18bf6:	2601      	movs	r6, #1
   18bf8:	fa06 f60c 	lsl.w	r6, r6, ip
   18bfc:	42b5      	cmp	r5, r6
   18bfe:	d07d      	beq.n	18cfc <am_hal_iom_configure+0x2b8>
   18c00:	4656      	mov	r6, sl
   18c02:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
   18c06:	107d      	asrs	r5, r7, #1
   18c08:	2d01      	cmp	r5, #1
   18c0a:	bf08      	it	eq
   18c0c:	f1aa 0502 	subeq.w	r5, sl, #2
   18c10:	fa08 fa0c 	lsl.w	sl, r8, ip
   18c14:	f8df 8158 	ldr.w	r8, [pc, #344]	; 18d70 <am_hal_iom_configure+0x32c>
   18c18:	f8df c17c 	ldr.w	ip, [pc, #380]	; 18d98 <am_hal_iom_configure+0x354>
   18c1c:	fb06 f60a 	mul.w	r6, r6, sl
   18c20:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
   18c24:	ea4f 0a56 	mov.w	sl, r6, lsr #1
   18c28:	ea42 020b 	orr.w	r2, r2, fp
   18c2c:	fbb8 fbf6 	udiv	fp, r8, r6
   18c30:	fb06 861b 	mls	r6, r6, fp, r8
   18c34:	bf0c      	ite	eq
   18c36:	086d      	lsreq	r5, r5, #1
   18c38:	ea4f 0559 	movne.w	r5, r9, lsr #1
   18c3c:	45b2      	cmp	sl, r6
   18c3e:	bf2c      	ite	cs
   18c40:	46da      	movcs	sl, fp
   18c42:	f10b 0a01 	addcc.w	sl, fp, #1
   18c46:	ea4f 4805 	mov.w	r8, r5, lsl #16
   18c4a:	fbac 5c0a 	umull	r5, ip, ip, sl
   18c4e:	4d49      	ldr	r5, [pc, #292]	; (18d74 <am_hal_iom_configure+0x330>)
   18c50:	4e49      	ldr	r6, [pc, #292]	; (18d78 <am_hal_iom_configure+0x334>)
   18c52:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
   18c56:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
   18c5a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   18c5e:	45aa      	cmp	sl, r5
   18c60:	ea42 0208 	orr.w	r2, r2, r8
   18c64:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
   18c68:	fb06 a61c 	mls	r6, r6, ip, sl
   18c6c:	d908      	bls.n	18c80 <am_hal_iom_configure+0x23c>
   18c6e:	f10c 35ff 	add.w	r5, ip, #4294967295
   18c72:	ea05 0c0c 	and.w	ip, r5, ip
   18c76:	ea5c 0506 	orrs.w	r5, ip, r6
   18c7a:	d101      	bne.n	18c80 <am_hal_iom_configure+0x23c>
   18c7c:	f44e 6200 	orr.w	r2, lr, #2048	; 0x800
   18c80:	f042 0201 	orr.w	r2, r2, #1
   18c84:	f8c3 7300 	str.w	r7, [r3, #768]	; 0x300
   18c88:	e9d1 7503 	ldrd	r7, r5, [r1, #12]
   18c8c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
   18c90:	f246 015f 	movw	r1, #24671	; 0x605f
   18c94:	f1a5 0208 	sub.w	r2, r5, #8
   18c98:	ebb1 0f82 	cmp.w	r1, r2, lsl #2
   18c9c:	ea4f 0382 	mov.w	r3, r2, lsl #2
   18ca0:	bf28      	it	cs
   18ca2:	4a36      	ldrcs	r2, [pc, #216]	; (18d7c <am_hal_iom_configure+0x338>)
   18ca4:	f8c0 4864 	str.w	r4, [r0, #2148]	; 0x864
   18ca8:	bf26      	itte	cs
   18caa:	fba2 2303 	umullcs	r2, r3, r2, r3
   18cae:	099b      	lsrcs	r3, r3, #6
   18cb0:	f44f 7380 	movcc.w	r3, #256	; 0x100
   18cb4:	f8c0 3858 	str.w	r3, [r0, #2136]	; 0x858
   18cb8:	2300      	movs	r3, #0
   18cba:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   18cbe:	f8c0 38a0 	str.w	r3, [r0, #2208]	; 0x8a0
   18cc2:	e9c0 7503 	strd	r7, r5, [r0, #12]
   18cc6:	f8c0 6860 	str.w	r6, [r0, #2144]	; 0x860
   18cca:	4618      	mov	r0, r3
   18ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cd0:	2006      	movs	r0, #6
   18cd2:	4770      	bx	lr
   18cd4:	2006      	movs	r0, #6
   18cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cda:	2007      	movs	r0, #7
   18cdc:	4770      	bx	lr
   18cde:	2005      	movs	r0, #5
   18ce0:	e7f9      	b.n	18cd6 <am_hal_iom_configure+0x292>
   18ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18ce6:	f04f 0803 	mov.w	r8, #3
   18cea:	e74f      	b.n	18b8c <am_hal_iom_configure+0x148>
   18cec:	f44f 7500 	mov.w	r5, #512	; 0x200
   18cf0:	e706      	b.n	18b00 <am_hal_iom_configure+0xbc>
   18cf2:	2201      	movs	r2, #1
   18cf4:	e7c6      	b.n	18c84 <am_hal_iom_configure+0x240>
   18cf6:	f10c 0e01 	add.w	lr, ip, #1
   18cfa:	e775      	b.n	18be8 <am_hal_iom_configure+0x1a4>
   18cfc:	2601      	movs	r6, #1
   18cfe:	f04f 0b00 	mov.w	fp, #0
   18d02:	e780      	b.n	18c06 <am_hal_iom_configure+0x1c2>
   18d04:	4a1e      	ldr	r2, [pc, #120]	; (18d80 <am_hal_iom_configure+0x33c>)
   18d06:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   18d0a:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
   18d0e:	4a1d      	ldr	r2, [pc, #116]	; (18d84 <am_hal_iom_configure+0x340>)
   18d10:	e7ba      	b.n	18c88 <am_hal_iom_configure+0x244>
   18d12:	4a16      	ldr	r2, [pc, #88]	; (18d6c <am_hal_iom_configure+0x328>)
   18d14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   18d18:	2430      	movs	r4, #48	; 0x30
   18d1a:	4a1b      	ldr	r2, [pc, #108]	; (18d88 <am_hal_iom_configure+0x344>)
   18d1c:	e7b4      	b.n	18c88 <am_hal_iom_configure+0x244>
   18d1e:	4a1b      	ldr	r2, [pc, #108]	; (18d8c <am_hal_iom_configure+0x348>)
   18d20:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   18d24:	2478      	movs	r4, #120	; 0x78
   18d26:	4a1a      	ldr	r2, [pc, #104]	; (18d90 <am_hal_iom_configure+0x34c>)
   18d28:	e7ae      	b.n	18c88 <am_hal_iom_configure+0x244>
   18d2a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   18d2e:	e6e7      	b.n	18b00 <am_hal_iom_configure+0xbc>
   18d30:	f44f 7540 	mov.w	r5, #768	; 0x300
   18d34:	e6e4      	b.n	18b00 <am_hal_iom_configure+0xbc>
   18d36:	f44f 65a0 	mov.w	r5, #1280	; 0x500
   18d3a:	e6e1      	b.n	18b00 <am_hal_iom_configure+0xbc>
   18d3c:	f44f 65c0 	mov.w	r5, #1536	; 0x600
   18d40:	e6de      	b.n	18b00 <am_hal_iom_configure+0xbc>
   18d42:	bf00      	nop
   18d44:	01123456 	.word	0x01123456
   18d48:	00061a80 	.word	0x00061a80
   18d4c:	000f4240 	.word	0x000f4240
   18d50:	000186a0 	.word	0x000186a0
   18d54:	00b71b00 	.word	0x00b71b00
   18d58:	005b8d80 	.word	0x005b8d80
   18d5c:	002dc6c0 	.word	0x002dc6c0
   18d60:	0016e360 	.word	0x0016e360
   18d64:	000b71b0 	.word	0x000b71b0
   18d68:	0005b8d8 	.word	0x0005b8d8
   18d6c:	00213040 	.word	0x00213040
   18d70:	02dc6c00 	.word	0x02dc6c00
   18d74:	0003d08f 	.word	0x0003d08f
   18d78:	0003d090 	.word	0x0003d090
   18d7c:	aaaaaaab 	.word	0xaaaaaaab
   18d80:	0003f070 	.word	0x0003f070
   18d84:	773b1201 	.word	0x773b1201
   18d88:	06031301 	.word	0x06031301
   18d8c:	0003f270 	.word	0x0003f270
   18d90:	1d0e1201 	.word	0x1d0e1201
   18d94:	007a1200 	.word	0x007a1200
   18d98:	431bde83 	.word	0x431bde83

00018d9c <am_hal_iom_spi_blocking_fullduplex>:
   18d9c:	2800      	cmp	r0, #0
   18d9e:	f000 8114 	beq.w	18fca <am_hal_iom_spi_blocking_fullduplex+0x22e>
   18da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18da6:	6803      	ldr	r3, [r0, #0]
   18da8:	4ad2      	ldr	r2, [pc, #840]	; (190f4 <am_hal_iom_spi_blocking_fullduplex+0x358>)
   18daa:	ed2d 8b02 	vpush	{d8}
   18dae:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   18db2:	4293      	cmp	r3, r2
   18db4:	b085      	sub	sp, #20
   18db6:	4607      	mov	r7, r0
   18db8:	f040 80e9 	bne.w	18f8e <am_hal_iom_spi_blocking_fullduplex+0x1f2>
   18dbc:	4688      	mov	r8, r1
   18dbe:	2900      	cmp	r1, #0
   18dc0:	f000 80f0 	beq.w	18fa4 <am_hal_iom_spi_blocking_fullduplex+0x208>
   18dc4:	7c0b      	ldrb	r3, [r1, #16]
   18dc6:	2b02      	cmp	r3, #2
   18dc8:	f040 80f3 	bne.w	18fb2 <am_hal_iom_spi_blocking_fullduplex+0x216>
   18dcc:	f8d1 9004 	ldr.w	r9, [r1, #4]
   18dd0:	f1b9 0f03 	cmp.w	r9, #3
   18dd4:	f200 80e6 	bhi.w	18fa4 <am_hal_iom_spi_blocking_fullduplex+0x208>
   18dd8:	f8d1 a008 	ldr.w	sl, [r1, #8]
   18ddc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
   18de0:	f04f 33ff 	mov.w	r3, #4294967295
   18de4:	4093      	lsls	r3, r2
   18de6:	ea13 0f0a 	tst.w	r3, sl
   18dea:	f040 80db 	bne.w	18fa4 <am_hal_iom_spi_blocking_fullduplex+0x208>
   18dee:	f8d1 b00c 	ldr.w	fp, [r1, #12]
   18df2:	f1bb 0f00 	cmp.w	fp, #0
   18df6:	f000 80e3 	beq.w	18fc0 <am_hal_iom_spi_blocking_fullduplex+0x224>
   18dfa:	698d      	ldr	r5, [r1, #24]
   18dfc:	2d00      	cmp	r5, #0
   18dfe:	f000 80d1 	beq.w	18fa4 <am_hal_iom_spi_blocking_fullduplex+0x208>
   18e02:	694e      	ldr	r6, [r1, #20]
   18e04:	2e00      	cmp	r6, #0
   18e06:	f000 80cd 	beq.w	18fa4 <am_hal_iom_spi_blocking_fullduplex+0x208>
   18e0a:	7a03      	ldrb	r3, [r0, #8]
   18e0c:	2b01      	cmp	r3, #1
   18e0e:	f000 80c5 	beq.w	18f9c <am_hal_iom_spi_blocking_fullduplex+0x200>
   18e12:	b943      	cbnz	r3, 18e26 <am_hal_iom_spi_blocking_fullduplex+0x8a>
   18e14:	f8d8 3000 	ldr.w	r3, [r8]
   18e18:	2b03      	cmp	r3, #3
   18e1a:	f200 80c3 	bhi.w	18fa4 <am_hal_iom_spi_blocking_fullduplex+0x208>
   18e1e:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
   18e22:	f080 80bf 	bcs.w	18fa4 <am_hal_iom_spi_blocking_fullduplex+0x208>
   18e26:	e9d8 6505 	ldrd	r6, r5, [r8, #20]
   18e2a:	2301      	movs	r3, #1
   18e2c:	9300      	str	r3, [sp, #0]
   18e2e:	687c      	ldr	r4, [r7, #4]
   18e30:	9402      	str	r4, [sp, #8]
   18e32:	2300      	movs	r3, #0
   18e34:	f898 401c 	ldrb.w	r4, [r8, #28]
   18e38:	f8d7 0860 	ldr.w	r0, [r7, #2144]	; 0x860
   18e3c:	9403      	str	r4, [sp, #12]
   18e3e:	f04f 32ff 	mov.w	r2, #4294967295
   18e42:	f107 0124 	add.w	r1, r7, #36	; 0x24
   18e46:	f7ff f9d9 	bl	181fc <am_hal_flash_delay_status_check>
   18e4a:	4603      	mov	r3, r0
   18e4c:	2800      	cmp	r0, #0
   18e4e:	f040 809f 	bne.w	18f90 <am_hal_iom_spi_blocking_fullduplex+0x1f4>
   18e52:	9b02      	ldr	r3, [sp, #8]
   18e54:	f503 24a0 	add.w	r4, r3, #327680	; 0x50000
   18e58:	3404      	adds	r4, #4
   18e5a:	2301      	movs	r3, #1
   18e5c:	9300      	str	r3, [sp, #0]
   18e5e:	0324      	lsls	r4, r4, #12
   18e60:	f504 712d 	add.w	r1, r4, #692	; 0x2b4
   18e64:	2304      	movs	r3, #4
   18e66:	f8d7 0860 	ldr.w	r0, [r7, #2144]	; 0x860
   18e6a:	2206      	movs	r2, #6
   18e6c:	ee08 1a10 	vmov	s16, r1
   18e70:	f7ff f9c4 	bl	181fc <am_hal_flash_delay_status_check>
   18e74:	4603      	mov	r3, r0
   18e76:	2800      	cmp	r0, #0
   18e78:	f040 808a 	bne.w	18f90 <am_hal_iom_spi_blocking_fullduplex+0x1f4>
   18e7c:	f8d8 2000 	ldr.w	r2, [r8]
   18e80:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
   18e84:	9102      	str	r1, [sp, #8]
   18e86:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
   18e8a:	18b9      	adds	r1, r7, r2
   18e8c:	f04f 30ff 	mov.w	r0, #4294967295
   18e90:	f8c4 0208 	str.w	r0, [r4, #520]	; 0x208
   18e94:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
   18e98:	f891 18a0 	ldrb.w	r1, [r1, #2208]	; 0x8a0
   18e9c:	f8c4 121c 	str.w	r1, [r4, #540]	; 0x21c
   18ea0:	7a39      	ldrb	r1, [r7, #8]
   18ea2:	2900      	cmp	r1, #0
   18ea4:	f000 809b 	beq.w	18fde <am_hal_iom_spi_blocking_fullduplex+0x242>
   18ea8:	4618      	mov	r0, r3
   18eaa:	4a93      	ldr	r2, [pc, #588]	; (190f8 <am_hal_iom_spi_blocking_fullduplex+0x35c>)
   18eac:	f8d8 800c 	ldr.w	r8, [r8, #12]
   18eb0:	ea4f 1349 	mov.w	r3, r9, lsl #5
   18eb4:	f3ca 210f 	ubfx	r1, sl, #8, #16
   18eb8:	ea43 630a 	orr.w	r3, r3, sl, lsl #24
   18ebc:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
   18ec0:	ea02 220b 	and.w	r2, r2, fp, lsl #8
   18ec4:	9903      	ldr	r1, [sp, #12]
   18ec6:	4303      	orrs	r3, r0
   18ec8:	4313      	orrs	r3, r2
   18eca:	f8d4 2300 	ldr.w	r2, [r4, #768]	; 0x300
   18ece:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
   18ed2:	f043 0301 	orr.w	r3, r3, #1
   18ed6:	f042 0204 	orr.w	r2, r2, #4
   18eda:	f8c4 2300 	str.w	r2, [r4, #768]	; 0x300
   18ede:	46c3      	mov	fp, r8
   18ee0:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
   18ee4:	f1b8 0f00 	cmp.w	r8, #0
   18ee8:	d073      	beq.n	18fd2 <am_hal_iom_spi_blocking_fullduplex+0x236>
   18eea:	46aa      	mov	sl, r5
   18eec:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   18ef0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   18ef4:	f3c2 2207 	ubfx	r2, r2, #8, #8
   18ef8:	f3c1 4107 	ubfx	r1, r1, #16, #8
   18efc:	2a03      	cmp	r2, #3
   18efe:	460b      	mov	r3, r1
   18f00:	f200 8088 	bhi.w	19014 <am_hal_iom_spi_blocking_fullduplex+0x278>
   18f04:	2903      	cmp	r1, #3
   18f06:	d870      	bhi.n	18fea <am_hal_iom_spi_blocking_fullduplex+0x24e>
   18f08:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 190fc <am_hal_iom_spi_blocking_fullduplex+0x360>
   18f0c:	2010      	movs	r0, #16
   18f0e:	f7ff f965 	bl	181dc <am_hal_flash_delay>
   18f12:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   18f16:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   18f1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   18f1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   18f22:	2a03      	cmp	r2, #3
   18f24:	f001 0101 	and.w	r1, r1, #1
   18f28:	f3c3 4307 	ubfx	r3, r3, #16, #8
   18f2c:	d870      	bhi.n	19010 <am_hal_iom_spi_blocking_fullduplex+0x274>
   18f2e:	2b03      	cmp	r3, #3
   18f30:	d859      	bhi.n	18fe6 <am_hal_iom_spi_blocking_fullduplex+0x24a>
   18f32:	f1b9 0901 	subs.w	r9, r9, #1
   18f36:	d003      	beq.n	18f40 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
   18f38:	2900      	cmp	r1, #0
   18f3a:	d0e7      	beq.n	18f0c <am_hal_iom_spi_blocking_fullduplex+0x170>
   18f3c:	455b      	cmp	r3, fp
   18f3e:	d2e5      	bcs.n	18f0c <am_hal_iom_spi_blocking_fullduplex+0x170>
   18f40:	2501      	movs	r5, #1
   18f42:	2304      	movs	r3, #4
   18f44:	ee18 1a10 	vmov	r1, s16
   18f48:	486c      	ldr	r0, [pc, #432]	; (190fc <am_hal_iom_spi_blocking_fullduplex+0x360>)
   18f4a:	9500      	str	r5, [sp, #0]
   18f4c:	2206      	movs	r2, #6
   18f4e:	f7ff f955 	bl	181fc <am_hal_flash_delay_status_check>
   18f52:	4603      	mov	r3, r0
   18f54:	b9e0      	cbnz	r0, 18f90 <am_hal_iom_spi_blocking_fullduplex+0x1f4>
   18f56:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
   18f5a:	f013 0f6c 	tst.w	r3, #108	; 0x6c
   18f5e:	f040 80b0 	bne.w	190c2 <am_hal_iom_spi_blocking_fullduplex+0x326>
   18f62:	0599      	lsls	r1, r3, #22
   18f64:	f100 80b7 	bmi.w	190d6 <am_hal_iom_spi_blocking_fullduplex+0x33a>
   18f68:	06da      	lsls	r2, r3, #27
   18f6a:	f100 80b6 	bmi.w	190da <am_hal_iom_spi_blocking_fullduplex+0x33e>
   18f6e:	f413 4f90 	tst.w	r3, #18432	; 0x4800
   18f72:	f040 80b4 	bne.w	190de <am_hal_iom_spi_blocking_fullduplex+0x342>
   18f76:	f1b8 0300 	subs.w	r3, r8, #0
   18f7a:	bf18      	it	ne
   18f7c:	2301      	movne	r3, #1
   18f7e:	f04f 32ff 	mov.w	r2, #4294967295
   18f82:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
   18f86:	9a02      	ldr	r2, [sp, #8]
   18f88:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   18f8c:	e000      	b.n	18f90 <am_hal_iom_spi_blocking_fullduplex+0x1f4>
   18f8e:	2302      	movs	r3, #2
   18f90:	4618      	mov	r0, r3
   18f92:	b005      	add	sp, #20
   18f94:	ecbd 8b02 	vpop	{d8}
   18f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f9c:	f5bb 5f80 	cmp.w	fp, #4096	; 0x1000
   18fa0:	f4ff af43 	bcc.w	18e2a <am_hal_iom_spi_blocking_fullduplex+0x8e>
   18fa4:	2306      	movs	r3, #6
   18fa6:	4618      	mov	r0, r3
   18fa8:	b005      	add	sp, #20
   18faa:	ecbd 8b02 	vpop	{d8}
   18fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fb2:	2307      	movs	r3, #7
   18fb4:	4618      	mov	r0, r3
   18fb6:	b005      	add	sp, #20
   18fb8:	ecbd 8b02 	vpop	{d8}
   18fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fc0:	7a03      	ldrb	r3, [r0, #8]
   18fc2:	2b01      	cmp	r3, #1
   18fc4:	f47f af25 	bne.w	18e12 <am_hal_iom_spi_blocking_fullduplex+0x76>
   18fc8:	e72d      	b.n	18e26 <am_hal_iom_spi_blocking_fullduplex+0x8a>
   18fca:	2302      	movs	r3, #2
   18fcc:	4618      	mov	r0, r3
   18fce:	4770      	bx	lr
   18fd0:	4606      	mov	r6, r0
   18fd2:	f1bb 0f00 	cmp.w	fp, #0
   18fd6:	d054      	beq.n	19082 <am_hal_iom_spi_blocking_fullduplex+0x2e6>
   18fd8:	f04f 0800 	mov.w	r8, #0
   18fdc:	e785      	b.n	18eea <am_hal_iom_spi_blocking_fullduplex+0x14e>
   18fde:	0513      	lsls	r3, r2, #20
   18fe0:	f403 1040 	and.w	r0, r3, #3145728	; 0x300000
   18fe4:	e761      	b.n	18eaa <am_hal_iom_spi_blocking_fullduplex+0x10e>
   18fe6:	2900      	cmp	r1, #0
   18fe8:	d1aa      	bne.n	18f40 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
   18fea:	f1bb 0f00 	cmp.w	fp, #0
   18fee:	d008      	beq.n	19002 <am_hal_iom_spi_blocking_fullduplex+0x266>
   18ff0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   18ff4:	f8ca 2000 	str.w	r2, [sl]
   18ff8:	f1bb 0f03 	cmp.w	fp, #3
   18ffc:	f105 0504 	add.w	r5, r5, #4
   19000:	d824      	bhi.n	1904c <am_hal_iom_spi_blocking_fullduplex+0x2b0>
   19002:	f1b8 0f00 	cmp.w	r8, #0
   19006:	d03c      	beq.n	19082 <am_hal_iom_spi_blocking_fullduplex+0x2e6>
   19008:	46aa      	mov	sl, r5
   1900a:	f04f 0b00 	mov.w	fp, #0
   1900e:	e76d      	b.n	18eec <am_hal_iom_spi_blocking_fullduplex+0x150>
   19010:	2900      	cmp	r1, #0
   19012:	d195      	bne.n	18f40 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
   19014:	f1b8 0f00 	cmp.w	r8, #0
   19018:	d063      	beq.n	190e2 <am_hal_iom_spi_blocking_fullduplex+0x346>
   1901a:	4630      	mov	r0, r6
   1901c:	f1b8 0f03 	cmp.w	r8, #3
   19020:	f850 1b04 	ldr.w	r1, [r0], #4
   19024:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
   19028:	d82e      	bhi.n	19088 <am_hal_iom_spi_blocking_fullduplex+0x2ec>
   1902a:	2b03      	cmp	r3, #3
   1902c:	d9d0      	bls.n	18fd0 <am_hal_iom_spi_blocking_fullduplex+0x234>
   1902e:	f1bb 0f00 	cmp.w	fp, #0
   19032:	d026      	beq.n	19082 <am_hal_iom_spi_blocking_fullduplex+0x2e6>
   19034:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   19038:	f8ca 2000 	str.w	r2, [sl]
   1903c:	f1bb 0f03 	cmp.w	fp, #3
   19040:	f105 0504 	add.w	r5, r5, #4
   19044:	d91d      	bls.n	19082 <am_hal_iom_spi_blocking_fullduplex+0x2e6>
   19046:	4606      	mov	r6, r0
   19048:	f04f 0800 	mov.w	r8, #0
   1904c:	1f1a      	subs	r2, r3, #4
   1904e:	f022 0203 	bic.w	r2, r2, #3
   19052:	442a      	add	r2, r5
   19054:	42aa      	cmp	r2, r5
   19056:	f1ab 0b04 	sub.w	fp, fp, #4
   1905a:	f43f af43 	beq.w	18ee4 <am_hal_iom_spi_blocking_fullduplex+0x148>
   1905e:	f1bb 0f00 	cmp.w	fp, #0
   19062:	f43f af3f 	beq.w	18ee4 <am_hal_iom_spi_blocking_fullduplex+0x148>
   19066:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1906a:	f845 3b04 	str.w	r3, [r5], #4
   1906e:	f1bb 0f03 	cmp.w	fp, #3
   19072:	d8ef      	bhi.n	19054 <am_hal_iom_spi_blocking_fullduplex+0x2b8>
   19074:	f04f 0b00 	mov.w	fp, #0
   19078:	f1b8 0f00 	cmp.w	r8, #0
   1907c:	f47f af35 	bne.w	18eea <am_hal_iom_spi_blocking_fullduplex+0x14e>
   19080:	e7a7      	b.n	18fd2 <am_hal_iom_spi_blocking_fullduplex+0x236>
   19082:	f04f 0800 	mov.w	r8, #0
   19086:	e75b      	b.n	18f40 <am_hal_iom_spi_blocking_fullduplex+0x1a4>
   19088:	1f11      	subs	r1, r2, #4
   1908a:	f021 0103 	bic.w	r1, r1, #3
   1908e:	3104      	adds	r1, #4
   19090:	4431      	add	r1, r6
   19092:	4606      	mov	r6, r0
   19094:	428e      	cmp	r6, r1
   19096:	f1a8 0804 	sub.w	r8, r8, #4
   1909a:	d00b      	beq.n	190b4 <am_hal_iom_spi_blocking_fullduplex+0x318>
   1909c:	f1b8 0f00 	cmp.w	r8, #0
   190a0:	d008      	beq.n	190b4 <am_hal_iom_spi_blocking_fullduplex+0x318>
   190a2:	f856 2b04 	ldr.w	r2, [r6], #4
   190a6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   190aa:	f1b8 0f03 	cmp.w	r8, #3
   190ae:	d8f1      	bhi.n	19094 <am_hal_iom_spi_blocking_fullduplex+0x2f8>
   190b0:	f04f 0800 	mov.w	r8, #0
   190b4:	2b03      	cmp	r3, #3
   190b6:	d898      	bhi.n	18fea <am_hal_iom_spi_blocking_fullduplex+0x24e>
   190b8:	f1b8 0f00 	cmp.w	r8, #0
   190bc:	f47f af15 	bne.w	18eea <am_hal_iom_spi_blocking_fullduplex+0x14e>
   190c0:	e787      	b.n	18fd2 <am_hal_iom_spi_blocking_fullduplex+0x236>
   190c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   190c6:	f8d4 1204 	ldr.w	r1, [r4, #516]	; 0x204
   190ca:	9303      	str	r3, [sp, #12]
   190cc:	4638      	mov	r0, r7
   190ce:	f7ff fa5b 	bl	18588 <internal_iom_reset_on_error>
   190d2:	9b03      	ldr	r3, [sp, #12]
   190d4:	e753      	b.n	18f7e <am_hal_iom_spi_blocking_fullduplex+0x1e2>
   190d6:	4b0a      	ldr	r3, [pc, #40]	; (19100 <am_hal_iom_spi_blocking_fullduplex+0x364>)
   190d8:	e7f5      	b.n	190c6 <am_hal_iom_spi_blocking_fullduplex+0x32a>
   190da:	4b0a      	ldr	r3, [pc, #40]	; (19104 <am_hal_iom_spi_blocking_fullduplex+0x368>)
   190dc:	e7f3      	b.n	190c6 <am_hal_iom_spi_blocking_fullduplex+0x32a>
   190de:	462b      	mov	r3, r5
   190e0:	e7f1      	b.n	190c6 <am_hal_iom_spi_blocking_fullduplex+0x32a>
   190e2:	2b03      	cmp	r3, #3
   190e4:	f67f af75 	bls.w	18fd2 <am_hal_iom_spi_blocking_fullduplex+0x236>
   190e8:	f1bb 0f00 	cmp.w	fp, #0
   190ec:	d0c9      	beq.n	19082 <am_hal_iom_spi_blocking_fullduplex+0x2e6>
   190ee:	4630      	mov	r0, r6
   190f0:	e7a0      	b.n	19034 <am_hal_iom_spi_blocking_fullduplex+0x298>
   190f2:	bf00      	nop
   190f4:	01123456 	.word	0x01123456
   190f8:	000fff00 	.word	0x000fff00
   190fc:	0007a120 	.word	0x0007a120
   19100:	08000001 	.word	0x08000001
   19104:	08000002 	.word	0x08000002

00019108 <am_hal_mcuctrl_info_get>:
   19108:	2900      	cmp	r1, #0
   1910a:	f000 808d 	beq.w	19228 <am_hal_mcuctrl_info_get+0x120>
   1910e:	2801      	cmp	r0, #1
   19110:	b4f0      	push	{r4, r5, r6, r7}
   19112:	d006      	beq.n	19122 <am_hal_mcuctrl_info_get+0x1a>
   19114:	2802      	cmp	r0, #2
   19116:	d06b      	beq.n	191f0 <am_hal_mcuctrl_info_get+0xe8>
   19118:	2800      	cmp	r0, #0
   1911a:	d053      	beq.n	191c4 <am_hal_mcuctrl_info_get+0xbc>
   1911c:	2006      	movs	r0, #6
   1911e:	bcf0      	pop	{r4, r5, r6, r7}
   19120:	4770      	bx	lr
   19122:	4a42      	ldr	r2, [pc, #264]	; (1922c <am_hal_mcuctrl_info_get+0x124>)
   19124:	4c42      	ldr	r4, [pc, #264]	; (19230 <am_hal_mcuctrl_info_get+0x128>)
   19126:	6813      	ldr	r3, [r2, #0]
   19128:	600b      	str	r3, [r1, #0]
   1912a:	6850      	ldr	r0, [r2, #4]
   1912c:	6048      	str	r0, [r1, #4]
   1912e:	6890      	ldr	r0, [r2, #8]
   19130:	6088      	str	r0, [r1, #8]
   19132:	68d0      	ldr	r0, [r2, #12]
   19134:	60c8      	str	r0, [r1, #12]
   19136:	f3c3 5703 	ubfx	r7, r3, #20, #4
   1913a:	6915      	ldr	r5, [r2, #16]
   1913c:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
   19140:	610d      	str	r5, [r1, #16]
   19142:	f3c3 4603 	ubfx	r6, r3, #16, #4
   19146:	483b      	ldr	r0, [pc, #236]	; (19234 <am_hal_mcuctrl_info_get+0x12c>)
   19148:	6955      	ldr	r5, [r2, #20]
   1914a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
   1914e:	4a3a      	ldr	r2, [pc, #232]	; (19238 <am_hal_mcuctrl_info_get+0x130>)
   19150:	614d      	str	r5, [r1, #20]
   19152:	f003 0301 	and.w	r3, r3, #1
   19156:	e9c1 3406 	strd	r3, r4, [r1, #24]
   1915a:	6208      	str	r0, [r1, #32]
   1915c:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   19160:	f8d2 00e4 	ldr.w	r0, [r2, #228]	; 0xe4
   19164:	b2db      	uxtb	r3, r3
   19166:	f000 000f 	and.w	r0, r0, #15
   1916a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1916e:	624b      	str	r3, [r1, #36]	; 0x24
   19170:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
   19174:	f8d2 00e8 	ldr.w	r0, [r2, #232]	; 0xe8
   19178:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1917c:	f000 000f 	and.w	r0, r0, #15
   19180:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   19184:	628b      	str	r3, [r1, #40]	; 0x28
   19186:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
   1918a:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
   1918e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   19192:	f3c0 1003 	ubfx	r0, r0, #4, #4
   19196:	4303      	orrs	r3, r0
   19198:	62cb      	str	r3, [r1, #44]	; 0x2c
   1919a:	f8d2 40fc 	ldr.w	r4, [r2, #252]	; 0xfc
   1919e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
   191a2:	f8d2 00f4 	ldr.w	r0, [r2, #244]	; 0xf4
   191a6:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   191aa:	b2db      	uxtb	r3, r3
   191ac:	041b      	lsls	r3, r3, #16
   191ae:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   191b2:	b2d2      	uxtb	r2, r2
   191b4:	4313      	orrs	r3, r2
   191b6:	b2c2      	uxtb	r2, r0
   191b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   191bc:	630b      	str	r3, [r1, #48]	; 0x30
   191be:	2000      	movs	r0, #0
   191c0:	bcf0      	pop	{r4, r5, r6, r7}
   191c2:	4770      	bx	lr
   191c4:	4a19      	ldr	r2, [pc, #100]	; (1922c <am_hal_mcuctrl_info_get+0x124>)
   191c6:	6993      	ldr	r3, [r2, #24]
   191c8:	f8d2 41a0 	ldr.w	r4, [r2, #416]	; 0x1a0
   191cc:	f3c4 6481 	ubfx	r4, r4, #26, #2
   191d0:	710c      	strb	r4, [r1, #4]
   191d2:	6952      	ldr	r2, [r2, #20]
   191d4:	f3c3 1480 	ubfx	r4, r3, #6, #1
   191d8:	f3c2 0540 	ubfx	r5, r2, #1, #1
   191dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
   191e0:	f002 0201 	and.w	r2, r2, #1
   191e4:	708d      	strb	r5, [r1, #2]
   191e6:	700c      	strb	r4, [r1, #0]
   191e8:	70ca      	strb	r2, [r1, #3]
   191ea:	bcf0      	pop	{r4, r5, r6, r7}
   191ec:	704b      	strb	r3, [r1, #1]
   191ee:	4770      	bx	lr
   191f0:	4a0e      	ldr	r2, [pc, #56]	; (1922c <am_hal_mcuctrl_info_get+0x124>)
   191f2:	684c      	ldr	r4, [r1, #4]
   191f4:	f8d2 31cc 	ldr.w	r3, [r2, #460]	; 0x1cc
   191f8:	f8d2 01c4 	ldr.w	r0, [r2, #452]	; 0x1c4
   191fc:	60c8      	str	r0, [r1, #12]
   191fe:	f8d2 51c0 	ldr.w	r5, [r2, #448]	; 0x1c0
   19202:	6948      	ldr	r0, [r1, #20]
   19204:	432c      	orrs	r4, r5
   19206:	604c      	str	r4, [r1, #4]
   19208:	f8d2 21c8 	ldr.w	r2, [r2, #456]	; 0x1c8
   1920c:	f003 0401 	and.w	r4, r3, #1
   19210:	4310      	orrs	r0, r2
   19212:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19216:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1921a:	6148      	str	r0, [r1, #20]
   1921c:	700c      	strb	r4, [r1, #0]
   1921e:	2000      	movs	r0, #0
   19220:	bcf0      	pop	{r4, r5, r6, r7}
   19222:	720a      	strb	r2, [r1, #8]
   19224:	740b      	strb	r3, [r1, #16]
   19226:	4770      	bx	lr
   19228:	2006      	movs	r0, #6
   1922a:	4770      	bx	lr
   1922c:	40020000 	.word	0x40020000
   19230:	00028dd0 	.word	0x00028dd0
   19234:	00028e10 	.word	0x00028e10
   19238:	f0000f00 	.word	0xf0000f00

0001923c <am_hal_pwrctrl_periph_enable>:
   1923c:	b570      	push	{r4, r5, r6, lr}
   1923e:	b082      	sub	sp, #8
   19240:	4604      	mov	r4, r0
   19242:	f7ff f999 	bl	18578 <am_hal_interrupt_master_disable>
   19246:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1924a:	4e0f      	ldr	r6, [pc, #60]	; (19288 <am_hal_pwrctrl_periph_enable+0x4c>)
   1924c:	4d0f      	ldr	r5, [pc, #60]	; (1928c <am_hal_pwrctrl_periph_enable+0x50>)
   1924e:	9001      	str	r0, [sp, #4]
   19250:	00a4      	lsls	r4, r4, #2
   19252:	68b3      	ldr	r3, [r6, #8]
   19254:	592a      	ldr	r2, [r5, r4]
   19256:	4313      	orrs	r3, r2
   19258:	60b3      	str	r3, [r6, #8]
   1925a:	9801      	ldr	r0, [sp, #4]
   1925c:	442c      	add	r4, r5
   1925e:	f7ff f98f 	bl	18580 <am_hal_interrupt_master_set>
   19262:	20a0      	movs	r0, #160	; 0xa0
   19264:	f7fe ffba 	bl	181dc <am_hal_flash_delay>
   19268:	69b3      	ldr	r3, [r6, #24]
   1926a:	6864      	ldr	r4, [r4, #4]
   1926c:	4223      	tst	r3, r4
   1926e:	d103      	bne.n	19278 <am_hal_pwrctrl_periph_enable+0x3c>
   19270:	20a0      	movs	r0, #160	; 0xa0
   19272:	f7fe ffb3 	bl	181dc <am_hal_flash_delay>
   19276:	69b3      	ldr	r3, [r6, #24]
   19278:	4b03      	ldr	r3, [pc, #12]	; (19288 <am_hal_pwrctrl_periph_enable+0x4c>)
   1927a:	699b      	ldr	r3, [r3, #24]
   1927c:	4223      	tst	r3, r4
   1927e:	bf0c      	ite	eq
   19280:	2001      	moveq	r0, #1
   19282:	2000      	movne	r0, #0
   19284:	b002      	add	sp, #8
   19286:	bd70      	pop	{r4, r5, r6, pc}
   19288:	40021000 	.word	0x40021000
   1928c:	00028e50 	.word	0x00028e50

00019290 <am_hal_pwrctrl_periph_disable>:
   19290:	b570      	push	{r4, r5, r6, lr}
   19292:	b082      	sub	sp, #8
   19294:	4604      	mov	r4, r0
   19296:	f7ff f96f 	bl	18578 <am_hal_interrupt_master_disable>
   1929a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1929e:	4e10      	ldr	r6, [pc, #64]	; (192e0 <am_hal_pwrctrl_periph_disable+0x50>)
   192a0:	4d10      	ldr	r5, [pc, #64]	; (192e4 <am_hal_pwrctrl_periph_disable+0x54>)
   192a2:	9001      	str	r0, [sp, #4]
   192a4:	00a4      	lsls	r4, r4, #2
   192a6:	68b3      	ldr	r3, [r6, #8]
   192a8:	592a      	ldr	r2, [r5, r4]
   192aa:	ea23 0302 	bic.w	r3, r3, r2
   192ae:	60b3      	str	r3, [r6, #8]
   192b0:	9801      	ldr	r0, [sp, #4]
   192b2:	442c      	add	r4, r5
   192b4:	f7ff f964 	bl	18580 <am_hal_interrupt_master_set>
   192b8:	20a0      	movs	r0, #160	; 0xa0
   192ba:	f7fe ff8f 	bl	181dc <am_hal_flash_delay>
   192be:	69b3      	ldr	r3, [r6, #24]
   192c0:	6864      	ldr	r4, [r4, #4]
   192c2:	4223      	tst	r3, r4
   192c4:	d003      	beq.n	192ce <am_hal_pwrctrl_periph_disable+0x3e>
   192c6:	20a0      	movs	r0, #160	; 0xa0
   192c8:	f7fe ff88 	bl	181dc <am_hal_flash_delay>
   192cc:	69b3      	ldr	r3, [r6, #24]
   192ce:	4b04      	ldr	r3, [pc, #16]	; (192e0 <am_hal_pwrctrl_periph_disable+0x50>)
   192d0:	699b      	ldr	r3, [r3, #24]
   192d2:	4223      	tst	r3, r4
   192d4:	bf14      	ite	ne
   192d6:	2001      	movne	r0, #1
   192d8:	2000      	moveq	r0, #0
   192da:	b002      	add	sp, #8
   192dc:	bd70      	pop	{r4, r5, r6, pc}
   192de:	bf00      	nop
   192e0:	40021000 	.word	0x40021000
   192e4:	00028e50 	.word	0x00028e50

000192e8 <am_hal_uart_initialize>:
   192e8:	2801      	cmp	r0, #1
   192ea:	d819      	bhi.n	19320 <am_hal_uart_initialize+0x38>
   192ec:	b1e9      	cbz	r1, 1932a <am_hal_uart_initialize+0x42>
   192ee:	b4f0      	push	{r4, r5, r6, r7}
   192f0:	2264      	movs	r2, #100	; 0x64
   192f2:	4d0f      	ldr	r5, [pc, #60]	; (19330 <am_hal_uart_initialize+0x48>)
   192f4:	fb02 f200 	mul.w	r2, r2, r0
   192f8:	18ac      	adds	r4, r5, r2
   192fa:	78e3      	ldrb	r3, [r4, #3]
   192fc:	f3c3 0700 	ubfx	r7, r3, #0, #1
   19300:	f013 0301 	ands.w	r3, r3, #1
   19304:	d10e      	bne.n	19324 <am_hal_uart_initialize+0x3c>
   19306:	6260      	str	r0, [r4, #36]	; 0x24
   19308:	58ae      	ldr	r6, [r5, r2]
   1930a:	480a      	ldr	r0, [pc, #40]	; (19334 <am_hal_uart_initialize+0x4c>)
   1930c:	f006 467e 	and.w	r6, r6, #4261412864	; 0xfe000000
   19310:	4330      	orrs	r0, r6
   19312:	50a8      	str	r0, [r5, r2]
   19314:	7127      	strb	r7, [r4, #4]
   19316:	6623      	str	r3, [r4, #96]	; 0x60
   19318:	4618      	mov	r0, r3
   1931a:	600c      	str	r4, [r1, #0]
   1931c:	bcf0      	pop	{r4, r5, r6, r7}
   1931e:	4770      	bx	lr
   19320:	2005      	movs	r0, #5
   19322:	4770      	bx	lr
   19324:	2007      	movs	r0, #7
   19326:	bcf0      	pop	{r4, r5, r6, r7}
   19328:	4770      	bx	lr
   1932a:	2006      	movs	r0, #6
   1932c:	4770      	bx	lr
   1932e:	bf00      	nop
   19330:	100047dc 	.word	0x100047dc
   19334:	01ea9e06 	.word	0x01ea9e06

00019338 <am_hal_uart_power_control>:
   19338:	b5f0      	push	{r4, r5, r6, r7, lr}
   1933a:	4604      	mov	r4, r0
   1933c:	6800      	ldr	r0, [r0, #0]
   1933e:	4b39      	ldr	r3, [pc, #228]	; (19424 <am_hal_uart_power_control+0xec>)
   19340:	f020 467e 	bic.w	r6, r0, #4261412864	; 0xfe000000
   19344:	429e      	cmp	r6, r3
   19346:	b085      	sub	sp, #20
   19348:	d13f      	bne.n	193ca <am_hal_uart_power_control+0x92>
   1934a:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1934c:	f105 0008 	add.w	r0, r5, #8
   19350:	b2c7      	uxtb	r7, r0
   19352:	b1a1      	cbz	r1, 1937e <am_hal_uart_power_control+0x46>
   19354:	3901      	subs	r1, #1
   19356:	2901      	cmp	r1, #1
   19358:	d80e      	bhi.n	19378 <am_hal_uart_power_control+0x40>
   1935a:	2a00      	cmp	r2, #0
   1935c:	d138      	bne.n	193d0 <am_hal_uart_power_control+0x98>
   1935e:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   19362:	351c      	adds	r5, #28
   19364:	032d      	lsls	r5, r5, #12
   19366:	f04f 33ff 	mov.w	r3, #4294967295
   1936a:	646b      	str	r3, [r5, #68]	; 0x44
   1936c:	4638      	mov	r0, r7
   1936e:	f7ff ff8f 	bl	19290 <am_hal_pwrctrl_periph_disable>
   19372:	2000      	movs	r0, #0
   19374:	b005      	add	sp, #20
   19376:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19378:	2006      	movs	r0, #6
   1937a:	b005      	add	sp, #20
   1937c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1937e:	2a00      	cmp	r2, #0
   19380:	d047      	beq.n	19412 <am_hal_uart_power_control+0xda>
   19382:	7923      	ldrb	r3, [r4, #4]
   19384:	2b00      	cmp	r3, #0
   19386:	d04b      	beq.n	19420 <am_hal_uart_power_control+0xe8>
   19388:	4638      	mov	r0, r7
   1938a:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   1938e:	9101      	str	r1, [sp, #4]
   19390:	351c      	adds	r5, #28
   19392:	f7ff ff53 	bl	1923c <am_hal_pwrctrl_periph_enable>
   19396:	f7ff f8ef 	bl	18578 <am_hal_interrupt_master_disable>
   1939a:	e9d4 3602 	ldrd	r3, r6, [r4, #8]
   1939e:	032d      	lsls	r5, r5, #12
   193a0:	9002      	str	r0, [sp, #8]
   193a2:	6922      	ldr	r2, [r4, #16]
   193a4:	622b      	str	r3, [r5, #32]
   193a6:	6963      	ldr	r3, [r4, #20]
   193a8:	69a0      	ldr	r0, [r4, #24]
   193aa:	626e      	str	r6, [r5, #36]	; 0x24
   193ac:	62aa      	str	r2, [r5, #40]	; 0x28
   193ae:	69e2      	ldr	r2, [r4, #28]
   193b0:	62eb      	str	r3, [r5, #44]	; 0x2c
   193b2:	6a23      	ldr	r3, [r4, #32]
   193b4:	9901      	ldr	r1, [sp, #4]
   193b6:	6328      	str	r0, [r5, #48]	; 0x30
   193b8:	636a      	str	r2, [r5, #52]	; 0x34
   193ba:	63ab      	str	r3, [r5, #56]	; 0x38
   193bc:	9802      	ldr	r0, [sp, #8]
   193be:	7121      	strb	r1, [r4, #4]
   193c0:	f7ff f8de 	bl	18580 <am_hal_interrupt_master_set>
   193c4:	9901      	ldr	r1, [sp, #4]
   193c6:	4608      	mov	r0, r1
   193c8:	e7d7      	b.n	1937a <am_hal_uart_power_control+0x42>
   193ca:	2002      	movs	r0, #2
   193cc:	b005      	add	sp, #20
   193ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   193d0:	f7ff f8d2 	bl	18578 <am_hal_interrupt_master_disable>
   193d4:	f505 2580 	add.w	r5, r5, #262144	; 0x40000
   193d8:	351c      	adds	r5, #28
   193da:	032d      	lsls	r5, r5, #12
   193dc:	9003      	str	r0, [sp, #12]
   193de:	6a2a      	ldr	r2, [r5, #32]
   193e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   193e2:	60a2      	str	r2, [r4, #8]
   193e4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   193e6:	60e3      	str	r3, [r4, #12]
   193e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   193ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
   193ec:	6163      	str	r3, [r4, #20]
   193ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   193f0:	6122      	str	r2, [r4, #16]
   193f2:	6baa      	ldr	r2, [r5, #56]	; 0x38
   193f4:	61e3      	str	r3, [r4, #28]
   193f6:	2301      	movs	r3, #1
   193f8:	7123      	strb	r3, [r4, #4]
   193fa:	9803      	ldr	r0, [sp, #12]
   193fc:	61a1      	str	r1, [r4, #24]
   193fe:	6222      	str	r2, [r4, #32]
   19400:	f7ff f8be 	bl	18580 <am_hal_interrupt_master_set>
   19404:	6823      	ldr	r3, [r4, #0]
   19406:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   1940a:	42b3      	cmp	r3, r6
   1940c:	d1ae      	bne.n	1936c <am_hal_uart_power_control+0x34>
   1940e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   19410:	e7a5      	b.n	1935e <am_hal_uart_power_control+0x26>
   19412:	4638      	mov	r0, r7
   19414:	9201      	str	r2, [sp, #4]
   19416:	f7ff ff11 	bl	1923c <am_hal_pwrctrl_periph_enable>
   1941a:	9a01      	ldr	r2, [sp, #4]
   1941c:	4610      	mov	r0, r2
   1941e:	e7ac      	b.n	1937a <am_hal_uart_power_control+0x42>
   19420:	2007      	movs	r0, #7
   19422:	e7aa      	b.n	1937a <am_hal_uart_power_control+0x42>
   19424:	01ea9e06 	.word	0x01ea9e06

00019428 <am_hal_uart_configure>:
   19428:	6803      	ldr	r3, [r0, #0]
   1942a:	4a78      	ldr	r2, [pc, #480]	; (1960c <am_hal_uart_configure+0x1e4>)
   1942c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   19430:	4293      	cmp	r3, r2
   19432:	d001      	beq.n	19438 <am_hal_uart_configure+0x10>
   19434:	2002      	movs	r0, #2
   19436:	4770      	bx	lr
   19438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1943c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1943e:	f504 2480 	add.w	r4, r4, #262144	; 0x40000
   19442:	341c      	adds	r4, #28
   19444:	0324      	lsls	r4, r4, #12
   19446:	2700      	movs	r7, #0
   19448:	b084      	sub	sp, #16
   1944a:	6327      	str	r7, [r4, #48]	; 0x30
   1944c:	460e      	mov	r6, r1
   1944e:	4605      	mov	r5, r0
   19450:	f7ff f892 	bl	18578 <am_hal_interrupt_master_disable>
   19454:	9001      	str	r0, [sp, #4]
   19456:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19458:	f043 0308 	orr.w	r3, r3, #8
   1945c:	8623      	strh	r3, [r4, #48]	; 0x30
   1945e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19460:	2201      	movs	r2, #1
   19462:	f362 1306 	bfi	r3, r2, #4, #3
   19466:	8623      	strh	r3, [r4, #48]	; 0x30
   19468:	9801      	ldr	r0, [sp, #4]
   1946a:	f7ff f889 	bl	18580 <am_hal_interrupt_master_set>
   1946e:	f7ff f883 	bl	18578 <am_hal_interrupt_master_disable>
   19472:	9002      	str	r0, [sp, #8]
   19474:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19476:	f367 0300 	bfi	r3, r7, #0, #1
   1947a:	8623      	strh	r3, [r4, #48]	; 0x30
   1947c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1947e:	f367 2349 	bfi	r3, r7, #9, #1
   19482:	8623      	strh	r3, [r4, #48]	; 0x30
   19484:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19486:	f367 2308 	bfi	r3, r7, #8, #1
   1948a:	8623      	strh	r3, [r4, #48]	; 0x30
   1948c:	9802      	ldr	r0, [sp, #8]
   1948e:	f7ff f877 	bl	18580 <am_hal_interrupt_master_set>
   19492:	4b5f      	ldr	r3, [pc, #380]	; (19610 <am_hal_uart_configure+0x1e8>)
   19494:	6832      	ldr	r2, [r6, #0]
   19496:	68db      	ldr	r3, [r3, #12]
   19498:	b2db      	uxtb	r3, r3
   1949a:	2b12      	cmp	r3, #18
   1949c:	d076      	beq.n	1958c <am_hal_uart_configure+0x164>
   1949e:	4b5c      	ldr	r3, [pc, #368]	; (19610 <am_hal_uart_configure+0x1e8>)
   194a0:	68db      	ldr	r3, [r3, #12]
   194a2:	b2db      	uxtb	r3, r3
   194a4:	2b20      	cmp	r3, #32
   194a6:	d902      	bls.n	194ae <am_hal_uart_configure+0x86>
   194a8:	4b5a      	ldr	r3, [pc, #360]	; (19614 <am_hal_uart_configure+0x1ec>)
   194aa:	429a      	cmp	r2, r3
   194ac:	d871      	bhi.n	19592 <am_hal_uart_configure+0x16a>
   194ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
   194b0:	f3c3 1302 	ubfx	r3, r3, #4, #3
   194b4:	3b01      	subs	r3, #1
   194b6:	b2db      	uxtb	r3, r3
   194b8:	2b03      	cmp	r3, #3
   194ba:	d86c      	bhi.n	19596 <am_hal_uart_configure+0x16e>
   194bc:	4956      	ldr	r1, [pc, #344]	; (19618 <am_hal_uart_configure+0x1f0>)
   194be:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
   194c2:	0112      	lsls	r2, r2, #4
   194c4:	4291      	cmp	r1, r2
   194c6:	ea4f 1381 	mov.w	r3, r1, lsl #6
   194ca:	fbb1 f0f2 	udiv	r0, r1, r2
   194ce:	fbb3 f3f2 	udiv	r3, r3, r2
   194d2:	eba3 1380 	sub.w	r3, r3, r0, lsl #6
   194d6:	d364      	bcc.n	195a2 <am_hal_uart_configure+0x17a>
   194d8:	089a      	lsrs	r2, r3, #2
   194da:	6260      	str	r0, [r4, #36]	; 0x24
   194dc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
   194e0:	6260      	str	r0, [r4, #36]	; 0x24
   194e2:	fbb1 f1f2 	udiv	r1, r1, r2
   194e6:	62a3      	str	r3, [r4, #40]	; 0x28
   194e8:	6629      	str	r1, [r5, #96]	; 0x60
   194ea:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   194ec:	f36f 338e 	bfc	r3, #14, #1
   194f0:	8623      	strh	r3, [r4, #48]	; 0x30
   194f2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   194f4:	f36f 33cf 	bfc	r3, #15, #1
   194f8:	8623      	strh	r3, [r4, #48]	; 0x30
   194fa:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
   194fe:	6873      	ldr	r3, [r6, #4]
   19500:	6b22      	ldr	r2, [r4, #48]	; 0x30
   19502:	430b      	orrs	r3, r1
   19504:	6931      	ldr	r1, [r6, #16]
   19506:	4303      	orrs	r3, r0
   19508:	430a      	orrs	r2, r1
   1950a:	f043 0310 	orr.w	r3, r3, #16
   1950e:	6971      	ldr	r1, [r6, #20]
   19510:	6322      	str	r2, [r4, #48]	; 0x30
   19512:	6361      	str	r1, [r4, #52]	; 0x34
   19514:	62e3      	str	r3, [r4, #44]	; 0x2c
   19516:	f7ff f82f 	bl	18578 <am_hal_interrupt_master_disable>
   1951a:	9003      	str	r0, [sp, #12]
   1951c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1951e:	f043 0301 	orr.w	r3, r3, #1
   19522:	8623      	strh	r3, [r4, #48]	; 0x30
   19524:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   19526:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1952a:	8623      	strh	r3, [r4, #48]	; 0x30
   1952c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1952e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19532:	8623      	strh	r3, [r4, #48]	; 0x30
   19534:	9803      	ldr	r0, [sp, #12]
   19536:	f7ff f823 	bl	18580 <am_hal_interrupt_master_set>
   1953a:	682a      	ldr	r2, [r5, #0]
   1953c:	4b33      	ldr	r3, [pc, #204]	; (1960c <am_hal_uart_configure+0x1e4>)
   1953e:	f022 487e 	bic.w	r8, r2, #4261412864	; 0xfe000000
   19542:	4598      	cmp	r8, r3
   19544:	d11e      	bne.n	19584 <am_hal_uart_configure+0x15c>
   19546:	69b1      	ldr	r1, [r6, #24]
   19548:	e9d6 4708 	ldrd	r4, r7, [r6, #32]
   1954c:	b109      	cbz	r1, 19552 <am_hal_uart_configure+0x12a>
   1954e:	69f3      	ldr	r3, [r6, #28]
   19550:	bb5b      	cbnz	r3, 195aa <am_hal_uart_configure+0x182>
   19552:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   19554:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   19558:	331c      	adds	r3, #28
   1955a:	031b      	lsls	r3, r3, #12
   1955c:	2100      	movs	r1, #0
   1955e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19560:	f885 1028 	strb.w	r1, [r5, #40]	; 0x28
   19564:	f022 0220 	bic.w	r2, r2, #32
   19568:	639a      	str	r2, [r3, #56]	; 0x38
   1956a:	b10c      	cbz	r4, 19570 <am_hal_uart_configure+0x148>
   1956c:	2f00      	cmp	r7, #0
   1956e:	d132      	bne.n	195d6 <am_hal_uart_configure+0x1ae>
   19570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19572:	2000      	movs	r0, #0
   19574:	f022 0250 	bic.w	r2, r2, #80	; 0x50
   19578:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
   1957c:	639a      	str	r2, [r3, #56]	; 0x38
   1957e:	b004      	add	sp, #16
   19580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19584:	2000      	movs	r0, #0
   19586:	b004      	add	sp, #16
   19588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1958c:	f5b2 2f61 	cmp.w	r2, #921600	; 0xe1000
   19590:	d985      	bls.n	1949e <am_hal_uart_configure+0x76>
   19592:	4822      	ldr	r0, [pc, #136]	; (1961c <am_hal_uart_configure+0x1f4>)
   19594:	e7f3      	b.n	1957e <am_hal_uart_configure+0x156>
   19596:	4822      	ldr	r0, [pc, #136]	; (19620 <am_hal_uart_configure+0x1f8>)
   19598:	2300      	movs	r3, #0
   1959a:	662b      	str	r3, [r5, #96]	; 0x60
   1959c:	b004      	add	sp, #16
   1959e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195a2:	2300      	movs	r3, #0
   195a4:	481d      	ldr	r0, [pc, #116]	; (1961c <am_hal_uart_configure+0x1f4>)
   195a6:	662b      	str	r3, [r5, #96]	; 0x60
   195a8:	e7e9      	b.n	1957e <am_hal_uart_configure+0x156>
   195aa:	2201      	movs	r2, #1
   195ac:	f885 2028 	strb.w	r2, [r5, #40]	; 0x28
   195b0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   195b4:	f000 fb00 	bl	19bb8 <am_hal_queue_init>
   195b8:	682b      	ldr	r3, [r5, #0]
   195ba:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   195be:	4543      	cmp	r3, r8
   195c0:	d1e0      	bne.n	19584 <am_hal_uart_configure+0x15c>
   195c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   195c4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   195c8:	331c      	adds	r3, #28
   195ca:	031b      	lsls	r3, r3, #12
   195cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   195ce:	f042 0220 	orr.w	r2, r2, #32
   195d2:	639a      	str	r2, [r3, #56]	; 0x38
   195d4:	e7c9      	b.n	1956a <am_hal_uart_configure+0x142>
   195d6:	2201      	movs	r2, #1
   195d8:	463b      	mov	r3, r7
   195da:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
   195de:	4621      	mov	r1, r4
   195e0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   195e4:	f000 fae8 	bl	19bb8 <am_hal_queue_init>
   195e8:	682b      	ldr	r3, [r5, #0]
   195ea:	4a08      	ldr	r2, [pc, #32]	; (1960c <am_hal_uart_configure+0x1e4>)
   195ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   195f0:	4293      	cmp	r3, r2
   195f2:	d1c7      	bne.n	19584 <am_hal_uart_configure+0x15c>
   195f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   195f6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   195fa:	331c      	adds	r3, #28
   195fc:	031b      	lsls	r3, r3, #12
   195fe:	2000      	movs	r0, #0
   19600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19602:	f042 0250 	orr.w	r2, r2, #80	; 0x50
   19606:	639a      	str	r2, [r3, #56]	; 0x38
   19608:	e7b9      	b.n	1957e <am_hal_uart_configure+0x156>
   1960a:	bf00      	nop
   1960c:	01ea9e06 	.word	0x01ea9e06
   19610:	40020000 	.word	0x40020000
   19614:	0016e360 	.word	0x0016e360
   19618:	00028f04 	.word	0x00028f04
   1961c:	08000003 	.word	0x08000003
   19620:	08000002 	.word	0x08000002

00019624 <am_hal_uart_transfer>:
   19624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19628:	ed2d 8b02 	vpush	{d8}
   1962c:	680d      	ldr	r5, [r1, #0]
   1962e:	b091      	sub	sp, #68	; 0x44
   19630:	4604      	mov	r4, r0
   19632:	b14d      	cbz	r5, 19648 <am_hal_uart_transfer+0x24>
   19634:	2d01      	cmp	r5, #1
   19636:	f000 8091 	beq.w	1975c <am_hal_uart_transfer+0x138>
   1963a:	2507      	movs	r5, #7
   1963c:	4628      	mov	r0, r5
   1963e:	b011      	add	sp, #68	; 0x44
   19640:	ecbd 8b02 	vpop	{d8}
   19644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19648:	f8d1 900c 	ldr.w	r9, [r1, #12]
   1964c:	684b      	ldr	r3, [r1, #4]
   1964e:	690a      	ldr	r2, [r1, #16]
   19650:	688e      	ldr	r6, [r1, #8]
   19652:	9301      	str	r3, [sp, #4]
   19654:	9203      	str	r2, [sp, #12]
   19656:	f1b9 0f00 	cmp.w	r9, #0
   1965a:	f000 8113 	beq.w	19884 <am_hal_uart_transfer+0x260>
   1965e:	2e00      	cmp	r6, #0
   19660:	f000 8179 	beq.w	19956 <am_hal_uart_transfer+0x332>
   19664:	2800      	cmp	r0, #0
   19666:	f000 8168 	beq.w	1993a <am_hal_uart_transfer+0x316>
   1966a:	46aa      	mov	sl, r5
   1966c:	462f      	mov	r7, r5
   1966e:	9502      	str	r5, [sp, #8]
   19670:	4605      	mov	r5, r0
   19672:	4619      	mov	r1, r3
   19674:	682a      	ldr	r2, [r5, #0]
   19676:	4bb4      	ldr	r3, [pc, #720]	; (19948 <am_hal_uart_transfer+0x324>)
   19678:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   1967c:	429a      	cmp	r2, r3
   1967e:	d12f      	bne.n	196e0 <am_hal_uart_transfer+0xbc>
   19680:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   19684:	2a00      	cmp	r2, #0
   19686:	d133      	bne.n	196f0 <am_hal_uart_transfer+0xcc>
   19688:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1968a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   1968e:	301c      	adds	r0, #28
   19690:	3901      	subs	r1, #1
   19692:	0300      	lsls	r0, r0, #12
   19694:	e005      	b.n	196a2 <am_hal_uart_transfer+0x7e>
   19696:	3201      	adds	r2, #1
   19698:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1969c:	6003      	str	r3, [r0, #0]
   1969e:	42b2      	cmp	r2, r6
   196a0:	d023      	beq.n	196ea <am_hal_uart_transfer+0xc6>
   196a2:	6983      	ldr	r3, [r0, #24]
   196a4:	069c      	lsls	r4, r3, #26
   196a6:	d5f6      	bpl.n	19696 <am_hal_uart_transfer+0x72>
   196a8:	4417      	add	r7, r2
   196aa:	1ab6      	subs	r6, r6, r2
   196ac:	b936      	cbnz	r6, 196bc <am_hal_uart_transfer+0x98>
   196ae:	9d02      	ldr	r5, [sp, #8]
   196b0:	9b03      	ldr	r3, [sp, #12]
   196b2:	2b00      	cmp	r3, #0
   196b4:	f000 808d 	beq.w	197d2 <am_hal_uart_transfer+0x1ae>
   196b8:	601f      	str	r7, [r3, #0]
   196ba:	e7bf      	b.n	1963c <am_hal_uart_transfer+0x18>
   196bc:	2010      	movs	r0, #16
   196be:	f7fe fd8d 	bl	181dc <am_hal_flash_delay>
   196c2:	f1b9 3fff 	cmp.w	r9, #4294967295
   196c6:	bf18      	it	ne
   196c8:	f10a 0a01 	addne.w	sl, sl, #1
   196cc:	45d1      	cmp	r9, sl
   196ce:	d9ee      	bls.n	196ae <am_hal_uart_transfer+0x8a>
   196d0:	9b01      	ldr	r3, [sp, #4]
   196d2:	682a      	ldr	r2, [r5, #0]
   196d4:	19d9      	adds	r1, r3, r7
   196d6:	4b9c      	ldr	r3, [pc, #624]	; (19948 <am_hal_uart_transfer+0x324>)
   196d8:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   196dc:	429a      	cmp	r2, r3
   196de:	d0cf      	beq.n	19680 <am_hal_uart_transfer+0x5c>
   196e0:	9b03      	ldr	r3, [sp, #12]
   196e2:	b103      	cbz	r3, 196e6 <am_hal_uart_transfer+0xc2>
   196e4:	601f      	str	r7, [r3, #0]
   196e6:	2502      	movs	r5, #2
   196e8:	e7a8      	b.n	1963c <am_hal_uart_transfer+0x18>
   196ea:	9d02      	ldr	r5, [sp, #8]
   196ec:	4417      	add	r7, r2
   196ee:	e7df      	b.n	196b0 <am_hal_uart_transfer+0x8c>
   196f0:	e9d5 020d 	ldrd	r0, r2, [r5, #52]	; 0x34
   196f4:	eba2 0b00 	sub.w	fp, r2, r0
   196f8:	45b3      	cmp	fp, r6
   196fa:	bf28      	it	cs
   196fc:	46b3      	movcs	fp, r6
   196fe:	f105 042c 	add.w	r4, r5, #44	; 0x2c
   19702:	465a      	mov	r2, fp
   19704:	4620      	mov	r0, r4
   19706:	f000 fa63 	bl	19bd0 <am_hal_queue_item_add>
   1970a:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
   1970e:	f7fe ff33 	bl	18578 <am_hal_interrupt_master_disable>
   19712:	f508 2880 	add.w	r8, r8, #262144	; 0x40000
   19716:	f108 081c 	add.w	r8, r8, #28
   1971a:	ea4f 3808 	mov.w	r8, r8, lsl #12
   1971e:	9008      	str	r0, [sp, #32]
   19720:	e00d      	b.n	1973e <am_hal_uart_transfer+0x11a>
   19722:	f000 fa93 	bl	19c4c <am_hal_queue_item_get>
   19726:	b190      	cbz	r0, 1974e <am_hal_uart_transfer+0x12a>
   19728:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1972a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   1972e:	331c      	adds	r3, #28
   19730:	031b      	lsls	r3, r3, #12
   19732:	699a      	ldr	r2, [r3, #24]
   19734:	0692      	lsls	r2, r2, #26
   19736:	bf5c      	itt	pl
   19738:	f89d 201c 	ldrbpl.w	r2, [sp, #28]
   1973c:	601a      	strpl	r2, [r3, #0]
   1973e:	f8d8 3018 	ldr.w	r3, [r8, #24]
   19742:	069b      	lsls	r3, r3, #26
   19744:	f04f 0201 	mov.w	r2, #1
   19748:	a907      	add	r1, sp, #28
   1974a:	4620      	mov	r0, r4
   1974c:	d5e9      	bpl.n	19722 <am_hal_uart_transfer+0xfe>
   1974e:	9808      	ldr	r0, [sp, #32]
   19750:	445f      	add	r7, fp
   19752:	eba6 060b 	sub.w	r6, r6, fp
   19756:	f7fe ff13 	bl	18580 <am_hal_interrupt_master_set>
   1975a:	e7a7      	b.n	196ac <am_hal_uart_transfer+0x88>
   1975c:	68cd      	ldr	r5, [r1, #12]
   1975e:	690b      	ldr	r3, [r1, #16]
   19760:	9301      	str	r3, [sp, #4]
   19762:	e9d1 b701 	ldrd	fp, r7, [r1, #4]
   19766:	2d00      	cmp	r5, #0
   19768:	f000 80b8 	beq.w	198dc <am_hal_uart_transfer+0x2b8>
   1976c:	2f00      	cmp	r7, #0
   1976e:	f000 8123 	beq.w	199b8 <am_hal_uart_transfer+0x394>
   19772:	2800      	cmp	r0, #0
   19774:	f000 80ec 	beq.w	19950 <am_hal_uart_transfer+0x32c>
   19778:	6822      	ldr	r2, [r4, #0]
   1977a:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 19948 <am_hal_uart_transfer+0x324>
   1977e:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   19782:	f04f 0900 	mov.w	r9, #0
   19786:	f100 0348 	add.w	r3, r0, #72	; 0x48
   1978a:	4552      	cmp	r2, sl
   1978c:	ee08 3a10 	vmov	s16, r3
   19790:	46c8      	mov	r8, r9
   19792:	465e      	mov	r6, fp
   19794:	d134      	bne.n	19800 <am_hal_uart_transfer+0x1dc>
   19796:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1979a:	2a00      	cmp	r2, #0
   1979c:	d138      	bne.n	19810 <am_hal_uart_transfer+0x1ec>
   1979e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   197a0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   197a4:	311c      	adds	r1, #28
   197a6:	1e73      	subs	r3, r6, #1
   197a8:	0309      	lsls	r1, r1, #12
   197aa:	e008      	b.n	197be <am_hal_uart_transfer+0x19a>
   197ac:	6808      	ldr	r0, [r1, #0]
   197ae:	f410 6f70 	tst.w	r0, #3840	; 0xf00
   197b2:	d163      	bne.n	1987c <am_hal_uart_transfer+0x258>
   197b4:	3201      	adds	r2, #1
   197b6:	42ba      	cmp	r2, r7
   197b8:	f803 0f01 	strb.w	r0, [r3, #1]!
   197bc:	d056      	beq.n	1986c <am_hal_uart_transfer+0x248>
   197be:	6988      	ldr	r0, [r1, #24]
   197c0:	06c0      	lsls	r0, r0, #27
   197c2:	d5f3      	bpl.n	197ac <am_hal_uart_transfer+0x188>
   197c4:	4490      	add	r8, r2
   197c6:	1abf      	subs	r7, r7, r2
   197c8:	b957      	cbnz	r7, 197e0 <am_hal_uart_transfer+0x1bc>
   197ca:	9b01      	ldr	r3, [sp, #4]
   197cc:	b10b      	cbz	r3, 197d2 <am_hal_uart_transfer+0x1ae>
   197ce:	f8c3 8000 	str.w	r8, [r3]
   197d2:	2500      	movs	r5, #0
   197d4:	4628      	mov	r0, r5
   197d6:	b011      	add	sp, #68	; 0x44
   197d8:	ecbd 8b02 	vpop	{d8}
   197dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e0:	2010      	movs	r0, #16
   197e2:	f7fe fcfb 	bl	181dc <am_hal_flash_delay>
   197e6:	1c6b      	adds	r3, r5, #1
   197e8:	bf18      	it	ne
   197ea:	f109 0901 	addne.w	r9, r9, #1
   197ee:	454d      	cmp	r5, r9
   197f0:	d9eb      	bls.n	197ca <am_hal_uart_transfer+0x1a6>
   197f2:	6822      	ldr	r2, [r4, #0]
   197f4:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   197f8:	4552      	cmp	r2, sl
   197fa:	eb0b 0608 	add.w	r6, fp, r8
   197fe:	d0ca      	beq.n	19796 <am_hal_uart_transfer+0x172>
   19800:	2502      	movs	r5, #2
   19802:	9b01      	ldr	r3, [sp, #4]
   19804:	2b00      	cmp	r3, #0
   19806:	f43f af19 	beq.w	1963c <am_hal_uart_transfer+0x18>
   1980a:	f8c3 8000 	str.w	r8, [r3]
   1980e:	e715      	b.n	1963c <am_hal_uart_transfer+0x18>
   19810:	f7fe feb2 	bl	18578 <am_hal_interrupt_master_disable>
   19814:	6a62      	ldr	r2, [r4, #36]	; 0x24
   19816:	9007      	str	r0, [sp, #28]
   19818:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   1981c:	321c      	adds	r2, #28
   1981e:	0310      	lsls	r0, r2, #12
   19820:	f10d 0c20 	add.w	ip, sp, #32
   19824:	2200      	movs	r2, #0
   19826:	6983      	ldr	r3, [r0, #24]
   19828:	06db      	lsls	r3, r3, #27
   1982a:	d409      	bmi.n	19840 <am_hal_uart_transfer+0x21c>
   1982c:	6803      	ldr	r3, [r0, #0]
   1982e:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   19832:	f102 0201 	add.w	r2, r2, #1
   19836:	d11b      	bne.n	19870 <am_hal_uart_transfer+0x24c>
   19838:	2a20      	cmp	r2, #32
   1983a:	f80c 3b01 	strb.w	r3, [ip], #1
   1983e:	d1f2      	bne.n	19826 <am_hal_uart_transfer+0x202>
   19840:	ee18 0a10 	vmov	r0, s16
   19844:	a908      	add	r1, sp, #32
   19846:	f000 f9c3 	bl	19bd0 <am_hal_queue_item_add>
   1984a:	2800      	cmp	r0, #0
   1984c:	d077      	beq.n	1993e <am_hal_uart_transfer+0x31a>
   1984e:	9807      	ldr	r0, [sp, #28]
   19850:	f7fe fe96 	bl	18580 <am_hal_interrupt_master_set>
   19854:	6d22      	ldr	r2, [r4, #80]	; 0x50
   19856:	42ba      	cmp	r2, r7
   19858:	bf28      	it	cs
   1985a:	463a      	movcs	r2, r7
   1985c:	ee18 0a10 	vmov	r0, s16
   19860:	4631      	mov	r1, r6
   19862:	4490      	add	r8, r2
   19864:	1abf      	subs	r7, r7, r2
   19866:	f000 f9f1 	bl	19c4c <am_hal_queue_item_get>
   1986a:	e7ad      	b.n	197c8 <am_hal_uart_transfer+0x1a4>
   1986c:	4490      	add	r8, r2
   1986e:	e7ac      	b.n	197ca <am_hal_uart_transfer+0x1a6>
   19870:	9807      	ldr	r0, [sp, #28]
   19872:	f7fe fe85 	bl	18580 <am_hal_interrupt_master_set>
   19876:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   1987a:	e7c2      	b.n	19802 <am_hal_uart_transfer+0x1de>
   1987c:	4490      	add	r8, r2
   1987e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   19882:	e7be      	b.n	19802 <am_hal_uart_transfer+0x1de>
   19884:	2800      	cmp	r0, #0
   19886:	f43f af2e 	beq.w	196e6 <am_hal_uart_transfer+0xc2>
   1988a:	6803      	ldr	r3, [r0, #0]
   1988c:	4a2e      	ldr	r2, [pc, #184]	; (19948 <am_hal_uart_transfer+0x324>)
   1988e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   19892:	4293      	cmp	r3, r2
   19894:	f47f af27 	bne.w	196e6 <am_hal_uart_transfer+0xc2>
   19898:	9b03      	ldr	r3, [sp, #12]
   1989a:	b10b      	cbz	r3, 198a0 <am_hal_uart_transfer+0x27c>
   1989c:	f8c3 9000 	str.w	r9, [r3]
   198a0:	2e00      	cmp	r6, #0
   198a2:	d096      	beq.n	197d2 <am_hal_uart_transfer+0x1ae>
   198a4:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   198a8:	2d00      	cmp	r5, #0
   198aa:	d156      	bne.n	1995a <am_hal_uart_transfer+0x336>
   198ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
   198ae:	9b01      	ldr	r3, [sp, #4]
   198b0:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   198b4:	321c      	adds	r2, #28
   198b6:	0312      	lsls	r2, r2, #12
   198b8:	3b01      	subs	r3, #1
   198ba:	e005      	b.n	198c8 <am_hal_uart_transfer+0x2a4>
   198bc:	3501      	adds	r5, #1
   198be:	f813 1f01 	ldrb.w	r1, [r3, #1]!
   198c2:	6011      	str	r1, [r2, #0]
   198c4:	42ae      	cmp	r6, r5
   198c6:	d002      	beq.n	198ce <am_hal_uart_transfer+0x2aa>
   198c8:	6991      	ldr	r1, [r2, #24]
   198ca:	0689      	lsls	r1, r1, #26
   198cc:	d5f6      	bpl.n	198bc <am_hal_uart_transfer+0x298>
   198ce:	9b03      	ldr	r3, [sp, #12]
   198d0:	2b00      	cmp	r3, #0
   198d2:	f43f af7e 	beq.w	197d2 <am_hal_uart_transfer+0x1ae>
   198d6:	601d      	str	r5, [r3, #0]
   198d8:	2500      	movs	r5, #0
   198da:	e6af      	b.n	1963c <am_hal_uart_transfer+0x18>
   198dc:	2800      	cmp	r0, #0
   198de:	f43f af02 	beq.w	196e6 <am_hal_uart_transfer+0xc2>
   198e2:	6802      	ldr	r2, [r0, #0]
   198e4:	4918      	ldr	r1, [pc, #96]	; (19948 <am_hal_uart_transfer+0x324>)
   198e6:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   198ea:	428a      	cmp	r2, r1
   198ec:	f47f aefb 	bne.w	196e6 <am_hal_uart_transfer+0xc2>
   198f0:	b103      	cbz	r3, 198f4 <am_hal_uart_transfer+0x2d0>
   198f2:	601d      	str	r5, [r3, #0]
   198f4:	2f00      	cmp	r7, #0
   198f6:	f43f af6c 	beq.w	197d2 <am_hal_uart_transfer+0x1ae>
   198fa:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   198fe:	2a00      	cmp	r2, #0
   19900:	d15c      	bne.n	199bc <am_hal_uart_transfer+0x398>
   19902:	6a60      	ldr	r0, [r4, #36]	; 0x24
   19904:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
   19908:	301c      	adds	r0, #28
   1990a:	0300      	lsls	r0, r0, #12
   1990c:	f10b 33ff 	add.w	r3, fp, #4294967295
   19910:	4614      	mov	r4, r2
   19912:	e009      	b.n	19928 <am_hal_uart_transfer+0x304>
   19914:	6801      	ldr	r1, [r0, #0]
   19916:	f411 6270 	ands.w	r2, r1, #3840	; 0xf00
   1991a:	f040 8080 	bne.w	19a1e <am_hal_uart_transfer+0x3fa>
   1991e:	3401      	adds	r4, #1
   19920:	42a7      	cmp	r7, r4
   19922:	f803 1f01 	strb.w	r1, [r3, #1]!
   19926:	d07d      	beq.n	19a24 <am_hal_uart_transfer+0x400>
   19928:	6982      	ldr	r2, [r0, #24]
   1992a:	06d2      	lsls	r2, r2, #27
   1992c:	d5f2      	bpl.n	19914 <am_hal_uart_transfer+0x2f0>
   1992e:	9b01      	ldr	r3, [sp, #4]
   19930:	2b00      	cmp	r3, #0
   19932:	f43f ae83 	beq.w	1963c <am_hal_uart_transfer+0x18>
   19936:	601c      	str	r4, [r3, #0]
   19938:	e680      	b.n	1963c <am_hal_uart_transfer+0x18>
   1993a:	4607      	mov	r7, r0
   1993c:	e6d0      	b.n	196e0 <am_hal_uart_transfer+0xbc>
   1993e:	9807      	ldr	r0, [sp, #28]
   19940:	4d02      	ldr	r5, [pc, #8]	; (1994c <am_hal_uart_transfer+0x328>)
   19942:	f7fe fe1d 	bl	18580 <am_hal_interrupt_master_set>
   19946:	e75c      	b.n	19802 <am_hal_uart_transfer+0x1de>
   19948:	01ea9e06 	.word	0x01ea9e06
   1994c:	08000001 	.word	0x08000001
   19950:	4680      	mov	r8, r0
   19952:	2502      	movs	r5, #2
   19954:	e755      	b.n	19802 <am_hal_uart_transfer+0x1de>
   19956:	462f      	mov	r7, r5
   19958:	e6aa      	b.n	196b0 <am_hal_uart_transfer+0x8c>
   1995a:	e9d4 530d 	ldrd	r5, r3, [r4, #52]	; 0x34
   1995e:	1b5d      	subs	r5, r3, r5
   19960:	42b5      	cmp	r5, r6
   19962:	bf28      	it	cs
   19964:	4635      	movcs	r5, r6
   19966:	f104 072c 	add.w	r7, r4, #44	; 0x2c
   1996a:	9901      	ldr	r1, [sp, #4]
   1996c:	462a      	mov	r2, r5
   1996e:	4638      	mov	r0, r7
   19970:	f000 f92e 	bl	19bd0 <am_hal_queue_item_add>
   19974:	6a66      	ldr	r6, [r4, #36]	; 0x24
   19976:	f7fe fdff 	bl	18578 <am_hal_interrupt_master_disable>
   1997a:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
   1997e:	361c      	adds	r6, #28
   19980:	0336      	lsls	r6, r6, #12
   19982:	9005      	str	r0, [sp, #20]
   19984:	e00d      	b.n	199a2 <am_hal_uart_transfer+0x37e>
   19986:	f000 f961 	bl	19c4c <am_hal_queue_item_get>
   1998a:	b188      	cbz	r0, 199b0 <am_hal_uart_transfer+0x38c>
   1998c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1998e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   19992:	321c      	adds	r2, #28
   19994:	0312      	lsls	r2, r2, #12
   19996:	6993      	ldr	r3, [r2, #24]
   19998:	0699      	lsls	r1, r3, #26
   1999a:	bf5c      	itt	pl
   1999c:	f89d 3020 	ldrbpl.w	r3, [sp, #32]
   199a0:	6013      	strpl	r3, [r2, #0]
   199a2:	69b3      	ldr	r3, [r6, #24]
   199a4:	069b      	lsls	r3, r3, #26
   199a6:	f04f 0201 	mov.w	r2, #1
   199aa:	a908      	add	r1, sp, #32
   199ac:	4638      	mov	r0, r7
   199ae:	d5ea      	bpl.n	19986 <am_hal_uart_transfer+0x362>
   199b0:	9805      	ldr	r0, [sp, #20]
   199b2:	f7fe fde5 	bl	18580 <am_hal_interrupt_master_set>
   199b6:	e78a      	b.n	198ce <am_hal_uart_transfer+0x2aa>
   199b8:	46b8      	mov	r8, r7
   199ba:	e706      	b.n	197ca <am_hal_uart_transfer+0x1a6>
   199bc:	f7fe fddc 	bl	18578 <am_hal_interrupt_master_disable>
   199c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   199c2:	9006      	str	r0, [sp, #24]
   199c4:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   199c8:	321c      	adds	r2, #28
   199ca:	0310      	lsls	r0, r2, #12
   199cc:	ae08      	add	r6, sp, #32
   199ce:	2200      	movs	r2, #0
   199d0:	6983      	ldr	r3, [r0, #24]
   199d2:	06d9      	lsls	r1, r3, #27
   199d4:	d409      	bmi.n	199ea <am_hal_uart_transfer+0x3c6>
   199d6:	6803      	ldr	r3, [r0, #0]
   199d8:	f413 6f70 	tst.w	r3, #3840	; 0xf00
   199dc:	f102 0201 	add.w	r2, r2, #1
   199e0:	d117      	bne.n	19a12 <am_hal_uart_transfer+0x3ee>
   199e2:	2a20      	cmp	r2, #32
   199e4:	f806 3b01 	strb.w	r3, [r6], #1
   199e8:	d1f2      	bne.n	199d0 <am_hal_uart_transfer+0x3ac>
   199ea:	f104 0648 	add.w	r6, r4, #72	; 0x48
   199ee:	a908      	add	r1, sp, #32
   199f0:	4630      	mov	r0, r6
   199f2:	f000 f8ed 	bl	19bd0 <am_hal_queue_item_add>
   199f6:	b1b8      	cbz	r0, 19a28 <am_hal_uart_transfer+0x404>
   199f8:	9806      	ldr	r0, [sp, #24]
   199fa:	f7fe fdc1 	bl	18580 <am_hal_interrupt_master_set>
   199fe:	6d24      	ldr	r4, [r4, #80]	; 0x50
   19a00:	42bc      	cmp	r4, r7
   19a02:	bf28      	it	cs
   19a04:	463c      	movcs	r4, r7
   19a06:	4659      	mov	r1, fp
   19a08:	4630      	mov	r0, r6
   19a0a:	4622      	mov	r2, r4
   19a0c:	f000 f91e 	bl	19c4c <am_hal_queue_item_get>
   19a10:	e78d      	b.n	1992e <am_hal_uart_transfer+0x30a>
   19a12:	9806      	ldr	r0, [sp, #24]
   19a14:	f7fe fdb4 	bl	18580 <am_hal_interrupt_master_set>
   19a18:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   19a1c:	e60e      	b.n	1963c <am_hal_uart_transfer+0x18>
   19a1e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   19a22:	e784      	b.n	1992e <am_hal_uart_transfer+0x30a>
   19a24:	4615      	mov	r5, r2
   19a26:	e782      	b.n	1992e <am_hal_uart_transfer+0x30a>
   19a28:	9806      	ldr	r0, [sp, #24]
   19a2a:	4d02      	ldr	r5, [pc, #8]	; (19a34 <am_hal_uart_transfer+0x410>)
   19a2c:	f7fe fda8 	bl	18580 <am_hal_interrupt_master_set>
   19a30:	e604      	b.n	1963c <am_hal_uart_transfer+0x18>
   19a32:	bf00      	nop
   19a34:	08000001 	.word	0x08000001

00019a38 <am_hal_cmdq_init>:
   19a38:	2807      	cmp	r0, #7
   19a3a:	d84d      	bhi.n	19ad8 <am_hal_cmdq_init+0xa0>
   19a3c:	2900      	cmp	r1, #0
   19a3e:	d050      	beq.n	19ae2 <am_hal_cmdq_init+0xaa>
   19a40:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
   19a44:	684e      	ldr	r6, [r1, #4]
   19a46:	2e00      	cmp	r6, #0
   19a48:	d043      	beq.n	19ad2 <am_hal_cmdq_init+0x9a>
   19a4a:	2a00      	cmp	r2, #0
   19a4c:	d041      	beq.n	19ad2 <am_hal_cmdq_init+0x9a>
   19a4e:	680c      	ldr	r4, [r1, #0]
   19a50:	2c01      	cmp	r4, #1
   19a52:	d93e      	bls.n	19ad2 <am_hal_cmdq_init+0x9a>
   19a54:	f8df e094 	ldr.w	lr, [pc, #148]	; 19aec <am_hal_cmdq_init+0xb4>
   19a58:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   19a5c:	fb0c fc00 	mul.w	ip, ip, r0
   19a60:	eb0e 030c 	add.w	r3, lr, ip
   19a64:	78dd      	ldrb	r5, [r3, #3]
   19a66:	f015 0501 	ands.w	r5, r5, #1
   19a6a:	d137      	bne.n	19adc <am_hal_cmdq_init+0xa4>
   19a6c:	00e4      	lsls	r4, r4, #3
   19a6e:	19a7      	adds	r7, r4, r6
   19a70:	e9c3 6701 	strd	r6, r7, [r3, #4]
   19a74:	e9c3 6604 	strd	r6, r6, [r3, #16]
   19a78:	4f1b      	ldr	r7, [pc, #108]	; (19ae8 <am_hal_cmdq_init+0xb0>)
   19a7a:	619c      	str	r4, [r3, #24]
   19a7c:	60de      	str	r6, [r3, #12]
   19a7e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
   19a82:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   19a86:	f85e 400c 	ldr.w	r4, [lr, ip]
   19a8a:	f8df 9064 	ldr.w	r9, [pc, #100]	; 19af0 <am_hal_cmdq_init+0xb8>
   19a8e:	f004 477c 	and.w	r7, r4, #4227858432	; 0xfc000000
   19a92:	ea47 0709 	orr.w	r7, r7, r9
   19a96:	6884      	ldr	r4, [r0, #8]
   19a98:	f84e 700c 	str.w	r7, [lr, ip]
   19a9c:	6258      	str	r0, [r3, #36]	; 0x24
   19a9e:	e9c3 5507 	strd	r5, r5, [r3, #28]
   19aa2:	6025      	str	r5, [r4, #0]
   19aa4:	6a58      	ldr	r0, [r3, #36]	; 0x24
   19aa6:	68c0      	ldr	r0, [r0, #12]
   19aa8:	6005      	str	r5, [r0, #0]
   19aaa:	6a58      	ldr	r0, [r3, #36]	; 0x24
   19aac:	e9d0 4704 	ldrd	r4, r7, [r0, #16]
   19ab0:	6820      	ldr	r0, [r4, #0]
   19ab2:	4338      	orrs	r0, r7
   19ab4:	6020      	str	r0, [r4, #0]
   19ab6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   19ab8:	6840      	ldr	r0, [r0, #4]
   19aba:	6006      	str	r6, [r0, #0]
   19abc:	6a58      	ldr	r0, [r3, #36]	; 0x24
   19abe:	7a09      	ldrb	r1, [r1, #8]
   19ac0:	6804      	ldr	r4, [r0, #0]
   19ac2:	0049      	lsls	r1, r1, #1
   19ac4:	f001 0102 	and.w	r1, r1, #2
   19ac8:	6021      	str	r1, [r4, #0]
   19aca:	4628      	mov	r0, r5
   19acc:	6013      	str	r3, [r2, #0]
   19ace:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
   19ad2:	2006      	movs	r0, #6
   19ad4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
   19ad8:	2005      	movs	r0, #5
   19ada:	4770      	bx	lr
   19adc:	2007      	movs	r0, #7
   19ade:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
   19ae2:	2006      	movs	r0, #6
   19ae4:	4770      	bx	lr
   19ae6:	bf00      	nop
   19ae8:	00028f14 	.word	0x00028f14
   19aec:	100009e0 	.word	0x100009e0
   19af0:	01cdcdcd 	.word	0x01cdcdcd

00019af4 <am_hal_cmdq_enable>:
   19af4:	4603      	mov	r3, r0
   19af6:	b1a0      	cbz	r0, 19b22 <am_hal_cmdq_enable+0x2e>
   19af8:	6802      	ldr	r2, [r0, #0]
   19afa:	490c      	ldr	r1, [pc, #48]	; (19b2c <am_hal_cmdq_enable+0x38>)
   19afc:	f022 427e 	bic.w	r2, r2, #4261412864	; 0xfe000000
   19b00:	428a      	cmp	r2, r1
   19b02:	d10e      	bne.n	19b22 <am_hal_cmdq_enable+0x2e>
   19b04:	78c0      	ldrb	r0, [r0, #3]
   19b06:	f010 0002 	ands.w	r0, r0, #2
   19b0a:	d10c      	bne.n	19b26 <am_hal_cmdq_enable+0x32>
   19b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19b0e:	6811      	ldr	r1, [r2, #0]
   19b10:	680a      	ldr	r2, [r1, #0]
   19b12:	f042 0201 	orr.w	r2, r2, #1
   19b16:	600a      	str	r2, [r1, #0]
   19b18:	78da      	ldrb	r2, [r3, #3]
   19b1a:	f042 0202 	orr.w	r2, r2, #2
   19b1e:	70da      	strb	r2, [r3, #3]
   19b20:	4770      	bx	lr
   19b22:	2002      	movs	r0, #2
   19b24:	4770      	bx	lr
   19b26:	2000      	movs	r0, #0
   19b28:	4770      	bx	lr
   19b2a:	bf00      	nop
   19b2c:	01cdcdcd 	.word	0x01cdcdcd

00019b30 <am_hal_cmdq_term>:
   19b30:	2800      	cmp	r0, #0
   19b32:	d03d      	beq.n	19bb0 <am_hal_cmdq_term+0x80>
   19b34:	b570      	push	{r4, r5, r6, lr}
   19b36:	6803      	ldr	r3, [r0, #0]
   19b38:	4a1e      	ldr	r2, [pc, #120]	; (19bb4 <am_hal_cmdq_term+0x84>)
   19b3a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
   19b3e:	4293      	cmp	r3, r2
   19b40:	b082      	sub	sp, #8
   19b42:	4604      	mov	r4, r0
   19b44:	d002      	beq.n	19b4c <am_hal_cmdq_term+0x1c>
   19b46:	2002      	movs	r0, #2
   19b48:	b002      	add	sp, #8
   19b4a:	bd70      	pop	{r4, r5, r6, pc}
   19b4c:	460d      	mov	r5, r1
   19b4e:	f7fe fd13 	bl	18578 <am_hal_interrupt_master_disable>
   19b52:	e9d4 2608 	ldrd	r2, r6, [r4, #32]
   19b56:	68b3      	ldr	r3, [r6, #8]
   19b58:	9001      	str	r0, [sp, #4]
   19b5a:	6819      	ldr	r1, [r3, #0]
   19b5c:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
   19b60:	b2c9      	uxtb	r1, r1
   19b62:	430b      	orrs	r3, r1
   19b64:	1ad2      	subs	r2, r2, r3
   19b66:	2a00      	cmp	r2, #0
   19b68:	bfb8      	it	lt
   19b6a:	f5a3 7380 	sublt.w	r3, r3, #256	; 0x100
   19b6e:	61e3      	str	r3, [r4, #28]
   19b70:	6873      	ldr	r3, [r6, #4]
   19b72:	681b      	ldr	r3, [r3, #0]
   19b74:	60e3      	str	r3, [r4, #12]
   19b76:	9801      	ldr	r0, [sp, #4]
   19b78:	f7fe fd02 	bl	18580 <am_hal_interrupt_master_set>
   19b7c:	b91d      	cbnz	r5, 19b86 <am_hal_cmdq_term+0x56>
   19b7e:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
   19b82:	429a      	cmp	r2, r3
   19b84:	d112      	bne.n	19bac <am_hal_cmdq_term+0x7c>
   19b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19b88:	78e2      	ldrb	r2, [r4, #3]
   19b8a:	6818      	ldr	r0, [r3, #0]
   19b8c:	6919      	ldr	r1, [r3, #16]
   19b8e:	f36f 0200 	bfc	r2, #0, #1
   19b92:	70e2      	strb	r2, [r4, #3]
   19b94:	6802      	ldr	r2, [r0, #0]
   19b96:	f022 0201 	bic.w	r2, r2, #1
   19b9a:	6002      	str	r2, [r0, #0]
   19b9c:	695a      	ldr	r2, [r3, #20]
   19b9e:	680b      	ldr	r3, [r1, #0]
   19ba0:	2000      	movs	r0, #0
   19ba2:	ea23 0302 	bic.w	r3, r3, r2
   19ba6:	600b      	str	r3, [r1, #0]
   19ba8:	b002      	add	sp, #8
   19baa:	bd70      	pop	{r4, r5, r6, pc}
   19bac:	2003      	movs	r0, #3
   19bae:	e7cb      	b.n	19b48 <am_hal_cmdq_term+0x18>
   19bb0:	2002      	movs	r0, #2
   19bb2:	4770      	bx	lr
   19bb4:	01cdcdcd 	.word	0x01cdcdcd

00019bb8 <am_hal_queue_init>:
   19bb8:	b410      	push	{r4}
   19bba:	2400      	movs	r4, #0
   19bbc:	e9c0 4400 	strd	r4, r4, [r0]
   19bc0:	6084      	str	r4, [r0, #8]
   19bc2:	e9c0 2104 	strd	r2, r1, [r0, #16]
   19bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
   19bca:	60c3      	str	r3, [r0, #12]
   19bcc:	4770      	bx	lr
   19bce:	bf00      	nop

00019bd0 <am_hal_queue_item_add>:
   19bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19bd2:	6906      	ldr	r6, [r0, #16]
   19bd4:	b083      	sub	sp, #12
   19bd6:	4604      	mov	r4, r0
   19bd8:	fb06 f602 	mul.w	r6, r6, r2
   19bdc:	460d      	mov	r5, r1
   19bde:	f7fe fccb 	bl	18578 <am_hal_interrupt_master_disable>
   19be2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
   19be6:	1a53      	subs	r3, r2, r1
   19be8:	42b3      	cmp	r3, r6
   19bea:	9001      	str	r0, [sp, #4]
   19bec:	d31c      	bcc.n	19c28 <am_hal_queue_item_add+0x58>
   19bee:	b196      	cbz	r6, 19c16 <am_hal_queue_item_add+0x46>
   19bf0:	6823      	ldr	r3, [r4, #0]
   19bf2:	b305      	cbz	r5, 19c36 <am_hal_queue_item_add+0x66>
   19bf4:	1e68      	subs	r0, r5, #1
   19bf6:	1987      	adds	r7, r0, r6
   19bf8:	6962      	ldr	r2, [r4, #20]
   19bfa:	f810 1f01 	ldrb.w	r1, [r0, #1]!
   19bfe:	54d1      	strb	r1, [r2, r3]
   19c00:	6823      	ldr	r3, [r4, #0]
   19c02:	68e5      	ldr	r5, [r4, #12]
   19c04:	1c59      	adds	r1, r3, #1
   19c06:	4287      	cmp	r7, r0
   19c08:	fbb1 f3f5 	udiv	r3, r1, r5
   19c0c:	fb05 1313 	mls	r3, r5, r3, r1
   19c10:	6023      	str	r3, [r4, #0]
   19c12:	d1f1      	bne.n	19bf8 <am_hal_queue_item_add+0x28>
   19c14:	68a1      	ldr	r1, [r4, #8]
   19c16:	9801      	ldr	r0, [sp, #4]
   19c18:	440e      	add	r6, r1
   19c1a:	60a6      	str	r6, [r4, #8]
   19c1c:	f7fe fcb0 	bl	18580 <am_hal_interrupt_master_set>
   19c20:	2401      	movs	r4, #1
   19c22:	4620      	mov	r0, r4
   19c24:	b003      	add	sp, #12
   19c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c28:	9801      	ldr	r0, [sp, #4]
   19c2a:	f7fe fca9 	bl	18580 <am_hal_interrupt_master_set>
   19c2e:	2400      	movs	r4, #0
   19c30:	4620      	mov	r0, r4
   19c32:	b003      	add	sp, #12
   19c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19c36:	4628      	mov	r0, r5
   19c38:	3001      	adds	r0, #1
   19c3a:	3301      	adds	r3, #1
   19c3c:	4286      	cmp	r6, r0
   19c3e:	fbb3 f5f2 	udiv	r5, r3, r2
   19c42:	fb02 3315 	mls	r3, r2, r5, r3
   19c46:	d1f7      	bne.n	19c38 <am_hal_queue_item_add+0x68>
   19c48:	6023      	str	r3, [r4, #0]
   19c4a:	e7e4      	b.n	19c16 <am_hal_queue_item_add+0x46>

00019c4c <am_hal_queue_item_get>:
   19c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c4e:	6906      	ldr	r6, [r0, #16]
   19c50:	4604      	mov	r4, r0
   19c52:	b083      	sub	sp, #12
   19c54:	fb06 f602 	mul.w	r6, r6, r2
   19c58:	460d      	mov	r5, r1
   19c5a:	f7fe fc8d 	bl	18578 <am_hal_interrupt_master_disable>
   19c5e:	68a2      	ldr	r2, [r4, #8]
   19c60:	9001      	str	r0, [sp, #4]
   19c62:	42b2      	cmp	r2, r6
   19c64:	d31c      	bcc.n	19ca0 <am_hal_queue_item_get+0x54>
   19c66:	b196      	cbz	r6, 19c8e <am_hal_queue_item_get+0x42>
   19c68:	6863      	ldr	r3, [r4, #4]
   19c6a:	b305      	cbz	r5, 19cae <am_hal_queue_item_get+0x62>
   19c6c:	1e68      	subs	r0, r5, #1
   19c6e:	1987      	adds	r7, r0, r6
   19c70:	6962      	ldr	r2, [r4, #20]
   19c72:	5cd3      	ldrb	r3, [r2, r3]
   19c74:	f800 3f01 	strb.w	r3, [r0, #1]!
   19c78:	6863      	ldr	r3, [r4, #4]
   19c7a:	68e5      	ldr	r5, [r4, #12]
   19c7c:	1c59      	adds	r1, r3, #1
   19c7e:	4287      	cmp	r7, r0
   19c80:	fbb1 f3f5 	udiv	r3, r1, r5
   19c84:	fb05 1313 	mls	r3, r5, r3, r1
   19c88:	6063      	str	r3, [r4, #4]
   19c8a:	d1f1      	bne.n	19c70 <am_hal_queue_item_get+0x24>
   19c8c:	68a2      	ldr	r2, [r4, #8]
   19c8e:	9801      	ldr	r0, [sp, #4]
   19c90:	1b92      	subs	r2, r2, r6
   19c92:	60a2      	str	r2, [r4, #8]
   19c94:	f7fe fc74 	bl	18580 <am_hal_interrupt_master_set>
   19c98:	2401      	movs	r4, #1
   19c9a:	4620      	mov	r0, r4
   19c9c:	b003      	add	sp, #12
   19c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ca0:	9801      	ldr	r0, [sp, #4]
   19ca2:	f7fe fc6d 	bl	18580 <am_hal_interrupt_master_set>
   19ca6:	2400      	movs	r4, #0
   19ca8:	4620      	mov	r0, r4
   19caa:	b003      	add	sp, #12
   19cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19cae:	68e1      	ldr	r1, [r4, #12]
   19cb0:	4628      	mov	r0, r5
   19cb2:	3001      	adds	r0, #1
   19cb4:	3301      	adds	r3, #1
   19cb6:	42b0      	cmp	r0, r6
   19cb8:	fbb3 f5f1 	udiv	r5, r3, r1
   19cbc:	fb01 3315 	mls	r3, r1, r5, r3
   19cc0:	d1f7      	bne.n	19cb2 <am_hal_queue_item_get+0x66>
   19cc2:	6063      	str	r3, [r4, #4]
   19cc4:	e7e3      	b.n	19c8e <am_hal_queue_item_get+0x42>
   19cc6:	bf00      	nop

00019cc8 <__init_array_end>:
   19cc8:	204d4450 	.word	0x204d4450
   19ccc:	20544646 	.word	0x20544646
   19cd0:	6d617865 	.word	0x6d617865
   19cd4:	2e656c70 	.word	0x2e656c70
   19cd8:	00000a0a 	.word	0x00000a0a
   19cdc:	63204453 	.word	0x63204453
   19ce0:	20647261 	.word	0x20647261
   19ce4:	74696e69 	.word	0x74696e69
   19ce8:	696c6169 	.word	0x696c6169
   19cec:	6974617a 	.word	0x6974617a
   19cf0:	69206e6f 	.word	0x69206e6f
   19cf4:	75732073 	.word	0x75732073
   19cf8:	73656363 	.word	0x73656363
   19cfc:	6c756673 	.word	0x6c756673
   19d00:	4453202c 	.word	0x4453202c
   19d04:	72616320 	.word	0x72616320
   19d08:	69772064 	.word	0x69772064
   19d0c:	62206c6c 	.word	0x62206c6c
   19d10:	6f6d2065 	.word	0x6f6d2065
   19d14:	65746e75 	.word	0x65746e75
   19d18:	6f732064 	.word	0x6f732064
   19d1c:	0d2e6e6f 	.word	0x0d2e6e6f
   19d20:	0000000a 	.word	0x0000000a
   19d24:	00003a30 	.word	0x00003a30
   19d28:	70736552 	.word	0x70736552
   19d2c:	2065736e 	.word	0x2065736e
   19d30:	6d206f74 	.word	0x6d206f74
   19d34:	746e756f 	.word	0x746e756f
   19d38:	20736920 	.word	0x20736920
   19d3c:	0a206425 	.word	0x0a206425
   19d40:	00000000 	.word	0x00000000
   19d44:	63204453 	.word	0x63204453
   19d48:	20647261 	.word	0x20647261
   19d4c:	20736168 	.word	0x20736168
   19d50:	66206f6e 	.word	0x66206f6e
   19d54:	20656c69 	.word	0x20656c69
   19d58:	74737973 	.word	0x74737973
   19d5c:	61206d65 	.word	0x61206d65
   19d60:	7720646e 	.word	0x7720646e
   19d64:	206c6c69 	.word	0x206c6c69
   19d68:	66206562 	.word	0x66206562
   19d6c:	616d726f 	.word	0x616d726f
   19d70:	64657474 	.word	0x64657474
   19d74:	6f6f7320 	.word	0x6f6f7320
   19d78:	2e2e2e6e 	.word	0x2e2e2e6e
   19d7c:	00000a0d 	.word	0x00000a0d
   19d80:	63204453 	.word	0x63204453
   19d84:	20647261 	.word	0x20647261
   19d88:	6d726f66 	.word	0x6d726f66
   19d8c:	65747461 	.word	0x65747461
   19d90:	75732064 	.word	0x75732064
   19d94:	73656363 	.word	0x73656363
   19d98:	6c756673 	.word	0x6c756673
   19d9c:	0d21796c 	.word	0x0d21796c
   19da0:	0000000a 	.word	0x0000000a
   19da4:	656c6946 	.word	0x656c6946
   19da8:	726f6620 	.word	0x726f6620
   19dac:	7474616d 	.word	0x7474616d
   19db0:	20676e69 	.word	0x20676e69
   19db4:	6c696166 	.word	0x6c696166
   19db8:	20216465 	.word	0x20216465
   19dbc:	6f727245 	.word	0x6f727245
   19dc0:	6f632072 	.word	0x6f632072
   19dc4:	203a6564 	.word	0x203a6564
   19dc8:	0a0d6425 	.word	0x0a0d6425
   19dcc:	00000000 	.word	0x00000000
   19dd0:	6c696146 	.word	0x6c696146
   19dd4:	74206465 	.word	0x74206465
   19dd8:	6f6d206f 	.word	0x6f6d206f
   19ddc:	20746e75 	.word	0x20746e75
   19de0:	20656874 	.word	0x20656874
   19de4:	656c6966 	.word	0x656c6966
   19de8:	73797320 	.word	0x73797320
   19dec:	216d6574 	.word	0x216d6574
   19df0:	20744920 	.word	0x20744920
   19df4:	2079616d 	.word	0x2079616d
   19df8:	62206562 	.word	0x62206562
   19dfc:	75616365 	.word	0x75616365
   19e00:	74206573 	.word	0x74206573
   19e04:	66206568 	.word	0x66206568
   19e08:	20656c69 	.word	0x20656c69
   19e0c:	74696e69 	.word	0x74696e69
   19e10:	696c6169 	.word	0x696c6169
   19e14:	6974617a 	.word	0x6974617a
   19e18:	66206e6f 	.word	0x66206e6f
   19e1c:	656c6961 	.word	0x656c6961
   19e20:	45202164 	.word	0x45202164
   19e24:	726f7272 	.word	0x726f7272
   19e28:	646f6320 	.word	0x646f6320
   19e2c:	25203a65 	.word	0x25203a65
   19e30:	000a0d64 	.word	0x000a0d64
   19e34:	20656854 	.word	0x20656854
   19e38:	656c6966 	.word	0x656c6966
   19e3c:	73797320 	.word	0x73797320
   19e40:	206d6574 	.word	0x206d6574
   19e44:	73207369 	.word	0x73207369
   19e48:	65636375 	.word	0x65636375
   19e4c:	75667373 	.word	0x75667373
   19e50:	20796c6c 	.word	0x20796c6c
   19e54:	6e756f6d 	.word	0x6e756f6d
   19e58:	2c646574 	.word	0x2c646574
   19e5c:	61657220 	.word	0x61657220
   19e60:	6e612064 	.word	0x6e612064
   19e64:	72772064 	.word	0x72772064
   19e68:	20657469 	.word	0x20657469
   19e6c:	74736574 	.word	0x74736574
   19e70:	61632073 	.word	0x61632073
   19e74:	6562206e 	.word	0x6562206e
   19e78:	72657020 	.word	0x72657020
   19e7c:	6d726f66 	.word	0x6d726f66
   19e80:	0d216465 	.word	0x0d216465
   19e84:	0000000a 	.word	0x0000000a
   19e88:	656c6946 	.word	0x656c6946
   19e8c:	69727720 	.word	0x69727720
   19e90:	676e6974 	.word	0x676e6974
   19e94:	73657420 	.word	0x73657420
   19e98:	73692074 	.word	0x73692074
   19e9c:	6f626120 	.word	0x6f626120
   19ea0:	74207475 	.word	0x74207475
   19ea4:	6562206f 	.word	0x6562206f
   19ea8:	72616320 	.word	0x72616320
   19eac:	64656972 	.word	0x64656972
   19eb0:	74756f20 	.word	0x74756f20
   19eb4:	0d2e2e2e 	.word	0x0d2e2e2e
   19eb8:	0000000a 	.word	0x0000000a
   19ebc:	46203a30 	.word	0x46203a30
   19ec0:	73467461 	.word	0x73467461
   19ec4:	61657220 	.word	0x61657220
   19ec8:	6e612064 	.word	0x6e612064
   19ecc:	72772064 	.word	0x72772064
   19ed0:	20657469 	.word	0x20657469
   19ed4:	74736574 	.word	0x74736574
   19ed8:	6c696620 	.word	0x6c696620
   19edc:	78742e65 	.word	0x78742e65
   19ee0:	00000074 	.word	0x00000074
   19ee4:	6e65704f 	.word	0x6e65704f
   19ee8:	65687420 	.word	0x65687420
   19eec:	6c696620 	.word	0x6c696620
   19ef0:	75732065 	.word	0x75732065
   19ef4:	73656363 	.word	0x73656363
   19ef8:	6c756673 	.word	0x6c756673
   19efc:	2021796c 	.word	0x2021796c
   19f00:	72617453 	.word	0x72617453
   19f04:	72772074 	.word	0x72772074
   19f08:	6e697469 	.word	0x6e697469
   19f0c:	61642067 	.word	0x61642067
   19f10:	0d216174 	.word	0x0d216174
   19f14:	0000000a 	.word	0x0000000a
   19f18:	61746144 	.word	0x61746144
   19f1c:	69727720 	.word	0x69727720
   19f20:	6e657474 	.word	0x6e657474
   19f24:	63757320 	.word	0x63757320
   19f28:	73736563 	.word	0x73736563
   19f2c:	6c6c7566 	.word	0x6c6c7566
   19f30:	0a0d2179 	.word	0x0a0d2179
   19f34:	00000000 	.word	0x00000000
   19f38:	61746144 	.word	0x61746144
   19f3c:	7325203a 	.word	0x7325203a
   19f40:	7257202e 	.word	0x7257202e
   19f44:	20657469 	.word	0x20657469
   19f48:	6f742061 	.word	0x6f742061
   19f4c:	206c6174 	.word	0x206c6174
   19f50:	2520666f 	.word	0x2520666f
   19f54:	68632064 	.word	0x68632064
   19f58:	63617261 	.word	0x63617261
   19f5c:	73726574 	.word	0x73726574
   19f60:	00000a0d 	.word	0x00000a0d
   19f64:	6c696146 	.word	0x6c696146
   19f68:	74206465 	.word	0x74206465
   19f6c:	7277206f 	.word	0x7277206f
   19f70:	20657469 	.word	0x20657469
   19f74:	61746164 	.word	0x61746164
   19f78:	000a0d21 	.word	0x000a0d21
   19f7c:	656c6946 	.word	0x656c6946
   19f80:	61657220 	.word	0x61657220
   19f84:	676e6964 	.word	0x676e6964
   19f88:	73657420 	.word	0x73657420
   19f8c:	73692074 	.word	0x73692074
   19f90:	6f626120 	.word	0x6f626120
   19f94:	74207475 	.word	0x74207475
   19f98:	6562206f 	.word	0x6562206f
   19f9c:	72657020 	.word	0x72657020
   19fa0:	6d726f66 	.word	0x6d726f66
   19fa4:	2e2e6465 	.word	0x2e2e6465
   19fa8:	000a0d2e 	.word	0x000a0d2e
   19fac:	6e65704f 	.word	0x6e65704f
   19fb0:	65687420 	.word	0x65687420
   19fb4:	6c696620 	.word	0x6c696620
   19fb8:	75732065 	.word	0x75732065
   19fbc:	73656363 	.word	0x73656363
   19fc0:	6c756673 	.word	0x6c756673
   19fc4:	2021796c 	.word	0x2021796c
   19fc8:	72617453 	.word	0x72617453
   19fcc:	65722074 	.word	0x65722074
   19fd0:	6e696461 	.word	0x6e696461
   19fd4:	61642067 	.word	0x61642067
   19fd8:	0d216174 	.word	0x0d216174
   19fdc:	0000000a 	.word	0x0000000a
   19fe0:	61746144 	.word	0x61746144
   19fe4:	61657220 	.word	0x61657220
   19fe8:	75732064 	.word	0x75732064
   19fec:	73656363 	.word	0x73656363
   19ff0:	6c756673 	.word	0x6c756673
   19ff4:	0d21796c 	.word	0x0d21796c
   19ff8:	0000000a 	.word	0x0000000a
   19ffc:	61746144 	.word	0x61746144
   1a000:	7325203a 	.word	0x7325203a
   1a004:	00000a0d 	.word	0x00000a0d
   1a008:	6c696146 	.word	0x6c696146
   1a00c:	74206465 	.word	0x74206465
   1a010:	6572206f 	.word	0x6572206f
   1a014:	64206461 	.word	0x64206461
   1a018:	21617461 	.word	0x21617461
   1a01c:	00000a0d 	.word	0x00000a0d
   1a020:	6c6c6568 	.word	0x6c6c6568
   1a024:	78742e6f 	.word	0x78742e6f
   1a028:	00000074 	.word	0x00000074
   1a02c:	656c6946 	.word	0x656c6946
   1a030:	72724520 	.word	0x72724520
   1a034:	2520726f 	.word	0x2520726f
   1a038:	00000a64 	.word	0x00000a64
   1a03c:	656c6946 	.word	0x656c6946
   1a040:	65706f20 	.word	0x65706f20
   1a044:	7573206e 	.word	0x7573206e
   1a048:	73656363 	.word	0x73656363
   1a04c:	6c756673 	.word	0x6c756673
   1a050:	2e2e796c 	.word	0x2e2e796c
   1a054:	00000a2e 	.word	0x00000a2e
   1a058:	656c6946 	.word	0x656c6946
   1a05c:	69727720 	.word	0x69727720
   1a060:	73206574 	.word	0x73206574
   1a064:	65636375 	.word	0x65636375
   1a068:	75667373 	.word	0x75667373
   1a06c:	0a206c6c 	.word	0x0a206c6c
   1a070:	00000000 	.word	0x00000000
   1a074:	656c6946 	.word	0x656c6946
   1a078:	69727720 	.word	0x69727720
   1a07c:	73206574 	.word	0x73206574
   1a080:	75746174 	.word	0x75746174
   1a084:	25203a73 	.word	0x25203a73
   1a088:	00000a64 	.word	0x00000a64
   1a08c:	6c6c6568 	.word	0x6c6c6568
   1a090:	0000006f 	.word	0x0000006f
   1a094:	0a0a0a0a 	.word	0x0a0a0a0a
   1a098:	0a0a0a0a 	.word	0x0a0a0a0a
   1a09c:	0a0a0a0a 	.word	0x0a0a0a0a
   1a0a0:	0a0a0a0a 	.word	0x0a0a0a0a
   1a0a4:	00000a0a 	.word	0x00000a0a
   1a0a8:	6f727245 	.word	0x6f727245
   1a0ac:	25203a72 	.word	0x25203a72
   1a0b0:	00000a64 	.word	0x00000a64
   1a0b4:	49204453 	.word	0x49204453
   1a0b8:	2074696e 	.word	0x2074696e
   1a0bc:	6c6c6143 	.word	0x6c6c6143
   1a0c0:	0a2e6465 	.word	0x0a2e6465
   1a0c4:	0000000a 	.word	0x0000000a
   1a0c8:	43204453 	.word	0x43204453
   1a0cc:	20647261 	.word	0x20647261
   1a0d0:	73726556 	.word	0x73726556
   1a0d4:	206e6f69 	.word	0x206e6f69
   1a0d8:	6c6c6143 	.word	0x6c6c6143
   1a0dc:	0a0a6465 	.word	0x0a0a6465
   1a0e0:	00000000 	.word	0x00000000
   1a0e4:	64726163 	.word	0x64726163
   1a0e8:	20736920 	.word	0x20736920
   1a0ec:	302e3256 	.word	0x302e3256
   1a0f0:	48445320 	.word	0x48445320
   1a0f4:	2e2e2e43 	.word	0x2e2e2e43
   1a0f8:	0a0a2e2e 	.word	0x0a0a2e2e
   1a0fc:	00000000 	.word	0x00000000
   1a100:	64726163 	.word	0x64726163
   1a104:	20736920 	.word	0x20736920
   1a108:	302e3256 	.word	0x302e3256
   1a10c:	2e2e2e2e 	.word	0x2e2e2e2e
   1a110:	000a0a2e 	.word	0x000a0a2e
   1a114:	61764e49 	.word	0x61764e49
   1a118:	2064696c 	.word	0x2064696c
   1a11c:	64726163 	.word	0x64726163
   1a120:	2e2e2e2e 	.word	0x2e2e2e2e
   1a124:	00000a0a 	.word	0x00000a0a
   1a128:	64616552 	.word	0x64616552
   1a12c:	72726520 	.word	0x72726520
   1a130:	0a2e726f 	.word	0x0a2e726f
   1a134:	00000000 	.word	0x00000000
   1a138:	74697257 	.word	0x74697257
   1a13c:	72652065 	.word	0x72652065
   1a140:	3a726f72 	.word	0x3a726f72
   1a144:	0a642520 	.word	0x0a642520
   1a148:	00000000 	.word	0x00000000
   1a14c:	73677241 	.word	0x73677241
   1a150:	6425203a 	.word	0x6425203a
   1a154:	25203b20 	.word	0x25203b20
   1a158:	00000a64 	.word	0x00000a64
   1a15c:	65204f49 	.word	0x65204f49
   1a160:	726f7272 	.word	0x726f7272
   1a164:	00000a2e 	.word	0x00000a2e
   1a168:	3c3a2a22 	.word	0x3c3a2a22
   1a16c:	7f7c3f3e 	.word	0x7f7c3f3e
   1a170:	00000000 	.word	0x00000000
   1a174:	3d3b2c2b 	.word	0x3d3b2c2b
   1a178:	00005d5b 	.word	0x00005d5b
   1a17c:	459076eb 	.word	0x459076eb
   1a180:	54414658 	.word	0x54414658
   1a184:	00202020 	.word	0x00202020
   1a188:	00544146 	.word	0x00544146
   1a18c:	33544146 	.word	0x33544146
   1a190:	00000032 	.word	0x00000032
   1a194:	4d90feeb 	.word	0x4d90feeb
   1a198:	534f4453 	.word	0x534f4453
   1a19c:	00302e35 	.word	0x00302e35
   1a1a0:	4e204f4e 	.word	0x4e204f4e
   1a1a4:	20454d41 	.word	0x20454d41
   1a1a8:	46202020 	.word	0x46202020
   1a1ac:	32335441 	.word	0x32335441
   1a1b0:	00202020 	.word	0x00202020
   1a1b4:	4e204f4e 	.word	0x4e204f4e
   1a1b8:	20454d41 	.word	0x20454d41
   1a1bc:	46202020 	.word	0x46202020
   1a1c0:	20205441 	.word	0x20205441
   1a1c4:	00202020 	.word	0x00202020

0001a1c8 <LfnOfs>:
   1a1c8:	07050301 12100e09 1c181614 0000001e     ................

0001a1d8 <defopt.6441>:
   1a1d8:	00000007 00000000 00000000 00000000     ................

0001a1e8 <cst32.6440>:
   1a1e8:	00020001 00080004 00200010 00000000     .......... .....

0001a1f8 <cst.6439>:
   1a1f8:	00040001 00400010 02000100 00000000     ......@.........

0001a208 <uni2oem932>:
   1a208:	819800a7 814e00a8 818b00b0 817d00b1     ......N.......}.
   1a218:	814c00b4 81f700b6 817e00d7 818000f7     ..L.......~.....
   1a228:	839f0391 83a00392 83a10393 83a20394     ................
   1a238:	83a30395 83a40396 83a50397 83a60398     ................
   1a248:	83a70399 83a8039a 83a9039b 83aa039c     ................
   1a258:	83ab039d 83ac039e 83ad039f 83ae03a0     ................
   1a268:	83af03a1 83b003a3 83b103a4 83b203a5     ................
   1a278:	83b303a6 83b403a7 83b503a8 83b603a9     ................
   1a288:	83bf03b1 83c003b2 83c103b3 83c203b4     ................
   1a298:	83c303b5 83c403b6 83c503b7 83c603b8     ................
   1a2a8:	83c703b9 83c803ba 83c903bb 83ca03bc     ................
   1a2b8:	83cb03bd 83cc03be 83cd03bf 83ce03c0     ................
   1a2c8:	83cf03c1 83d003c3 83d103c4 83d203c5     ................
   1a2d8:	83d303c6 83d403c7 83d503c8 83d603c9     ................
   1a2e8:	84460401 84400410 84410411 84420412     ..F...@...A...B.
   1a2f8:	84430413 84440414 84450415 84470416     ..C...D...E...G.
   1a308:	84480417 84490418 844a0419 844b041a     ..H...I...J...K.
   1a318:	844c041b 844d041c 844e041d 844f041e     ..L...M...N...O.
   1a328:	8450041f 84510420 84520421 84530422     ..P. .Q.!.R.".S.
   1a338:	84540423 84550424 84560425 84570426     #.T.$.U.%.V.&.W.
   1a348:	84580427 84590428 845a0429 845b042a     '.X.(.Y.).Z.*.[.
   1a358:	845c042b 845d042c 845e042d 845f042e     +.\.,.].-.^..._.
   1a368:	8460042f 84700430 84710431 84720432     /.`.0.p.1.q.2.r.
   1a378:	84730433 84740434 84750435 84770436     3.s.4.t.5.u.6.w.
   1a388:	84780437 84790438 847a0439 847b043a     7.x.8.y.9.z.:.{.
   1a398:	847c043b 847d043c 847e043d 8480043e     ;.|.<.}.=.~.>...
   1a3a8:	8481043f 84820440 84830441 84840442     ?...@...A...B...
   1a3b8:	84850443 84860444 84870445 84880446     C...D...E...F...
   1a3c8:	84890447 848a0448 848b0449 848c044a     G...H...I...J...
   1a3d8:	848d044b 848e044c 848f044d 8490044e     K...L...M...N...
   1a3e8:	8491044f 84760451 815d2010 815c2015     O...Q.v.. ].. \.
   1a3f8:	81652018 81662019 8167201c 8168201d     . e.. f.. g.. h.
   1a408:	81f52020 81f62021 81642025 81632026       ..! ..% d.& c.
   1a418:	81f12030 818c2032 818d2033 81a6203b     0 ..2 ..3 ..; ..
   1a428:	818e2103 87822116 87842121 81f0212b     .!...!..!!..+!..
   1a438:	87542160 87552161 87562162 87572163     `!T.a!U.b!V.c!W.
   1a448:	87582164 87592165 875a2166 875b2167     d!X.e!Y.f!Z.g![.
   1a458:	875c2168 875d2169 fa402170 fa412171     h!\.i!].p!@.q!A.
   1a468:	fa422172 fa432173 fa442174 fa452175     r!B.s!C.t!D.u!E.
   1a478:	fa462176 fa472177 fa482178 fa492179     v!F.w!G.x!H.y!I.
   1a488:	81a92190 81aa2191 81a82192 81ab2193     .!...!...!...!..
   1a498:	81cb21d2 81cc21d4 81cd2200 81dd2202     .!...!..."..."..
   1a4a8:	81ce2203 81de2207 81b82208 81b9220b     ."..."..."..."..
   1a4b8:	87942211 81e3221a 81e5221d 8187221e     ."..."..."..."..
   1a4c8:	8798221f 81da2220 81612225 81c82227     .".. "..%"a.'"..
   1a4d8:	81c92228 81bf2229 81be222a 81e7222b     ("..)"..*"..+"..
   1a4e8:	81e8222c 8793222e 81882234 81e62235     ,"..."..4"..5"..
   1a4f8:	81e4223d 81e02252 81822260 81df2261     ="..R"..`"..a"..
   1a508:	81852266 81862267 81e1226a 81e2226b     f"..g"..j"..k"..
   1a518:	81bc2282 81bd2283 81ba2286 81bb2287     ."..."..."..."..
   1a528:	81db22a5 879922bf 81dc2312 87402460     ."..."...#..`$@.
   1a538:	87412461 87422462 87432463 87442464     a$A.b$B.c$C.d$D.
   1a548:	87452465 87462466 87472467 87482468     e$E.f$F.g$G.h$H.
   1a558:	87492469 874a246a 874b246b 874c246c     i$I.j$J.k$K.l$L.
   1a568:	874d246d 874e246e 874f246f 87502470     m$M.n$N.o$O.p$P.
   1a578:	87512471 87522472 87532473 849f2500     q$Q.r$R.s$S..%..
   1a588:	84aa2501 84a02502 84ab2503 84a1250c     .%...%...%...%..
   1a598:	84ac250f 84a22510 84ad2513 84a42514     .%...%...%...%..
   1a5a8:	84af2517 84a32518 84ae251b 84a5251c     .%...%...%...%..
   1a5b8:	84ba251d 84b52520 84b02523 84a72524     .%.. %..#%..$%..
   1a5c8:	84bc2525 84b72528 84b2252b 84a6252c     %%..(%..+%..,%..
   1a5d8:	84b6252f 84bb2530 84b12533 84a82534     /%..0%..3%..4%..
   1a5e8:	84b82537 84bd2538 84b3253b 84a9253c     7%..8%..;%..<%..
   1a5f8:	84b9253f 84be2542 84b4254b 81a125a0     ?%..B%..K%...%..
   1a608:	81a025a1 81a325b2 81a225b3 81a525bc     .%...%...%...%..
   1a618:	81a425bd 819f25c6 819e25c7 819b25cb     .%...%...%...%..
   1a628:	819d25ce 819c25cf 81fc25ef 819a2605     .%...%...%...&..
   1a638:	81992606 818a2640 81892642 81f4266a     .&..@&..B&..j&..
   1a648:	81f3266d 81f2266f 81403000 81413001     m&..o&...0@..0A.
   1a658:	81423002 81563003 81583005 81593006     .0B..0V..0X..0Y.
   1a668:	815a3007 81713008 81723009 8173300a     .0Z..0q..0r..0s.
   1a678:	8174300b 8175300c 8176300d 8177300e     .0t..0u..0v..0w.
   1a688:	8178300f 81793010 817a3011 81a73012     .0x..0y..0z..0..
   1a698:	81ac3013 816b3014 816c3015 8780301d     .0...0k..0l..0..
   1a6a8:	8781301f 829f3041 82a03042 82a13043     .0..A0..B0..C0..
   1a6b8:	82a23044 82a33045 82a43046 82a53047     D0..E0..F0..G0..
   1a6c8:	82a63048 82a73049 82a8304a 82a9304b     H0..I0..J0..K0..
   1a6d8:	82aa304c 82ab304d 82ac304e 82ad304f     L0..M0..N0..O0..
   1a6e8:	82ae3050 82af3051 82b03052 82b13053     P0..Q0..R0..S0..
   1a6f8:	82b23054 82b33055 82b43056 82b53057     T0..U0..V0..W0..
   1a708:	82b63058 82b73059 82b8305a 82b9305b     X0..Y0..Z0..[0..
   1a718:	82ba305c 82bb305d 82bc305e 82bd305f     \0..]0..^0.._0..
   1a728:	82be3060 82bf3061 82c03062 82c13063     `0..a0..b0..c0..
   1a738:	82c23064 82c33065 82c43066 82c53067     d0..e0..f0..g0..
   1a748:	82c63068 82c73069 82c8306a 82c9306b     h0..i0..j0..k0..
   1a758:	82ca306c 82cb306d 82cc306e 82cd306f     l0..m0..n0..o0..
   1a768:	82ce3070 82cf3071 82d03072 82d13073     p0..q0..r0..s0..
   1a778:	82d23074 82d33075 82d43076 82d53077     t0..u0..v0..w0..
   1a788:	82d63078 82d73079 82d8307a 82d9307b     x0..y0..z0..{0..
   1a798:	82da307c 82db307d 82dc307e 82dd307f     |0..}0..~0...0..
   1a7a8:	82de3080 82df3081 82e03082 82e13083     .0...0...0...0..
   1a7b8:	82e23084 82e33085 82e43086 82e53087     .0...0...0...0..
   1a7c8:	82e63088 82e73089 82e8308a 82e9308b     .0...0...0...0..
   1a7d8:	82ea308c 82eb308d 82ec308e 82ed308f     .0...0...0...0..
   1a7e8:	82ee3090 82ef3091 82f03092 82f13093     .0...0...0...0..
   1a7f8:	814a309b 814b309c 8154309d 8155309e     .0J..0K..0T..0U.
   1a808:	834030a1 834130a2 834230a3 834330a4     .0@..0A..0B..0C.
   1a818:	834430a5 834530a6 834630a7 834730a8     .0D..0E..0F..0G.
   1a828:	834830a9 834930aa 834a30ab 834b30ac     .0H..0I..0J..0K.
   1a838:	834c30ad 834d30ae 834e30af 834f30b0     .0L..0M..0N..0O.
   1a848:	835030b1 835130b2 835230b3 835330b4     .0P..0Q..0R..0S.
   1a858:	835430b5 835530b6 835630b7 835730b8     .0T..0U..0V..0W.
   1a868:	835830b9 835930ba 835a30bb 835b30bc     .0X..0Y..0Z..0[.
   1a878:	835c30bd 835d30be 835e30bf 835f30c0     .0\..0]..0^..0_.
   1a888:	836030c1 836130c2 836230c3 836330c4     .0`..0a..0b..0c.
   1a898:	836430c5 836530c6 836630c7 836730c8     .0d..0e..0f..0g.
   1a8a8:	836830c9 836930ca 836a30cb 836b30cc     .0h..0i..0j..0k.
   1a8b8:	836c30cd 836d30ce 836e30cf 836f30d0     .0l..0m..0n..0o.
   1a8c8:	837030d1 837130d2 837230d3 837330d4     .0p..0q..0r..0s.
   1a8d8:	837430d5 837530d6 837630d7 837730d8     .0t..0u..0v..0w.
   1a8e8:	837830d9 837930da 837a30db 837b30dc     .0x..0y..0z..0{.
   1a8f8:	837c30dd 837d30de 837e30df 838030e0     .0|..0}..0~..0..
   1a908:	838130e1 838230e2 838330e3 838430e4     .0...0...0...0..
   1a918:	838530e5 838630e6 838730e7 838830e8     .0...0...0...0..
   1a928:	838930e9 838a30ea 838b30eb 838c30ec     .0...0...0...0..
   1a938:	838d30ed 838e30ee 838f30ef 839030f0     .0...0...0...0..
   1a948:	839130f1 839230f2 839330f3 839430f4     .0...0...0...0..
   1a958:	839530f5 839630f6 814530fb 815b30fc     .0...0...0E..0[.
   1a968:	815230fd 815330fe 878a3231 878b3232     .0R..0S.12..22..
   1a978:	878c3239 878532a4 878632a5 878732a6     92...2...2...2..
   1a988:	878832a7 878932a8 87653303 8769330d     .2...2...3e..3i.
   1a998:	87603314 87633318 87613322 876b3323     .3`..3c."3a.#3k.
   1a9a8:	876a3326 87643327 876c332b 87663336     &3j.'3d.+3l.63f.
   1a9b8:	876e333b 875f3349 876d334a 8762334d     ;3n.I3_.J3m.M3b.
   1a9c8:	87673351 87683357 877e337b 878f337c     Q3g.W3h.{3~.|3..
   1a9d8:	878e337d 878d337e 8772338e 8773338f     }3..~3...3r..3s.
   1a9e8:	876f339c 8770339d 8771339e 877533a1     .3o..3p..3q..3u.
   1a9f8:	877433c4 878333cd 88ea4e00 929a4e01     .3t..3...N...N..
   1aa08:	8eb54e03 969c4e07 8fe44e08 8e4f4e09     .N...N...N...NO.
   1aa18:	8fe34e0a 89ba4e0b 95734e0d 975e4e0e     .N...N...Ns..N^.
   1aa28:	98a04e10 894e4e11 8a8e4e14 98a14e15     .N...NN..N...N..
   1aa38:	90a24e16 99c04e17 8b754e18 95b84e19     .N...N...Nu..N..
   1aa48:	8fe54e1e 97bc4e21 95c04e26 fa684e28     .N..!N..&N..(Nh.
   1aa58:	98a24e2a 92864e2d 98a34e31 8bf84e32     *N..-N..1N..2N..
   1aa68:	98a44e36 8adb4e38 924f4e39 8ee54e3b     6N..8N..9NO.;N..
   1aa78:	98a54e3c 98a64e3f 98a74e42 94544e43     <N..?N..BN..CNT.
   1aa88:	8b764e45 94564e4b 93e14e4d 8cc14e4e     ENv.KNV.MN..NN..
   1aa98:	96524e4f e5684e55 98a84e56 8fe64e57     ONR.UNh.VN..WN..
   1aaa8:	98a94e58 89b34e59 8be34e5d 8cee4e5e     XN..YN..]N..^N..
   1aab8:	96e74e5f 9ba44e62 97904e71 93fb4e73     _N..bN..qN..sN..
   1aac8:	8aa34e7e 8b544e80 98aa4e82 98ab4e85     ~N...NT..N...N..
   1aad8:	97b94e86 975c4e88 91884e89 98ad4e8a     .N...N\..N...N..
   1aae8:	8e964e8b 93f14e8c 98b04e8e 895d4e91     .N...N...N...N].
   1aaf8:	8cdd4e92 8cdc4e94 88e44e95 986a4e98     .N...N...N...Nj.
   1ab08:	98694e99 8db14e9b 889f4e9c 98b14e9e     .Ni..N...N...N..
   1ab18:	98b24e9f 98b34ea0 96534ea1 98b44ea2     .N...N...NS..N..
   1ab28:	8cf04ea4 88e54ea5 96924ea6 8b9c4ea8     .N...N...N...N..
   1ab38:	8b9d4eab 8b9e4eac 92e04ead 97ba4eae     .N...N...N...N..
   1ab48:	98b54eb0 98b64eb3 98b74eb6 906c4eba     .N...N...N...Nl.
   1ab58:	8f594ec0 906d4ec1 98bc4ec2 98ba4ec4     .NY..Nm..N...N..
   1ab68:	98bb4ec6 8b774ec7 8da14eca 89ee4ecb     .N...Nw..N...N..
   1ab78:	98b94ecd 98b84ece 95a74ecf 8e654ed4     .N...N...N...Ne.
   1ab88:	8e644ed5 91bc4ed6 98bd4ed7 95744ed8     .Nd..N...N...Nt.
   1ab98:	90e54ed9 81574edd 98be4ede 98c04edf     .N...NW..N...N..
   1aba8:	fa694ee1 91e34ee3 97df4ee4 88c84ee5     .Ni..N...N...N..
   1abb8:	98bf4eed 89bc4eee 8bc24ef0 92874ef2     .N...N...N...N..
   1abc8:	8c8f4ef6 98c14ef7 94434efb fa6a4efc     .N...N...NC..Nj.
   1abd8:	fa6b4f00 8ae94f01 fa6c4f03 98c24f09     .Ok..O...Ol..O..
   1abe8:	88c94f0a 8cde4f0d 8aea4f0e 959a4f0f     .O...O...O...O..
   1abf8:	94b04f10 8b784f11 89ef4f1a 98e54f1c     .O...Ox..O...O..
   1ac08:	93604f1d 948c4f2f 98c44f30 94ba4f34     .O`./O..0O..4O..
   1ac18:	97e04f36 904c4f38 fa6d4f39 8e664f3a     6O..8OL.9Om.:Of.
   1ac28:	8e974f3c 89be4f3d 92cf4f43 92414f46     <O..=O..CO..FOA.
   1ac38:	98c84f47 88ca4f4d 92e14f4e 8f5a4f4f     GO..MO..NO..OOZ.
   1ac48:	8db24f50 97434f51 91cc4f53 89bd4f55     PO..QOC.SO..UO..
   1ac58:	fa6e4f56 98c74f57 975d4f59 98c34f5a     VOn.WO..YO].ZO..
   1ac68:	98c54f5b 8dec4f5c 98c64f5d 9b434f5e     [O..\O..]O..^OC.
   1ac78:	98ce4f69 98d14f6f 98cf4f70 89c04f73     iO..oO..pO..sO..
   1ac88:	95b94f75 98c94f76 98cd4f7b 8cf14f7c     uO..vO..{O..|O..
   1ac98:	8e674f7f 8aa44f83 98d24f86 98ca4f88     .Og..O...O...O..
   1aca8:	fa704f8a 97e14f8b 8e984f8d 98cb4f8f     .Op..O...O...O..
   1acb8:	98d04f91 fa6f4f92 fa724f94 98d34f96     .O...Oo..Or..O..
   1acc8:	98cc4f98 fa714f9a 8b9f4f9b 88cb4f9d     .O...Oq..O...O..
   1acd8:	8ba04fa0 89bf4fa1 9b444fab 96994fad     .O...O...OD..O..
   1ace8:	958e4fae 8cf24faf 904e4fb5 97b54fb6     .O...O...ON..O..
   1acf8:	95d64fbf 8c574fc2 91a34fc3 89e24fc4     .O...OW..O...O..
   1ad08:	fa614fc9 8f724fca fa734fcd 98d74fce     .Oa..Or..Os..O..
   1ad18:	98dc4fd0 98da4fd1 98d54fd4 91ad4fd7     .O...O...O...O..
   1ad28:	98d84fd8 98db4fda 98d94fdb 95db4fdd     .O...O...O...O..
   1ad38:	98d64fdf 904d4fe1 96934fe3 98dd4fe4     .O...OM..O...O..
   1ad48:	98de4fe5 8f434fee 98eb4fef 946f4ff3     .O...OC..O...Oo.
   1ad58:	95554ff5 98e64ff6 95ee4ff8 89b44ffa     .OU..O...O...O..
   1ad68:	98ea4ffe fa764fff 98e45005 98ed5006     .O...Ov..P...P..
   1ad78:	91715009 8cc2500b 947b500d e0c5500f     .Pq..P...P{..P..
   1ad88:	98ec5011 937c5012 98e15014 8cf45016     .P...P|..P...P..
   1ad98:	8cf35019 98df501a fa77501e 8ed8501f     .P...P...Pw..P..
   1ada8:	98e75021 fa755022 95ed5023 926c5024     !P.."Pu.#P..$Pl.
   1adb8:	98e35025 8c915026 98e05028 98e85029     %P..&P..(P..)P..
   1adc8:	98e2502a 97cf502b 98e9502c 9860502d     *P..+P..,P..-P`.
   1add8:	8be45036 8c905039 fa745040 fa7a5042     6P..9P..@Pt.BPz.
   1ade8:	98ee5043 fa785046 98ef5047 98f35048     CP..FPx.GP..HP..
   1adf8:	88cc5049 95ce504f 98f25050 98f15055     IP..OP..PP..UP..
   1ae08:	98f55056 98f4505a 92e2505c 8c925065     VP..ZP..\P..eP..
   1ae18:	98f6506c fa795070 8ec35072 91a45074     lP..pPy.rP..tP..
   1ae28:	92e35075 8bf45076 98f75078 8b55507d     uP..vP..xP..}PU.
   1ae38:	98f85080 98fa5085 9654508d 8c865091     .P...P...PT..P..
   1ae48:	fa7b5094 8e505098 94f55099 98f9509a     .P{..PP..P...P..
   1ae58:	8dc350ac 976250ad 98fc50b2 994250b3     .P...Pb..P...PB.
   1ae68:	98fb50b4 8dc250b5 8f9d50b7 8c5850be     .P...P...P...PX.
   1ae78:	994350c2 8bcd50c5 994050c9 994150ca     .PC..P...P@..PA.
   1ae88:	93ad50cd 919c50cf 8ba150d1 966c50d5     .P...P...P...Pl.
   1ae98:	994450d6 fa7d50d8 97bb50da 994550de     .PD..P}..P...PE.
   1aea8:	994850e3 994650e5 916d50e7 994750ed     .PH..PF..Pm..PG.
   1aeb8:	994950ee fa7c50f4 994b50f5 994a50f9     .PI..P|..PK..PJ.
   1aec8:	95c650fb 8b565100 994d5101 994e5102     .P...QV..QM..QN.
   1aed8:	89ad5104 994c5109 8ef25112 99515114     .Q...QL..Q...QQ.
   1aee8:	99505115 994f5116 98d45118 9952511a     .QP..QO..Q...QR.
   1aef8:	8f9e511f 99535121 9744512a 96d75132     .Q..!QS.*QD.2Q..
   1af08:	99555137 9954513a 9957513b 9956513c     7QU.:QT.;QW.<QV.
   1af18:	9958513f 99595140 88f25141 8cb35143     ?QX.@QY.AQ..CQ..
   1af28:	8c5a5144 8f5b5145 929b5146 8ba25147     DQZ.EQ[.FQ..GQ..
   1af38:	90e65148 8cf55149 fa7e514a 8d8e514b     HQ..IQ..JQ~.KQ..
   1af48:	995b514c 96c6514d 9365514e 8e995150     LQ[.MQ..NQe.PQ..
   1af58:	995a5152 995c5154 937d515a 8a95515c     RQZ.TQ\.ZQ}.\Q..
   1af68:	995d5162 fa805164 93fc5165 91535168     bQ].dQ..eQ..hQS.
   1af78:	995f5169 9960516a 94aa516b 8cf6516c     iQ_.jQ`.kQ..lQ..
   1af88:	985a516d 9961516e 8ba45171 95ba5175     mQZ.nQa.qQ..uQ..
   1af98:	91b45176 8bef5177 93545178 8c93517c     vQ..wQ..xQT.|Q..
   1afa8:	99625180 99635182 93e05185 897e5186     .Qb..Qc..Q...Q~.
   1afb8:	99665189 8dfb518a 9965518c 8dc4518d     .Qf..Q...Qe..Q..
   1afc8:	9967518f e3ec5190 99685191 96605192     .Qg..Q...Qh..Q`.
   1afd8:	99695193 996a5195 996b5196 8fe75197     .Qi..Qj..Qk..Q..
   1afe8:	8eca5199 fa81519d 8aa551a0 996e51a2     .Q...Q...Q...Qn.
   1aff8:	996c51a4 96bb51a5 996d51a6 957951a8     .Ql..Q...Qm..Qy.
   1b008:	996f51a9 997051aa 997151ab 937e51ac     .Qo..Qp..Qq..Q~.
   1b018:	997551b0 997351b1 997451b2 997251b3     .Qu..Qs..Qt..Qr.
   1b028:	8de151b4 997651b5 96e851b6 97e251b7     .Q...Qv..Q...Q..
   1b038:	997751bd fa8251be 90a651c4 997851c5     .Qw..Q...Q...Qx.
   1b048:	8f7951c6 997951c9 929c51cb 97bd51cc     .Qy..Qy..Q...Q..
   1b058:	938051cd 99c351d6 997a51db eaa351dc     .Q...Q...Qz..Q..
   1b068:	8bc351dd 997b51e0 967d51e1 8f8851e6     .Q...Q{..Q}..Q..
   1b078:	91fa51e7 997d51e9 93e251ea fa8351ec     .Q...Q}..Q...Q..
   1b088:	997e51ed 998051f0 8a4d51f1 998151f5     .Q~..Q...QM..Q..
   1b098:	8ba551f6 93ca51f8 899a51f9 8f6f51fa     .Q...Q...Q...Qo.
   1b0a8:	949f51fd 998251fe 93815200 906e5203     .Q...Q...R...Rn.
   1b0b8:	99835204 95aa5206 90d85207 8aa05208     .R...R...R...R..
   1b0c8:	8aa7520a 9984520b 9986520e 8c595211     .R...R...R...RY.
   1b0d8:	99855214 fa845215 97f15217 8f89521d     .R...R...R...R..
   1b0e8:	94bb5224 95ca5225 99875227 97985229     $R..%R..'R..)R..
   1b0f8:	9988522a 9989522e 939e5230 998a5233     *R...R..0R..3R..
   1b108:	90a75236 8dfc5237 8c945238 998b5239     6R..7R..8R..9R..
   1b118:	8e68523a 8d8f523b 92e45243 998d5244     :Rh.;R..CR..DR..
   1b128:	91a55247 8ded524a 998e524b 998f524c     GR..JR..KR..LR..
   1b138:	914f524d 998c524f 99915254 96555256     MRO.OR..TR..VRU.
   1b148:	8d84525b 9990525e 8c955263 8ddc5264     [R..^R..cR..dR..
   1b158:	948d5265 99945269 9992526a 959b526f     eR..iR..jR..oR..
   1b168:	8fe85270 999b5271 8a845272 99955273     pR..qR..rR..sR..
   1b178:	99935274 916e5275 9997527d 9996527f     tR..uRn.}R...R..
   1b188:	8a635283 8c805287 999c5288 97ab5289     .Rc..R...R...R..
   1b198:	9998528d 999d5291 999a5292 99995294     .R...R...R...R..
   1b1a8:	97cd529b fa85529c 8cf7529f 89c152a0     .R...R...R...R..
   1b1b8:	97f252a3 fa8652a6 8f9552a9 937752aa     .R...R...R...Rw.
   1b1c8:	8d8552ab 99a052ac 99a152ad fb7752af     .R...R...R...Rw.
   1b1d8:	97e352b1 984a52b4 99a352b5 8cf852b9     .R...RJ..R...R..
   1b1e8:	99a252bc 8a4e52be fa8752c0 99a452c1     .R...RN..R...R..
   1b1f8:	967552c3 92ba52c5 974552c7 95d752c9     .Ru..R...RE..R..
   1b208:	99a552cd e8d352d2 93ae52d5 99a652d7     .R...R...R...R..
   1b218:	8aa852d8 96b152d9 fa8852db 8f9f52dd     .R...R...R...R..
   1b228:	99a752de 95e552df 99ab52e0 90a852e2     .R...R...R...R..
   1b238:	99a852e3 8bce52e4 99a952e6 8aa952e7     .R...R...R...R..
   1b248:	8c4d52f2 99ac52f3 99ad52f5 99ae52f8     .RM..R...R...R..
   1b258:	99af52f9 8ed952fa 8cf952fe 96dc52ff     .R...R...R...R..
   1b268:	fa895300 96e65301 93f55302 95ef5305     .S...S...S...S..
   1b278:	99b05306 fa8a5307 99b15308 99b3530d     .S...S...S...S..
   1b288:	99b5530f 99b45310 99b65315 89bb5316     .S...S...S...S..
   1b298:	966b5317 8dfa5319 99b7531a 9178531d     .Sk..S...S...Sx.
   1b2a8:	8fa05320 8ba75321 99b85323 fa8b5324      S..!S..#S..$S..
   1b2b8:	94d9532a 99b9532f 99ba5331 99bb5333     *S../S..1S..3S..
   1b2c8:	99bc5338 95435339 8be6533a 88e3533b     8S..9SC.:S..;S..
   1b2d8:	93bd533f 99bd5340 8f5c5341 90e75343     ?S..@S..AS\.CS..
   1b2e8:	99bf5345 99be5346 8fa15347 8cdf5348     ES..FS..GS..HS..
   1b2f8:	99c15349 94bc534a 99c2534d 94da5351     IS..JS..MS..QS..
   1b308:	91b25352 91ec5353 8ba65354 93ec5357     RS..SS..TS..WS..
   1b318:	92505358 948e535a 966d535c 99c4535e     XSP.ZS..\Sm.^S..
   1b328:	90e85360 8c545366 99c55369 99c6536e     `S..fST.iS..nS..
   1b338:	894b536f 88f35370 8aeb5371 fa8c5372     oSK.pS..qS..rS..
   1b348:	91a65373 8b705374 97915375 99c95377     sS..tSp.uS..wS..
   1b358:	89b55378 99c8537b 8ba8537f 99ca5382     xS..{S...S...S..
   1b368:	96ef5384 fa8d5393 99cb5396 97d05398     .S...S...S...S..
   1b378:	8cfa539a 8cb4539f 99cc53a0 99ce53a5     .S...S...S...S..
   1b388:	99cd53a6 907e53a8 895853a9 897d53ad     .S...S~..SX..S}.
   1b398:	99cf53ae 99d053b0 fa8e53b2 8cb553b3     .S...S...S...S..
   1b3a8:	99d153b6 8b8e53bb 8e5153c2 99d253c3     .S...S...SQ..S..
   1b3b8:	969453c8 8db353c9 8b7953ca 974653cb     .S...S...Sy..SF.
   1b3c8:	916f53cc 94bd53cd 8efb53ce 8f6653d4     .So..S...S...Sf.
   1b3d8:	8ee653d6 8ef353d7 8f9653d9 94be53db     .S...S...S...S..
   1b3e8:	fa8f53dd 99d553df 896253e1 917053e2     .S...S...Sb..Sp.
   1b3f8:	8cfb53e3 8cc353e4 8be553e5 99d953e8     .S...S...S...S..
   1b408:	924053e9 91fc53ea 8ba953eb 8fa253ec     .S@..S...S...S..
   1b418:	99da53ed 99d853ee 89c253ef 91e453f0     .S...S...S...S..
   1b428:	8eb653f1 8e6a53f2 894553f3 8a9053f6     .S...Sj..SE..S..
   1b438:	8d8653f7 8e6953f8 99db53fa 99dc5401     .S...Si..S...T..
   1b448:	8b685403 8a655404 8d875408 8b675409     .Th..Te..T...Tg.
   1b458:	92dd540a 8944540b 93af540c 96bc540d     .T...TD..T...T..
   1b468:	8d40540e 9799540f 93665410 8cfc5411     .T@..T...Tf..T..
   1b478:	8c4e541b 99e5541d 8be1541f 96695420     .TN..T...T.. Ti.
   1b488:	94db5426 99e45429 8adc542b 99df542c     &T..)T..+T..,T..
   1b498:	99e0542d 99e2542e 99e35436 8b7a5438     -T...T..6T..8Tz.
   1b4a8:	90815439 95ab543b 99e1543c 99dd543d     9T..;T..<T..=T..
   1b4b8:	8ce1543e 99de5440 98435442 95f05446     >T..@T..BTC.FT..
   1b4c8:	92e65448 8ce05449 8d90544a 99e6544e     HT..IT..JT..NT..
   1b4d8:	93db5451 99ea545f 8efc5468 8ef4546a     QT.._T..hT..jT..
   1b4e8:	99ed5470 99eb5471 96a15473 99e85475     pT..qT..sT..uT..
   1b4f8:	99f15476 99ec5477 99ef547b 8cc4547c     vT..wT..{T..|T..
   1b508:	96bd547d 99f05480 99f25484 99f45486     }T...T...T...T..
   1b518:	fa92548a 8dee548b 9861548c 99e9548e     .T...T...Ta..T..
   1b528:	99e7548f 99f35490 99ee5492 fa91549c     .T...T...T...T..
   1b538:	99f654a2 9a4254a4 99f854a5 99fc54a8     .T...TB..T...T..
   1b548:	fa9354a9 9a4054ab 99f954ac 9a5d54af     .T...T@..T...T].
   1b558:	8de754b2 8a5054b3 99f754b8 9a4454bc     .T...TP..T...TD.
   1b568:	88f454bd 9a4354be 88a354c0 956954c1     .T...TC..T...Ti.
   1b578:	9a4154c2 99fa54c4 99f554c7 99fb54c8     .TA..T...T...T..
   1b588:	8dc654c9 9a4554d8 88f554e1 9a4e54e2     .T...TE..T...TN.
   1b598:	9a4654e5 9a4754e6 8fa354e8 968954e9     .TF..TG..T...T..
   1b5a8:	9a4c54ed 9a4b54ee 934e54f2 9a4d54fa     .TL..TK..TN..TM.
   1b5b8:	9a4a54fd fa9454ff 89535504 8db45506     .TJ..T...US..U..
   1b5c8:	904f5507 9a48550f 93825510 9a495514     .UO..UH..U...UI.
   1b5d8:	88a05516 9a53552e 9742552f 8fa55531     .U...US./UB.1U..
   1b5e8:	9a595533 9a585538 9a4f5539 91c1553e     3UY.8UX.9UO.>U..
   1b5f8:	9a505540 91ed5544 9a555545 8fa45546     @UP.DU..EUU.FU..
   1b608:	9a52554c 96e2554f 8c5b5553 9a565556     LUR.OU..SU[.VUV.
   1b618:	9a575557 9a54555c 9a5a555d 9a515563     WUW.\UT.]UZ.cUQ.
   1b628:	9a60557b 9a65557c 9a61557e 9a5c5580     {U`.|Ue.~Ua..U\.
   1b638:	9a665583 91505584 fa955586 9a685587     .Uf..UP..U...Uh.
   1b648:	8d415589 9a5e558a 929d558b 9a625598     .UA..U^..U...Ub.
   1b658:	9a5b5599 8aab559a 8aec559c 8a85559d     .U[..U...U...U..
   1b668:	9a63559e 9a5f559f 8c9655a7 9a6955a8     .Uc..U_..U...Ui.
   1b678:	9a6755a9 917255aa 8b6955ab 8baa55ac     .Ug..Ur..Ui..U..
   1b688:	9a6455ae 8bf255b0 896355b6 9a6d55c4     .Ud..U...Uc..Um.
   1b698:	9a6b55c5 9aa555c7 9a7055d4 9a6a55da     .Uk..U...Up..Uj.
   1b6a8:	9a6e55dc 9a6c55df 8e6b55e3 9a6f55e4     .Un..Ul..Uk..Uo.
   1b6b8:	9a7255f7 9a7755f9 9a7555fd 9a7455fe     .Ur..Uw..Uu..Ut.
   1b6c8:	92515606 89c35609 9a715614 9a735616     .VQ..V...Vq..Vs.
   1b6d8:	8fa65617 89525618 9a76561b 89dc5629     .V...VR..Vv.)V..
   1b6e8:	9a82562f 8ffa5631 9a7d5632 9a7b5634     /V..1V..2V}.4V{.
   1b6f8:	9a7c5636 9a7e5638 895c5642 9158564c     6V|.8V~.BV\.LVX.
   1b708:	9a78564e 9a795650 8a9a565b 9a815664     NVx.PVy.[V..dV..
   1b718:	8aed5668 9a84566a 9a80566b 9a83566c     hV..jV..kV..lV..
   1b728:	95ac5674 93d35678 94b6567a 9a865680     tV..xV..zV...V..
   1b738:	9a855686 8a645687 9a87568a 9a8a568f     .V...Vd..V...V..
   1b748:	9a895694 9a8856a0 945856a2 9a8b56a5     .V...V...VX..V..
   1b758:	9a8c56ae 9a8e56b4 9a8d56b6 9a9056bc     .V...V...V...V..
   1b768:	9a9356c0 9a9156c1 9a8f56c2 9a9256c3     .V...V...V...V..
   1b778:	9a9456c8 9a9556ce 9a9656d1 9a9756d3     .V...V...V...V..
   1b788:	9a9856d7 996456d8 8efa56da 8e6c56db     .V...Vd..V...Vl.
   1b798:	89f156de 88f656e0 926356e3 9a9956ee     .V...V...Vc..V..
   1b7a8:	8da256f0 88cd56f2 907d56f3 9a9a56f9     .V...V...V}..V..
   1b7b8:	8cc556fa 8d9156fd 9a9c56ff 9a9b5700     .V...V...V...W..
   1b7c8:	95de5703 9a9d5704 9a9f5708 9a9e5709     .W...W...W...W..
   1b7d8:	9aa0570b 9aa1570d 8c97570f 89805712     .W...W...W...W..
   1b7e8:	9aa25713 9aa45716 9aa35718 9aa6571c     .W...W...W...W..
   1b7f8:	9379571f 9aa75726 88b35727 8ddd5728     .Wy.&W..'W..(W..
   1b808:	8c5c572d 926e5730 9aa85737 9aa95738     -W\.0Wn.7W..8W..
   1b818:	9aab573b 9aac5740 8de25742 8bcf5747     ;W..@W..BW..GW..
   1b828:	9656574a 9aaa574e 9aad574f 8dbf5750     JWV.NW..OW..PW..
   1b838:	8d425751 fa965759 9ab15761 8da35764     QWB.YW..aW..dW..
   1b848:	fa975765 92525766 9aae5769 92d8576a     eW..fWR.iW..jW..
   1b858:	9ab2577f 90825782 9ab05788 9ab35789     .W...W...W...W..
   1b868:	8c5e578b 9ab45793 9ab557a0 8d4357a2     .W^..W...W...WC.
   1b878:	8a5f57a3 9ab757a4 9ab857aa fa9857ac     .W_..W...W...W..
   1b888:	9ab957b0 9ab657b3 9aaf57c0 9aba57c3     .W...W...W...W..
   1b898:	9abb57c6 fa9a57c7 fa9957c8 968457cb     .W...W...W...W..
   1b8a8:	8fe957ce 9abd57d2 9abe57d3 9abc57d4     .W...W...W...W..
   1b8b8:	9ac057d6 945757dc 88e657df 957557e0     .W...WW..W...Wu.
   1b8c8:	9ac157e3 8ffb57f4 8eb757f7 947c57f9     .W...W...W...W|.
   1b8d8:	8aee57fa 8de957fc 96785800 93b05802     .W...W...Xx..X..
   1b8e8:	8c985805 91cd5806 9abf580a 9ac2580b     .X...X...X...X..
   1b8f8:	91c25815 9ac35819 9ac4581d 9ac65821     .X...X...X..!X..
   1b908:	92e75824 8aac582a ea9f582f 89815830     $X..*X../X..0X..
   1b918:	95f15831 8fea5834 93675835 8de4583a     1X..4X..5Xg.:X..
   1b928:	9acc583d 95bb5840 97db5841 89f2584a     =X..@X..AX..JX..
   1b938:	9ac8584b 91595851 9acb5852 93835854     KX..QXY.RX..TX..
   1b948:	93685857 93845858 94b75859 92cb585a     WXh.XX..YX..ZX..
   1b958:	8dc7585e 9ac75862 89965869 9355586b     ^X..bX..iX..kXU.
   1b968:	9ac95870 9ac55872 906f5875 9acd5879     pX..rX..uXo.yX..
   1b978:	8f6d587e 8bab5883 9ace5885 95e65893     ~Xm..X...X...X..
   1b988:	919d5897 92c4589c fa9d589e 9ad0589f     .X...X...X...X..
   1b998:	966e58a8 9ad158ab 9ad658ae fa9e58b2     .Xn..X...X...X..
   1b9a8:	95ad58b3 9ad558b8 9acf58b9 9ad258ba     .X...X...X...X..
   1b9b8:	9ad458bb 8da458be 95c758c1 9ad758c5     .X...X...X...X..
   1b9c8:	926458c7 89f358ca 8feb58cc 9ad958d1     .Xd..X...X...X..
   1b9d8:	9ad858d3 8d8858d5 9ada58d7 9adc58d8     .X...X...X...X..
   1b9e8:	9adb58d9 9ade58dc 9ad358de 9ae058df     .X...X...X...X..
   1b9f8:	9adf58e4 9add58e5 8e6d58eb 907058ec     .X...X...Xm..Xp.
   1ba08:	917358ee 9ae158ef 90ba58f0 88eb58f1     .Xs..X...X...X..
   1ba18:	948458f2 92d958f7 9ae358f9 9ae258fa     .X...X...X...X..
   1ba28:	9ae458fb 9ae558fc 9ae658fd 9ae75902     .X...X...X...Y..
   1ba38:	95cf5909 9ae8590a fa9f590b 89c4590f     .Y...Y...Y...Y..
   1ba48:	9ae95910 975b5915 8a4f5916 99c75918     .Y...Y[..YO..Y..
   1ba58:	8f675919 91bd591a 9aea591b 96e9591c     .Yg..Y...Y...Y..
   1ba68:	96b25922 9aec5925 91e55927 93565929     "Y..%Y..'Y..)YV.
   1ba78:	91be592a 9576592b 9aed592c 9aee592d     *Y..+Yv.,Y..-Y..
   1ba88:	899b592e 8eb85931 9aef5932 88ce5937     .Y..1Y..2Y..7Y..
   1ba98:	9af05938 9af1593e 89825944 8aef5947     8Y..>Y..DY..GY..
   1baa8:	93de5948 95f25949 9af5594e 9174594f     HY..IY..NY..OYt.
   1bab8:	9af45950 8c5f5951 faa05953 967a5954     PY..QY_.SY..TYz.
   1bac8:	9af35955 93855957 9af75958 9af6595a     UY..WY..XY..ZY..
   1bad8:	faa1595b faa2595d 9af95960 9af85962     [Y..]Y..`Y..bY..
   1bae8:	faa35963 899c5965 9afa5967 8fa75968     cY..eY..gY..hY..
   1baf8:	9afc5969 9244596a 9afb596c 95b1596e     iY..jYD.lY..nY..
   1bb08:	8f975973 937a5974 9b405978 8d44597d     sY..tYz.xY@.}YD.
   1bb18:	9b415981 94405982 94dc5983 96cf5984     .YA..Y@..Y...Y..
   1bb28:	9444598a 9b4a598d 8b575993 97645996     .YD..YJ..YW..Yd.
   1bb38:	96ad5999 9baa599b 9b42599d 9b4559a3     .Y...Y...YB..YE.
   1bb48:	faa459a4 91c359a5 965759a8 936959ac     .Y...Y...YW..Yi.
   1bb58:	9b4659b2 968559b9 faa559ba 8dc859bb     .YF..Y...Y...Y..
   1bb68:	8fa859be 9b4759c6 8e6f59c9 8e6e59cb     .Y...YG..Yo..Yn.
   1bb78:	88b759d0 8cc659d1 90a959d3 88cf59d4     .Y...Y...Y...Y..
   1bb88:	9b4b59d9 9b4c59da 9b4959dc 895759e5     .YK..YL..YI..YW.
   1bb98:	8aad59e6 9b4859e8 96c359ea 955059eb     .Y...YH..Y...YP.
   1bba8:	88a659f6 88f759fb 8e7059ff 88d05a01     .Y...Y...Yp..Z..
   1bbb8:	88a15a03 9b515a09 9b4f5a11 96ba5a18     .Z...ZQ..ZO..Z..
   1bbc8:	9b525a1a 9b505a1c 9b4e5a1f 90505a20     .ZR..ZP..ZN. ZP.
   1bbd8:	9b4d5a25 95d85a29 8ce25a2f 9b565a35     %ZM.)Z../Z..5ZV.
   1bbe8:	9b575a36 8fa95a3c 9b535a40 984b5a41     6ZW.<Z..@ZS.AZK.
   1bbf8:	946b5a46 9b555a49 8da55a5a 9b585a62     FZk.IZU.ZZ..bZX.
   1bc08:	95775a66 9b595a6a 9b545a6c 96b95a7f     fZw.jZY.lZT..Z..
   1bc18:	947d5a92 9b5a5a9a 95515a9b 9b5b5abc     .Z}..ZZ..ZQ..Z[.
   1bc28:	9b5f5abd 9b5c5abe 89c55ac1 9b5e5ac2     .Z_..Z\..Z...Z^.
   1bc38:	8eb95ac9 9b5d5acb 8c995acc 9b6b5ad0     .Z...Z]..Z...Zk.
   1bc48:	9b645ad6 9b615ad7 92845ae1 9b605ae3     .Zd..Za..Z...Z`.
   1bc58:	9b625ae6 9b635ae9 9b655afa 9b665afb     .Zb..Zc..Ze..Zf.
   1bc68:	8af05b09 9b685b0b 9b675b0c 9b695b16     .[...[h..[g..[i.
   1bc78:	8fec5b22 9b6c5b2a 92da5b2c 89645b30     "[..*[l.,[..0[d.
   1bc88:	9b6a5b32 9b6d5b36 9b6e5b3e 9b715b40     2[j.6[m.>[n.@[q.
   1bc98:	9b6f5b43 9b705b45 8e715b50 9b725b51     C[o.E[p.P[q.Q[r.
   1bca8:	8d455b54 9b735b55 faa65b56 8e9a5b57     T[E.U[s.V[..W[..
   1bcb8:	91b65b58 9b745b5a 9b755b5b 8e795b5c     X[..Z[t.[[u.\[y.
   1bcc8:	8d465b5d 96d05b5f 8b475b63 8cc75b64     ][F._[..c[G.d[..
   1bcd8:	9b765b65 8a775b66 9b775b69 91b75b6b     e[v.f[w.i[w.k[..
   1bce8:	9b785b70 9ba15b71 9b795b73 9b7a5b75     p[x.q[..s[y.u[z.
   1bcf8:	9b7b5b78 9b7d5b7a 9b7e5b80 9b805b83     x[{.z[}..[~..[..
   1bd08:	91ee5b85 89465b87 8ee75b88 88c05b89     .[...[F..[...[..
   1bd18:	91765b8b 8aae5b8c 8eb35b8d 8d475b8f     .[v..[...[...[G.
   1bd28:	93865b95 8f405b97 8aaf5b98 92885b99     .[...[@..[...[..
   1bd38:	92e85b9a 88b65b9b 8b585b9c 95f35b9d     .[...[...[X..[..
   1bd48:	8ec05b9f 8b715ba2 90e95ba3 8eba5ba4     .[...[q..[...[..
   1bd58:	97475ba5 9b815ba6 8b7b5bae 8dc95bb0     .[G..[...[{..[..
   1bd68:	8a515bb3 89835bb4 8faa5bb5 89c65bb6     .[Q..[...[...[..
   1bd78:	9b825bb8 97655bb9 8f685bbf faa75bc0     .[...[e..[h..[..
   1bd88:	8ee25bc2 9b835bc3 8af15bc4 93d05bc5     .[...[...[...[..
   1bd98:	96a75bc6 9b845bc7 9b855bc9 95785bcc     .[...[...[...[x.
   1bda8:	9b875bd0 8aa65bd2 8bf55bd3 9b865bd4     .[...[...[...[..
   1bdb8:	faa95bd8 8ab05bdb 90515bdd 9b8b5bde     .[...[...[Q..[..
   1bdc8:	8e405bdf 89c75be1 9b8a5be2 9b885be4     .[@..[...[...[..
   1bdd8:	9b8c5be5 9b895be6 944a5be7 9ecb5be8     .[...[...[J..[..
   1bde8:	90525be9 9b8d5beb faaa5bec 97be5bee     .[R..[...[...[..
   1bdf8:	9b8e5bf0 9b905bf3 929e5bf5 9b8f5bf6     .[...[...[...[..
   1be08:	90a15bf8 8e9b5bfa 91ce5bfe 8ef55bff     .[...[...[...[..
   1be18:	95955c01 90ea5c02 8ecb5c04 9b915c05     .\...\...\...\..
   1be28:	8fab5c06 9b925c07 9b935c08 88d15c09     .\...\...\...\..
   1be38:	91b85c0a 90715c0b 9b945c0d 93b15c0e     .\...\q..\...\..
   1be48:	8fac5c0f 8fad5c11 9b955c13 90eb5c16     .\...\...\...\..
   1be58:	8fae5c1a faab5c1e 9b965c20 9b975c22     .\...\.. \.."\..
   1be68:	96de5c24 9b985c28 8bc45c2d 8f415c31     $\..(\..-\..1\A.
   1be78:	9b995c38 9b9a5c39 8eda5c3a 904b5c3b     8\..9\..:\..;\K.
   1be88:	93f25c3c 90735c3d 94f65c3e 94415c3f     <\..=\s.>\..?\A.
   1be98:	8bc75c40 9b9b5c41 8b8f5c45 9b9c5c46     @\..A\..E\..F\..
   1bea8:	8bfc5c48 93cd5c4a 89ae5c4b 8e725c4d     H\..J\..K\..M\r.
   1beb8:	9b9d5c4e 9ba05c4f 9b9f5c50 8bfb5c51     N\..O\..P\..Q\..
   1bec8:	9b9e5c53 93575c55 91ae5c5e 936a5c60     S\..U\W.^\..`\j.
   1bed8:	8ec65c61 91775c64 979a5c65 9ba25c6c     a\..d\w.e\..l\..
   1bee8:	9ba35c6e 93d45c6f 8e525c71 9ba55c76     n\..o\..q\R.v\..
   1bef8:	9ba65c79 9ba75c8c 8af25c90 9ba85c91     y\...\...\...\..
   1bf08:	9ba95c94 89aa5ca1 faac5ca6 915a5ca8     .\...\...\...\Z.
   1bf18:	8ae25ca9 9bab5cab 96a65cac 91d05cb1     .\...\...\...\..
   1bf28:	8a785cb3 9bad5cb6 9baf5cb7 8add5cb8     .\x..\...\...\..
   1bf38:	faad5cba 9bac5cbb 9bae5cbc 9bb15cbe     .\...\...\...\..
   1bf48:	9bb05cc5 9bb25cc7 9bb35cd9 93bb5ce0     .\...\...\...\..
   1bf58:	8bac5ce1 89e35ce8 9bb45ce9 9bb95cea     .\...\...\...\..
   1bf68:	9bb75ced 95f55cef 95f45cf0 faae5cf5     .\...\...\...\..
   1bf78:	93875cf6 9bb65cfa 8f735cfb 9bb55cfd     .\...\...\s..\..
   1bf88:	90925d07 9bba5d0b 8de85d0e 9bc05d11     .]...]...]...]..
   1bf98:	9bc15d14 9bbb5d15 8a525d16 9bbc5d17     .]...]...]R..]..
   1bfa8:	9bc55d18 9bc45d19 9bc35d1a 9bbf5d1b     .]...]...]...]..
   1bfb8:	9bbe5d1f 9bc25d22 faaf5d27 95f65d29     .].."]..']..)]..
   1bfc8:	fab25d42 9bc95d4b 9bc65d4c 9bc85d4e     B]..K]..L]..N]..
   1bfd8:	97925d50 9bc75d52 fab05d53 9bbd5d5c     P]..R]..S]..\]..
   1bfe8:	90935d69 9bca5d6c fab35d6d 8db55d6f     i]..l]..m]..o]..
   1bff8:	9bcb5d73 9bcc5d76 9bcf5d82 9bce5d84     s]..v]...]...]..
   1c008:	9bcd5d87 93885d8b 9bb85d8c 9bd55d90     .]...]...]...]..
   1c018:	9bd15d9d 9bd05da2 9bd25dac 9bd35dae     .]...]...]...]..
   1c028:	9bd65db7 fab45db8 fab55db9 97e45dba     .]...]...]...]..
   1c038:	9bd75dbc 9bd45dbd 9bd85dc9 8ade5dcc     .]...]...]...]..
   1c048:	9bd95dcd fab65dd0 9bdb5dd2 9bda5dd3     .]...]...]...]..
   1c058:	9bdc5dd6 9bdd5ddb 90ec5ddd 8f425dde     .]...]...]...]B.
   1c068:	8f845de1 91835de3 8d485de5 8db65de6     .]...]...]H..]..
   1c078:	8d495de7 8b905de8 9bde5deb 8db75dee     .]I..]...]...]..
   1c088:	8cc85df1 9bdf5df2 96a45df3 94625df4     .]...]...]...]b.
   1c098:	9be05df5 8d4a5df7 8aaa5dfb 92465dfd     .]...]J..]...]F.
   1c0a8:	8bd05dfe 8e735e02 957a5e03 94bf5e06     .]...^s..^z..^..
   1c0b8:	9be15e0b 8af35e0c 9be45e11 929f5e16     .^...^...^...^..
   1c0c8:	9be35e19 9be25e1a 9be55e1b 92e95e1d     .^...^...^...^..
   1c0d8:	90835e25 8e745e2b 90c85e2d 91d15e2f     %^..+^t.-^../^..
   1c0e8:	8b415e30 92a05e33 9be65e36 9be75e37     0^A.3^..6^..7^..
   1c0f8:	8fed5e38 96585e3d 9bea5e40 9be95e43     8^..=^X.@^..C^..
   1c108:	9be85e44 959d5e45 9bf15e47 96795e4c     D^..E^..G^..L^y.
   1c118:	9beb5e4e 9bed5e54 968b5e55 9bec5e57     N^..T^..U^..W^..
   1c128:	9bee5e5f 94a65e61 9bef5e62 95bc5e63     _^..a^..b^..c^..
   1c138:	9bf05e64 8ab15e72 95bd5e73 944e5e74     d^..r^..s^..t^N.
   1c148:	9bf25e75 9bf35e76 8d4b5e78 8ab25e79     u^..v^..x^K.y^..
   1c158:	9bf45e7a 8cb65e7b 97635e7c 97485e7d     z^..{^..|^c.}^H.
   1c168:	8af45e7e 9bf65e7f 92a15e81 8d4c5e83     ~^...^...^...^L.
   1c178:	8faf5e84 94dd5e87 8fb05e8a 8f985e8f     .^...^...^...^..
   1c188:	92ea5e95 95f75e96 93585e97 8d4d5e9a     .^...^...^X..^M.
   1c198:	957b5e9c 9bf75ea0 93785ea6 8dc05ea7     .^{..^...^x..^..
   1c1a8:	8cc95eab 92eb5ead 88c15eb5 8f8e5eb6     .^...^...^...^..
   1c1b8:	8d4e5eb7 97665eb8 9bf85ec1 9bf95ec2     .^N..^f..^...^..
   1c1c8:	94705ec3 9bfa5ec8 97f55ec9 984c5eca     .^p..^...^...^L.
   1c1d8:	9bfc5ecf 9bfb5ed0 8a665ed3 9c405ed6     .^...^...^f..^@.
   1c1e8:	9c435eda 9c445edb 9c425edd 955f5edf     .^C..^D..^B..^_.
   1c1f8:	8fb15ee0 9c465ee1 9c455ee2 9c415ee3     .^...^F..^E..^A.
   1c208:	9c475ee8 9c485ee9 9c495eec 9c4c5ef0     .^G..^H..^I..^L.
   1c218:	9c4a5ef1 9c4b5ef3 9c4d5ef4 89845ef6     .^J..^K..^M..^..
   1c228:	92ec5ef7 9c4e5ef8 8c9a5efa 89f45efb     .^...^N..^...^..
   1c238:	94555efc 9c4f5efe 93f95eff 95d95f01     .^U..^O..^..._..
   1c248:	9c505f03 984d5f04 9c515f09 95be5f0a     ._P.._M.._Q.._..
   1c258:	9c545f0b 989f5f0c 98af5f0d 8eae5f0f     ._T.._..._..._..
   1c268:	93f35f10 9c555f11 8b7c5f13 92a25f14     ._..._U.._|.._..
   1c278:	88f85f15 9c565f16 95a45f17 8d4f5f18     ._..._V.._..._O.
   1c288:	926f5f1b 92ed5f1f fab75f21 96ed5f25     ._o.._..!_..%_..
   1c298:	8cb75f26 8cca5f27 9c575f29 9c585f2d     &_..'_..)_W.-_X.
   1c2a8:	9c5e5f2f 8ee35f31 fab85f34 92a35f35     /_^.1_..4_..5_..
   1c2b8:	8bad5f37 9c595f38 954a5f3c 92655f3e     7_..8_Y.<_J.>_e.
   1c2c8:	9c5a5f41 fa675f45 9c5b5f48 8bae5f4a     A_Z.E_g.H_[.J_..
   1c2d8:	9c5c5f4c 9c5d5f4e 9c5f5f51 93965f53     L_\.N_].Q__.S_..
   1c2e8:	9c605f56 9c615f57 9c625f59 9c535f5c     V_`.W_a.Y_b.\_S.
   1c2f8:	9c525f5d 9c635f61 8c605f62 95465f66     ]_R.a_c.b_`.f_F.
   1c308:	fab95f67 8dca5f69 95565f6a 92a45f6b     g_..i_..j_V.k_..
   1c318:	956a5f6c 9c645f6d 8fb25f70 89655f71     l_j.m_d.p_..q_e.
   1c328:	9c655f73 9c665f77 96f05f79 94de5f7c     s_e.w_f.y_..|_..
   1c338:	9c695f7f 899d5f80 90aa5f81 9c685f82     ._i.._..._..._h.
   1c348:	9c675f83 8c615f84 91d25f85 9c6d5f87     ._g.._a.._..._m.
   1c358:	9c6b5f88 9c6a5f8a 97a55f8b 8ce35f8c     ._k.._j.._..._..
   1c368:	8f995f90 9c6c5f91 936b5f92 8f5d5f93     ._..._l.._k.._].
   1c378:	93be5f97 9c705f98 9c6f5f99 9c6e5f9e     ._..._p.._o.._n.
   1c388:	9c715fa0 8ce45fa1 9c725fa8 959c5fa9     ._q.._..._r.._..
   1c398:	8f7a5faa 9c735fad 94f75fae 93bf5fb3     ._z.._s.._..._..
   1c3a8:	92a55fb4 faba5fb7 934f5fb9 9c745fbc     ._..._..._O.._t.
   1c3b8:	8b4a5fbd 90535fc3 954b5fc5 8af55fcc     ._J.._S.._K.._..
   1c3c8:	94455fcd 9c755fd6 8e755fd7 96595fd8     ._E.._u.._u.._Y.
   1c3d8:	965a5fd9 899e5fdc 9c7a5fdd fabb5fde     ._Z.._..._z.._..
   1c3e8:	92895fe0 9c775fe4 89f55feb 9cab5ff0     ._..._w.._..._..
   1c3f8:	9c795ff1 944f5ff5 9c785ff8 9c765ffb     ._y.._O.._x.._v.
   1c408:	8d9a5ffd 9c7c5fff 9c83600e 9c89600f     ._..._|..`...`..
   1c418:	9c816010 937b6012 9c866015 957c6016     .`...`{..`...`|.
   1c428:	9c806019 9c85601b 97e5601c 8e76601d     .`...`...`...`v.
   1c438:	91d36020 9c7d6021 8b7d6025 9c886026      `..!`}.%`}.&`..
   1c448:	90ab6027 89856028 9c826029 89f6602a     '`..(`..)`..*`..
   1c458:	9c87602b 8baf602f 9c846031 9c8a603a     +`../`..1`..:`..
   1c468:	9c8c6041 9c966042 9c946043 9c916046     A`..B`..C`..F`..
   1c478:	9c90604a 97f6604b 9c92604d 8bb06050     J`..K`..M`..P`..
   1c488:	8d506052 8f9a6055 9c996059 9c8b605a     R`P.U`..Y`..Z`..
   1c498:	fabc605d 9c8f605f 9c7e6060 89f86062     ]`.._`..``~.b`..
   1c4a8:	9c936063 9c956064 92706065 8da66068     c`..d`..e`p.h`..
   1c4b8:	89b66069 9c8d606a 9c98606b 9c97606c     i`..j`..k`..l`..
   1c4c8:	8bb1606d 91a7606f 8a866070 8c626075     m`..o`..p`..u`b.
   1c4d8:	9c8e6077 9c9a6081 9c9d6083 9c9f6084     w`...`...`...`..
   1c4e8:	fabd6085 8ebb6089 fabe608a 9ca5608b     .`...`...`...`..
   1c4f8:	92ee608c 9c9b608d 9ca36092 89f76094     .`...`...`...`..
   1c508:	9ca16096 9ca26097 9c9e609a 9ca0609b     .`...`...`...`..
   1c518:	8ce5609f 974960a0 8ab360a3 897860a6     .`...`I..`...`x.
   1c528:	9ca460a7 945960a9 88ab60aa 94df60b2     .`...`Y..`...`..
   1c538:	9c7b60b3 9caa60b4 9cae60b5 96e360b6     .`{..`...`...`..
   1c548:	9ca760b8 938960bc 9cac60bd 8fee60c5     .`...`...`...`..
   1c558:	9cad60c6 93d560c7 986660d1 9ca960d3     .`...`...`f..`..
   1c568:	fac060d5 9caf60d8 8d9b60da 90c960dc     .`...`...`...`..
   1c578:	fabf60de 88d260df 9ca860e0 9ca660e1     .`...`...`...`..
   1c588:	917960e3 9c9c60e7 8e5360e8 91c460f0     .`y..`...`S..`..
   1c598:	9cbb60f1 fac260f2 917a60f3 9cb660f4     .`...`...`z..`..
   1c5a8:	9cb360f6 9cb460f7 8ee460f9 9cb760fa     .`...`...`...`..
   1c5b8:	9cba60fb 9cb56100 8f446101 9cb86103     .`...a...aD..a..
   1c5c8:	9cb26106 96fa6108 96f96109 9cbc610d     .a...a...a...a..
   1c5d8:	9cbd610e 88d3610f fac36111 9cb16115     .a...a...a...a..
   1c5e8:	8bf0611a 88a4611b 8ab4611f fac16120     .a...a...a.. a..
   1c5f8:	9cb96121 9cc16127 9cc06128 9cc5612c     !a..'a..(a..,a..
   1c608:	fac56130 9cc66134 fac46137 9cc4613c     0a..4a..7a..<a..
   1c618:	9cc7613d 9cbf613e 9cc3613f 9cc86142     =a..>a..?a..Ba..
   1c628:	9cc96144 9cbe6147 8e9c6148 9cc2614a     Da..Ga..Ha..Ja..
   1c638:	91d4614b 8d51614c 9cb0614d 9054614e     Ka..LaQ.Ma..NaT.
   1c648:	9cd66153 95e76155 9ccc6158 9ccd6159     Sa..Ua..Xa..Ya..
   1c658:	9cce615a 9cd5615d 9cd4615f 969d6162     Za..]a.._a..ba..
   1c668:	8ab56163 9cd26165 8c646167 8a536168     ca..ea..gad.haS.
   1c678:	9ccf616b 97b6616e 9cd1616f 88d46170     ka..na..oa..pa..
   1c688:	9cd36171 9cca6173 9cd06174 9cd76175     qa..sa..ta..ua..
   1c698:	8c636176 9ccb6177 977c617e 974a6182     vac.wa..~a|..aJ.
   1c6a8:	9cda6187 9cde618a 919e618e 97f76190     .a...a...a...a..
   1c6b8:	9cdf6191 9cdc6194 9cd96196 fac66198     .a...a...a...a..
   1c6c8:	9cd86199 9cdd619a 95ae61a4 93b261a7     .a...a...a...a..
   1c6d8:	8c6561a9 9ce061ab 9cdb61ac 9ce161ae     .ae..a...a...a..
   1c6e8:	8c9b61b2 89af61b6 9ce961ba 8ab661be     .a...a...a...a..
   1c6f8:	9ce761c3 9ce861c6 8da761c7 9ce661c8     .a...a...a...a..
   1c708:	9ce461c9 9ce361ca 9cea61cb 9ce261cc     .a...a...a...a..
   1c718:	9cec61cd 89f961d0 9cee61e3 9ced61e6     .a...a...a...a..
   1c728:	92a661f2 9cf161f4 9cef61f6 9ce561f7     .a...a...a...a..
   1c738:	8c9c61f8 9cf061fa 9cf461fc 9cf361fd     .a...a...a...a..
   1c748:	9cf561fe 9cf261ff 9cf66200 9cf76208     .a...a...b...b..
   1c758:	9cf86209 95e8620a 9cfa620c 9cf9620d     .b...b...b...b..
   1c768:	8f5e620e 90ac6210 89e46211 89fa6212     .b^..b...b...b..
   1c778:	fac76213 9cfb6214 88bd6216 90ca621a     .b...b...b...b..
   1c788:	9cfc621b e6c1621d 9d40621e 8c81621f     .b...b...b@..b..
   1c798:	9d416221 90ed6226 9d42622a 9d43622e     !bA.&b..*bB..bC.
   1c7a8:	8b59622f 9d446230 9d456232 9d466233     /bY.0bD.2bE.3bF.
   1c7b8:	91d56234 8ccb6238 96df623b 965b623f     4b..8b..;b..?b[.
   1c7c8:	8f8a6240 9d476241 90ee6247 e7bb6248     @b..AbG.Gb..Hb..
   1c7d8:	94e06249 8ee8624b 8dcb624d 9d48624e     Ib..Kb..Mb..NbH.
   1c7e8:	91c56253 95a56255 91ef6258 9d4b625b     Sb..Ub..Xb..[bK.
   1c7f8:	9d49625e 9d4c6260 9d4a6263 9d4d6268     ^bI.`bL.cbJ.hbM.
   1c808:	95af626e 88b56271 957d6276 94e16279     nb..qb..vb}.yb..
   1c818:	9d4e627c 9d51627e 8fb3627f 8b5a6280     |bN.~bQ..b...bZ.
   1c828:	9d4f6282 9d566283 8fb46284 9d506289     .bO..bV..b...bP.
   1c838:	9463628a 977d6291 9d526292 9d536293     .bc..b}..bR..bS.
   1c848:	9d576294 938a6295 9d546296 8d526297     .bW..b...bT..bR.
   1c858:	90dc6298 9d65629b 94b2629c 91f0629e     .b...be..b...b..
   1c868:	fac862a6 94e262ab 9dab62ac 95f862b1     .b...b...b...b..
   1c878:	92ef62b5 969562b9 9d5a62bb 899f62bc     .b...b...bZ..b..
   1c888:	928a62bd 9d6362c2 925362c5 9d5d62c6     .b...bc..bS..b].
   1c898:	9d6462c7 9d5f62c8 9d6662c9 9d6262ca     .bd..b_..bf..bb.
   1c8a8:	9d6162cc 948f62cd 9d5b62cf 89fb62d0     .ba..b...b[..b..
   1c8b8:	9d5962d1 8b9162d2 91f162d3 9d5562d4     .bY..b...b...bU.
   1c8c8:	9d5862d7 8d5362d8 90d962d9 8fb562db     .bX..bS..b...b..
   1c8d8:	9d6062dc 947162dd 8b9262e0 8a6762e1     .b`..bq..b...bg.
   1c8e8:	8a8762ec 904062ed 9d6862ee 9d6d62ef     .b...b@..bh..bm.
   1c8f8:	9d6962f1 8c9d62f3 9d6e62f5 8e4162f6     .bi..b...bn..bA.
   1c908:	8d8962f7 8f4562fe 9d5c62ff 8e9d6301     .b...bE..b\..c..
   1c918:	9d6b6302 8e776307 9d6c6308 88c26309     .ck..cw..cl..c..
   1c928:	9d67630c 92a76311 8b936319 8bb2631f     .cg..c...c...c..
   1c938:	9d6a6327 88a56328 8dc1632b 9055632f     'cj.(c..+c../cU.
   1c948:	92f0633a 94d2633d 9d70633e 917d633f     :c..=c..>cp.?c}.
   1c958:	91a86349 8e4a634c 9d71634d 9d73634f     Ic..LcJ.Mcq.Ocs.
   1c968:	9d6f6350 95df6355 92bb6357 917b635c     Pco.Uc..Wc..\c{.
   1c978:	95f96367 8ecc6368 9d806369 9d7e636b     gc..hc..ic..kc~.
   1c988:	9098636e 8c9e6372 9d786376 8fb76377     nc..rc..vcx.wc..
   1c998:	93e6637a 9450637b 9d766380 917c6383     zc..{cP..cv..c|.
   1c9a8:	8ef66388 9d7b6389 8fb6638c 9d75638e     .c...c{..c...cu.
   1c9b8:	9d7a638f 94726392 9d746396 8c406398     .cz..cr..ct..c@.
   1c9c8:	8a7c639b 9d7c639f 97a963a0 8dcc63a1     .c|..c|..c...c..
   1c9d8:	925463a2 9d7963a3 90da63a5 8d5463a7     .cT..cy..c...cT.
   1c9e8:	908463a8 898663a9 915b63aa 9d7763ab     .c...c...c[..cw.
   1c9f8:	8b6463ac 8c6663b2 92cd63b4 9d7d63b5     .cd..cf..c...c}.
   1ca08:	917e63bb 9d8163be 9d8363c0 91b563c3     .c~..c...c...c..
   1ca18:	9d8963c4 9d8463c6 9d8663c9 956063cf     .c...c...c...c`.
   1ca28:	92f163d0 9d8763d2 974b63d6 976763da     .c...c...cK..cg.
   1ca38:	8ab763db 88ac63e1 9d8563e3 9d8263e9     .c...c...c...c..
   1ca48:	8af663ee 898763f4 fac963f5 9d8863f6     .c...c...c...c..
   1ca58:	976863fa 9d8c6406 91b9640d 9d93640f     .ch..d...d...d..
   1ca68:	9d8d6413 9d8a6416 9d916417 9d72641c     .d...d...d...dr.
   1ca78:	9d8e6426 9d926428 94c0642c 938b642d     &d..(d..,d..-d..
   1ca88:	9d8b6434 9d8f6436 8c67643a 8def643e     4d..6d..:dg.>d..
   1ca98:	90db6442 9d97644e 93456458 faca6460     Bd..Nd..XdE.`d..
   1caa8:	9d946467 96806469 9d95646f 9d966476     gd..id..od..vd..
   1cab8:	96cc6478 90a0647a 8c826483 9d9d6488     xd..zd...d...d..
   1cac8:	8e546492 9d9a6493 9d996495 9451649a     .dT..d...d...dQ.
   1cad8:	facb649d 93b3649e 935064a4 9d9b64a5     .d...d...dP..d..
   1cae8:	9d9c64a9 958f64ab 946464ad 8e4264ae     .d...d...dd..dB.
   1caf8:	90ef64b0 966f64b2 8a6864b9 9da364bb     .d...do..dh..d..
   1cb08:	9d9e64bc 976964c1 9da564c2 9da164c5     .d...di..d...d..
   1cb18:	9da264c7 918064cd facc64ce 9da064d2     .d...d...d...d..
   1cb28:	9d5e64d4 9da464d8 9d9f64da 9da964e0     .d^..d...d...d..
   1cb38:	9daa64e1 934664e2 9dac64e3 8e4364e6     .d...dF..d...dC.
   1cb48:	9da764e7 8b5b64ec 9dad64ef 9da664f1     .d...d[..d...d..
   1cb58:	9db164f2 9db064f4 9daf64f6 9db264fa     .d...d...d...d..
   1cb68:	9db464fd 8fef64fe 9db36500 9db76505     .d...d...e...e..
   1cb78:	9db56518 9db6651c 9d90651d 9db96523     .e...e...e..#e..
   1cb88:	9db86524 9d98652a 9dba652b 9dae652c     $e..*e..+e..,e..
   1cb98:	8e78652f 9dbb6534 9dbc6535 9dbe6536     /ex.4e..5e..6e..
   1cba8:	9dbd6537 9dbf6538 89fc6539 8d55653b     7e..8e..9e..;eU.
   1cbb8:	95fa653e 90ad653f 8ccc6545 9dc16548     >e..?e..Ee..He..
   1cbc8:	9dc4654d facd654e 9571654f 8b7e6551     Me..Ne..Oeq.Qe~.
   1cbd8:	9dc36555 9dc26556 94736557 9dc56558     Ue..Ve..Wes.Xe..
   1cbe8:	8bb36559 9dc7655d 9dc6655e 8ab86562     Ye..]e..^e..be..
   1cbf8:	8e556563 93d66566 8c68656c 90946570     ceU.fe..leh.pe..
   1cc08:	9dc86572 90ae6574 93476575 957e6577     re..te..ueG.we~.
   1cc18:	9dc96578 9dca6582 9dcb6583 95b66587     xe...e...e...e..
   1cc28:	9b7c6588 90c46589 956b658c 8dd6658e     .e|..e...ek..e..
   1cc38:	94e36590 94c16591 936c6597 97bf6599     .e...e...el..e..
   1cc48:	9dcd659b 8ece659c 9dce659f 88b465a1     .e...e...e...e..
   1cc58:	8bd265a4 90cb65a5 958065a7 9dcf65ab     .e...e...e...e..
   1cc68:	8e6165ac 926665ad 8e7a65af 905665b0     .ea..ef..ez..eV.
   1cc78:	9dd065b7 95fb65b9 899765bc 8e7b65bd     .e...e...e...e{.
   1cc88:	9dd365c1 9dd165c3 9dd465c4 97b765c5     .e...e...e...e..
   1cc98:	9dd265c6 90f965cb 9dd565cc 91b065cf     .e...e...e...e..
   1cca8:	9dd665d2 8af865d7 9dd865d9 9dd765db     .e...e...e...e..
   1ccb8:	9dd965e0 9dda65e1 8af965e2 93fa65e5     .e...e...e...e..
   1ccc8:	925565e6 8b8c65e7 8e7c65e8 918165e9     .eU..e...e|..e..
   1ccd8:	8f7b65ec 88ae65ed 9ddb65f1 89a065fa     .e{..e...e...e..
   1cce8:	9ddf65fb face6600 8d566602 9dde6603     .e...f...fV..f..
   1ccf8:	8da96606 8fb86607 fad16609 9ddd660a     .f...f...f...f..
   1cd08:	8fb9660c 96be660e 8da8660f 88d56613     .f...f...f...f..
   1cd18:	90cc6614 facf6615 9de4661c fad3661e     .f...f...f...f..
   1cd28:	90af661f 89666620 fad46624 8f746625     .f.. ff.$f..%ft.
   1cd38:	96866627 8df06628 8fba662d fad2662e     'f..(f..-f...f..
   1cd48:	90a5662f fa636631 9de36634 9de16635     /f..1fc.4f..5f..
   1cd58:	9de26636 fad0663b 928b663c 9e45663f     6f..;f..<f..?fE.
   1cd68:	9de86641 8e9e6642 8d576643 9de66644     Af..Bf..CfW.Df..
   1cd78:	9de76649 9057664b 9de5664f 8e4e6652     If..KfW.Of..RfN.
   1cd88:	fad66657 fad76659 9dea665d 9de9665e     Wf..Yf..]f..^f..
   1cd98:	9dee665f 9def6662 9deb6664 fad56665     _f..bf..df..ef..
   1cda8:	8a416666 9dec6667 9ded6668 94d36669     ffA.gf..hf..if..
   1cdb8:	9581666e 8c69666f 9df06670 fad96673     nf..ofi.pf..sf..
   1cdc8:	90b06674 8fbb6676 9271667a 8bc56681     tf..vf..zfq..f..
   1cdd8:	9df16683 9df56684 89c96687 9df26688     .f...f...f...f..
   1cde8:	9df46689 9df3668e 8f8b6691 92676696     .f...f...f...fg.
   1cdf8:	88c36697 9df66698 fada6699 9df7669d     .f...f...f...f..
   1ce08:	fadb66a0 92a866a2 97ef66a6 8e6266ab     .f...f...f...fb.
   1ce18:	95e966ae fadc66b2 965c66b4 9e4166b8     .f...f...f\..fA.
   1ce28:	9df966b9 9dfc66bc 9dfb66be fadd66bf     .f...f...f...f..
   1ce38:	9df866c1 9e4066c4 93dc66c7 9dfa66c9     .f...f@..f...f..
   1ce48:	9e4266d6 8f8c66d9 9e4366da 976a66dc     .fB..f...fC..fj.
   1ce58:	949866dd 9e4466e0 9e4666e6 9e4766e9     .f...fD..fF..fG.
   1ce68:	9e4866f0 8bc866f2 896766f3 8d5866f4     .fH..f...fg..fX.
   1ce78:	9e4966f5 9e4a66f7 8f9166f8 918266f9     .fI..fJ..f...f..
   1ce88:	fade66fa fa6666fb 99d666fc 915d66fd     .f...ff..f...f].
   1ce98:	915c66fe 91d666ff 8dc56700 98f06703     .f\..f...g...g..
   1cea8:	8c8e6708 974c6709 95fc670b 959e670d     .g...gL..g...g..
   1ceb8:	fadf670e 9e4b670f 8df16714 92bd6715     .g...gK..g...g..
   1cec8:	9e4c6716 984e6717 965d671b 92a9671d     .gL..gN..g]..g..
   1ced8:	9e4d671e 8afa671f 9e4e6726 9e4f6727     .gM..g..&gN.'gO.
   1cee8:	96d86728 96a2672a 9696672b 967b672c     (g..*g..+g..,g{.
   1cef8:	8e44672d 9e51672e 8ee96731 96706734     -gD..gQ.1g..4gp.
   1cf08:	9e536736 9e566737 9e556738 8af7673a     6gS.7gV.8gU.:g..
   1cf18:	8b80673d 9e52673f 9e546741 9e576746     =g..?gR.AgT.FgW.
   1cf28:	90996749 979b674e 88c7674f 8dde6750     Ig..Ng..Og..Pg..
   1cf38:	91ba6751 8edb6753 8ff16756 9e5a6759     Qg..Sg..Vg..YgZ.
   1cf48:	936d675c 9e58675e 91a9675f 9e596760     \gm.^gX._g..`gY.
   1cf58:	8ff06761 96db6762 9e5b6763 9e5c6764     ag..bg..cg[.dg\.
   1cf68:	97886765 fae16766 9e61676a 8d59676d     eg..fg..jga.mgY.
   1cf78:	9474676f 9e5e6770 938c6771 9ddc6772     ogt.pg^.qg..rg..
   1cf88:	9de06773 8b6e6775 94666777 9e60677c     sg..ugn.wgf.|g`.
   1cf98:	8fbc677e 94c2677f 9e666785 94f86787     ~g...g...gf..g..
   1cfa8:	9e5d6789 9e63678b 9e62678c 90cd6790     .g]..gc..gb..g..
   1cfb8:	968d6795 97d16797 9687679a 89ca679c     .g...g...g...g..
   1cfc8:	8e7d679d 986767a0 9e6567a1 909567a2     .g}..gg..ge..g..
   1cfd8:	9e6467a6 9e5f67a9 8ccd67af 9e6b67b3     .gd..g_..g...gk.
   1cfe8:	9e6967b4 89cb67b6 9e6767b7 9e6d67b8     .gi..g...gg..gm.
   1cff8:	9e7367b9 fae267bb fae467c0 91c667c1     .gs..g...g...g..
   1d008:	95bf67c4 9e7567c6 954167ca 9e7467ce     .g...gu..gA..gt.
   1d018:	949067cf 965e67d0 8ab967d1 90f567d3     .g...g^..g...g..
   1d028:	8f5f67d4 92d167d8 974d67da 9e7067dd     .g_..g...gM..gp.
   1d038:	9e6f67de 9e7167e2 9e6e67e4 9e7667e7     .go..gq..gn..gv.
   1d048:	9e6c67e9 9e6a67ec 9e7267ee 9e6867ef     .gl..gj..gr..gh.
   1d058:	928c67f1 96f667f3 8ec467f4 8df267f5     .g...g...g...g..
   1d068:	8db867fb 968f67fe 8a6067ff fae56801     .g...g...g`..h..
   1d078:	92cc6802 93c86803 89686804 90f06813     .h...h...hh..h..
   1d088:	90b26816 8c496817 9e78681e 8d5a6821     .h...hI..hx.!hZ.
   1d098:	8a9c6822 9e7a6829 8a94682a 9e81682b     "h..)hz.*h..+h..
   1d0a8:	9e7d6832 90f16834 8a6a6838 8daa6839     2h}.4h..8hj.9h..
   1d0b8:	8a69683c 8dcd683d 9e7b6840 8c856841     <hi.=h..@h{.Ah..
   1d0c8:	8c6a6842 938d6843 fae66844 9e796846     Bhj.Ch..Dh..Fhy.
   1d0d8:	88c46848 9e7c684d 9e7e684e 8bcb6850     Hh..Mh|.Nh~.Ph..
   1d0e8:	8c4b6851 fae36852 8aba6853 8b6a6854     QhK.Rh..Sh..Thj.
   1d0f8:	9e826859 8df7685c 9691685d 8e56685f     Yh..\h..]h.._hV.
   1d108:	9e836863 954f6867 9e8f6874 89b16876     ch..ghO.th..vh..
   1d118:	9e846877 9e95687e 9e85687f 97c06881     wh..~h...h...h..
   1d128:	9e8c6883 947e6885 9e94688d 9e87688f     .h...h~..h...h..
   1d138:	88b26893 9e896894 8d5b6897 9e8b689b     .h...h...h[..h..
   1d148:	9e8a689d 9e86689f 9e9168a0 8fbd68a2     .h...h...h...h..
   1d158:	9aeb68a6 8ce668a7 979c68a8 9e8868ad     .h...h...h...h..
   1d168:	92f268af 8a4268b0 8dab68b1 9e8068b3     .h...hB..h...h..
   1d178:	9e9068b5 8a8168b6 9e8e68b9 9e9268ba     .h...h...h...h..
   1d188:	938e68bc 8afc68c4 9eb068c6 fa6468c8     .h...h...h...hd.
   1d198:	96c768c9 9e9768ca 8afb68cb 9e9e68cd     .h...h...h...h..
   1d1a8:	fae768cf 965f68d2 9e9f68d4 9ea168d5     .h...h_..h...h..
   1d1b8:	9ea568d7 9e9968d8 924968da 938f68df     .h...h...hI..h..
   1d1c8:	9ea968e0 9e9c68e1 9ea668e3 9ea068e7     .h...h...h...h..
   1d1d8:	905868ee 9eaa68ef 90b168f2 9ea868f9     .hX..h...h...h..
   1d1e8:	8abb68fa 986f6900 9e966901 9ea46904     .h...io..i...i..
   1d1f8:	88d66905 9e986908 96b8690b 9e9d690c     .i...i...i...i..
   1d208:	9041690d 92c5690e 9e93690f 9ea36912     .iA..i...i...i..
   1d218:	909a6919 9ead691a 8a91691b 8c9f691c     .i...i...i...i..
   1d228:	9eaf6921 9e9a6922 9eae6923 9ea76925     !i.."i..#i..%i..
   1d238:	9e9b6926 9eab6928 9eac692a 9ebd6930     &i..(i..*i..0i..
   1d248:	93cc6934 9ea26936 9eb96939 9ebb693d     4i..6i..9i..=i..
   1d258:	92d6693f 976b694a 95966953 9eb66954     ?i..Jik.Si..Ti..
   1d268:	91c86955 9ebc6959 915e695a 9eb3695c     Ui..Yi..Zi^.\i..
   1d278:	9ec0695d 9ebf695e 93ed6960 9ebe6961     ]i..^i..`i..ai..
   1d288:	93e86962 fae96968 9ec2696a 9eb5696b     bi..hi..ji..ki..
   1d298:	8bc6696d 9eb8696e 8f7c696f 94806973     mi..ni..oi|.si..
   1d2a8:	9eba6974 8bc96975 9eb26977 9eb46978     ti..ui..wi..xi..
   1d2b8:	9eb16979 984f697c 8a79697d 9eb7697e     yi..|iO.}iy.~i..
   1d2c8:	9ec16981 8a546982 8de5698a 897c698e     .i...iT..i...i|.
   1d2d8:	9ed26991 98506994 9ed56995 faeb6998     .i...iP..i...i..
   1d2e8:	9059699b 9ed4699c 9ed369a0 9ed069a7     .iY..i...i...i..
   1d2f8:	9ec469ae 9ee169b1 9ec369b2 9ed669b4     .i...i...i...i..
   1d308:	9ece69bb 9ec969be 9ec669bf 9ec769c1     .i...i...i...i..
   1d318:	9ecf69c3 eaa069c7 9ecc69ca 8d5c69cb     .i...i...i...i\.
   1d328:	92c669cc 918469cd 9eca69ce 9ec569d0     .i...i...i...i..
   1d338:	9ec869d3 976c69d8 968a69d9 9ecd69dd     .i...il..i...i..
   1d348:	9ed769de faec69e2 9edf69e7 9ed869e8     .i...i...i...i..
   1d358:	9ee569eb 9ee369ed 9ede69f2 9edd69f9     .i...i...i...i..
   1d368:	92ce69fb 918569fd 9edb69ff 9ed96a02     .i...i...i...j..
   1d378:	9ee06a05 9ee66a0a 94f36a0b 9eec6a0c     .j...j...j...j..
   1d388:	9ee76a12 9eea6a13 9ee46a14 92946a17     .j...j...j...j..
   1d398:	95576a19 9eda6a1b 9ee26a1e 8fbe6a1f     .jW..j...j...j..
   1d3a8:	96cd6a21 9ef66a22 9ee96a23 8ca06a29     !j.."j..#j..)j..
   1d3b8:	89a16a2a 8a7e6a2b 9ed16a2e faed6a30     *j..+j~..j..0j..
   1d3c8:	8fbf6a35 9eee6a36 9ef56a38 8ef76a39     5j..6j..8j..9j..
   1d3d8:	8a926a3a 924d6a3d 9eeb6a44 faef6a46     :j..=jM.Dj..Fj..
   1d3e8:	9ef06a47 9ef46a48 8bb46a4b 8b6b6a58     Gj..Hj..Kj..Xjk.
   1d3f8:	9ef26a59 8b406a5f 93c96a61 9ef16a62     Yj.._j@.aj..bj..
   1d408:	9ef36a66 faee6a6b 9eed6a72 faf06a73     fj..kj..rj..sj..
   1d418:	9eef6a78 faf16a7e 8a806a7f 92686a80     xj..~j...j...jh.
   1d428:	9efa6a84 9ef86a8d 8ce76a8e 9ef76a90     .j...j...j...j..
   1d438:	9f406a97 9e776a9c 9ef96aa0 9efb6aa2     .j@..jw..j...j..
   1d448:	9efc6aa3 9f4b6aaa 9f476aac 9e8d6aae     .j...jK..jG..j..
   1d458:	9f466ab3 9f456ab8 9f426abb 9ee86ac1     .jF..jE..jB..j..
   1d468:	9f446ac2 9f436ac3 9f496ad1 98456ad3     .jD..jC..jI..jE.
   1d478:	9f4c6ada 8bf96adb 9f486ade 9f4a6adf     .jL..j...jH..jJ.
   1d488:	faf26ae2 faf36ae4 94a56ae8 9f4d6aea     .j...j...j...jM.
   1d498:	9f516afa 9f4e6afb 97936b04 9f4f6b05     .jQ..jN..k...kO.
   1d4a8:	9edc6b0a 9f526b12 9f536b16 89546b1d     .k...kR..kS..kT.
   1d4b8:	9f556b1f 8c876b20 8e9f6b21 8bd36b23     .kU. k..!k..#k..
   1d4c8:	89a26b27 977e6b32 9f576b37 9f566b38     'k..2k~.7kW.8kV.
   1d4d8:	9f596b39 8b5c6b3a 8bd46b3d 8abc6b3e     9kY.:k\.=k..>k..
   1d4e8:	9f5c6b43 9f5b6b47 9f5d6b49 89cc6b4c     Ck\.Gk[.Ik].Lk..
   1d4f8:	92566b4e 9f5e6b50 8abd6b53 9f606b54     NkV.Pk^.Sk..Tk`.
   1d508:	9f5f6b59 9f616b5b 9f626b5f 9f636b61     Yk_.[ka._kb.akc.
   1d518:	8e7e6b62 90b36b63 8d9f6b64 95906b66     bk~.ck..dk..fk..
   1d528:	95e06b69 98636b6a 8e956b6f 8dce6b73     ik..jkc.ok..sk..
   1d538:	97f06b74 9f646b78 9f656b79 8e806b7b     tk..xkd.yke.{k..
   1d548:	9f666b7f 9f676b80 9f696b83 9f686b84     .kf..kg..ki..kh.
   1d558:	96776b86 8f7d6b89 8eea6b8a 8e636b8b     .kw..k}..k...kc.
   1d568:	9f6a6b8d 9f6c6b95 90426b96 9f6b6b98     .kj..kl..kB..kk.
   1d578:	9f6d6b9e 9f6e6ba4 9f6f6baa 9f706bab     .km..kn..ko..kp.
   1d588:	9f716baf 9f736bb1 9f726bb2 9f746bb3     .kq..ks..kr..kt.
   1d598:	89a36bb4 92696bb5 9f756bb7 8e456bba     .k...ki..ku..kE.
   1d5a8:	8a6b6bbb 9f766bbc 93616bbf 9aca6bc0     .kk..kv..ka..k..
   1d5b8:	8b426bc5 9f776bc6 9f786bcb 95ea6bcd     .kB..kw..kx..k..
   1d5c8:	96886bce 93c56bd2 9f796bd3 94e46bd4     .k...k...ky..k..
   1d5d8:	faf46bd6 94f96bd8 96d16bdb 9f7a6bdf     .k...k...k...kz.
   1d5e8:	9f7c6beb 9f7b6bec 9f7e6bef 9f7d6bf3     .k|..k{..k~..k}.
   1d5f8:	9f816c08 8e816c0f 96af6c11 9f826c13     .l...l...l...l..
   1d608:	9f836c14 8b436c17 9f846c1b 9f866c23     .l...lC..l..#l..
   1d618:	9f856c24 90856c34 95586c37 89696c38     $l..4l..7lX.8li.
   1d628:	94c36c3e faf56c3f 92f36c40 8f606c41     >l..?l..@l..Al`.
   1d638:	8b816c42 94c46c4e 8eac6c50 9f886c55     Bl..Nl..Pl..Ul..
   1d648:	8abe6c57 89986c5a faf66c5c 93f06c5d     Wl..Zl..\l..]l..
   1d658:	9f876c5e 8d5d6c5f 92726c60 9f896c62     ^l.._l].`lr.bl..
   1d668:	9f916c68 9f8a6c6a faf86c6f 91bf6c70     hl..jl..ol..pl..
   1d678:	8b826c72 9f926c73 8c886c7a 8b446c7d     rl..sl..zl..}lD.
   1d688:	9f906c7e 9f8e6c81 9f8b6c82 97806c83     ~l...l...l...l..
   1d698:	faf76c86 92be6c88 93d76c8c 9f8c6c8d     .l...l...l...l..
   1d6a8:	9f946c90 9f936c92 8c426c93 89ab6c96     .l...l...lB..l..
   1d6b8:	8db96c99 9f8d6c9a 9f8f6c9b 96766ca1     .l...l...l...lv.
   1d6c8:	91f26ca2 96976cab 9f9c6cae 9f9d6cb1     .l...l...l...l..
   1d6d8:	89cd6cb3 95a66cb8 96fb6cb9 9f9f6cba     .l...l...l...l..
   1d6e8:	8ea16cbb 8fc06cbc 9f986cbd 9f9e6cbe     .l...l...l...l..
   1d6f8:	89886cbf 8bb56cc1 9f956cc4 9f9a6cc5     .l...l...l...l..
   1d708:	90f26cc9 94916cca 94e56ccc 9f976cd3     .l...l...l...l..
   1d718:	96406cd5 9f996cd7 9fa26cd9 faf96cda     .l@..l...l...l..
   1d728:	9fa06cdb 9f9b6cdd 96416ce1 94676ce2     .l...l...lA..lg.
   1d738:	8b836ce3 93446ce5 928d6ce8 9fa36cea     .l...lD..l...l..
   1d748:	9fa16cef 91d76cf0 9f966cf1 896a6cf3     .l...l...l...lj.
   1d758:	fafa6d04 976d6d0b 9fae6d0c 9fad6d12     .m...mm..m...m..
   1d768:	90f46d17 9faa6d19 978c6d1b 93b46d1e     .m...m...m...m..
   1d778:	9fa46d1f 92c36d25 896b6d29 8d5e6d2a     .m..%m..)mk.*m^.
   1d788:	9fa76d2b 8f466d32 9fac6d33 9fab6d35     +m..2mF.3m..5m..
   1d798:	9fa66d36 9fa96d38 8a886d3b 9fa86d3d     6m..8m..;m..=m..
   1d7a8:	94686d3e 97ac6d41 8ff26d44 90f36d45     >mh.Am..Dm..Em..
   1d7b8:	9fb46d59 9fb26d5a 956c6d5c 9faf6d63     Ym..Zm..\ml.cm..
   1d7c8:	9fb16d64 89596d66 8d5f6d69 98516d6a     dm..fmY.im_.jmQ.
   1d7d8:	8a5c6d6c 95826d6e fafc6d6f 97816d74     lm\.nm..om..tm..
   1d7e8:	8a436d77 905a6d78 9fb36d79 9fb86d85     wmC.xmZ.ym...m..
   1d7f8:	fafb6d87 8fc16d88 974f6d8c 9fb56d8e     .m...m...mO..m..
   1d808:	9fb06d93 9fb66d95 fb406d96 97dc6d99     .m...m...m@..m..
   1d818:	93936d9b 93c06d9c fb416dac 8a556daf     .m...m...mA..mU.
   1d828:	89746db2 9fbc6db5 9fbf6db8 97c16dbc     .mt..m...m...m..
   1d838:	97846dc0 9fc66dc5 9fc06dc6 9fbd6dc7     .m...m...m...m..
   1d848:	97d26dcb 9fc36dcc fb426dcf 8f696dd1     .m...m...mB..mi.
   1d858:	9fc56dd2 9fca6dd5 93916dd8 9fc86dd9     .m...m...m...m..
   1d868:	9fc26dde 92576de1 9fc96de4 9fbe6de6     .m...mW..m...m..
   1d878:	9fc46de8 9fcb6dea 88fa6deb 9fc16dec     .m...m...m...m..
   1d888:	9fcc6dee 905b6df1 fb446df2 8f7e6df3     .m...m[..mD..m~.
   1d898:	95a36df5 8dac6df7 fb436df8 9fb96df9     .m...m...mC..m..
   1d8a8:	9fc76dfa 93596dfb fb456dfc 90b46e05     .m...mY..mE..n..
   1d8b8:	8a896e07 8dcf6e08 8fc26e09 9fbb6e0a     .n...n...n...n..
   1d8c8:	8f616e0b 8c6b6e13 9fba6e15 9fd06e19     .na..nk..n...n..
   1d8d8:	8f8d6e1a 8cb86e1b 9fdf6e1d 9fd96e1f     .n...n...n...n..
   1d8e8:	8b946e20 936e6e21 9fd46e23 9fdd6e24      n..!nn.#n..$n..
   1d8f8:	88ad6e25 89516e26 fb486e27 89b76e29     %n..&nQ.'nH.)n..
   1d908:	9fd66e2b 91aa6e2c 9fcd6e2d 9fcf6e2e     +n..,n..-n...n..
   1d918:	8d606e2f 9fe06e38 fb466e39 9fdb6e3a     /n`.8n..9nF.:n..
   1d928:	fb496e3c 9fd36e3e 9fda6e43 96a96e4a     <nI.>n..Cn..Jn..
   1d938:	9fd86e4d 9fdc6e4e 8cce6e56 8fc36e58     Mn..Nn..Vn..Xn..
   1d948:	92586e5b fb476e5c 9fd26e5f 974e6e67     [nX.\nG._n..gnN.
   1d958:	9fd56e6b 9fce6e6e 93926e6f 9fd16e72     kn..nn..on..rn..
   1d968:	9fd76e76 98706e7e 8ebc6e7f 969e6e80     vn..~np..n...n..
   1d978:	9fe16e82 94ac6e8c 9fed6e8f 8cb96e90     .n...n...n...n..
   1d988:	8f806e96 9fe36e98 97ad6e9c 8d616e9d     .n...n...n...na.
   1d998:	9ff06e9f 88ec6ea2 9fee6ea5 9fe26eaa     .n...n...n...n..
   1d9a8:	9fe86eaf 9fea6eb2 976e6eb6 9fe56eb7     .n...n...nn..n..
   1d9b8:	934d6eba 9fe76ebd fb4a6ebf 9fef6ec2     .nM..n...nJ..n..
   1d9c8:	9fe96ec4 96c56ec5 9fe46ec9 8ea06ecb     .n...n...n...n..
   1d9d8:	9ffc6ecc 8a8a6ed1 9fe66ed3 9feb6ed4     .n...n...n...n..
   1d9e8:	9fec6ed5 91ea6edd 91d86ede 9ff46eec     .n...n...n...n..
   1d9f8:	9ffa6eef 9ff86ef2 93486ef4 e0426ef7     .n...n...nH..nB.
   1da08:	9ff56ef8 9ff66efe 9fde6eff 8b996f01     .n...n...n...o..
   1da18:	95596f02 8ebd6f06 8d976f09 98526f0f     .oY..o...o...oR.
   1da28:	9ff26f11 e0416f13 89896f14 91866f15     .o...oA..o...o..
   1da38:	94996f20 8abf6f22 97f86f23 969f6f2b      o.."o..#o..+o..
   1da48:	92d06f2c 9ff96f31 9ffb6f32 91516f38     ,o..1o..2o..8oQ.
   1da58:	e0406f3e 9ff76f3f 9ff16f41 8ac16f45     >o@.?o..Ao..Eo..
   1da68:	8c896f54 e04e6f58 e0496f5b 90f66f5c     To..XoN.[oI.\o..
   1da78:	8a836f5f 8f816f64 e0526f66 e04b6f6d     _o..do..foR.moK.
   1da88:	92aa6f6e e0486f6f 92d76f70 e06b6f74     no..ooH.po..tok.
   1da98:	e0456f78 e0446f7a e04d6f7c e0476f80     xoE.zoD.|oM..oG.
   1daa8:	e0466f81 e04c6f82 909f6f84 e0436f86     .oF..oL..o...oC.
   1dab8:	fb4b6f88 e04f6f8e e0506f91 8ac06f97     .oK..oO..oP..o..
   1dac8:	e0556fa1 e0546fa3 e0566fa4 e0596faa     .oU..oT..oV..oY.
   1dad8:	93626fb1 e0536fb3 fb4c6fb5 e0576fb9     .ob..oS..oL..oW.
   1dae8:	8c836fc0 91f76fc1 e0516fc2 945a6fc3     .o...o...oQ..oZ.
   1daf8:	e0586fc6 e05d6fd4 e05b6fd5 e05e6fd8     .oX..o]..o[..o^.
   1db08:	e0616fdb e05a6fdf 8d8a6fe0 94476fe1     .oa..oZ..o...oG.
   1db18:	9fb76fe4 97946feb e05c6fec e0606fee     .o...o...o\..o`.
   1db28:	91f36fef e05f6ff1 e04a6ff3 fb4d6ff5     .o...o_..oJ..oM.
   1db38:	e8896ff6 e0646ffa e0686ffe e0667001     .o...od..oh..pf.
   1db48:	fb4e7005 fb4f7007 e0627009 e063700b     .pN..pO..pb..pc.
   1db58:	e067700f e0657011 956d7015 e06d7018     .pg..pe..pm..pm.
   1db68:	e06a701a e069701b e06c701d 93d2701e     .pj..pi..pl..p..
   1db78:	e06e701f 92957026 91eb7027 fb507028     .pn.&p..'p..(pP.
   1db88:	90a3702c e06f7030 e0717032 e070703e     ,p..0po.2pq.>pp.
   1db98:	9ff3704c e0727051 93e57058 e0737063     Lp..Qpr.Xp..cps.
   1dba8:	89ce706b 9394706f 8a447070 8b847078     kp..op..ppD.xp..
   1dbb8:	8edc707c 8dd0707d fb517085 98467089     |p..}p...pQ..pF.
   1dbc8:	9086708a 898a708e e0757092 e0747099     .p...p...pu..pt.
   1dbd8:	fb5270ab e07870ac 925970ad e07b70ae     .pR..px..pY..p{.
   1dbe8:	e07670af e07a70b3 e07970b8 935f70b9     .pv..pz..py..p_.
   1dbf8:	88d770ba fa6270bb 97f370c8 e07d70cb     .p...pb..p...p}.
   1dc08:	894770cf e08070d9 e07e70dd e07c70df     .pG..p...p~..p|.
   1dc18:	e07770f1 964270f9 e08270fd fb547104     .pw..pB..p...qT.
   1dc28:	e0817109 fb53710f 898b7114 e0847119     .q...qS..q...q..
   1dc38:	95b0711a e083711c 96b37121 8fc57126     .q...q..!q..&q..
   1dc48:	91527136 8fc4713c fb567146 fb577147     6qR.<q..FqV.GqW.
   1dc58:	97f97149 e08a714c 90f7714e e0867155     Iq..Lq..Nq..Uq..
   1dc68:	e08b7156 898c7159 fb55715c e0897162     Vq..Yq..\qU.bq..
   1dc78:	94817164 e0857165 e0887166 8fc67167     dq..eq..fq..gq..
   1dc88:	94cf7169 e08c716c 8ecf716e 90f8717d     iq..lq..nq..}q..
   1dc98:	e08f7184 e0877188 8c46718a e08d718f     .q...q...qF..q..
   1dca8:	976f7194 e0907195 eaa47199 8f6e719f     .qo..q...q...qn.
   1dcb8:	e09171a8 e09271ac 944d71b1 e09471b9     .q...q...qM..q..
   1dcc8:	e09571be fb5971c1 945271c3 939571c8     .q...qY..qR..q..
   1dcd8:	e09771c9 e09971ce 97d371d0 e09671d2     .q...q...q...q..
   1dce8:	e09871d4 898d71d5 e09371d7 9a7a71df     .q...q...q...qz.
   1dcf8:	e09a71e0 918771e5 8e5771e6 e09c71e7     .q...q...qW..q..
   1dd08:	e09b71ec 904371ed 99d771ee e09d71f5     .q...qC..q...q..
   1dd18:	e09f71f9 e08e71fb e09e71fc fb5a71fe     .q...q...q...qZ.
   1dd28:	e0a071ff 949a7206 e0a1720d e0a27210     .q...r...r...r..
   1dd38:	e0a3721b e0a47228 92dc722a e0a6722c     .r..(r..*r..,r..
   1dd48:	e0a5722d e0a77230 e0a87232 8edd7235     -r..0r..2r..5r..
   1dd58:	95837236 96ea723a e0a9723b e0aa723c     6r..:r..;r..<r..
   1dd68:	9175723d 8ea2723e e0ab723f e0ac7240     =ru.>r..?r..@r..
   1dd78:	e0ad7246 95d07247 94c57248 e0ae724b     Fr..Gr..Hr..Kr..
   1dd88:	9476724c 92ab7252 e0af7258 89e57259     Lrv.Rr..Xr..Yr..
   1dd98:	8b8d725b 96c4725d 96b4725f 89b27261     [r..]r.._r..ar..
   1dda8:	98537262 96717267 95a87269 90b57272     brS.grq.ir..rr..
   1ddb8:	e0b07274 93c17279 8ca1727d e0b1727e     tr..yr..}r..~r..
   1ddc8:	8dd27280 e0b37281 e0b27282 e0b47287     .r...r...r...r..
   1ddd8:	e0b57292 e0b67296 8b5d72a0 e0b772a2     .r...r...r]..r..
   1dde8:	e0b872a7 8ca272ac 94c672af fb5b72b1     .r...r...r...r[.
   1ddf8:	e0ba72b2 8ff372b6 e0b972b9 fb5c72be     .r...r...r...r\.
   1de08:	8bb672c2 e0bb72c3 e0bd72c4 e0bc72c6     .r...r...r...r..
   1de18:	e0be72ce 8ccf72d0 e0bf72d2 8be772d7     .r...r...r...r..
   1de28:	915f72d9 8d9d72db e0c172e0 e0c272e1     .r_..r...r...r..
   1de38:	e0c072e2 8eeb72e9 93c672ec 8bb772ed     .r...r...r...r..
   1de48:	e0c472f7 924b72f8 e0c372f9 985472fc     .r...rK..r...rT.
   1de58:	948272fd e0c7730a e0c97316 e0c67317     .r...s...s...s..
   1de68:	96d2731b e0c8731c e0ca731d 97c2731f     .s...s...s...s..
   1de78:	fb5d7324 e0ce7325 e0cd7329 9296732a     $s].%s..)s..*s..
   1de88:	944c732b 8ca3732e e0cc732f e0cb7334     +sL..s../s..4s..
   1de98:	97507336 97517337 e0cf733e 898e733f     6sP.7sQ.>s..?s..
   1dea8:	8d967344 8e827345 e0d0734e e0d1734f     Ds..Es..Ns..Os..
   1deb8:	e0d37357 8f627363 e0d57368 e0d4736a     Ws..csb.hs..js..
   1dec8:	e0d67370 8a6c7372 e0d87375 fb5f7377     ps..rsl.us..ws_.
   1ded8:	e0d77378 e0da737a e0d9737b 8cba7384     xs..zs..{s...s..
   1dee8:	97a67387 8bca7389 89a4738b 8be87396     .s...s...s...s..
   1def8:	8adf73a9 97e673b2 e0dc73b3 e0de73bb     .s...s...s...s..
   1df08:	fb6073bd e0df73c0 89cf73c2 e0db73c8     .s`..s...s...s..
   1df18:	fb6173c9 8e5873ca 92bf73cd e0dd73ce     .sa..sX..s...s..
   1df28:	fb6473d2 fb6273d6 e0e273de 8eec73e0     .sd..sb..s...s..
   1df38:	fb6373e3 e0e073e5 8c5d73ea 94c773ed     .sc..s...s]..s..
   1df48:	e0e173ee e0fc73f1 fb6673f5 e0e773f8     .s...s...sf..s..
   1df58:	8cbb73fe 8b857403 e0e47405 979d7406     .s...t...t...t..
   1df68:	fb657407 97ae7409 91f47422 e0e67425     .te..t.."t..%t..
   1df78:	fb677426 fb697429 fb68742a fb6a742e     &tg.)ti.*th..tj.
   1df88:	e0e87432 97d47433 8bd57434 94fa7435     2t..3t..4t..5t..
   1df98:	94697436 e0e9743a e0eb743f e0ee7441     6ti.:t..?t..At..
   1dfa8:	e0ea7455 e0ed7459 8ce8745a 896c745b     Ut..Yt..Zt..[tl.
   1dfb8:	e0ef745c 9090745e e0ec745f 97da7460     \t..^t.._t..`t..
   1dfc8:	fb6b7462 e0f27463 eaa27464 e0f07469     btk.ct..dt..it..
   1dfd8:	e0f3746a e0e5746f e0f17470 8dba7473     jt..ot..pt..st..
   1dfe8:	e0f47476 e0f5747e 979e7483 fb6c7489     vt..~t...t...tl.
   1dff8:	e0f6748b e0f7749e fb6d749f e0e374a2     .t...t...tm..t..
   1e008:	e0f874a7 8ac274b0 8ea374bd e0f974ca     .t...t...t...t..
   1e018:	e0fa74cf e0fb74d4 895a74dc e14074e0     .t...t...tZ..t@.
   1e028:	955a74e2 e14174e3 8aa274e6 e14274e7     .tZ..tA..t...tB.
   1e038:	e14374e9 e14474ee e14674f0 e14774f1     .tC..tD..tF..tG.
   1e048:	e14574f2 957274f6 e14974f7 e14874f8     .tE..tr..tI..tH.
   1e058:	fb6e7501 e14b7503 e14a7504 e14c7505     .un..uK..uJ..uL.
   1e068:	e14d750c e14f750d e14e750e 8d997511     .uM..uO..uN..u..
   1e078:	e1517513 e1507515 8ac37518 9072751a     .uQ..uP..u...ur.
   1e088:	935b751c e152751e 90b6751f 8e597523     .u[..uR..u..#uY.
   1e098:	89997525 e1537526 97707528 95e1752b     %u..&uS.(up.+u..
   1e0a8:	e154752c faa8752f 93637530 97527531     ,uT./u..0uc.1uR.
   1e0b8:	8d627532 905c7533 926a7537 99b27538     2ub.3u\.7uj.8u..
   1e0c8:	92ac753a 89e6753b e155753c e1567544     :u..;u..<uU.DuV.
   1e0d8:	e15b7546 e1597549 e158754a 9dc0754b     Fu[.IuY.JuX.Ku..
   1e0e8:	8a45754c e157754d 88d8754f 94a87551     LuE.MuW.Ou..Qu..
   1e0f8:	94c87554 97af7559 e15c755a e15a755b     Tu..Yu..Zu\.[uZ.
   1e108:	927b755c 90a4755d 94a97560 954c7562     \u{.]u..`u..buL.
   1e118:	e15e7564 97aa7565 8c6c7566 e15f7567     du^.eu..ful.gu_.
   1e128:	e15d7569 94d4756a e160756b e161756d     iu].ju..ku`.mua.
   1e138:	fb6f756f 88d97570 8ff47573 e1667574     ouo.pu..su..tuf.
   1e148:	e1637576 93eb7577 e1627578 8b45757f     vuc.wu..xub..uE.
   1e158:	e1697582 e1647586 e1657587 e1687589     .ui..ud..ue..uh.
   1e168:	e167758a 9544758b 9161758e 9160758f     .ug..uD..ua..u`.
   1e178:	8b5e7591 e16a7594 e16b759a e16c759d     .u^..uj..uk..ul.
   1e188:	e16e75a3 e16d75a5 897575ab e17675b1     .un..um..uu..uv.
   1e198:	94e675b2 e17075b3 e17275b5 e17475b8     .u...up..ur..ut.
   1e1a8:	905d75b9 e17575bc e17375bd 8ebe75be     .u]..uu..us..u..
   1e1b8:	e16f75c2 e17175c3 956175c5 8fc775c7     .uo..uq..ua..u..
   1e1c8:	e17875ca e17775cd e17975d2 8ea475d4     .ux..uw..uy..u..
   1e1d8:	8dad75d5 939775d8 e17a75d9 92c975db     .u...u...uz..u..
   1e1e8:	e17c75de 979f75e2 e17b75e3 918975e9     .u|..u...u{..u..
   1e1f8:	e18275f0 e18475f2 e18575f3 927375f4     .u...u...u...us.
   1e208:	e18375fa e18075fc e17d75fe e17e75ff     .u...u...u}..u~.
   1e218:	e1817601 e1887609 e186760b e187760d     .v...v...v...v..
   1e228:	e189761f e18b7620 e18c7621 e18d7622     .v.. v..!v.."v..
   1e238:	e18e7624 e18a7627 e1907630 e18f7634     $v..'v..0v..4v..
   1e248:	e191763b 97c37642 e1947646 e1927647     ;v..Bv..Fv..Gv..
   1e258:	e1937648 8ae0764c 96fc7652 95c87656     Hv..Lv..Rv..Vv..
   1e268:	e1967658 e195765c e1977661 e1987662     Xv..\v..av..bv..
   1e278:	e19c7667 e1997668 e19a7669 e19b766a     gv..hv..iv..jv..
   1e288:	e19d766c e19e7670 e19f7672 e1a07676     lv..pv..rv..vv..
   1e298:	e1a17678 94ad767a 936f767b e1a2767c     xv..zv..{vo.|v..
   1e2a8:	9492767d 9553767e e1a37680 fb707682     }v..~vS..v...vp.
   1e2b8:	e1a47683 93497684 8a467686 8d637687     .v...vI..vF..vc.
   1e2c8:	e1a57688 e1a6768b e1a7768e 8e487690     .v...v...v...vH.
   1e2d8:	e1a97693 e1a87696 e1aa7699 e1ab769a     .v...v...v...v..
   1e2e8:	fb73769b fb71769c fb72769e fb7476a6     .vs..vq..vr..vt.
   1e2f8:	94e776ae e1ac76b0 e1ad76b4 ea8976b7     .v...v...v...v..
   1e308:	e1ae76b8 e1af76b9 e1b076ba 8e4d76bf     .v...v...v...vM.
   1e318:	e1b176c2 947576c3 967e76c6 896d76c8     .v...vu..v~..vm.
   1e328:	897676ca e1b276cd e1b476d2 e1b376d6     .vv..v...v...v..
   1e338:	939076d7 90b776db 9f5876dc e1b576de     .v...v...vX..v..
   1e348:	96bf76df e1b676e1 8ac476e3 94d576e4     .v...v...v...v..
   1e358:	e1b776e5 e1b876e7 e1b976ea 96da76ee     .v...v...v...v..
   1e368:	96d376f2 92bc76f4 918a76f8 e1bb76fb     .v...v...v...v..
   1e378:	8f8276fe 8fc87701 e1be7704 e1bd7707     .v...w...w...w..
   1e388:	e1bc7708 94fb7709 8ac5770b 8ca7770c     .w...w...w...w..
   1e398:	e1c4771b e1c1771e 905e771f 96b07720     .w...w...w^. w..
   1e3a8:	e1c07724 e1c27725 e1c37726 e1bf7729     $w..%w..&w..)w..
   1e3b8:	e1c57737 e1c67738 92ad773a 8ae1773c     7w..8w..:w..<w..
   1e3c8:	92857740 fb767746 e1c77747 e1c8775a     @w..Fwv.Gw..Zw..
   1e3d8:	e1cb775b 90877761 93c27763 e1cc7765     [w..aw..cw..ew..
   1e3e8:	96727766 e1c97768 e1ca776b e1cf7779     fwr.hw..kw..yw..
   1e3f8:	e1ce777e e1cd777f e1d1778b e1d0778e     ~w...w...w...w..
   1e408:	e1d27791 e1d4779e e1d377a0 95cb77a5     .w...w...w...w..
   1e418:	8f7577ac 97c477ad e1d577b0 93b577b3     .wu..w...w...w..
   1e428:	e1d677b6 e1d777b9 e1db77bb e1d977bc     .w...w...w...w..
   1e438:	e1da77bd e1d877bf e1dc77c7 e1dd77cd     .w...w...w...w..
   1e448:	e1de77d7 e1df77da 96b577db e1e077dc     .w...w...w...w..
   1e458:	96ee77e2 e1e177e3 926d77e5 948a77e7     .w...w...wm..w..
   1e468:	8be977e9 925a77ed e1e277ee 8bb877ef     .w...wZ..w...w..
   1e478:	90ce77f3 e1e377fc 8dbb7802 e1e4780c     .w...w...x...x..
   1e488:	e1e57812 8ca47814 8dd37815 e1e77820     .x...x...x.. x..
   1e498:	fb787821 93757825 8dd47826 8b6d7827     !xx.%xu.&x..'xm.
   1e4a8:	96437832 946a7834 9376783a 8d7b783f     2xC.4xj.:xv.?x{.
   1e4b8:	e1e97845 fb79784e 8fc9785d fb7a7864     Ex..Nxy.]x..dxz.
   1e4c8:	97b0786b 8d64786c 8ca5786f 94a17872     kx..lxd.ox..rx..
   1e4d8:	e1eb7874 fb7b787a e1ed787c 8ce97881     tx..zx{.|x...x..
   1e4e8:	e1ec7886 92f47887 e1ef788c 8a56788d     .x...x...x...xV.
   1e4f8:	e1ea788e 94e87891 894f7893 8dea7895     .x...x...xO..x..
   1e508:	98717897 e1ee789a e1f078a3 95c978a7     .xq..x...x...x..
   1e518:	90d778a9 e1f278aa e1f378af e1f178b5     .x...x...x...x..
   1e528:	8a6d78ba e1f978bc e1f878be 8ea578c1     .xm..x...x...x..
   1e538:	e1fa78c5 e1f578c6 e1fb78ca e1f678cb     .x...x...x...x..
   1e548:	94d678d0 e1f478d1 e1f778d4 e24178da     .x...x...x...xA.
   1e558:	e24078e7 968178e8 e1fc78ec 88e978ef     .x@..x...x...x..
   1e568:	e24378f4 e24278fd 8fca7901 e2447907     .xC..xB..y...yD.
   1e578:	9162790e e2467911 e2457912 e2477919     .yb..yF..yE..yG.
   1e588:	e1e67926 e1e8792a e249792b e248792c     &y..*y..+yI.,yH.
   1e598:	fb7c7930 8ea6793a 97e7793c 8ed0793e     0y|.:y..<y..>y..
   1e5a8:	e24a7940 8c567941 8b5f7947 8b467948     @yJ.AyV.Gy_.HyF.
   1e5b8:	8e837949 97537950 e2507953 e24f7955     Iy..PyS.SyP.UyO.
   1e5c8:	91637956 e24c7957 e24e795a 8f6a795d     Vyc.WyL.ZyN.]yj.
   1e5d8:	905f795e e24d795f e24b7960 94497962     ^y_._yM.`yK.byI.
   1e5e8:	8fcb7965 955b7968 8dd5796d 93987977     ey..hy[.my..wy..
   1e5f8:	e251797a e252797f e2687980 8bd67981     zyQ..yR..yh..y..
   1e608:	985c7984 91547985 e253798a 89d0798d     .y\..yT..yS..y..
   1e618:	92f5798e 959f798f fb817994 fb83799b     .y...y...y...y..
   1e628:	e254799d 8b9a79a6 e25579a7 e25779aa     .yT..y...yU..yW.
   1e638:	e25879ae 944879b0 e25979b3 e25a79b9     .yX..yH..yY..yZ.
   1e648:	e25b79ba 8bd779bd 89d179be 93c379bf     .y[..y...y...y..
   1e658:	8f4779c0 8e8479c1 e25c79c9 8f4879cb     .yG..y...y\..yH.
   1e668:	89c879d1 956279d2 e25d79d5 94e979d8     .y...yb..y]..y..
   1e678:	916479df e26079e1 e26179e3 948979e4     .yd..y`..ya..y..
   1e688:	906079e6 e25e79e7 928179e9 e25f79ec     .y`..y^..y...y_.
   1e698:	8fcc79f0 88da79fb 8b487a00 e2627a08     .y...y...zH..zb.
   1e6a8:	92f67a0b e2637a0d 90c57a0e 96ab7a14     .z...zc..z...z..
   1e6b8:	95427a17 e2647a18 e2657a19 92747a1a     .zB..zd..ze..zt.
   1e6c8:	97c57a1c e2677a1f e2667a20 8eed7a2e     .z...zg. zf..z..
   1e6d8:	e2697a31 88ee7a32 e26c7a37 e26a7a3b     1zi.2z..7zl.;zj.
   1e6e8:	89d27a3c 8c6d7a3d e26b7a3e 8d657a3f     <z..=zm.>zk.?ze.
   1e6f8:	8d927a40 95e47a42 e26d7a43 96737a46     @z..Bz..Czm.Fzs.
   1e708:	e26f7a49 90cf7a4d 896e7a4e 89b87a4f     Izo.Mz..Nzn.Oz..
   1e718:	88aa7a50 e26e7a57 e2707a61 e2717a62     Pz..Wzn.azp.bzq.
   1e728:	8ff57a63 e2727a69 8a6e7a6b e2747a70     cz..izr.kzn.pzt.
   1e738:	8c8a7a74 8b867a76 e2757a79 8bf37a7a     tz..vz..yzu.zz..
   1e748:	e2767a7d 90fa7a7f 93cb7a81 90de7a83     }zv..z...z...z..
   1e758:	8df37a84 e2777a88 92827a92 918b7a93     .z...zw..z...z..
   1e768:	e2797a95 e27b7a96 e2787a97 e27a7a98     .zy..z{..zx..zz.
   1e778:	8c417a9f e27c7aa9 8c457aaa 8b877aae     .zA..z|..zE..z..
   1e788:	97717aaf e27e7ab0 e2807ab6 894d7aba     .zq..z~..z...zM.
   1e798:	e2837abf 8a967ac3 e2827ac4 e2817ac5     .z...z...z...z..
   1e7a8:	e2857ac7 e27d7ac8 e2867aca 97a77acb     .z...z}..z...z..
   1e7b8:	e2877acd e2887acf fb847ad1 9af27ad2     .z...z...z...z..
   1e7c8:	e28a7ad3 e2897ad5 e28b7ad9 e28c7ada     .z...z...z...z..
   1e7d8:	97b37adc e28d7add e8ed7adf 8fcd7ae0     .z...z...z...z..
   1e7e8:	e28e7ae1 e28f7ae2 8f767ae3 93b67ae5     .z...z...zv..z..
   1e7f8:	e2907ae6 fb857ae7 92477aea fb877aeb     .z...z...zG..z..
   1e808:	e2917aed 925b7aef e2927af0 8ba37af6     .z...z[..z...z..
   1e818:	995e7af8 927c7af9 8eb17afa 8ac67aff     .z^..z|..z...z..
   1e828:	e2937b02 e2a07b04 e2967b06 8b887b08     .{...{...{...{..
   1e838:	e2957b0a e2a27b0b e2947b0f 8fce7b11     .{...{...{...{..
   1e848:	e2987b18 e2997b19 934a7b1b e29a7b1e     .{...{...{J..{..
   1e858:	8a7d7b20 90797b25 95847b26 e29c7b28      {}.%{y.&{..({..
   1e868:	91e67b2c e2977b33 e29b7b35 e29d7b36     ,{..3{..5{..6{..
   1e878:	8df97b39 e2a47b45 954d7b46 94a47b48     9{..E{..F{M.H{..
   1e888:	93997b49 8bd87b4b e2a37b4c e2a17b4d     I{..K{..L{..M{..
   1e898:	94b37b4f e29e7b50 927d7b51 939b7b52     O{..P{..Q{}.R{..
   1e8a8:	939a7b54 8df47b56 e2b67b5d e2a67b65     T{..V{..]{..e{..
   1e8b8:	e2a87b67 e2ab7b6c e2ac7b6e e2a97b70     g{..l{..n{..p{..
   1e8c8:	e2aa7b71 e2a77b74 e2a57b75 e29f7b7a     q{..t{..u{..z{..
   1e8d8:	95cd7b86 89d37b87 e2b37b8b e2b07b8d     .{...{...{...{..
   1e8e8:	e2b57b8f e2b47b92 94937b94 96a57b95     .{...{...{...{..
   1e8f8:	8e5a7b97 e2ae7b98 e2b77b99 e2b27b9a     .{Z..{...{...{..
   1e908:	e2b17b9c e2ad7b9d fb887b9e e2af7b9f     .{...{...{...{..
   1e918:	8ac77ba1 925c7baa 90fb7bad 94a07bb1     .{...{\..{...{..
   1e928:	e2bc7bb4 94a27bb8 90df7bc0 e2b97bc1     .{...{...{...{..
   1e938:	94cd7bc4 e2bd7bc6 95d17bc7 927a7bc9     .{...{...{...{z.
   1e948:	e2b87bcb e2ba7bcc e2bb7bcf e2be7bdd     .{...{...{...{..
   1e958:	8ec27be0 93c47be4 e2c37be5 e2c27be6     .{...{...{...{..
   1e968:	e2bf7be9 98557bed e2c87bf3 e2cc7bf6     .{...{U..{...{..
   1e978:	e2c97bf7 e2c57c00 e2c67c07 e2cb7c0d     .{...|...|...|..
   1e988:	e2c07c11 99d37c12 e2c77c13 e2c17c14     .|...|...|...|..
   1e998:	e2ca7c17 e2d07c1f 8ac87c21 e2cd7c23     .|...|..!|..#|..
   1e9a8:	e2ce7c27 e2cf7c2a e2d27c2b e2d17c37     '|..*|..+|..7|..
   1e9b8:	94f47c38 e2d37c3d 97fa7c3e 95eb7c3f     8|..=|..>|..?|..
   1e9c8:	e2d87c40 e2d57c43 e2d47c4c 90d07c4d     @|..C|..L|..M|..
   1e9d8:	e2d77c4f e2d97c50 e2d67c54 e2dd7c56     O|..P|..T|..V|..
   1e9e8:	e2da7c58 e2db7c5f e2c47c60 e2dc7c64     X|.._|..`|..d|..
   1e9f8:	e2de7c65 e2df7c6c 95c47c73 e2e07c75     e|..l|..s|..u|..
   1ea08:	96e07c7e 8bcc7c81 8c487c82 e2e17c83     ~|...|...|H..|..
   1ea18:	95b27c89 90887c8b 96ae7c8d e2e27c90     .|...|...|...|..
   1ea28:	97b17c92 94947c95 91657c97 94537c98     .|...|...|e..|S.
   1ea38:	8f6c7c9b 88be7c9f e2e77ca1 e2e57ca2     .|l..|...|...|..
   1ea48:	e2e37ca4 8a9f7ca5 8fcf7ca7 e2e87ca8     .|...|...|...|..
   1ea58:	e2e67cab e2e47cad e2ec7cae e2eb7cb1     .|...|...|...|..
   1ea68:	e2ea7cb2 e2e97cb3 e2ed7cb9 e2ee7cbd     .|...|...|...|..
   1ea78:	90b87cbe e2ef7cc0 e2f17cc2 e2f07cc5     .|...|...|...|..
   1ea88:	8cd07cca 91577cce e2f37cd2 939c7cd6     .|...|W..|...|..
   1ea98:	e2f27cd8 e2f47cdc 95b37cde 918c7cdf     .|...|...|...|..
   1eaa8:	8d667ce0 e2f57ce2 97c67ce7 e2f77cef     .|f..|...|...|..
   1eab8:	e2f87cf2 e2f97cf4 e2fa7cf6 8e857cf8     .|...|...|...|..
   1eac8:	e2fb7cfa 8c6e7cfb 8b8a7cfe 8b497d00     .|...|n..|...}I.
   1ead8:	e3407d02 96f17d04 8d677d05 e2fc7d06     .}@..}...}g..}..
   1eae8:	e3437d0a 96e47d0b 945b7d0d 95527d10     .}C..}...}[..}R.
   1eaf8:	8f837d14 e3427d15 8ed17d17 8d687d18     .}...}B..}...}h.
   1eb08:	8e867d19 8b897d1a 95b47d1b e3417d1c     .}...}...}...}A.
   1eb18:	91667d20 96617d21 8df57d22 8e877d2b      }f.!}a."}..+}..
   1eb28:	92db7d2c e3467d2e 97dd7d2f 8dd77d30     ,}...}F./}..0}..
   1eb38:	e3477d32 90617d33 e3497d35 8fd07d39     2}G.3}a.5}I.9}..
   1eb48:	8dae7d3a e3487d3f 8f497d42 8cbc7d43     :}..?}H.B}I.C}..
   1eb58:	91677d44 e3447d45 e34a7d46 fb8a7d48     D}g.E}D.F}J.H}..
   1eb68:	e3457d4b 8c6f7d4c e34d7d4e e3517d4f     K}E.L}o.N}M.O}Q.
   1eb78:	8c8b7d50 e34c7d56 e3557d5b fb8b7d5c     P}..V}L.[}U.\}..
   1eb88:	8d697d5e 978d7d61 88ba7d62 e3527d63     ^}i.a}..b}..c}R.
   1eb98:	8b8b7d66 e34f7d68 e3507d6e 939d7d71     f}..h}O.n}P.q}..
   1eba8:	e34e7d72 e34b7d73 8a477d75 90e27d76     r}N.s}K.u}G.v}..
   1ebb8:	8ca67d79 e3577d7d e3547d89 e3567d8f     y}..}}W..}T..}V.
   1ebc8:	e3537d93 8c707d99 91b17d9a e3587d9b     .}S..}p..}...}X.
   1ebd8:	918e7d9c e3657d9f fb8d7da0 e3617da2     .}...}e..}...}a.
   1ebe8:	e35b7da3 e35f7dab 8ef87dac 88db7dad     .}[..}_..}...}..
   1ebf8:	e35a7dae e3627daf e3667db0 8d6a7db1     .}Z..}b..}f..}j.
   1ec08:	96d47db2 92d47db4 e35c7db5 fb8c7db7     .}...}...}\..}..
   1ec18:	e3647db8 e3597dba 925d7dbb e35e7dbd     .}d..}Y..}]..}^.
   1ec28:	88bb7dbe 96c87dbf e35d7dc7 8bd97dca     .}...}...}]..}..
   1ec38:	94ea7dcb 918d7dcf 97ce7dd1 8f8f7dd2     .}...}...}...}..
   1ec48:	e38e7dd5 fb8e7dd6 e3677dd8 90fc7dda     .}...}...}g..}..
   1ec58:	e3637ddc e3687ddd e36a7dde 92f77de0     .}c..}h..}j..}..
   1ec68:	e36d7de1 e3697de4 95d27de8 8ac97de9     .}m..}i..}...}..
   1ec78:	96c97dec 88dc7def e36c7df2 97fb7df4     .}...}...}l..}..
   1ec88:	e36b7dfb 898f7e01 93ea7e04 e36e7e05     .}k..~...~...~n.
   1ec98:	e3757e09 e36f7e0a e3767e0b e3727e12     .~u..~o..~v..~r.
   1eca8:	949b7e1b 8ec87e1e e3747e1f e3717e21     .~...~...~t.!~q.
   1ecb8:	e3777e22 e3707e23 8f637e26 96447e2b     "~w.#~p.&~c.+~D.
   1ecc8:	8f6b7e2e e3737e31 e3807e32 e37b7e35     .~k.1~s.2~..5~{.
   1ecd8:	e37e7e37 e37c7e39 e3817e3a e37a7e3b     7~~.9~|.:~..;~z.
   1ece8:	e3607e3d 90d17e3e 94c97e41 e37d7e43     =~`.>~..A~..C~}.
   1ecf8:	e3787e46 91407e4a 8c717e4b 8f4a7e4d     F~x.J~@.K~q.M~J.
   1ed08:	fb8f7e52 90447e54 91557e55 e3847e56     R~..T~D.U~U.V~..
   1ed18:	e3867e59 e3877e5a e3837e5d e3857e5e     Y~..Z~..]~..^~..
   1ed28:	e3797e66 e3827e67 e38a7e69 e3897e6a     f~y.g~..i~..j~..
   1ed38:	969a7e6d 8c4a7e70 e3887e79 e38c7e7b     m~..p~J.y~..{~..
   1ed48:	e38b7e7c e38f7e7d e3917e7f 8e5b7e82     |~..}~...~...~[.
   1ed58:	e38d7e83 e3927e88 e3937e89 fa5c7e8a     .~...~...~...~\.
   1ed68:	e3947e8c e39a7e8e 935a7e8f e3967e90     .~...~...~Z..~..
   1ed78:	e3957e92 e3977e93 e3987e94 e3997e96     .~...~...~...~..
   1ed88:	e39b7e9b e39c7e9c 8aca7f36 e39d7f38     .~...~..6...8...
   1ed98:	e39e7f3a e39f7f45 fb907f47 e3a07f4c     :...E...G...L...
   1eda8:	e3a17f4d e3a27f4e e3a37f50 e3a47f51     M...N...P...Q...
   1edb8:	e3a67f54 e3a57f55 e3a77f58 e3a87f5f     T...U...X..._...
   1edc8:	e3a97f60 e3ac7f67 e3aa7f68 e3ab7f69     `...g...h...i...
   1edd8:	8ddf7f6a 8c727f6b 92757f6e 94b17f70     j...k.r.n.u.p...
   1ede8:	8f907f72 946c7f75 94eb7f77 e3ad7f78     r...u.l.w...x...
   1edf8:	9ceb7f79 e3ae7f82 e3b07f83 97857f85     y...............
   1ee08:	e3af7f86 e3b27f87 e3b17f88 97727f8a     ..............r.
   1ee18:	e3b37f8c 94fc7f8e e3b47f94 e3b77f9a     ................
   1ee28:	e3b67f9d e3b57f9e fb917fa1 e3b87fa3     ................
   1ee38:	8c517fa4 91417fa8 8b607fa9 e3bc7fae     ..Q...A...`.....
   1ee48:	e3b97faf e3ba7fb2 e3bd7fb6 e3be7fb8     ................
   1ee58:	e3bb7fb9 89487fbd 89a57fc1 e3c07fc5     ......H.........
   1ee68:	e3c17fc6 e3c27fca 97827fcc 8f4b7fd2     ..............K.
   1ee78:	e3c47fd4 e3c37fd5 90897fe0 e3c57fe1     ................
   1ee88:	e3c67fe6 e3c77fe9 8ae37feb 8acb7ff0     ................
   1ee98:	e3c87ff3 e3c97ff9 967c7ffb 97837ffc     ..........|.....
   1eea8:	97738000 98568001 8d6c8003 e3cc8004     ..s...V...l.....
   1eeb8:	8ed28005 e3cb8006 e3cd800b 8ea7800c     ................
   1eec8:	91cf8010 e3ce8012 8d6b8015 96d58017     ..........k.....
   1eed8:	e3cf8018 e3d08019 e3d1801c e3d28021     ............!...
   1eee8:	e3d38028 8ea88033 96eb8036 e3d5803b     (...3...6...;...
   1eef8:	925e803d e3d4803f e3d78046 e3d6804a     =.^.?...F...J...
   1ef08:	e3d88052 90b98056 e3d98058 e3da805a     R...V...X...Z...
   1ef18:	95b7805e e3db805f 918f8061 e3dc8062     ^..._...a...b...
   1ef28:	e3dd8068 97fc806f e3e08070 e3df8072     h...o...p...r...
   1ef38:	e3de8073 92ae8074 e3e18076 90458077     s...t...v...w.E.
   1ef48:	e3e28079 e3e3807d 9857807e e3e4807f     y...}...~.W.....
   1ef58:	e3e58084 e3e78085 e3e68086 94a38087     ................
   1ef68:	93f78089 985d808b 94a7808c e3e98093     ......].........
   1ef78:	8fd18096 95498098 e3ea809a e3e8809b     ......I.........
   1ef88:	8acc809d 8cd280a1 8e8880a2 94ec80a5     ................
   1ef98:	8ca880a9 966280aa e3ed80ac e3eb80ad     ......b.........
   1efa8:	8d6d80af 8d6e80b1 88e780b2 8de680b4     ..m...n.........
   1efb8:	947880ba 88dd80c3 e3f280c4 925f80c6     ..x..........._.
   1efc8:	947780cc 91d980ce e3f480d6 e3f080d9     ..w.............
   1efd8:	e3f380da e3ee80db e3f180dd 964580de     ..............E.
   1efe8:	8cd380e1 88fb80e4 e3ef80e5 e3f680ef     ................
   1eff8:	e3f780f1 93b780f4 8bb980f8 e44580fc     ..............E.
   1f008:	945c80fd 8e898102 8bba8105 90c68106     ..\.............
   1f018:	98658107 96ac8108 e3f58109 90d2810a     ..e.............
   1f028:	8b72811a e3f8811b e3fa8123 e3f98129     ..r.....#...)...
   1f038:	e3fb812f 92458131 945d8133 92af8139     /...1.E.3.].9...
   1f048:	e442813e e4418146 e3fc814b 9074814e     >.B.F.A.K...N.t.
   1f058:	95858150 e4448151 e4438153 8d6f8154     P...Q.D.S.C.T.o.
   1f068:	98728155 e454815f e4488165 e4498166     U.r._.T.e.H.f.I.
   1f078:	8eee816b e447816e 8d988170 e4468171     k...n.G.p...q.F.
   1f088:	e44a8174 92b08178 95a08179 9142817a     t.J.x...y...z.B.
   1f098:	91da817f e44e8180 e44f8182 e44b8183     ......N...O...K.
   1f0a8:	e44c8188 e44d818a 8d70818f e4558193     ..L...M...p...U.
   1f0b8:	e4518195 9586819a 968c819c 9547819d     ..Q...........G.
   1f0c8:	e45081a0 e45381a3 e45281a4 966381a8     ..P...S...R...c.
   1f0d8:	e45681a9 e45781b0 915681b3 e45881b5     ..V...W...V...X.
   1f0e8:	e45a81b8 e45e81ba e45b81bd e45981be     ..Z...^...[...Y.
   1f0f8:	945e81bf e45c81c0 e45d81c2 89b081c6     ..^...\...].....
   1f108:	e46481c8 e45f81c9 e46081cd e46181d1     ..d..._...`...a.
   1f118:	919f81d3 e46381d8 e46281d9 e46581da     ......c...b...e.
   1f128:	e46681df e46781e0 906281e3 89e781e5     ..f...g...b.....
   1f138:	e46881e7 97d581e8 8ea981ea 8f4c81ed     ..h...........L.
   1f148:	8e8a81f3 927681f4 e46981fa e46a81fb     ......v...i...j.
   1f158:	895081fc e46b81fe e46c8201 e46d8202     ..P...k...l...m.
   1f168:	e46e8205 e46f8207 8bbb8208 9da88209     ..n...o.........
   1f178:	e470820a 90e3820c e471820d 8ec9820e     ..p.......q.....
   1f188:	e4728210 98ae8212 e4738216 95dc8217     ..r.......s.....
   1f198:	8ada8218 9143821b 8f77821c 9591821e     ......C...w.....
   1f1a8:	8f4d821f e4748229 8d71822a e475822b     ..M.).t.*.q.+.u.
   1f1b8:	94ca822c e484822e e4778233 91c78235     ,.......3.w.5...
   1f1c8:	94958236 8cbd8237 e4768238 91448239     6...7...8.v.9.D.
   1f1d8:	e4788240 92f88247 e47a8258 e4798259     @.x.G...X.z.Y.y.
   1f1e8:	e47c825a e47b825d e47d825f e4808262     Z.|.].{._.}.b...
   1f1f8:	e47e8264 8acd8266 e4818268 e482826a     d.~.f...h...j...
   1f208:	e483826b 8daf826e 97c7826f e4858271     k...n...o...q...
   1f218:	90468272 89908276 e4868277 e4878278     r.F.v...w...x...
   1f228:	e488827e 88f0828b e489828d e48a8292     ~...............
   1f238:	95878299 8ec5829d e48c829f 8a4882a5     ..............H.
   1f248:	88b082a6 e48b82ab e48e82ac 946d82ad     ..............m.
   1f258:	906382af 89d482b1 964682b3 8c7c82b8     ..c.......F...|.
   1f268:	8bda82b9 e48d82bb 89e882bd 8aa182c5     ................
   1f278:	899182d1 e49282d2 97e882d3 91db82d4     ................
   1f288:	956382d7 e49e82d9 89d582db e49c82dc     ..c.............
   1f298:	e49a82de e49182df e48f82e1 e49082e3     ................
   1f2a8:	8ee182e5 8bea82e6 929782e7 93cf82eb     ................
   1f2b8:	897082f1 e49482f3 e49382f4 e49982f9     ..p.............
   1f2c8:	e49582fa e49882fb fb938301 96ce8302     ................
   1f2d8:	e4978303 89d68304 8a9d8305 e49b8306     ................
   1f2e8:	e49d8309 8c73830e e4a18316 e4aa8317     ......s.........
   1f2f8:	e4ab8318 88a9831c e4b28323 88ef8328     ........#...(...
   1f308:	e4a9832b e4a8832f e4a38331 e4a28332     +.../...1...2...
   1f318:	e4a08334 e49f8335 92838336 91f98338     4...5...6...8...
   1f328:	e4a58339 e4a48340 e4a78345 91908349     9...@...E...I...
   1f338:	8c74834a 8960834f e4a68350 8d728352     J.t.O.`.P...R.r.
   1f348:	91918358 fb948362 e4b88373 e4b98375     X...b...s...u...
   1f358:	89d78377 89ac837b e4b6837c fb95837f     w...{...|.......
   1f368:	e4ac8385 e4b48387 e4bb8389 e4b5838a     ................
   1f378:	e4b3838e e4968393 e4b18396 e4ad839a     ................
   1f388:	8ace839e e4af839f e4ba83a0 e4b083a2     ................
   1f398:	e4bc83a8 e4ae83aa 949c83ab 978983b1     ................
   1f3a8:	e4b783b5 e4cd83bd e4c583c1 909b83c5     ................
   1f3b8:	fb9683c7 8b6583ca 8bdb83cc e4c083ce     ......e.........
   1f3c8:	89d983d3 8fd283d6 e4c383d8 8dd883dc     ................
   1f3d8:	937083df e4c883e0 95ec83e9 e4bf83eb     ..p.............
   1f3e8:	89d883ef 8cd483f0 954883f1 e4c983f2     ..........H.....
   1f3f8:	e4bd83f4 fb9783f6 e4c683f7 e4d083fb     ................
   1f408:	e4c183fd e4c28403 93b88404 e4c78407     ................
   1f418:	e4c4840b 9647840c e4ca840d 88de840e     ......G.........
   1f428:	e4be8413 e4cc8420 e4cb8422 948b8429     .... ..."...)...
   1f438:	e4d2842a e4dd842c 8a9e8431 e4e08435     *...,...1...5...
   1f448:	e4ce8438 e4d3843c 978e843d e4dc8446     8...<...=...F...
   1f458:	fb988448 97748449 97a8844e 92988457     H...I.t.N...W...
   1f468:	8a8b845b 95928461 e4e28462 939f8463     [...a...b...c...
   1f478:	88af8466 e4db8469 e4d7846b 9192846c     f...i...k...l...
   1f488:	e4d1846d e4d9846e e4de846f 944b8471     m...n...o...q.K.
   1f498:	88a88475 e4d68477 e4df8479 9598847a     u...w...y...z...
   1f4a8:	e4da8482 e4d58484 8fd3848b 8f4e8490     ..............N.
   1f4b8:	8eaa8494 96d68499 9566849c e4e5849f     ..........f.....
   1f4c8:	e4ee84a1 e4d884ad 8a9784b2 fb9984b4     ................
   1f4d8:	8ff684b8 e4e384b9 e4e884bb 919384bc     ................
   1f4e8:	e4e484bf e4eb84c1 927e84c4 e4ec84c6     ..........~.....
   1f4f8:	977584c9 e4e184ca 8a5784cb e4e784cd     ..u.......W.....
   1f508:	e4ea84d0 96aa84d1 e4ed84d6 e4e684d9     ................
   1f518:	e4e984da fa6084dc 964884ec 984084ee     ......`...H...@.
   1f528:	e4f184f4 e4f884fc e4f084ff 8ec18500     ................
   1f538:	e4cf8506 95cc8511 96a08513 e4f78514     ................
   1f548:	e4f68515 e4f28517 e4f38518 8955851a     ..............U.
   1f558:	e4f5851f e4ef8521 92d38526 e4f4852c     ....!...&...,...
   1f568:	88fc852d 91a08535 95c1853d e4f98540     -...5...=...@...
   1f578:	e5408541 94d78543 e4fc8548 8fd48549     A.@.C...H...I...
   1f588:	8ec7854a e542854b 8bbc854e fb9a8553     J...K.B.N...S...
   1f598:	e5438555 95998557 e4fb8558 fb9b8559     U.C.W...X...Y...
   1f5a8:	e4d4855a e4fa8563 986e8568 93a08569     Z...c...h.n.i...
   1f5b8:	9593856a fb9c856b e54a856d e5508577     j...k...m.J.w.P.
   1f5c8:	e551857e e5448580 94968584 e54e8587     ~.Q...D.......N.
   1f5d8:	e5468588 e548858a e5528590 e5478591     ..F...H...R...G.
   1f5e8:	e54b8594 89928597 93e38599 e54c859b     ..K...........L.
   1f5f8:	e54f859c e54585a4 914585a6 e54985a8     ..O...E...E...I.
   1f608:	8e4685a9 906485aa 8c4f85ab 96f285ac     ..F...d...O.....
   1f618:	96f785ae 8f9285af fb9e85b0 e55685b9     ..............V.
   1f628:	e55485ba 986d85c1 e55385c9 979585cd     ..T...m...S.....
   1f638:	e55585cf e55785d0 e55885d5 e55b85dc     ..U...W...X...[.
   1f648:	e55985dd 93a185e4 e55a85e5 94cb85e9     ..Y.......Z.....
   1f658:	e54d85ea 8f9385f7 e55c85f9 e56185fa     ..M.......\...a.
   1f668:	919485fb e56085fe e5418602 e5628606     ......`...A...b.
   1f678:	91688607 e55d860a e55f860b e55e8613     ..h...]..._...^.
   1f688:	9f508616 9f418617 e564861a e5638622     ..P...A...d.".c.
   1f698:	9796862d e1ba862f e5658630 e566863f     -.../...0.e.?.f.
   1f6a8:	e567864d 8cd5864e 8b738650 e5698654     M.g.N...P.s.T.i.
   1f6b8:	997c8655 8b95865a 97b8865c 8bf1865e     U.|.Z...\...^...
   1f6c8:	e56a865f e56b8667 928e866b e56c8671     _.j.g.k.k...q.l.
   1f6d8:	93f88679 88b8867b 89e1868a e571868b     y...{.........q.
   1f6e8:	e572868c e56d8693 8e5c8695 e56e86a3     ..r...m...\...n.
   1f6f8:	946186a4 e56f86a9 e57086aa e57a86ab     ..a...o...p...z.
   1f708:	e57486af e57786b0 e57386b6 e57586c4     ..t...w...s...u.
   1f718:	e57686c6 8ed686c7 e57886c9 926086cb     ..v.......x...`.
   1f728:	8c7586cd 8a6186ce e57b86d4 8a5e86d9     ..u...a...{...^.
   1f738:	e58186db e57c86de e58086df 94b886e4     ......|.........
   1f748:	e57d86e9 e57e86ec 956786ed 94d886ee     ..}...~...g.....
   1f758:	e58286ef 91fb86f8 e58c86f9 e58886fb     ................
   1f768:	89e986fe e5868700 96498702 e5878703     ..........I.....
   1f778:	e5848706 e5858708 e58a8709 e58d870a     ................
   1f788:	e58b870d e5898711 e5838712 92778718     ..............w.
   1f798:	e594871a 96a8871c e5928725 e5938729     ........%...)...
   1f7a8:	e58e8734 e5908737 e591873b e58f873f     4...7...;...?...
   1f7b8:	90e48749 9858874b e598874c e599874e     I...K.X.L...N...
   1f7c8:	e59f8753 90498755 e59b8757 e59e8759     S...U.I.W...Y...
   1f7d8:	e596875f e5958760 e5a08763 89da8766     _...`...c...f...
   1f7e8:	e59c8768 e5a1876a e59d876e e59a8774     h...j...n...t...
   1f7f8:	92b18776 e5978778 9488877f e5a58782     v...x...........
   1f808:	975a878d e5a4879f e5a387a2 e5ac87ab     ..Z.............
   1f818:	e5a687af e5ae87b3 978687ba e5b187bb     ................
   1f828:	e5a887bd e5a987c0 e5ad87c4 e5b087c6     ................
   1f838:	e5af87c7 e5a787cb e5aa87d0 e5bb87d2     ................
   1f848:	e5b487e0 e5b287ef e5b387f2 e5b887f6     ................
   1f858:	e5b987f7 8a4987f9 8b6187fb e5b787fe     ......I...a.....
   1f868:	e5a28805 fba18807 e5b6880d e5ba880e     ................
   1f878:	e5b5880f e5bc8811 e5be8815 e5bd8816     ................
   1f888:	e5c08821 e5bf8822 e5798823 e5c48827     !..."...#.y.'...
   1f898:	e5c18831 e5c28836 e5c38839 e5c5883b     1...6...9...;...
   1f8a8:	8c8c8840 e5c78842 e5c68844 8f4f8846     @...B...D...F.O.
   1f8b8:	8d73884c 9fa5884d e5c88852 8f708853     L.s.M...R...S.p.
   1f8c8:	8a588857 e5c98859 8971885b 8fd5885d     W.X.Y...[.q.]...
   1f8d8:	e5ca885e 8d748861 e5cb8862 88df8863     ^...a.t.b...c...
   1f8e8:	955c8868 e5cc886b 908a8870 e5d38872     h.\.k...p...r...
   1f8f8:	e5d08875 928f8877 e5d1887d e5ce887e     u...w...}...~...
   1f908:	8bdc887f e5cd8881 e5d48882 8c558888     ..............U.
   1f918:	91dc888b e5da888d e5d68892 91b38896     ................
   1f928:	e5d58897 e5d88899 e5cf889e e5d988a2     ................
   1f938:	e5db88a4 94ed88ab e5d788ae e5dc88b0     ................
   1f948:	e5de88b1 8cd188b4 e5d288b5 88bf88b7     ................
   1f958:	e5dd88bf 8dd988c1 97f488c2 e5df88c3     ................
   1f968:	e5e088c4 919588c5 97a088cf e5e188d4     ................
   1f978:	975488d5 e5e288d8 e5e388d9 95e288dc     ..T.............
   1f988:	e5e488dd 8dbe88df 97a188e1 e5e988e8     ................
   1f998:	e5ea88f2 8fd688f3 e5e888f4 fba288f5     ................
   1f9a8:	978788f8 e5e588f9 e5e788fc 90bb88fd     ................
   1f9b8:	909e88fe e5e68902 e5eb8904 95a18907     ................
   1f9c8:	e5ed890a e5ec890c 8a8c8910 964a8912     ..............J.
   1f9d8:	e5ee8913 fa5d891c e5fa891d e5f0891e     ......].........
   1f9e8:	e5f18925 e5f2892a e5f3892b e5f78936     %...*...+...6...
   1f9f8:	e5f88938 e5f6893b e5f48941 e5ef8943     8...;...A...C...
   1fa08:	e5f58944 e5f9894c e8b5894d 89a68956     D...L...M...V...
   1fa18:	e5fc895e 8bdd895f e5fb8960 e6418964     ^..._...`...d.A.
   1fa28:	e6408966 e643896a e642896d e644896f     f.@.j.C.m.B.o.D.
   1fa38:	8f508972 e6458974 e6468977 e647897e     r.P.t.E.w.F.~.G.
   1fa48:	90bc897f 97768981 e6488983 95a28986     ......v...H.....
   1fa58:	94658987 e6498988 e64a898a 8ca9898b     ..e...I...J.....
   1fa68:	8b4b898f e64b8993 8e8b8996 94608997     ..K...K.......`.
   1fa78:	e64c8998 8a6f899a e64d89a1 e64f89a6     ..L...o...M...O.
   1fa88:	979789a7 e64e89a9 906589aa e65089ac     ......N...e...P.
   1fa98:	e65189af e65289b2 8acf89b3 e65389ba     ..Q...R.......S.
   1faa8:	e65489bd e65589bf e65689c0 8a7089d2     ..T...U...V...p.
   1fab8:	e65789da e65889dc e65989dd 89f089e3     ..W...X...Y.....
   1fac8:	904789e6 e65a89e7 e65b89f4 e65c89f8     ..G...Z...[...\.
   1fad8:	8cbe8a00 92f98a02 e65d8a03 8c768a08     ..........]...v.
   1fae8:	90758a0a e6608a0c 93a28a0e e65f8a10     ..u...`......._.
   1faf8:	fba38a12 8c508a13 e65e8a16 91f58a17     ......P...^.....
   1fb08:	8b4c8a18 e6618a1b e6628a1d 8fd78a1f     ..L...a...b.....
   1fb18:	8c8d8a23 e6638a25 964b8a2a 90dd8a2d     #...%.c.*.K.-...
   1fb28:	8b968a31 96f38a33 91698a34 e6648a36     1...3...4.i.6.d.
   1fb38:	fba48a37 90668a3a 92908a3b 8fd88a3c     7...:.f.;...<...
   1fb48:	e6658a41 e6688a46 e6698a48 8dbc8a50     A.e.F.h.H.i.P...
   1fb58:	91c08a51 e6678a52 8fd98a54 955d8a55     Q...R.g.T...U.].
   1fb68:	e6668a5b 8e8c8a5e 89728a60 e66d8a62     [.f.^...`.r.b.m.
   1fb78:	8c778a63 8e8e8a66 8e8d8a69 986c8a6b     c.w.f...i...k.l.
   1fb88:	e66c8a6c e66b8a6d 91468a6e 8b6c8a70     l.l.m.k.n.F.p.l.
   1fb98:	98628a71 8a598a72 8fda8a73 fba58a79     q.b.r.Y.s...y...
   1fba8:	e66a8a7c e66f8a82 e6708a84 e66e8a85     |.j...o...p...n.
   1fbb8:	8cd68a87 975f8a89 8e8f8a8c 94468a8d     ......_.......F.
   1fbc8:	e6738a91 90be8a93 92618a95 97558a98     ..s.......a...U.
   1fbd8:	e6768a9a 8cea8a9e 90bd8aa0 e6728aa1     ..v...........r.
   1fbe8:	e6778aa3 8ceb8aa4 e6748aa5 e6758aa6     ..w.......t...u.
   1fbf8:	fba68aa7 e6718aa8 90e08aac 93c78aad     ......q.........
   1fc08:	924e8ab0 89db8ab2 94ee8ab9 8b628abc     ..N...........b.
   1fc18:	fba78abe 92b28abf e67a8ac2 e6788ac4     ..........z...x.
   1fc28:	926b8ac7 90bf8acb 8ad08acc e6798acd     ..k...........y.
   1fc38:	907a8acf 97c88ad2 985f8ad6 e67b8ada     ..z......._...{.
   1fc48:	e6878adb 92b38adc e6868ade fba88adf     ................
   1fc58:	e6838ae0 e68b8ae1 e6848ae2 e6808ae4     ................
   1fc68:	92fa8ae6 e67e8ae7 e67c8aeb 97408aed     ......~...|...@.
   1fc78:	8e908aee e6818af1 e67d8af3 fbaa8af6     ..........}.....
   1fc88:	e6858af7 8f948af8 8cbf8afa 91f88afe     ................
   1fc98:	96648b00 89798b01 88e08b02 93a38b04     ..d...y.........
   1fca8:	e6898b07 e6888b0c 93e48b0e e68d8b10     ................
   1fcb8:	e6828b14 e68c8b16 e68e8b17 8caa8b19     ................
   1fcc8:	e68a8b1a 8d758b1b 8ed38b1d e68f8b20     ......u..... ...
   1fcd8:	97778b21 e6928b26 e6958b28 e6938b2b     !.w.&...(...+...
   1fce8:	95548b2c e6908b33 8bde8b39 e6948b3e     ,.T.3...9...>...
   1fcf8:	e6968b41 e69a8b49 e6978b4c e6998b4e     A...I...L...N...
   1fd08:	e6988b4f fbab8b53 e69b8b56 8eaf8b58     O...S...V...X...
   1fd18:	e69d8b5a e69c8b5b 95888b5c e69f8b5f     Z...[...\..._...
   1fd28:	8c788b66 e69e8b6b e6a08b6c e6a18b6f     f.x.k...l...o...
   1fd38:	8b638b70 e3bf8b71 8ff78b72 e6a28b74     p.c.q...r...t...
   1fd48:	8cec8b77 e6a38b7d fbac8b7f e6a48b80     w...}...........
   1fd58:	8e5d8b83 9dcc8b8a e6a58b8c e6a68b8e     ..].............
   1fd68:	8f518b90 e6a78b92 e6a88b93 e6a98b96     ..Q.............
   1fd78:	e6aa8b99 e6ab8b9a 924a8c37 e6ac8c3a     ........7.J.:...
   1fd88:	e6ae8c3f e6ad8c41 93a48c46 e6af8c48     ?...A...F...H...
   1fd98:	964c8c4a e6b08c4c e6b18c4e e6b28c50     J.L.L...N...P...
   1fda8:	e6b38c55 93d88c5a 8fdb8c61 e6b48c62     U...Z...a...b...
   1fdb8:	8d8b8c6a 98ac8c6b e6b58c6c e6b68c78     j...k...l...x...
   1fdc8:	955e8c79 e6b78c7a e6bf8c7c e6b88c82     y.^.z...|.......
   1fdd8:	e6ba8c85 e6b98c89 e6bb8c8a 96658c8c     ..............e.
   1fde8:	e6bc8c8d e6bd8c8e e6be8c94 e6c08c98     ................
   1fdf8:	8a4c8c9d 92e58c9e 95898ca0 8de08ca1     ..L.............
   1fe08:	8d768ca2 956e8ca7 89dd8ca8 94cc8ca9     ..v...n.........
   1fe18:	e6c38caa 8ad18cab 90d38cac e6c28cad     ................
   1fe28:	e6c78cae 92998caf 96e18cb0 e6c58cb2     ................
   1fe38:	e6c68cb3 8b4d8cb4 e6c88cb6 94838cb7     ......M.........
   1fe48:	91dd8cb8 94ef8cbb 935c8cbc e6c48cbd     ..........\.....
   1fe58:	96668cbf 89ea8cc0 e6ca8cc1 98478cc2     ..f...........G.
   1fe68:	92c08cc3 98648cc4 8e918cc7 e6c98cc8     ......d.........
   1fe78:	91af8cca e6da8ccd 91478cce 93f68cd1     ..........G.....
   1fe88:	956f8cd3 e6cd8cda 8e5e8cdb 8e928cdc     ..o.......^.....
   1fe98:	8fdc8cde 94858ce0 8cab8ce2 e6cc8ce3     ................
   1fea8:	e6cb8ce4 958a8ce6 8ebf8cea 93718ced     ..............q.
   1feb8:	fbad8cf0 fbae8cf4 e6cf8cfa e6d08cfb     ................
   1fec8:	8d778cfc e6ce8cfd e6d18d04 e6d28d05     ..w.............
   1fed8:	e6d48d07 91a18d08 e6d38d0a 8ae48d0b     ................
   1fee8:	e6d68d0d e6d58d0f e6d78d10 fbaf8d12     ................
   1fef8:	e6d98d13 e6db8d14 e6dc8d16 90d48d64     ............d...
   1ff08:	8ecd8d66 e6dd8d67 8a718d6b e6de8d6d     f...g...k.q.m...
   1ff18:	91968d70 e6df8d71 e6e08d73 958b8d74     p...q...s...t...
   1ff28:	fbb08d76 8b4e8d77 e6e18d81 92b48d85     v...w.N.........
   1ff38:	897a8d8a e6e28d99 8eef8da3 90968da8     ..z.............
   1ff48:	91ab8db3 e6e58dba e6e48dbe e6e38dc2     ................
   1ff58:	e6eb8dcb e6e98dcc e6e68dcf e6e88dd6     ................
   1ff68:	e6e78dda e6ea8ddb 8b978ddd e6ee8ddf     ................
   1ff78:	90d58de1 e6ef8de3 8cd78de8 e6ec8dea     ................
   1ff88:	e6ed8deb 98488def 92b58df3 91488df5     ......H.......H.
   1ff98:	e6f08dfc e6f38dff e6f18e08 e6f28e09     ................
   1ffa8:	97788e0a 93a58e0f e6f68e10 e6f48e1d     ..x.............
   1ffb8:	e6f58e1e e6f78e1f e7488e2a e6fa8e30     ........*.H.0...
   1ffc8:	e6fb8e34 e6f98e35 e6f88e42 92fb8e44     4...5...B...D...
   1ffd8:	e7408e47 e7448e48 e7418e49 e6fc8e4a     G.@.H.D.I.A.J...
   1ffe8:	e7428e4c e7438e50 e74a8e55 e7458e59     L.B.P.C.U.J.Y.E.
   1fff8:	90d68e5f e7478e60 e7498e63 e7468e64     _...`.G.c.I.d.F.
   20008:	e74c8e72 8f528e74 e74b8e76 e74d8e7c     r.L.t.R.v.K.|.M.
   20018:	e74e8e81 e7518e84 e7508e85 e74f8e87     ..N...Q...P...O.
   20028:	e7538e8a e7528e8b 96f48e8d e7558e91     ..S...R.......U.
   20038:	e7548e93 e7568e94 e7578e99 e7598ea1     ..T...V...W...Y.
   20048:	e7588eaa 90678eab e75a8eac 8beb8eaf     ..X...g...Z.....
   20058:	e75b8eb0 e75d8eb1 e75e8ebe e75f8ec5     ..[...]...^..._.
   20068:	e75c8ec6 e7608ec8 8ed48eca e7618ecb     ..\...`.......a.
   20078:	8b4f8ecc 8c528ecd fbb28ecf 8cac8ed2     ..O...R.........
   20088:	e7628edb 93ee8edf 935d8ee2 e7638ee3     ..b.......]...c.
   20098:	e7668eeb 8eb28ef8 e7658efb e7648efc     ..f.......e...d.
   200a8:	8c798efd e7678efe 8a728f03 e7698f05     ..y...g...r...i.
   200b8:	8dda8f09 e7688f0a e7718f0c e76b8f12     ......h...q...k.
   200c8:	e76d8f13 95e38f14 e76a8f15 e76c8f19     ..m.......j...l.
   200d8:	e7708f1b e76e8f1c 8b508f1d e76f8f1f     ..p...n...P...o.
   200e8:	e7728f26 94798f29 97d68f2a 8f538f2f     &.r.).y.*.../.S.
   200f8:	e7738f33 97418f38 e7758f39 e7748f3b     3.s.8.A.9.u.;.t.
   20108:	e7788f3e 97608f3f e7778f42 8a8d8f44     >.x.?.`.B.w.D...
   20118:	e7768f45 e77b8f46 e77a8f49 e7798f4c     E.v.F.{.I.z.L.y.
   20128:	93518f4d e77c8f4e e77d8f57 e77e8f5c     M.Q.N.|.W.}.\.~.
   20138:	8d8c8f5f 8c448f61 e7808f62 e7818f63     _...a.D.b...c...
   20148:	e7828f64 90688f9b e7838f9c 8eab8f9e     d.....h.........
   20158:	e7848f9f e7858fa3 999f8fa7 999e8fa8     ................
   20168:	e7868fad e3908fae e7878faf 92438fb0     ..............C.
   20178:	904a8fb1 945f8fb2 e7888fb7 95d38fba     ..J..._.........
   20188:	92d28fbb 8d9e8fbc 92488fbf 89498fc2     ..........H...I.
   20198:	96988fc4 90768fc5 8c7d8fce 8bdf8fd1     ......v...}.....
   201a8:	95d48fd4 e7898fda e78b8fe2 e78a8fe5     ................
   201b8:	89de8fe6 93f48fe9 e78c8fea 94978feb     ................
   201c8:	93528fed e78d8fef 8f718ff0 e78f8ff4     ..R.......q.....
   201d8:	96c08ff7 e79e8ff8 e7918ff9 e7928ffa     ................
   201e8:	92c78ffd 91de9000 91979001 93a69003     ................
   201f8:	e7909005 8b749006 e799900b e796900d     ......t.........
   20208:	e7a3900e 93a7900f 92809010 e7939011     ................
   20218:	92fc9013 93729014 e7949015 e7989016     ......r.........
   20228:	90809017 94879019 92ca901a 90c0901d     ................
   20238:	e797901e 91ac901f 91a29020 e7959021     ........ ...!...
   20248:	88a79022 98419023 e79a9027 91df902e     "...#.A.'.......
   20258:	8f549031 90699032 e79c9035 e79b9036     1.T.2.i.5...6...
   20268:	88ed9038 e79d9039 954e903c e7a5903e     8...9...<.N.>...
   20278:	93d99041 908b9042 92789045 8bf69047     A...B...E.x.G...
   20288:	e7a49049 9756904a 895e904b 95d5904d     I...J.V.K.^.M...
   20298:	89df904e e79f904f e7a09050 e7a19051     N...O...P...Q...
   202a8:	e7a29052 93b99053 92429054 88e19055     R...S...T.B.U...
   202b8:	e7a69056 e7a79058 eaa19059 91bb905c     V...X...Y...\...
   202c8:	e7a8905e 89939060 916b9061 8cad9063     ^...`...a.k.c...
   202d8:	97799065 fbb59067 e7a99068 934b9069     e.y.g...h...i.K.
   202e8:	9198906d 8ed5906e e7aa906f e7ad9072     m...n...o...r...
   202f8:	8f859075 e7ab9076 914a9077 91499078     u...v...w.J.x.I.
   20308:	88e2907a 97c9907c e7af907d 94f0907f     z...|...}.......
   20318:	e7b19080 e7b09081 e7ae9082 e2849083     ................
   20328:	8ad29084 e78e9087 e7b39089 e7b2908a     ................
   20338:	e7b4908f 97579091 93df90a3 964d90a6     ......W.......M.
   20348:	e7b590a8 8ed790aa e7b690af e7b790b1     ................
   20358:	e7b890b5 934090b8 88e890c1 8d7890ca     ......@.......x.
   20368:	985990ce e7bc90db fbb690de 8c5390e1     ..Y...........S.
   20378:	e7b990e2 e7ba90e4 959490e8 8a7390ed     ..............s.
   20388:	975890f5 8bbd90f7 937390fd e7bd9102     ..X.......s.....
   20398:	e7be9112 fbb89115 e7bf9119 fbb99127     ............'...
   203a8:	9341912d e7c19130 e7c09132 93d19149     -.A.0...2...I...
   203b8:	e7c2914a 8f55914b 8ede914c 947a914d     J...K.U.L...M.z.
   203c8:	9291914e 8ef09152 908c9154 e7c39156     N...R...T...V...
   203d8:	e7c49158 907c9162 e7c59163 e7c69165     X...b.|.c...e...
   203e8:	e7c79169 978f916a 8f56916c e7c99172     i...j...l.V.r...
   203f8:	e7c89173 8d799175 8d939177 8e5f9178     s...u.y.w...x._.
   20408:	e7cc9182 8f869187 e7cb9189 e7ca918b     ................
   20418:	91e7918d 8ced9190 90c19192 94ae9197     ................
   20428:	8f58919c e7cd91a2 8fdd91a4 e7d091aa     ..X.............
   20438:	e7ce91ab e7cf91af e7d291b4 e7d191b5     ................
   20448:	8ff891b8 e7d391ba e7d491c0 e7d591c1     ................
   20458:	94ce91c6 8dd191c7 8edf91c8 e7d691c9     ................
   20468:	e7d791cb 97a291cc 8f6491cd 96ec91ce     ..........d.....
   20478:	97ca91cf e7d891d0 8be091d1 e7d991d6     ................
   20488:	fbbb91d7 934291d8 fbba91da e7dc91db     ......B.........
   20498:	8a9891dc 906a91dd fbbc91de e7da91df     ......j.........
   204a8:	e7db91e1 92de91e3 fbbf91e4 fbc091e5     ................
   204b8:	967491e6 8bfa91e7 fbbd91ed fbbe91ee     ..t.............
   204c8:	e7de91f5 e7df91f6 e7dd91fc e7e191ff     ................
   204d8:	fbc19206 fbc3920a 93dd920d 8a62920e     ..............b.
   204e8:	fbc29210 e7e59211 e7e29214 e7e49215     ................
   204f8:	e7e0921e e86e9229 e7e3922c 97e99234     ....).n.,...4...
   20508:	8cd89237 fbca9239 fbc4923a fbc6923c     7...9...:...<...
   20518:	e7ed923f fbc59240 93539244 e7e89245     ?...@...D.S.E...
   20528:	e7eb9248 e7e99249 e7ee924b fbc7924e     H...I...K...N...
   20538:	e7ef9250 fbc99251 e7e79257 fbc89259     P...Q...W...Y...
   20548:	e7f4925a 8994925b e7e6925e 94ab9262     Z...[...^...b...
   20558:	e7ea9264 8fde9266 fbcb9267 8d7a9271     d...f...g...q.z.
   20568:	fbcd9277 fbce9278 9667927e 8be29280     w...x...~.g.....
   20578:	8f659283 93ba9285 fa5f9288 914c9291     ..e......._...L.
   20588:	e7f29293 e7ec9295 e7f19296 96c19298     ................
   20598:	92b6929a e7f3929b e7f0929c fbcc92a7     ................
   205a8:	914b92ad e7f792b7 e7f692b9 e7f592cf     ..K.............
   205b8:	fbd292d0 964e92d2 fbd692d3 fbd492d5     ......N.........
   205c8:	fbd092d7 fbd192d9 fbd592e0 8f9b92e4     ................
   205d8:	fbcf92e7 e7f892e9 95dd92ea 897392ed     ..............s.
   205e8:	956592f2 929292f3 8b9892f8 fa6592f9     ..e...........e.
   205f8:	e7fa92fa fbd992fb 8d7c92fc fbdc92ff     ..........|.....
   20608:	fbde9302 8e4b9306 e7f9930f 908d9310     ......K.........
   20618:	908e9318 e8409319 e842931a fbdd931d     ......@...B.....
   20628:	fbdb931e 8ff99320 fbd89321 e8419322     .... ...!...".A.
   20638:	e8439323 fbd79325 8bd19326 95649328     #.C.%...&...(.d.
   20648:	8ee0932b 9842932c e7fc932e 8df6932f     +...,.B...../...
   20658:	985e9332 e8459335 e844933a e846933b     2.^.5.E.:.D.;.F.
   20668:	e7fb9344 fa5e9348 93e7934b 9374934d     D...H.^.K...M.t.
   20678:	92d59354 e84b9356 fbe09357 9262935b     T...V.K.W...[.b.
   20688:	e847935c e8489360 8c4c936c e84a936e     \.G.`.H.l.L.n.J.
   20698:	fbdf9370 8cae9375 e849937c 8fdf937e     p...u...|.I.~...
   206a8:	8a99938c e84f9394 8dbd9396 91999397     ......O.........
   206b8:	92c8939a fbe193a4 8a5a93a7 e84d93ac     ..........Z...M.
   206c8:	e84e93ad 92c193ae e84c93b0 e85093b9     ..N.......L...P.
   206d8:	e85693c3 fbe293c6 e85993c8 e85893d0     ..V.......Y...X.
   206e8:	934c93d1 e85193d6 e85293d7 e85593d8     ..L...Q...R...U.
   206f8:	e85793dd fbe393de 8bbe93e1 e85a93e4     ..W...........Z.
   20708:	e85493e5 e85393e8 fbe493f8 e85e9403     ..T...S.......^.
   20718:	e85f9407 e8609410 e85d9413 e85c9414     .._...`...]...\.
   20728:	8fe09418 93a89419 e85b941a e8649421     ..........[.!.d.
   20738:	e862942b fbe59431 e8639435 e8619436     +.b.1...5.c.6.a.
   20748:	91f69438 e865943a e8669441 e8689444     8...:.e.A.f.D.h.
   20758:	fbe69445 fbe79448 8ad39451 e8679452     E...H...Q...R.g.
   20768:	96f89453 e873945a e869945b e86c945e     S...Z.s.[.i.^.l.
   20778:	e86a9460 e86b9462 e86d946a e86f9470     `.j.b.k.j.m.p.o.
   20788:	e8709475 e8719477 e874947c e872947d     u.p.w.q.|.t.}.r.
   20798:	e875947e e877947f e8769481 92b79577     ~.u...w...v.w...
   207a8:	96e59580 e8789582 914d9583 e8799587     ......x...M...y.
   207b8:	95c29589 e87a958a 8a4a958b 895b958f     ......z...J...[.
   207c8:	8ad59591 fbe89592 8ad49593 e87b9594     ..............{.
   207d8:	e87c9596 e87d9598 e87e9599 e88095a0     ..|...}...~.....
   207e8:	8ad695a2 8a7495a3 8d7d95a4 94b495a5     ......t...}.....
   207f8:	e88295a7 e88195a8 e88395ad 897b95b2     ..............{.
   20808:	e88695b9 e88595bb e88495bc e88795be     ................
   20818:	e88a95c3 88c595c7 e88895ca e88c95cc     ................
   20828:	e88b95cd e88e95d4 e88d95d5 e88f95d6     ................
   20838:	93ac95d8 e89095dc e89195e1 e89395e2     ................
   20848:	e89295e5 958c961c e8949621 e8959628     ........!...(...
   20858:	8de3962a e896962e e897962f 96689632     *......./...2.h.
   20868:	916a963b 88a2963f 91c99640 e8989642     ;.j.?...@...B...
   20878:	958d9644 e89b964b e899964c 8d7e964d     D...K...L...M.~.
   20888:	e89a964f 8cc09650 95c3965b e89d965c     O...P...[...\...
   20898:	e89f965d e89e965e e8a0965f 89409662     ]...^..._...b.@.
   208a8:	90779663 8f9c9664 8ad79665 e8a19666     c.w.d...e...f...
   208b8:	9486966a e8a3966c 89419670 e8a29672     j...l...p.A.r...
   208c8:	92c29673 97cb9675 93a99676 e89c9677     s...u...v...w...
   208d8:	97a49678 8caf967a 977a967d 8bf79685     x...z...}.z.....
   208e8:	97b29686 8c479688 91e0968a e440968b     ......G.......@.
   208f8:	e8a4968d 8a4b968e 908f968f 8a759694     ......K.......u.
   20908:	e8a69695 e8a79697 e8a59698 8c849699     ................
   20918:	8ddb969b 8fe1969c fbeb969d 894296a0     ..............B.
   20928:	97d796a3 e8a996a7 e7ac96a8 e8a896aa     ................
   20938:	fbec96af e8ac96b0 e8aa96b1 e8ab96b2     ................
   20948:	e8ad96b4 e8ae96b6 97ea96b7 e8af96b8     ................
   20958:	e8b096b9 90c796bb 94b996bc 909d96c0     ................
   20968:	8ae596c1 975996c4 89eb96c5 8f5796c6     ......Y.......W.
   20978:	8cd996c7 e8b396c9 e8b296cb 8e9396cc     ................
   20988:	e8b496cd e8b196ce 8e4796d1 e8b896d5     ..........G.....
   20998:	e5ab96d6 99d496d9 909796db e8b696dc     ................
   209a8:	97a396e2 93ef96e3 894a96e8 90e196ea     ..........J.....
   209b8:	8eb496eb 95b596f0 895f96f2 97eb96f6     .........._.....
   209c8:	978b96f7 e8b996f9 936496fb 8ef99700     ..........d.....
   209d8:	e8ba9704 e8bb9706 906b9707 e8bc9708     ..........k.....
   209e8:	97ec970a e8b7970d e8be970e e8c0970f     ................
   209f8:	e8bf9711 e8bd9713 e8c19716 e8c29719     ................
   20a08:	919a971c 89e0971e e8c39724 96b69727     ........$...'...
   20a18:	e8c4972a e8c59730 98499732 fbed9733     *...0...2.I.3...
   20a28:	9e509738 e8c69739 fbee973b e8c7973d     8.P.9...;...=...
   20a38:	e8c8973e e8cc9742 fbef9743 e8c99744     >...B...C...D...
   20a48:	e8ca9746 e8cb9748 e8cd9749 fbf0974d     F...H...I...M...
   20a58:	fbf1974f fbf29751 90c29752 fbf39755     O...Q...R...U...
   20a68:	96f59756 90c39759 e8ce975c 94f1975e     V...Y...\...^...
   20a78:	e8cf9760 ea729761 96ca9762 e8d09764     `...a.r.b...d...
   20a88:	e8d19766 e8d29768 8a769769 e8d4976b     f...h...i.v.k...
   20a98:	9078976d e8d59771 8c439774 e8d69779     m.x.q...t.C.y...
   20aa8:	e8da977a e8d8977c e8d99781 8a939784     z...|...........
   20ab8:	e8d79785 e8db9786 e8dc978b 88c6978d     ................
   20ac8:	e8dd978f e8de9790 8fe29798 e8df979c     ................
   20ad8:	8b6697a0 e8e297a3 e8e197a6 e8e097a8     ..f.............
   20ae8:	e69197ab 95da97ad e8e397b3 e8e497b4     ................
   20af8:	e8e597c3 e8e697c6 e8e797c8 e8e897cb     ................
   20b08:	8ad897d3 e8e997dc e8ea97ed 944297ee     ..............B.
   20b18:	e8ec97f2 89b997f3 e8ef97f5 e8ee97f6     ................
   20b28:	894397fb 8bbf97ff 95c59801 92b89802     ..C.............
   20b38:	8da09803 8d809805 8f879806 907b9808     ..............{.
   20b48:	e8f1980c e8f0980f 97619810 8ae69811     ..........a.....
   20b58:	94d09812 93da9813 909c9817 97cc9818     ................
   20b68:	8c7a981a e8f49821 e8f39824 966a982c     ..z.!...$...,.j.
   20b78:	93aa982d 896f9834 e8f59837 e8f29838     -...4.o.7...8...
   20b88:	9570983b 978a983c e8f6983d e8f79846     ;.p.<...=...F...
   20b98:	e8f9984b 91e8984c 8a7a984d 8a7b984e     K...L...M.z.N.{.
   20ba8:	e8f8984f 8ae79854 8cb09855 fbf49857     O...T...U...W...
   20bb8:	8ae89858 935e985b 97de985e fbf59865     X...[.^.^...e...
   20bc8:	8cda9867 e8fa986b e8fb986f e8fc9870     g...k...o...p...
   20bd8:	e9409871 e9429873 e9419874 959798a8     q.@.s.B.t.A.....
   20be8:	e94398aa e94498af e94598b1 e94698b6     ..C...D...E...F.
   20bf8:	e94898c3 e94798c4 e94998c6 94f298db     ..H...G...I.....
   20c08:	e3ca98dc 904898df 8b5198e2 e94a98e9     ......H...Q...J.
   20c18:	e94b98eb 99aa98ed 9f5a98ee 94d198ef     ..K.......Z.....
   20c28:	88f998f2 88b998f4 8e9498fc 964f98fd     ..............O.
   20c38:	8ffc98fe e94c9903 96dd9905 e94d9909     ......L.......M.
   20c48:	977b990a 8961990c 8e609910 e94e9912     ..{...a...`...N.
   20c58:	89ec9913 e94f9914 e9509918 e952991d     ......O...P...R.
   20c68:	e953991e e9559920 e9519921 e9549924     ..S. .U.!.Q.$.T.
   20c78:	fbf89927 8ad99928 e956992c e957992e     '...(...,.V...W.
   20c88:	e958993d e959993e e95a9942 e95c9945     =.X.>.Y.B.Z.E.\.
   20c98:	e95b9949 e95e994b e961994c e95d9950     I.[.K.^.L.a.P.].
   20ca8:	e95f9951 e9609952 e9629955 8bc09957     Q._.R.`.U.b.W...
   20cb8:	8ef19996 e9639997 e9649998 8d819999     ......c...d.....
   20cc8:	fbfa999e e96599a5 8a5d99a8 946e99ac     ......e...]...n.
   20cd8:	e96699ad e96799ae 927999b3 93e999b4     ..f...g...y.....
   20ce8:	e96899bc 949d99c1 91ca99c4 897799c5     ..h...........w.
   20cf8:	8bec99c6 8bed99c8 929399d0 e96d99d1     ..............m.
   20d08:	8bee99d2 89ed99d5 e96c99d8 e96a99db     ..........l...j.
   20d18:	e96b99dd e96999df e97799e2 e96e99ed     ..k...i...w...n.
   20d28:	e96f99ee e97099f1 e97199f2 e97399f8     ..o...p...q...s.
   20d38:	e97299fb 8f7899ff e9749a01 e9769a05     ..r...x...t...v.
   20d48:	8b529a0e e9759a0f 919b9a12 8cb19a13     ..R...u.........
   20d58:	e9789a19 91cb9a28 e9799a2b 93ab9a30     ..x.(...+.y.0...
   20d68:	e97a9a37 e9809a3e e97d9a40 e97c9a42     7.z.>...@.}.B.|.
   20d78:	e97e9a43 e97b9a45 e9829a4d fbfb9a4e     C.~.E.{.M...N...
   20d88:	e9819a55 e9849a57 8bc19a5a e9839a5b     U...W...Z...[...
   20d98:	e9859a5f e9869a62 e9889a64 e9879a65     _...b...d...e...
   20da8:	e9899a69 e98b9a6a e98a9a6b 8d9c9aa8     i...j...k.......
   20db8:	e98c9aad e98d9ab0 8a5b9ab8 e98e9abc     ..........[.....
   20dc8:	e98f9ac0 90919ac4 e9909acf e9919ad1     ................
   20dd8:	e9929ad3 e9939ad4 8d829ad8 fbfc9ad9     ................
   20de8:	fc409adc e9949ade e9959adf e9969ae2     ..@.............
   20df8:	e9979ae3 e9989ae6 94af9aea e99a9aeb     ................
   20e08:	95459aed e99b9aee e9999aef e99d9af1     ..E.............
   20e18:	e99c9af4 e99e9af7 e99f9afb e9a09b06     ................
   20e28:	e9a19b18 e9a29b1a e9a39b1f e9a49b22     ............"...
   20e38:	e9a59b23 e9a69b25 e9a79b27 e9a89b28     #...%...'...(...
   20e48:	e9a99b29 e9aa9b2a e9ab9b2e e9ac9b2f     )...*......./...
   20e58:	9f549b31 e9ad9b32 e2f69b3b 8b539b3c     1.T.2...;...<.S.
   20e68:	8a409b41 8db09b42 e9af9b43 e9ae9b44     A.@.B...C...D...
   20e78:	96a39b45 e9b19b4d e9b29b4e e9b09b4f     E...M...N...O...
   20e88:	e9b39b51 96829b54 e9b49b58 8b9b9b5a     Q...T...X...Z...
   20e98:	98449b6f fc429b72 e9b59b74 fc419b75     o.D.r.B.t...u.A.
   20ea8:	e9b79b83 88bc9b8e fc439b8f e9b89b91     ..........C.....
   20eb8:	95a99b92 e9b69b93 e9b99b96 e9ba9b97     ................
   20ec8:	e9bb9b9f e9bc9ba0 e9bd9ba8 968e9baa     ................
   20ed8:	8e4c9bab 8df89bad 914e9bae fc449bb1     ..L.......N...D.
   20ee8:	e9be9bb4 e9c19bb9 fc459bbb e9bf9bc0     ..........E.....
   20ef8:	e9c29bc6 8cef9bc9 e9c09bca e9c39bcf     ................
   20f08:	e9c49bd1 e9c59bd2 e9c99bd4 8e499bd6     ..............I.
   20f18:	91e29bdb e9ca9be1 e9c79be2 e9c69be3     ................
   20f28:	e9c89be4 8c7e9be8 e9ce9bf0 e9cd9bf1     ......~.........
   20f38:	e9cc9bf2 88b19bf5 fc469c00 e9d89c04     ..........F.....
   20f48:	e9d49c06 e9d59c08 e9d19c09 e9d79c0a     ................
   20f58:	e9d39c0c 8a829c0d 986b9c10 e9d69c12     ..........k.....
   20f68:	e9d29c13 e9d09c14 e9cf9c15 e9da9c1b     ................
   20f78:	e9dd9c21 e9dc9c24 e9db9c25 95689c2d     !...$...%...-.h.
   20f88:	e9d99c2e 88f19c2f e9de9c30 e9e09c32     ..../...0...2...
   20f98:	8a8f9c39 e9cb9c3a 89569c3b e9e29c3e     9...:...;.V.>...
   20fa8:	e9e19c46 e9df9c47 924c9c48 96909c52     F...G...H.L.R...
   20fb8:	97d89c57 e9e39c5a e9e49c60 e9e59c67     W...Z...`...g...
   20fc8:	e9e69c76 e9e79c78 92b99ce5 e9e89ce7     v...x...........
   20fd8:	94b59ce9 e9ed9ceb e9e99cec e9ea9cf0     ................
   20fe8:	96509cf3 96c29cf4 93ce9cf6 e9ee9d03     ..P.............
   20ff8:	e9ef9d06 93bc9d07 e9ec9d08 e9eb9d09     ................
   21008:	89a89d0e e9f79d12 e9f69d15 89959d1b     ................
   21018:	e9f49d1f e9f39d23 e9f19d26 8a9b9d28     ....#...&...(...
   21028:	e9f09d2a 8eb09d2b 89a79d2c 8d839d3b     *...+...,...;...
   21038:	e9fa9d3e e9f99d3f e9f89d41 e9f59d44     >...?...A...D...
   21048:	e9fb9d46 e9fc9d48 ea449d50 ea439d51     F...H...P.D.Q.C.
   21058:	ea459d59 894c9d5c ea409d5d ea419d5e     Y.E.\.L.].@.^.A.
   21068:	8d949d60 96b79d61 ea429d64 fc489d6b     `...a...d.B.k.H.
   21078:	96519d6c ea4a9d6f fc479d70 ea469d72     l.Q.o.J.p.G.r.F.
   21088:	ea4b9d7a ea489d87 ea479d89 8c7b9d8f     z.K...H...G...{.
   21098:	ea4c9d9a ea4d9da4 ea4e9da9 ea499dab     ..L...M...N...I.
   210a8:	e9f29daf ea4f9db2 92df9db4 ea539db8     ......O.......S.
   210b8:	ea549dba ea529dbb ea519dc1 ea579dc2     ..T...R...Q...W.
   210c8:	ea509dc4 ea559dc6 ea569dcf ea599dd3     ..P...U...V...Y.
   210d8:	ea589dd9 ea5b9de6 ea5c9ded ea5d9def     ..X...[...\...].
   210e8:	98689df2 ea5a9df8 91e99df9 8deb9dfa     ..h...Z.........
   210f8:	ea5e9dfd fc4a9e19 ea5f9e1a ea609e1b     ..^...J..._...`.
   21108:	ea619e1e ea629e75 8cb29e78 ea639e79     ..a.u.b.x...y.c.
   21118:	ea649e7d 8ead9e7f ea659e81 ea669e88     }.d.......e...f.
   21128:	ea679e8b ea689e8c ea6b9e91 ea699e92     ..g...h...k...i.
   21138:	985b9e93 ea6a9e95 97ed9e97 ea6c9e9d     ..[...j.......l.
   21148:	97d99e9f ea6d9ea5 949e9ea6 ea6e9ea9     ......m.......n.
   21158:	ea709eaa ea719ead ea6f9eb8 8d8d9eb9     ..p...q...o.....
   21168:	96cb9eba 96839ebb 9bf59ebc 9f809ebe     ................
   21178:	969b9ebf 89a99ec4 ea739ecc 8b6f9ecd     ..........s...o.
   21188:	ea749ece ea759ecf ea769ed0 fc4b9ed1     ..t...u...v...K.
   21198:	8d959ed2 ea779ed4 e0d29ed8 96d99ed9     ......w.........
   211a8:	91e19edb ea789edc ea7a9edd ea799ede     ......x...z...y.
   211b8:	ea7b9ee0 ea7c9ee5 ea7d9ee8 ea7e9eef     ..{...|...}...~.
   211c8:	ea809ef4 ea819ef6 ea829ef7 ea839ef9     ................
   211d8:	ea849efb ea859efc ea869efd ea879f07     ................
   211e8:	ea889f08 93439f0e 8cdb9f13 ea8a9f15     ......C.........
   211f8:	916c9f20 ea8b9f21 ea8c9f2c 95409f3b      .l.!...,...;.@.
   21208:	ea8d9f3e ea8e9f4a e2569f4b e6d89f4e     >...J...K.V.N...
   21218:	e8eb9f4f ea8f9f52 ea909f54 ea929f5f     O...R...T..._...
   21228:	ea939f60 ea949f61 97ee9f62 ea919f63     `...a...b...c...
   21238:	ea959f66 ea969f67 ea989f6a ea979f6c     f...g...j...l...
   21248:	ea9a9f72 ea9b9f76 ea999f77 97b49f8d     r...v...w.......
   21258:	ea9c9f95 ea9d9f9c e2739f9d ea9e9fa0     ..........s.....
   21268:	fae0f929 fbe9f9dc fa90fa0e fa9bfa0f     )...............
   21278:	fa9cfa10 fab1fa11 fad8fa12 fae8fa13     ................
   21288:	faeafa14 fb58fa15 fb5efa16 fb75fa17     ......X...^...u.
   21298:	fb7dfa18 fb7efa19 fb80fa1a fb82fa1b     ..}...~.........
   212a8:	fb86fa1c fb89fa1d fb92fa1e fb9dfa1f     ................
   212b8:	fb9ffa20 fba0fa21 fba9fa22 fbb1fa23      ...!..."...#...
   212c8:	fbb3fa24 fbb4fa25 fbb7fa26 fbd3fa27     $...%...&...'...
   212d8:	fbdafa28 fbeafa29 fbf6fa2a fbf7fa2b     (...)...*...+...
   212e8:	fbf9fa2c fc49fa2d 8149ff01 fa57ff02     ,...-.I...I...W.
   212f8:	8194ff03 8190ff04 8193ff05 8195ff06     ................
   21308:	fa56ff07 8169ff08 816aff09 8196ff0a     ..V...i...j.....
   21318:	817bff0b 8143ff0c 817cff0d 8144ff0e     ..{...C...|...D.
   21328:	815eff0f 824fff10 8250ff11 8251ff12     ..^...O...P...Q.
   21338:	8252ff13 8253ff14 8254ff15 8255ff16     ..R...S...T...U.
   21348:	8256ff17 8257ff18 8258ff19 8146ff1a     ..V...W...X...F.
   21358:	8147ff1b 8183ff1c 8181ff1d 8184ff1e     ..G.............
   21368:	8148ff1f 8197ff20 8260ff21 8261ff22     ..H. ...!.`.".a.
   21378:	8262ff23 8263ff24 8264ff25 8265ff26     #.b.$.c.%.d.&.e.
   21388:	8266ff27 8267ff28 8268ff29 8269ff2a     '.f.(.g.).h.*.i.
   21398:	826aff2b 826bff2c 826cff2d 826dff2e     +.j.,.k.-.l...m.
   213a8:	826eff2f 826fff30 8270ff31 8271ff32     /.n.0.o.1.p.2.q.
   213b8:	8272ff33 8273ff34 8274ff35 8275ff36     3.r.4.s.5.t.6.u.
   213c8:	8276ff37 8277ff38 8278ff39 8279ff3a     7.v.8.w.9.x.:.y.
   213d8:	816dff3b 815fff3c 816eff3d 814fff3e     ;.m.<._.=.n.>.O.
   213e8:	8151ff3f 814dff40 8281ff41 8282ff42     ?.Q.@.M.A...B...
   213f8:	8283ff43 8284ff44 8285ff45 8286ff46     C...D...E...F...
   21408:	8287ff47 8288ff48 8289ff49 828aff4a     G...H...I...J...
   21418:	828bff4b 828cff4c 828dff4d 828eff4e     K...L...M...N...
   21428:	828fff4f 8290ff50 8291ff51 8292ff52     O...P...Q...R...
   21438:	8293ff53 8294ff54 8295ff55 8296ff56     S...T...U...V...
   21448:	8297ff57 8298ff58 8299ff59 829aff5a     W...X...Y...Z...
   21458:	816fff5b 8162ff5c 8170ff5d 8160ff5e     [.o.\.b.].p.^.`.
   21468:	00a1ff61 00a2ff62 00a3ff63 00a4ff64     a...b...c...d...
   21478:	00a5ff65 00a6ff66 00a7ff67 00a8ff68     e...f...g...h...
   21488:	00a9ff69 00aaff6a 00abff6b 00acff6c     i...j...k...l...
   21498:	00adff6d 00aeff6e 00afff6f 00b0ff70     m...n...o...p...
   214a8:	00b1ff71 00b2ff72 00b3ff73 00b4ff74     q...r...s...t...
   214b8:	00b5ff75 00b6ff76 00b7ff77 00b8ff78     u...v...w...x...
   214c8:	00b9ff79 00baff7a 00bbff7b 00bcff7c     y...z...{...|...
   214d8:	00bdff7d 00beff7e 00bfff7f 00c0ff80     }...~...........
   214e8:	00c1ff81 00c2ff82 00c3ff83 00c4ff84     ................
   214f8:	00c5ff85 00c6ff86 00c7ff87 00c8ff88     ................
   21508:	00c9ff89 00caff8a 00cbff8b 00ccff8c     ................
   21518:	00cdff8d 00ceff8e 00cfff8f 00d0ff90     ................
   21528:	00d1ff91 00d2ff92 00d3ff93 00d4ff94     ................
   21538:	00d5ff95 00d6ff96 00d7ff97 00d8ff98     ................
   21548:	00d9ff99 00daff9a 00dbff9b 00dcff9c     ................
   21558:	00ddff9d 00deff9e 00dfff9f 8191ffe0     ................
   21568:	8192ffe1 81caffe2 8150ffe3 fa55ffe4     ..........P...U.
   21578:	818fffe5 00000000                       ........

00021580 <oem2uni932>:
   21580:	ff6100a1 ff6200a2 ff6300a3 ff6400a4     ..a...b...c...d.
   21590:	ff6500a5 ff6600a6 ff6700a7 ff6800a8     ..e...f...g...h.
   215a0:	ff6900a9 ff6a00aa ff6b00ab ff6c00ac     ..i...j...k...l.
   215b0:	ff6d00ad ff6e00ae ff6f00af ff7000b0     ..m...n...o...p.
   215c0:	ff7100b1 ff7200b2 ff7300b3 ff7400b4     ..q...r...s...t.
   215d0:	ff7500b5 ff7600b6 ff7700b7 ff7800b8     ..u...v...w...x.
   215e0:	ff7900b9 ff7a00ba ff7b00bb ff7c00bc     ..y...z...{...|.
   215f0:	ff7d00bd ff7e00be ff7f00bf ff8000c0     ..}...~.........
   21600:	ff8100c1 ff8200c2 ff8300c3 ff8400c4     ................
   21610:	ff8500c5 ff8600c6 ff8700c7 ff8800c8     ................
   21620:	ff8900c9 ff8a00ca ff8b00cb ff8c00cc     ................
   21630:	ff8d00cd ff8e00ce ff8f00cf ff9000d0     ................
   21640:	ff9100d1 ff9200d2 ff9300d3 ff9400d4     ................
   21650:	ff9500d5 ff9600d6 ff9700d7 ff9800d8     ................
   21660:	ff9900d9 ff9a00da ff9b00db ff9c00dc     ................
   21670:	ff9d00dd ff9e00de ff9f00df 30008140     ............@..0
   21680:	30018141 30028142 ff0c8143 ff0e8144     A..0B..0C...D...
   21690:	30fb8145 ff1a8146 ff1b8147 ff1f8148     E..0F...G...H...
   216a0:	ff018149 309b814a 309c814b 00b4814c     I...J..0K..0L...
   216b0:	ff40814d 00a8814e ff3e814f ffe38150     M.@.N...O.>.P...
   216c0:	ff3f8151 30fd8152 30fe8153 309d8154     Q.?.R..0S..0T..0
   216d0:	309e8155 30038156 4edd8157 30058158     U..0V..0W..NX..0
   216e0:	30068159 3007815a 30fc815b 2015815c     Y..0Z..0[..0\.. 
   216f0:	2010815d ff0f815e ff3c815f ff5e8160     ].. ^..._.<.`.^.
   21700:	22258161 ff5c8162 20268163 20258164     a.%"b.\.c.& d.% 
   21710:	20188165 20198166 201c8167 201d8168     e.. f.. g.. h.. 
   21720:	ff088169 ff09816a 3014816b 3015816c     i...j...k..0l..0
   21730:	ff3b816d ff3d816e ff5b816f ff5d8170     m.;.n.=.o.[.p.].
   21740:	30088171 30098172 300a8173 300b8174     q..0r..0s..0t..0
   21750:	300c8175 300d8176 300e8177 300f8178     u..0v..0w..0x..0
   21760:	30108179 3011817a ff0b817b ff0d817c     y..0z..0{...|...
   21770:	00b1817d 00d7817e 00f78180 ff1d8181     }...~...........
   21780:	22608182 ff1c8183 ff1e8184 22668185     ..`"..........f"
   21790:	22678186 221e8187 22348188 26428189     ..g"..."..4"..B&
   217a0:	2640818a 00b0818b 2032818c 2033818d     ..@&......2 ..3 
   217b0:	2103818e ffe5818f ff048190 ffe08191     ...!............
   217c0:	ffe18192 ff058193 ff038194 ff068195     ................
   217d0:	ff0a8196 ff208197 00a78198 26068199     ...... ........&
   217e0:	2605819a 25cb819b 25cf819c 25ce819d     ...&...%...%...%
   217f0:	25c7819e 25c6819f 25a181a0 25a081a1     ...%...%...%...%
   21800:	25b381a2 25b281a3 25bd81a4 25bc81a5     ...%...%...%...%
   21810:	203b81a6 301281a7 219281a8 219081a9     ..; ...0...!...!
   21820:	219181aa 219381ab 301381ac 220881b8     ...!...!...0..."
   21830:	220b81b9 228681ba 228781bb 228281bc     ..."..."..."..."
   21840:	228381bd 222a81be 222981bf 222781c8     ..."..*"..)"..'"
   21850:	222881c9 ffe281ca 21d281cb 21d481cc     ..(".......!...!
   21860:	220081cd 220381ce 222081da 22a581db     ..."...".. "..."
   21870:	231281dc 220281dd 220781de 226181df     ...#..."..."..a"
   21880:	225281e0 226a81e1 226b81e2 221a81e3     ..R"..j"..k"..."
   21890:	223d81e4 221d81e5 223581e6 222b81e7     ..="..."..5"..+"
   218a0:	222c81e8 212b81f0 203081f1 266f81f2     ..,"..+!..0 ..o&
   218b0:	266d81f3 266a81f4 202081f5 202181f6     ..m&..j&..  ..! 
   218c0:	00b681f7 25ef81fc ff10824f ff118250     .......%O...P...
   218d0:	ff128251 ff138252 ff148253 ff158254     Q...R...S...T...
   218e0:	ff168255 ff178256 ff188257 ff198258     U...V...W...X...
   218f0:	ff218260 ff228261 ff238262 ff248263     `.!.a.".b.#.c.$.
   21900:	ff258264 ff268265 ff278266 ff288267     d.%.e.&.f.'.g.(.
   21910:	ff298268 ff2a8269 ff2b826a ff2c826b     h.).i.*.j.+.k.,.
   21920:	ff2d826c ff2e826d ff2f826e ff30826f     l.-.m...n./.o.0.
   21930:	ff318270 ff328271 ff338272 ff348273     p.1.q.2.r.3.s.4.
   21940:	ff358274 ff368275 ff378276 ff388277     t.5.u.6.v.7.w.8.
   21950:	ff398278 ff3a8279 ff418281 ff428282     x.9.y.:...A...B.
   21960:	ff438283 ff448284 ff458285 ff468286     ..C...D...E...F.
   21970:	ff478287 ff488288 ff498289 ff4a828a     ..G...H...I...J.
   21980:	ff4b828b ff4c828c ff4d828d ff4e828e     ..K...L...M...N.
   21990:	ff4f828f ff508290 ff518291 ff528292     ..O...P...Q...R.
   219a0:	ff538293 ff548294 ff558295 ff568296     ..S...T...U...V.
   219b0:	ff578297 ff588298 ff598299 ff5a829a     ..W...X...Y...Z.
   219c0:	3041829f 304282a0 304382a1 304482a2     ..A0..B0..C0..D0
   219d0:	304582a3 304682a4 304782a5 304882a6     ..E0..F0..G0..H0
   219e0:	304982a7 304a82a8 304b82a9 304c82aa     ..I0..J0..K0..L0
   219f0:	304d82ab 304e82ac 304f82ad 305082ae     ..M0..N0..O0..P0
   21a00:	305182af 305282b0 305382b1 305482b2     ..Q0..R0..S0..T0
   21a10:	305582b3 305682b4 305782b5 305882b6     ..U0..V0..W0..X0
   21a20:	305982b7 305a82b8 305b82b9 305c82ba     ..Y0..Z0..[0..\0
   21a30:	305d82bb 305e82bc 305f82bd 306082be     ..]0..^0.._0..`0
   21a40:	306182bf 306282c0 306382c1 306482c2     ..a0..b0..c0..d0
   21a50:	306582c3 306682c4 306782c5 306882c6     ..e0..f0..g0..h0
   21a60:	306982c7 306a82c8 306b82c9 306c82ca     ..i0..j0..k0..l0
   21a70:	306d82cb 306e82cc 306f82cd 307082ce     ..m0..n0..o0..p0
   21a80:	307182cf 307282d0 307382d1 307482d2     ..q0..r0..s0..t0
   21a90:	307582d3 307682d4 307782d5 307882d6     ..u0..v0..w0..x0
   21aa0:	307982d7 307a82d8 307b82d9 307c82da     ..y0..z0..{0..|0
   21ab0:	307d82db 307e82dc 307f82dd 308082de     ..}0..~0...0...0
   21ac0:	308182df 308282e0 308382e1 308482e2     ...0...0...0...0
   21ad0:	308582e3 308682e4 308782e5 308882e6     ...0...0...0...0
   21ae0:	308982e7 308a82e8 308b82e9 308c82ea     ...0...0...0...0
   21af0:	308d82eb 308e82ec 308f82ed 309082ee     ...0...0...0...0
   21b00:	309182ef 309282f0 309382f1 30a18340     ...0...0...0@..0
   21b10:	30a28341 30a38342 30a48343 30a58344     A..0B..0C..0D..0
   21b20:	30a68345 30a78346 30a88347 30a98348     E..0F..0G..0H..0
   21b30:	30aa8349 30ab834a 30ac834b 30ad834c     I..0J..0K..0L..0
   21b40:	30ae834d 30af834e 30b0834f 30b18350     M..0N..0O..0P..0
   21b50:	30b28351 30b38352 30b48353 30b58354     Q..0R..0S..0T..0
   21b60:	30b68355 30b78356 30b88357 30b98358     U..0V..0W..0X..0
   21b70:	30ba8359 30bb835a 30bc835b 30bd835c     Y..0Z..0[..0\..0
   21b80:	30be835d 30bf835e 30c0835f 30c18360     ]..0^..0_..0`..0
   21b90:	30c28361 30c38362 30c48363 30c58364     a..0b..0c..0d..0
   21ba0:	30c68365 30c78366 30c88367 30c98368     e..0f..0g..0h..0
   21bb0:	30ca8369 30cb836a 30cc836b 30cd836c     i..0j..0k..0l..0
   21bc0:	30ce836d 30cf836e 30d0836f 30d18370     m..0n..0o..0p..0
   21bd0:	30d28371 30d38372 30d48373 30d58374     q..0r..0s..0t..0
   21be0:	30d68375 30d78376 30d88377 30d98378     u..0v..0w..0x..0
   21bf0:	30da8379 30db837a 30dc837b 30dd837c     y..0z..0{..0|..0
   21c00:	30de837d 30df837e 30e08380 30e18381     }..0~..0...0...0
   21c10:	30e28382 30e38383 30e48384 30e58385     ...0...0...0...0
   21c20:	30e68386 30e78387 30e88388 30e98389     ...0...0...0...0
   21c30:	30ea838a 30eb838b 30ec838c 30ed838d     ...0...0...0...0
   21c40:	30ee838e 30ef838f 30f08390 30f18391     ...0...0...0...0
   21c50:	30f28392 30f38393 30f48394 30f58395     ...0...0...0...0
   21c60:	30f68396 0391839f 039283a0 039383a1     ...0............
   21c70:	039483a2 039583a3 039683a4 039783a5     ................
   21c80:	039883a6 039983a7 039a83a8 039b83a9     ................
   21c90:	039c83aa 039d83ab 039e83ac 039f83ad     ................
   21ca0:	03a083ae 03a183af 03a383b0 03a483b1     ................
   21cb0:	03a583b2 03a683b3 03a783b4 03a883b5     ................
   21cc0:	03a983b6 03b183bf 03b283c0 03b383c1     ................
   21cd0:	03b483c2 03b583c3 03b683c4 03b783c5     ................
   21ce0:	03b883c6 03b983c7 03ba83c8 03bb83c9     ................
   21cf0:	03bc83ca 03bd83cb 03be83cc 03bf83cd     ................
   21d00:	03c083ce 03c183cf 03c383d0 03c483d1     ................
   21d10:	03c583d2 03c683d3 03c783d4 03c883d5     ................
   21d20:	03c983d6 04108440 04118441 04128442     ....@...A...B...
   21d30:	04138443 04148444 04158445 04018446     C...D...E...F...
   21d40:	04168447 04178448 04188449 0419844a     G...H...I...J...
   21d50:	041a844b 041b844c 041c844d 041d844e     K...L...M...N...
   21d60:	041e844f 041f8450 04208451 04218452     O...P...Q. .R.!.
   21d70:	04228453 04238454 04248455 04258456     S.".T.#.U.$.V.%.
   21d80:	04268457 04278458 04288459 0429845a     W.&.X.'.Y.(.Z.).
   21d90:	042a845b 042b845c 042c845d 042d845e     [.*.\.+.].,.^.-.
   21da0:	042e845f 042f8460 04308470 04318471     _...`./.p.0.q.1.
   21db0:	04328472 04338473 04348474 04358475     r.2.s.3.t.4.u.5.
   21dc0:	04518476 04368477 04378478 04388479     v.Q.w.6.x.7.y.8.
   21dd0:	0439847a 043a847b 043b847c 043c847d     z.9.{.:.|.;.}.<.
   21de0:	043d847e 043e8480 043f8481 04408482     ~.=...>...?...@.
   21df0:	04418483 04428484 04438485 04448486     ..A...B...C...D.
   21e00:	04458487 04468488 04478489 0448848a     ..E...F...G...H.
   21e10:	0449848b 044a848c 044b848d 044c848e     ..I...J...K...L.
   21e20:	044d848f 044e8490 044f8491 2500849f     ..M...N...O....%
   21e30:	250284a0 250c84a1 251084a2 251884a3     ...%...%...%...%
   21e40:	251484a4 251c84a5 252c84a6 252484a7     ...%...%..,%..$%
   21e50:	253484a8 253c84a9 250184aa 250384ab     ..4%..<%...%...%
   21e60:	250f84ac 251384ad 251b84ae 251784af     ...%...%...%...%
   21e70:	252384b0 253384b1 252b84b2 253b84b3     ..#%..3%..+%..;%
   21e80:	254b84b4 252084b5 252f84b6 252884b7     ..K%.. %../%..(%
   21e90:	253784b8 253f84b9 251d84ba 253084bb     ..7%..?%...%..0%
   21ea0:	252584bc 253884bd 254284be 24608740     ..%%..8%..B%@.`$
   21eb0:	24618741 24628742 24638743 24648744     A.a$B.b$C.c$D.d$
   21ec0:	24658745 24668746 24678747 24688748     E.e$F.f$G.g$H.h$
   21ed0:	24698749 246a874a 246b874b 246c874c     I.i$J.j$K.k$L.l$
   21ee0:	246d874d 246e874e 246f874f 24708750     M.m$N.n$O.o$P.p$
   21ef0:	24718751 24728752 24738753 21608754     Q.q$R.r$S.s$T.`!
   21f00:	21618755 21628756 21638757 21648758     U.a!V.b!W.c!X.d!
   21f10:	21658759 2166875a 2167875b 2168875c     Y.e!Z.f![.g!\.h!
   21f20:	2169875d 3349875f 33148760 33228761     ].i!_.I3`..3a."3
   21f30:	334d8762 33188763 33278764 33038765     b.M3c..3d.'3e..3
   21f40:	33368766 33518767 33578768 330d8769     f.63g.Q3h.W3i..3
   21f50:	3326876a 3323876b 332b876c 334a876d     j.&3k.#3l.+3m.J3
   21f60:	333b876e 339c876f 339d8770 339e8771     n.;3o..3p..3q..3
   21f70:	338e8772 338f8773 33c48774 33a18775     r..3s..3t..3u..3
   21f80:	337b877e 301d8780 301f8781 21168782     ~.{3...0...0...!
   21f90:	33cd8783 21218784 32a48785 32a58786     ...3..!!...2...2
   21fa0:	32a68787 32a78788 32a88789 3231878a     ...2...2...2..12
   21fb0:	3232878b 3239878c 337e878d 337d878e     ..22..92..~3..}3
   21fc0:	337c878f 222e8793 22118794 221f8798     ..|3..."..."..."
   21fd0:	22bf8799 4e9c889f 551688a0 5a0388a1     ..."...N...U...Z
   21fe0:	963f88a2 54c088a3 611b88a4 632888a5     ..?....T...a..(c
   21ff0:	59f688a6 902288a7 847588a8 831c88a9     ...Y.."...u.....
   22000:	7a5088aa 60aa88ab 63e188ac 6e2588ad     ..Pz...`...c..%n
   22010:	65ed88ae 846688af 82a688b0 9bf588b1     ...e..f.........
   22020:	689388b2 572788b3 65a188b4 627188b5     ...h..'W...e..qb
   22030:	5b9b88b6 59d088b7 867b88b8 98f488b9     ...[...Y..{.....
   22040:	7d6288ba 7dbe88bb 9b8e88bc 621688bd     ..b}...}.......b
   22050:	7c9f88be 88b788bf 5b8988c0 5eb588c1     ...|.......[...^
   22060:	630988c2 669788c3 684888c4 95c788c5     ...c...f..Hh....
   22070:	978d88c6 674f88c7 4ee588c8 4f0a88c9     ......Og...N...O
   22080:	4f4d88ca 4f9d88cb 504988cc 56f288cd     ..MO...O..IP...V
   22090:	593788ce 59d488cf 5a0188d0 5c0988d1     ..7Y...Y...Z...\
   220a0:	60df88d2 610f88d3 617088d4 661388d5     ...`...a..pa...f
   220b0:	690588d6 70ba88d7 754f88d8 757088d9     ...i...p..Ou..pu
   220c0:	79fb88da 7dad88db 7def88dc 80c388dd     ...y...}...}....
   220d0:	840e88de 886388df 8b0288e0 905588e1     ......c.......U.
   220e0:	907a88e2 533b88e3 4e9588e4 4ea588e5     ..z...;S...N...N
   220f0:	57df88e6 80b288e7 90c188e8 78ef88e9     ...W...........x
   22100:	4e0088ea 58f188eb 6ea288ec 903888ed     ...N...X...n..8.
   22110:	7a3288ee 832888ef 828b88f0 9c2f88f1     ..2z..(......./.
   22120:	514188f2 537088f3 54bd88f4 54e188f5     ..AQ..pS...T...T
   22130:	56e088f6 59fb88f7 5f1588f8 98f288f9     ...V...Y..._....
   22140:	6deb88fa 80e488fb 852d88fc 96628940     ...m......-.@.b.
   22150:	96708941 96a08942 97fb8943 540b8944     A.p.B...C...D..T
   22160:	53f38945 5b878946 70cf8947 7fbd8948     E..SF..[G..pH...
   22170:	8fc28949 96e8894a 536f894b 9d5c894c     I...J...K.oSL.\.
   22180:	7aba894d 4e11894e 7893894f 81fc8950     M..zN..NO..xP...
   22190:	6e268951 56188952 55048953 6b1d8954     Q.&nR..VS..UT..k
   221a0:	851a8955 9c3b8956 59e58957 53a98958     U...V.;.W..YX..S
   221b0:	6d668959 74dc895a 958f895b 5642895c     Y.fmZ..t[...\.BV
   221c0:	4e91895d 904b895e 96f2895f 834f8960     ]..N^.K._...`.O.
   221d0:	990c8961 53e18962 55b68963 5b308964     a...b..Sc..Ud.0[
   221e0:	5f718965 66208966 66f38967 68048968     e.q_f. fg..fh..h
   221f0:	6c388969 6cf3896a 6d29896b 745b896c     i.8lj..lk.)ml.[t
   22200:	76c8896d 7a4e896e 9834896f 82f18970     m..vn.Nzo.4.p...
   22210:	885b8971 8a608972 92ed8973 6db28974     q.[.r.`.s...t..m
   22220:	75ab8975 76ca8976 99c58977 60a68978     u..uv..vw...x..`
   22230:	8b018979 8d8a897a 95b2897b 698e897c     y...z...{...|..i
   22240:	53ad897d 5186897e 57128980 58308981     }..S~..Q...W..0X
   22250:	59448982 5bb48983 5ef68984 60288985     ..DY...[...^..(`
   22260:	63a98986 63f48987 6cbf8988 6f148989     ...c...c...l...o
   22270:	708e898a 7114898b 7159898c 71d5898d     ...p...q..Yq...q
   22280:	733f898e 7e01898f 82768990 82d18991     ..?s...~..v.....
   22290:	85978992 90608993 925b8994 9d1b8995     ......`...[.....
   222a0:	58698996 65bc8997 6c5a8998 75258999     ..iX...e..Zl..%u
   222b0:	51f9899a 592e899b 5965899c 5f80899d     ...Q...Y..eY..._
   222c0:	5fdc899e 62bc899f 65fa89a0 6a2a89a1     ..._...b...e..*j
   222d0:	6b2789a2 6bb489a3 738b89a4 7fc189a5     ..'k...k...s....
   222e0:	895689a6 9d2c89a7 9d0e89a8 9ec489a9     ..V...,.........
   222f0:	5ca189aa 6c9689ab 837b89ac 510489ad     ...\...l..{....Q
   22300:	5c4b89ae 61b689af 81c689b0 687689b1     ..K\...a......vh
   22310:	726189b2 4e5989b3 4ffa89b4 537889b5     ..ar..YN...O..xS
   22320:	606989b6 6e2989b7 7a4f89b8 97f389b9     ..i`..)n..Oz....
   22330:	4e0b89ba 531689bb 4eee89bc 4f5589bd     ...N...S...N..UO
   22340:	4f3d89be 4fa189bf 4f7389c0 52a089c1     ..=O...O..sO...R
   22350:	53ef89c2 560989c3 590f89c4 5ac189c5     ...S...V...Y...Z
   22360:	5bb689c6 5be189c7 79d189c8 668789c9     ...[...[...y...f
   22370:	679c89ca 67b689cb 6b4c89cc 6cb389cd     ...g...g..Lk...l
   22380:	706b89ce 73c289cf 798d89d0 79be89d1     ..kp...s...y...y
   22390:	7a3c89d2 7b8789d3 82b189d4 82db89d5     ..<z...{........
   223a0:	830489d6 837789d7 83ef89d8 83d389d9     ......w.........
   223b0:	876689da 8ab289db 562989dc 8ca889dd     ..f.......)V....
   223c0:	8fe689de 904e89df 971e89e0 868a89e1     ......N.........
   223d0:	4fc489e2 5ce889e3 621189e4 725989e5     ...O...\...b..Yr
   223e0:	753b89e6 81e589e7 82bd89e8 86fe89e9     ..;u............
   223f0:	8cc089ea 96c589eb 991389ec 99d589ed     ................
   22400:	4ecb89ee 4f1a89ef 89e389f0 56de89f1     ...N...O.......V
   22410:	584a89f2 58ca89f3 5efb89f4 5feb89f5     ..JX...X...^..._
   22420:	602a89f6 609489f7 606289f8 61d089f9     ..*`...`..b`...a
   22430:	621289fa 62d089fb 653989fc 9b418a40     ...b...b..9e@.A.
   22440:	66668a41 68b08a42 6d778a43 70708a44     A.ffB..hC.wmD.pp
   22450:	754c8a45 76868a46 7d758a47 82a58a48     E.LuF..vG.u}H...
   22460:	87f98a49 958b8a4a 968e8a4b 8c9d8a4c     I...J...K...L...
   22470:	51f18a4d 52be8a4e 59168a4f 54b38a50     M..QN..RO..YP..T
   22480:	5bb38a51 5d168a52 61688a53 69828a54     Q..[R..]S.haT..i
   22490:	6daf8a55 788d8a56 84cb8a57 88578a58     U..mV..xW...X.W.
   224a0:	8a728a59 93a78a5a 9ab88a5b 6d6c8a5c     Y.r.Z...[...\.lm
   224b0:	99a88a5d 86d98a5e 57a38a5f 67ff8a60     ]...^..._..W`..g
   224c0:	86ce8a61 920e8a62 52838a63 56878a64     a...b...c..Rd..V
   224d0:	54048a65 5ed38a66 62e18a67 64b98a68     e..Tf..^g..bh..d
   224e0:	683c8a69 68388a6a 6bbb8a6b 73728a6c     i.<hj.8hk..kl.rs
   224f0:	78ba8a6d 7a6b8a6e 899a8a6f 89d28a70     m..xn.kzo...p...
   22500:	8d6b8a71 8f038a72 90ed8a73 95a38a74     q.k.r...s...t...
   22510:	96948a75 97698a76 5b668a77 5cb38a78     u...v.i.w.f[x..\
   22520:	697d8a79 984d8a7a 984e8a7b 639b8a7c     y.}iz.M.{.N.|..c
   22530:	7b208a7d 6a2b8a7e 6a7f8a80 68b68a81     }. {~.+j...j...h
   22540:	9c0d8a82 6f5f8a83 52728a84 559d8a85     ......_o..rR...U
   22550:	60708a86 62ec8a87 6d3b8a88 6e078a89     ..p`...b..;m...n
   22560:	6ed18a8a 845b8a8b 89108a8c 8f448a8d     ...n..[.......D.
   22570:	4e148a8e 9c398a8f 53f68a90 691b8a91     ...N..9....S...i
   22580:	6a3a8a92 97848a93 682a8a94 515c8a95     ..:j......*h..\Q
   22590:	7ac38a96 84b28a97 91dc8a98 938c8a99     ...z............
   225a0:	565b8a9a 9d288a9b 68228a9c 83058a9d     ..[V..(..."h....
   225b0:	84318a9e 7ca58a9f 52088aa0 82c58aa1     ..1....|...R....
   225c0:	74e68aa2 4e7e8aa3 4f838aa4 51a08aa5     ...t..~N...O...Q
   225d0:	5bd28aa6 520a8aa7 52d88aa8 52e78aa9     ...[...R...R...R
   225e0:	5dfb8aaa 559a8aab 582a8aac 59e68aad     ...]...U..*X...Y
   225f0:	5b8c8aae 5b988aaf 5bdb8ab0 5e728ab1     ...[...[...[..r^
   22600:	5e798ab2 60a38ab3 611f8ab4 61638ab5     ..y^...`...a..ca
   22610:	61be8ab6 63db8ab7 65628ab8 67d18ab9     ...a...c..be...g
   22620:	68538aba 68fa8abb 6b3e8abc 6b538abd     ..Sh...h..>k..Sk
   22630:	6c578abe 6f228abf 6f978ac0 6f458ac1     ..Wl.."o...o..Eo
   22640:	74b08ac2 75188ac3 76e38ac4 770b8ac5     ...t...u...v...w
   22650:	7aff8ac6 7ba18ac7 7c218ac8 7de98ac9     ...z...{..!|...}
   22660:	7f368aca 7ff08acb 809d8acc 82668acd     ..6...........f.
   22670:	839e8ace 89b38acf 8acc8ad0 8cab8ad1     ................
   22680:	90848ad2 94518ad3 95938ad4 95918ad5     ......Q.........
   22690:	95a28ad6 96658ad7 97d38ad8 99288ad9     ......e.......(.
   226a0:	82188ada 4e388adb 542b8adc 5cb88add     ......8N..+T...\
   226b0:	5dcc8ade 73a98adf 764c8ae0 773c8ae1     ...]...s..Lv..<w
   226c0:	5ca98ae2 7feb8ae3 8d0b8ae4 96c18ae5     ...\............
   226d0:	98118ae6 98548ae7 98588ae8 4f018ae9     ......T...X....O
   226e0:	4f0e8aea 53718aeb 559c8aec 56688aed     ...O..qS...U..hV
   226f0:	57fa8aee 59478aef 5b098af0 5bc48af1     ...W..GY...[...[
   22700:	5c908af2 5e0c8af3 5e7e8af4 5fcc8af5     ...\...^..~^..._
   22710:	63ee8af6 673a8af7 65d78af8 65e28af9     ...c..:g...e...e
   22720:	671f8afa 68cb8afb 68c48afc 6a5f8b40     ...g...h...h@._j
   22730:	5e308b41 6bc58b42 6c178b43 6c7d8b44     A.0^B..kC..lD.}l
   22740:	757f8b45 79488b46 5b638b47 7a008b48     E..uF.HyG.c[H..z
   22750:	7d008b49 5fbd8b4a 898f8b4b 8a188b4c     I..}J.._K...L...
   22760:	8cb48b4d 8d778b4e 8ecc8b4f 8f1d8b50     M...N.w.O...P...
   22770:	98e28b51 9a0e8b52 9b3c8b53 4e808b54     Q...R...S.<.T..N
   22780:	507d8b55 51008b56 59938b57 5b9c8b58     U.}PV..QW..YX..[
   22790:	622f8b59 62808b5a 64ec8b5b 6b3a8b5c     Y./bZ..b[..d\.:k
   227a0:	72a08b5d 75918b5e 79478b5f 7fa98b60     ]..r^..u_.Gy`...
   227b0:	87fb8b61 8abc8b62 8b708b63 63ac8b64     a...b...c.p.d..c
   227c0:	83ca8b65 97a08b66 54098b67 54038b68     e...f...g..Th..T
   227d0:	55ab8b69 68548b6a 6a588b6b 8a708b6c     i..Uj.Thk.Xjl.p.
   227e0:	78278b6d 67758b6e 9ecd8b6f 53748b70     m.'xn.ugo...p.tS
   227f0:	5ba28b71 811a8b72 86508b73 90068b74     q..[r...s.P.t...
   22800:	4e188b75 4e458b76 4ec78b77 4f118b78     u..Nv.ENw..Nx..O
   22810:	53ca8b79 54388b7a 5bae8b7b 5f138b7c     y..Sz.8T{..[|.._
   22820:	60258b7d 65518b7e 673d8b80 6c428b81     }.%`~.Qe..=g..Bl
   22830:	6c728b82 6ce38b83 70788b84 74038b85     ..rl...l..xp...t
   22840:	7a768b86 7aae8b87 7b088b88 7d1a8b89     ..vz...z...{...}
   22850:	7cfe8b8a 7d668b8b 65e78b8c 725b8b8d     ...|..f}...e..[r
   22860:	53bb8b8e 5c458b8f 5de88b90 62d28b91     ...S..E\...]...b
   22870:	62e08b92 63198b93 6e208b94 865a8b95     ...b...c.. n..Z.
   22880:	8a318b96 8ddd8b97 92f88b98 6f018b99     ..1............o
   22890:	79a68b9a 9b5a8b9b 4ea88b9c 4eab8b9d     ...y..Z....N...N
   228a0:	4eac8b9e 4f9b8b9f 4fa08ba0 50d18ba1     ...N...O...O...P
   228b0:	51478ba2 7af68ba3 51718ba4 51f68ba5     ..GQ...z..qQ...Q
   228c0:	53548ba6 53218ba7 537f8ba8 53eb8ba9     ..TS..!S...S...S
   228d0:	55ac8baa 58838bab 5ce18bac 5f378bad     ...U...X...\..7_
   228e0:	5f4a8bae 602f8baf 60508bb0 606d8bb1     ..J_../`..P`..m`
   228f0:	631f8bb2 65598bb3 6a4b8bb4 6cc18bb5     ...c..Ye..Kj...l
   22900:	72c28bb6 72ed8bb7 77ef8bb8 80f88bb9     ...r...r...w....
   22910:	81058bba 82088bbb 854e8bbc 90f78bbd     ..........N.....
   22920:	93e18bbe 97ff8bbf 99578bc0 9a5a8bc1     ..........W...Z.
   22930:	4ef08bc2 51dd8bc3 5c2d8bc4 66818bc5     ...N...Q..-\...f
   22940:	696d8bc6 5c408bc7 66f28bc8 69758bc9     ..mi..@\...f..ui
   22950:	73898bca 68508bcb 7c818bcc 50c58bcd     ...s..Ph...|...P
   22960:	52e48bce 57478bcf 5dfe8bd0 93268bd1     ...R..GW...]..&.
   22970:	65a48bd2 6b238bd3 6b3d8bd4 74348bd5     ...e..#k..=k..4t
   22980:	79818bd6 79bd8bd7 7b4b8bd8 7dca8bd9     ...y...y..K{...}
   22990:	82b98bda 83cc8bdb 887f8bdc 895f8bdd     .............._.
   229a0:	8b398bde 8fd18bdf 91d18be0 541f8be1     ..9............T
   229b0:	92808be2 4e5d8be3 50368be4 53e58be5     ......]N..6P...S
   229c0:	533a8be6 72d78be7 73968be8 77e98be9     ..:S...r...s...w
   229d0:	82e68bea 8eaf8beb 99c68bec 99c88bed     ................
   229e0:	99d28bee 51778bef 611a8bf0 865e8bf1     ......wQ...a..^.
   229f0:	55b08bf2 7a7a8bf3 50768bf4 5bd38bf5     ...U..zz..vP...[
   22a00:	90478bf6 96858bf7 4e328bf8 6adb8bf9     ..G.......2N...j
   22a10:	91e78bfa 5c518bfb 5c488bfc 63988c40     ......Q\..H\@..c
   22a20:	7a9f8c41 6c938c42 97748c43 8f618c44     A..zB..lC.t.D.a.
   22a30:	7aaa8c45 718a8c46 96888c47 7c828c48     E..zF..qG...H..|
   22a40:	68178c49 7e708c4a 68518c4b 936c8c4c     I..hJ.p~K.QhL.l.
   22a50:	52f28c4d 541b8c4e 85ab8c4f 8a138c50     M..RN..TO...P...
   22a60:	7fa48c51 8ecd8c52 90e18c53 53668c54     Q...R...S...T.fS
   22a70:	88888c55 79418c56 4fc28c57 50be8c58     U...V.AyW..OX..P
   22a80:	52118c59 51448c5a 55538c5b 572d8c5c     Y..RZ.DQ[.SU\.-W
   22a90:	73ea8c5d 578b8c5e 59518c5f 5f628c60     ]..s^..W_.QY`.b_
   22aa0:	5f848c61 60758c62 61768c63 61678c64     a.._b.u`c.vad.ga
   22ab0:	61a98c65 63b28c66 643a8c67 656c8c68     e..af..cg.:dh.le
   22ac0:	666f8c69 68428c6a 6e138c6b 75668c6c     i.ofj.Bhk..nl.fu
   22ad0:	7a3d8c6d 7cfb8c6e 7d4c8c6f 7d998c70     m.=zn..|o.L}p..}
   22ae0:	7e4b8c71 7f6b8c72 830e8c73 834a8c74     q.K~r.k.s...t.J.
   22af0:	86cd8c75 8a088c76 8a638c77 8b668c78     u...v...w.c.x.f.
   22b00:	8efd8c79 981a8c7a 9d8f8c7b 82b88c7c     y...z...{...|...
   22b10:	8fce8c7d 9be88c7e 52878c80 621f8c81     }...~......R...b
   22b20:	64838c82 6fc08c83 96998c84 68418c85     ...d...o......Ah
   22b30:	50918c86 6b208c87 6c7a8c88 6f548c89     ...P.. k..zl..To
   22b40:	7a748c8a 7d508c8b 88408c8c 8a238c8d     ..tz..P}..@...#.
   22b50:	67088c8e 4ef68c8f 50398c90 50268c91     ...g...N..9P..&P
   22b60:	50658c92 517c8c93 52388c94 52638c95     ..eP..|Q..8R..cR
   22b70:	55a78c96 570f8c97 58058c98 5acc8c99     ...U...W...X...Z
   22b80:	5efa8c9a 61b28c9b 61f88c9c 62f38c9d     ...^...a...a...b
   22b90:	63728c9e 691c8c9f 6a298ca0 727d8ca1     ..rc...i..)j..}r
   22ba0:	72ac8ca2 732e8ca3 78148ca4 786f8ca5     ...r...s...x..ox
   22bb0:	7d798ca6 770c8ca7 80a98ca8 898b8ca9     ..y}...w........
   22bc0:	8b198caa 8ce28cab 8ed28cac 90638cad     ..............c.
   22bd0:	93758cae 967a8caf 98558cb0 9a138cb1     ..u...z...U.....
   22be0:	9e788cb2 51438cb3 539f8cb4 53b38cb5     ..x...CQ...S...S
   22bf0:	5e7b8cb6 5f268cb7 6e1b8cb8 6e908cb9     ..{^..&_...n...n
   22c00:	73848cba 73fe8cbb 7d438cbc 82378cbd     ...s...s..C}..7.
   22c10:	8a008cbe 8afa8cbf 96508cc0 4e4e8cc1     ..........P...NN
   22c20:	500b8cc2 53e48cc3 547c8cc4 56fa8cc5     ...P...S..|T...V
   22c30:	59d18cc6 5b648cc7 5df18cc8 5eab8cc9     ...Y..d[...]...^
   22c40:	5f278cca 62388ccb 65458ccc 67af8ccd     ..'_..8b..Ee...g
   22c50:	6e568cce 72d08ccf 7cca8cd0 88b48cd1     ..Vn...r...|....
   22c60:	80a18cd2 80e18cd3 83f08cd4 864e8cd5     ..............N.
   22c70:	8a878cd6 8de88cd7 92378cd8 96c78cd9     ..........7.....
   22c80:	98678cda 9f138cdb 4e948cdc 4e928cdd     ..g........N...N
   22c90:	4f0d8cde 53488cdf 54498ce0 543e8ce1     ...O..HS..IT..>T
   22ca0:	5a2f8ce2 5f8c8ce3 5fa18ce4 609f8ce5     ../Z..._..._...`
   22cb0:	68a78ce6 6a8e8ce7 745a8ce8 78818ce9     ...h...j..Zt...x
   22cc0:	8a9e8cea 8aa48ceb 8b778cec 91908ced     ..........w.....
   22cd0:	4e5e8cee 9bc98cef 4ea48cf0 4f7c8cf1     ..^N.......N..|O
   22ce0:	4faf8cf2 50198cf3 50168cf4 51498cf5     ...O...P...P..IQ
   22cf0:	516c8cf6 529f8cf7 52b98cf8 52fe8cf9     ..lQ...R...R...R
   22d00:	539a8cfa 53e38cfb 54118cfc 540e8d40     ...S...S...T@..T
   22d10:	55898d41 57518d42 57a28d43 597d8d44     A..UB.QWC..WD.}Y
   22d20:	5b548d45 5b5d8d46 5b8f8d47 5de58d48     E.T[F.][G..[H..]
   22d30:	5de78d49 5df78d4a 5e788d4b 5e838d4c     I..]J..]K.x^L..^
   22d40:	5e9a8d4d 5eb78d4e 5f188d4f 60528d50     M..^N..^O.._P.R`
   22d50:	614c8d51 62978d52 62d88d53 63a78d54     Q.LaR..bS..bT..c
   22d60:	653b8d55 66028d56 66438d57 66f48d58     U.;eV..fW.CfX..f
   22d70:	676d8d59 68218d5a 68978d5b 69cb8d5c     Y.mgZ.!h[..h\..i
   22d80:	6c5f8d5d 6d2a8d5e 6d698d5f 6e2f8d60     ]._l^.*m_.im`./n
   22d90:	6e9d8d61 75328d62 76878d63 786c8d64     a..nb.2uc..vd.lx
   22da0:	7a3f8d65 7ce08d66 7d058d67 7d188d68     e.?zf..|g..}h..}
   22db0:	7d5e8d69 7db18d6a 80158d6b 80038d6c     i.^}j..}k...l...
   22dc0:	80af8d6d 80b18d6e 81548d6f 818f8d70     m...n...o.T.p...
   22dd0:	822a8d71 83528d72 884c8d73 88618d74     q.*.r.R.s.L.t.a.
   22de0:	8b1b8d75 8ca28d76 8cfc8d77 90ca8d78     u...v...w...x...
   22df0:	91758d79 92718d7a 783f8d7b 92fc8d7c     y.u.z.q.{.?x|...
   22e00:	95a48d7d 964d8d7e 98058d80 99998d81     }...~.M.........
   22e10:	9ad88d82 9d3b8d83 525b8d84 52ab8d85     ......;...[R...R
   22e20:	53f78d86 54088d87 58d58d88 62f78d89     ...S...T...X...b
   22e30:	6fe08d8a 8c6a8d8b 8f5f8d8c 9eb98d8d     ...o..j..._.....
   22e40:	514b8d8e 523b8d8f 544a8d90 56fd8d91     ..KQ..;R..JT...V
   22e50:	7a408d92 91778d93 9d608d94 9ed28d95     ..@z..w...`.....
   22e60:	73448d96 6f098d97 81708d98 75118d99     ..Ds...o..p....u
   22e70:	5ffd8d9a 60da8d9b 9aa88d9c 72db8d9d     ..._...`.......r
   22e80:	8fbc8d9e 6b648d9f 98038da0 4eca8da1     ......dk.......N
   22e90:	56f08da2 57648da3 58be8da4 5a5a8da5     ...V..dW...X..ZZ
   22ea0:	60688da6 61c78da7 660f8da8 66068da9     ..h`...a...f...f
   22eb0:	68398daa 68b18dab 6df78dac 75d58dad     ..9h...h...m...u
   22ec0:	7d3a8dae 826e8daf 9b428db0 4e9b8db1     ..:}..n...B....N
   22ed0:	4f508db2 53c98db3 55068db4 5d6f8db5     ..PO...S...U..o]
   22ee0:	5de68db6 5dee8db7 67fb8db8 6c998db9     ...]...]...g...l
   22ef0:	74738dba 78028dbb 8a508dbc 93968dbd     ..st...x..P.....
   22f00:	88df8dbe 57508dbf 5ea78dc0 632b8dc1     ......PW...^..+c
   22f10:	50b58dc2 50ac8dc3 518d8dc4 67008dc5     ...P...P...Q...g
   22f20:	54c98dc6 585e8dc7 59bb8dc8 5bb08dc9     ...T..^X...Y...[
   22f30:	5f698dca 624d8dcb 63a18dcc 683d8dcd     ..i_..Mb...c..=h
   22f40:	6b738dce 6e088dcf 707d8dd0 91c78dd1     ..sk...n..}p....
   22f50:	72808dd2 78158dd3 78268dd4 796d8dd5     ...r...x..&x..my
   22f60:	658e8dd6 7d308dd7 83dc8dd8 88c18dd9     ...e..0}........
   22f70:	8f098dda 969b8ddb 52648ddc 57288ddd     ..........dR..(W
   22f80:	67508dde 7f6a8ddf 8ca18de0 51b48de1     ..Pg..j........Q
   22f90:	57428de2 962a8de3 583a8de4 698a8de5     ..BW..*...:X...i
   22fa0:	80b48de6 54b28de7 5d0e8de8 57fc8de9     .......T...]...W
   22fb0:	78958dea 9dfa8deb 4f5c8dec 524a8ded     ...x......\O..JR
   22fc0:	548b8dee 643e8def 66288df0 67148df1     ...T..>d..(f...g
   22fd0:	67f58df2 7a848df3 7b568df4 7d228df5     ...g...z..V{.."}
   22fe0:	932f8df6 685c8df7 9bad8df8 7b398df9     ../...\h......9{
   22ff0:	53198dfa 518a8dfb 52378dfc 5bdf8e40     ...S...Q..7R@..[
   23000:	62f68e41 64ae8e42 64e68e43 672d8e44     A..bB..dC..dD.-g
   23010:	6bba8e45 85a98e46 96d18e47 76908e48     E..kF...G...H..v
   23020:	9bd68e49 634c8e4a 93068e4b 9bab8e4c     I...J.LcK...L...
   23030:	76bf8e4d 66528e4e 4e098e4f 50988e50     M..vN.RfO..NP..P
   23040:	53c28e51 5c718e52 60e88e53 64928e54     Q..SR.q\S..`T..d
   23050:	65638e55 685f8e56 71e68e57 73ca8e58     U.ceV._hW..qX..s
   23060:	75238e59 7b978e5a 7e828e5b 86958e5c     Y.#uZ..{[..~\...
   23070:	8b838e5d 8cdb8e5e 91788e5f 99108e60     ]...^..._.x.`...
   23080:	65ac8e61 66ab8e62 6b8b8e63 4ed58e64     a..eb..fc..kd..N
   23090:	4ed48e65 4f3a8e66 4f7f8e67 523a8e68     e..Nf.:Og..Oh.:R
   230a0:	53f88e69 53f28e6a 55e38e6b 56db8e6c     i..Sj..Sk..Ul..V
   230b0:	58eb8e6d 59cb8e6e 59c98e6f 59ff8e70     m..Xn..Yo..Yp..Y
   230c0:	5b508e71 5c4d8e72 5e028e73 5e2b8e74     q.P[r.M\s..^t.+^
   230d0:	5fd78e75 601d8e76 63078e77 652f8e78     u.._v..`w..cx./e
   230e0:	5b5c8e79 65af8e7a 65bd8e7b 65e88e7c     y.\[z..e{..e|..e
   230f0:	679d8e7d 6b628e7e 6b7b8e80 6c0f8e81     }..g~.bk..{k...l
   23100:	73458e82 79498e83 79c18e84 7cf88e85     ..Es..Iy...y...|
   23110:	7d198e86 7d2b8e87 80a28e88 81028e89     ...}..+}........
   23120:	81f38e8a 89968e8b 8a5e8e8c 8a698e8d     ..........^...i.
   23130:	8a668e8e 8a8c8e8f 8aee8e90 8cc78e91     ..f.............
   23140:	8cdc8e92 96cc8e93 98fc8e94 6b6f8e95     ..............ok
   23150:	4e8b8e96 4f3c8e97 4f8d8e98 51508e99     ...N..<O...O..PQ
   23160:	5b578e9a 5bfa8e9b 61488e9c 63018e9d     ..W[...[..Ha...c
   23170:	66428e9e 6b218e9f 6ecb8ea0 6cbb8ea1     ..Bf..!k...n...l
   23180:	723e8ea2 74bd8ea3 75d48ea4 78c18ea5     ..>r...t...u...x
   23190:	793a8ea6 800c8ea7 80338ea8 81ea8ea9     ..:y......3.....
   231a0:	84948eaa 8f9e8eab 6c508eac 9e7f8ead     ..........Pl....
   231b0:	5f0f8eae 8b588eaf 9d2b8eb0 7afa8eb1     ..._..X...+....z
   231c0:	8ef88eb2 5b8d8eb3 96eb8eb4 4e038eb5     .......[.......N
   231d0:	53f18eb6 57f78eb7 59318eb8 5ac98eb9     ...S...W..1Y...Z
   231e0:	5ba48eba 60898ebb 6e7f8ebc 6f068ebd     ...[...`...n...o
   231f0:	75be8ebe 8cea8ebf 5b9f8ec0 85008ec1     ...u.......[....
   23200:	7be08ec2 50728ec3 67f48ec4 829d8ec5     ...{..rP...g....
   23210:	5c618ec6 854a8ec7 7e1e8ec8 820e8ec9     ..a\..J....~....
   23220:	51998eca 5c048ecb 63688ecc 8d668ecd     ...Q...\..hc..f.
   23230:	659c8ece 716e8ecf 793e8ed0 7d178ed1     ...e..nq..>y...}
   23240:	80058ed2 8b1d8ed3 8eca8ed4 906e8ed5     ..............n.
   23250:	86c78ed6 90aa8ed7 501f8ed8 52fa8ed9     ...........P...R
   23260:	5c3a8eda 67538edb 707c8edc 72358edd     ..:\..Sg..|p..5r
   23270:	914c8ede 91c88edf 932b8ee0 82e58ee1     ..L.......+.....
   23280:	5bc28ee2 5f318ee3 60f98ee4 4e3b8ee5     ...[..1_...`..;N
   23290:	53d68ee6 5b888ee7 624b8ee8 67318ee9     ...S...[..Kb..1g
   232a0:	6b8a8eea 72e98eeb 73e08eec 7a2e8eed     ...k...r...s...z
   232b0:	816b8eee 8da38eef 91528ef0 99968ef1     ..k.......R.....
   232c0:	51128ef2 53d78ef3 546a8ef4 5bff8ef5     ...Q...S..jT...[
   232d0:	63888ef6 6a398ef7 7dac8ef8 97008ef9     ...c..9j...}....
   232e0:	56da8efa 53ce8efb 54688efc 5b978f40     ...V...S..hT@..[
   232f0:	5c318f41 5dde8f42 4fee8f43 61018f44     A.1\B..]C..OD..a
   23300:	62fe8f45 6d328f46 79c08f47 79cb8f48     E..bF.2mG..yH..y
   23310:	7d428f49 7e4d8f4a 7fd28f4b 81ed8f4c     I.B}J.M~K...L...
   23320:	821f8f4d 84908f4e 88468f4f 89728f50     M...N...O.F.P.r.
   23330:	8b908f51 8e748f52 8f2f8f53 90318f54     Q...R.t.S./.T.1.
   23340:	914b8f55 916c8f56 96c68f57 919c8f58     U.K.V.l.W...X...
   23350:	4ec08f59 4f4f8f5a 51458f5b 53418f5c     Y..NZ.OO[.EQ\.AS
   23360:	5f938f5d 620e8f5e 67d48f5f 6c418f60     ].._^..b_..g`.Al
   23370:	6e0b8f61 73638f62 7e268f63 91cd8f64     a..nb.csc.&~d...
   23380:	92838f65 53d48f66 59198f67 5bbf8f68     e...f..Sg..Yh..[
   23390:	6dd18f69 795d8f6a 7e2e8f6b 7c9b8f6c     i..mj.]yk..~l..|
   233a0:	587e8f6d 719f8f6e 51fa8f6f 88538f70     m.~Xn..qo..Qp.S.
   233b0:	8ff08f71 4fca8f72 5cfb8f73 66258f74     q...r..Os..\t.%f
   233c0:	77ac8f75 7ae38f76 821c8f77 99ff8f78     u..wv..zw...x...
   233d0:	51c68f79 5faa8f7a 65ec8f7b 696f8f7c     y..Qz.._{..e|.oi
   233e0:	6b898f7d 6df38f7e 6e968f80 6f648f81     }..k~..m...n..do
   233f0:	76fe8f82 7d148f83 5de18f84 90758f85     ...v...}...]..u.
   23400:	91878f86 98068f87 51e68f88 521d8f89     ...........Q...R
   23410:	62408f8a 66918f8b 66d98f8c 6e1a8f8d     ..@b...f...f...n
   23420:	5eb68f8e 7dd28f8f 7f728f90 66f88f91     ...^...}..r....f
   23430:	85af8f92 85f78f93 8af88f94 52a98f95     ...............R
   23440:	53d98f96 59738f97 5e8f8f98 5f908f99     ...S..sY...^..._
   23450:	60558f9a 92e48f9b 96648f9c 50b78f9d     ..U`......d....P
   23460:	511f8f9e 52dd8f9f 53208fa0 53478fa1     ...Q...R.. S..GS
   23470:	53ec8fa2 54e88fa3 55468fa4 55318fa5     ...S...T..FU..1U
   23480:	56178fa6 59688fa7 59be8fa8 5a3c8fa9     ...V..hY...Y..<Z
   23490:	5bb58faa 5c068fab 5c0f8fac 5c118fad     ...[...\...\...\
   234a0:	5c1a8fae 5e848faf 5e8a8fb0 5ee08fb1     ...\...^...^...^
   234b0:	5f708fb2 627f8fb3 62848fb4 62db8fb5     ..p_...b...b...b
   234c0:	638c8fb6 63778fb7 66078fb8 660c8fb9     ...c..wc...f...f
   234d0:	662d8fba 66768fbb 677e8fbc 68a28fbd     ..-f..vf..~g...h
   234e0:	6a1f8fbe 6a358fbf 6cbc8fc0 6d888fc1     ...j..5j...l...m
   234f0:	6e098fc2 6e588fc3 713c8fc4 71268fc5     ...n..Xn..<q..&q
   23500:	71678fc6 75c78fc7 77018fc8 785d8fc9     ..gq...u...w..]x
   23510:	79018fca 79658fcb 79f08fcc 7ae08fcd     ...y..ey...y...z
   23520:	7b118fce 7ca78fcf 7d398fd0 80968fd1     ...{...|..9}....
   23530:	83d68fd2 848b8fd3 85498fd4 885d8fd5     ..........I...].
   23540:	88f38fd6 8a1f8fd7 8a3c8fd8 8a548fd9     ..........<...T.
   23550:	8a738fda 8c618fdb 8cde8fdc 91a48fdd     ..s...a.........
   23560:	92668fde 937e8fdf 94188fe0 969c8fe1     ..f...~.........
   23570:	97988fe2 4e0a8fe3 4e088fe4 4e1e8fe5     .......N...N...N
   23580:	4e578fe6 51978fe7 52708fe8 57ce8fe9     ..WN...Q..pR...W
   23590:	58348fea 58cc8feb 5b228fec 5e388fed     ..4X...X.."[..8^
   235a0:	60c58fee 64fe8fef 67618ff0 67568ff1     ...`...d..ag..Vg
   235b0:	6d448ff2 72b68ff3 75738ff4 7a638ff5     ..Dm...r..su..cz
   235c0:	84b88ff6 8b728ff7 91b88ff8 93208ff9     ......r....... .
   235d0:	56318ffa 57f48ffb 98fe8ffc 62ed9040     ..1V...W....@..b
   235e0:	690d9041 6b969042 71ed9043 7e549044     A..iB..kC..qD.T~
   235f0:	80779045 82729046 89e69047 98df9048     E.w.F.r.G...H...
   23600:	87559049 8fb1904a 5c3b904b 4f38904c     I.U.J...K.;\L.8O
   23610:	4fe1904d 4fb5904e 5507904f 5a209050     M..ON..OO..UP. Z
   23620:	5bdd9051 5be99052 5fc39053 614e9054     Q..[R..[S.._T.Na
   23630:	632f9055 65b09056 664b9057 68ee9058     U./cV..eW.KfX..h
   23640:	699b9059 6d78905a 6df1905b 7533905c     Y..iZ.xm[..m\.3u
   23650:	75b9905d 771f905e 795e905f 79e69060     ]..u^..w_.^y`..y
   23660:	7d339061 81e39062 82af9063 85aa9064     a.3}b...c...d...
   23670:	89aa9065 8a3a9066 8eab9067 8f9b9068     e...f.:.g...h...
   23680:	90329069 91dd906a 9707906b 4eba906c     i.2.j...k...l..N
   23690:	4ec1906d 5203906e 5875906f 58ec9070     m..Nn..Ro.uXp..X
   236a0:	5c0b9071 751a9072 5c3d9073 814e9074     q..\r..us.=\t.N.
   236b0:	8a0a9075 8fc59076 96639077 976d9078     u...v...w.c.x.m.
   236c0:	7b259079 8acf907a 9808907b 9162907c     y.%{z...{...|.b.
   236d0:	56f3907d 53a8907e 90179080 54399081     }..V~..S......9T
   236e0:	57829082 5e259083 63a89084 6c349085     ...W..%^...c..4l
   236f0:	708a9086 77619087 7c8b9088 7fe09089     ...p..aw...|....
   23700:	8870908a 9042908b 9154908c 9310908d     ..p...B...T.....
   23710:	9318908e 968f908f 745e9090 9ac49091     ..........^t....
   23720:	5d079092 5d699093 65709094 67a29095     ...]..i]..pe...g
   23730:	8da89096 96db9097 636e9098 67499099     ..........nc..Ig
   23740:	6919909a 83c5909b 9817909c 96c0909d     ...i............
   23750:	88fe909e 6f84909f 647a90a0 5bf890a1     .......o..zd...[
   23760:	4e1690a2 702c90a3 755d90a4 662f90a5     ...N..,p..]u../f
   23770:	51c490a6 523690a7 52e290a8 59d390a9     ...Q..6R...R...Y
   23780:	5f8190aa 602790ab 621090ac 653f90ad     ..._..'`...b..?e
   23790:	657490ae 661f90af 667490b0 68f290b1     ..te...f..tf...h
   237a0:	681690b2 6b6390b3 6e0590b4 727290b5     ...h..ck...n..rr
   237b0:	751f90b6 76db90b7 7cbe90b8 805690b9     ...u...v...|..V.
   237c0:	58f090ba 88fd90bb 897f90bc 8aa090bd     ...X............
   237d0:	8a9390be 8acb90bf 901d90c0 919290c1     ................
   237e0:	975290c2 975990c3 658990c4 7a0e90c5     ..R...Y....e...z
   237f0:	810690c6 96bb90c7 5e2d90c8 60dc90c9     ..........-^...`
   23800:	621a90ca 65a590cb 661490cc 679090cd     ...b...e...f...g
   23810:	77f390ce 7a4d90cf 7c4d90d0 7e3e90d1     ...w..Mz..M|..>~
   23820:	810a90d2 8cac90d3 8d6490d4 8de190d5     ..........d.....
   23830:	8e5f90d6 78a990d7 520790d8 62d990d9     .._....x...R...b
   23840:	63a590da 644290db 629890dc 8a2d90dd     ...c..Bd...b..-.
   23850:	7a8390de 7bc090df 8aac90e0 96ea90e1     ...z...{........
   23860:	7d7690e2 820c90e3 874990e4 4ed990e5     ..v}......I....N
   23870:	514890e6 534390e7 536090e8 5ba390e9     ..HQ..CS..`S...[
   23880:	5c0290ea 5c1690eb 5ddd90ec 622690ed     ...\...\...]..&b
   23890:	624790ee 64b090ef 681390f0 683490f1     ..Gb...d...h..4h
   238a0:	6cc990f2 6d4590f3 6d1790f4 67d390f5     ...l..Em...m...g
   238b0:	6f5c90f6 714e90f7 717d90f8 65cb90f9     ..\o..Nq..}q...e
   238c0:	7a7f90fa 7bad90fb 7dda90fc 7e4a9140     ...z...{...}@.J~
   238d0:	7fa89141 817a9142 821b9143 82399144     A...B.z.C...D.9.
   238e0:	85a69145 8a6e9146 8cce9147 8df59148     E...F.n.G...H...
   238f0:	90789149 9077914a 92ad914b 9291914c     I.x.J.w.K...L...
   23900:	9583914d 9bae914e 524d914f 55849150     M...N...O.MRP..U
   23910:	6f389151 71369152 51689153 79859154     Q.8oR.6qS.hQT..y
   23920:	7e559155 81b39156 7cce9157 564c9158     U.U~V...W..|X.LV
   23930:	58519159 5ca8915a 63aa915b 66fe915c     Y.QXZ..\[..c\..f
   23940:	66fd915d 695a915e 72d9915f 758f9160     ]..f^.Zi_..r`..u
   23950:	758e9161 790e9162 79569163 79df9164     a..ub..yc.Vyd..y
   23960:	7c979165 7d209166 7d449167 86079168     e..|f. }g.D}h...
   23970:	8a349169 963b916a 9061916b 9f20916c     i.4.j.;.k.a.l. .
   23980:	50e7916d 5275916e 53cc916f 53e29170     m..Pn.uRo..Sp..S
   23990:	50099171 55aa9172 58ee9173 594f9174     q..Pr..Us..Xt.OY
   239a0:	723d9175 5b8b9176 5c649177 531d9178     u.=rv..[w.d\x..S
   239b0:	60e39179 60f3917a 635c917b 6383917c     y..`z..`{.\c|..c
   239c0:	633f917d 63bb917e 64cd9180 65e99181     }.?c~..c...d...e
   239d0:	66f99182 5de39183 69cd9184 69fd9185     ...f...]...i...i
   239e0:	6f159186 71e59187 4e899188 75e99189     ...o...q...N...u
   239f0:	76f8918a 7a93918b 7cdf918c 7dcf918d     ...v...z...|...}
   23a00:	7d9c918e 8061918f 83499190 83589191     ...}..a...I...X.
   23a10:	846c9192 84bc9193 85fb9194 88c59195     ..l.............
   23a20:	8d709196 90019197 906d9198 93979199     ..p.......m.....
   23a30:	971c919a 9a12919b 50cf919c 5897919d     ...........P...X
   23a40:	618e919e 81d3919f 853591a0 8d0891a1     ...a......5.....
   23a50:	902091a2 4fc391a3 507491a4 524791a5     .. ....O..tP..GR
   23a60:	537391a6 606f91a7 634991a8 675f91a9     ..sS..o`..Ic.._g
   23a70:	6e2c91aa 8db391ab 901f91ac 4fd791ad     ..,n...........O
   23a80:	5c5e91ae 8cca91af 65cf91b0 7d9a91b1     ..^\.......e...}
   23a90:	535291b2 889691b3 517691b4 63c391b5     ..RS......vQ...c
   23aa0:	5b5891b6 5b6b91b7 5c0a91b8 640d91b9     ..X[..k[...\...d
   23ab0:	675191ba 905c91bb 4ed691bc 591a91bd     ..Qg..\....N...Y
   23ac0:	592a91be 6c7091bf 8a5191c0 553e91c1     ..*Y..pl..Q...>U
   23ad0:	581591c2 59a591c3 60f091c4 625391c5     ...X...Y...`..Sb
   23ae0:	67c191c6 823591c7 695591c8 964091c9     ...g..5...Ui..@.
   23af0:	99c491ca 9a2891cb 4f5391cc 580691cd     ......(...SO...X
   23b00:	5bfe91ce 801091cf 5cb191d0 5e2f91d1     ...[.......\../^
   23b10:	5f8591d2 602091d3 614b91d4 623491d5     ..._.. `..Ka..4b
   23b20:	66ff91d6 6cf091d7 6ede91d8 80ce91d9     ...f...l...n....
   23b30:	817f91da 82d491db 888b91dc 8cb891dd     ................
   23b40:	900091de 902e91df 968a91e0 9edb91e1     ................
   23b50:	9bdb91e2 4ee391e3 53f091e4 592791e5     .......N...S..'Y
   23b60:	7b2c91e6 918d91e7 984c91e8 9df991e9     ..,{......L.....
   23b70:	6edd91ea 702791eb 535391ec 554491ed     ...n..'p..SS..DU
   23b80:	5b8591ee 625891ef 629e91f0 62d391f1     ...[..Xb...b...b
   23b90:	6ca291f2 6fef91f3 742291f4 8a1791f5     ...l...o.."t....
   23ba0:	943891f6 6fc191f7 8afe91f8 833891f9     ..8....o......8.
   23bb0:	51e791fa 86f891fb 53ea91fc 53e99240     ...Q.......S@..S
   23bc0:	4f469241 90549242 8fb09243 596a9244     A.FOB.T.C...D.jY
   23bd0:	81319245 5dfd9246 7aea9247 8fbf9248     E.1.F..]G..zH...
   23be0:	68da9249 8c37924a 72f8924b 9c48924c     I..hJ.7.K..rL.H.
   23bf0:	6a3d924d 8ab0924e 4e39924f 53589250     M.=jN...O.9NP.XS
   23c00:	56069251 57669252 62c59253 63a29254     Q..VR.fWS..bT..c
   23c10:	65e69255 6b4e9256 6de19257 6e5b9258     U..eV.NkW..mX.[n
   23c20:	70ad9259 77ed925a 7aef925b 7baa925c     Y..pZ..w[..z\..{
   23c30:	7dbb925d 803d925e 80c6925f 86cb9260     ]..}^.=._...`...
   23c40:	8a959261 935b9262 56e39263 58c79264     a...b.[.c..Vd..X
   23c50:	5f3e9265 65ad9266 66969267 6a809268     e.>_f..eg..fh..j
   23c60:	6bb59269 7537926a 8ac7926b 5024926c     i..kj.7uk...l.$P
   23c70:	77e5926d 5730926e 5f1b926f 60659270     m..wn.0Wo.._p.e`
   23c80:	667a9271 6c609272 75f49273 7a1a9274     q.zfr.`ls..ut..z
   23c90:	7f6e9275 81f49276 87189277 90459278     u.n.v...w...x.E.
   23ca0:	99b39279 7bc9927a 755c927b 7af9927c     y...z..{{.\u|..z
   23cb0:	7b51927d 84c4927e 90109280 79e99281     }.Q{~..........y
   23cc0:	7a929282 83369283 5ae19284 77409285     ...z..6....Z..@w
   23cd0:	4e2d9286 4ef29287 5b999288 5fe09289     ..-N...N...[..._
   23ce0:	62bd928a 663c928b 67f1928c 6ce8928d     ...b..<f...g...l
   23cf0:	866b928e 8877928f 8a3b9290 914e9291     ..k...w...;...N.
   23d00:	92f39292 99d09293 6a179294 70269295     ...........j..&p
   23d10:	732a9296 82e79297 84579298 8caf9299     ..*s......W.....
   23d20:	4e01929a 5146929b 51cb929c 558b929d     ...N..FQ...Q...U
   23d30:	5bf5929e 5e16929f 5e3392a0 5e8192a1     ...[...^..3^...^
   23d40:	5f1492a2 5f3592a3 5f6b92a4 5fb492a5     ..._..5_..k_..._
   23d50:	61f292a6 631192a7 66a292a8 671d92a9     ...a...c...f...g
   23d60:	6f6e92aa 725292ab 753a92ac 773a92ad     ..no..Rr..:u..:w
   23d70:	807492ae 813992af 817892b0 877692b1     ..t...9...x...v.
   23d80:	8abf92b2 8adc92b3 8d8592b4 8df392b5     ................
   23d90:	929a92b6 957792b7 980292b8 9ce592b9     ......w.........
   23da0:	52c592ba 635792bb 76f492bc 671592bd     ...R..Wc...v...g
   23db0:	6c8892be 73cd92bf 8cc392c0 93ae92c1     ...l...s........
   23dc0:	967392c2 6d2592c3 589c92c4 690e92c5     ..s...%m...X...i
   23dd0:	69cc92c6 8ffd92c7 939a92c8 75db92c9     ...i...........u
   23de0:	901a92ca 585a92cb 680292cc 63b492cd     ......ZX...h...c
   23df0:	69fb92ce 4f4392cf 6f2c92d0 67d892d1     ...i..CO..,o...g
   23e00:	8fbb92d2 852692d3 7db492d4 935492d5     ......&....}..T.
   23e10:	693f92d6 6f7092d7 576a92d8 58f792d9     ..?i..po..jW...X
   23e20:	5b2c92da 7d2c92db 722a92dc 540a92dd     ..,[..,}..*r...T
   23e30:	91e392de 9db492df 4ead92e0 4f4e92e1     ...........N..NO
   23e40:	505c92e2 507592e3 524392e4 8c9e92e5     ..\P..uP..CR....
   23e50:	544892e6 582492e7 5b9a92e8 5e1d92e9     ..HT..$X...[...^
   23e60:	5e9592ea 5ead92eb 5ef792ec 5f1f92ed     ...^...^...^..._
   23e70:	608c92ee 62b592ef 633a92f0 63d092f1     ...`...b..:c...c
   23e80:	68af92f2 6c4092f3 788792f4 798e92f5     ...h..@l...x...y
   23e90:	7a0b92f6 7de092f7 824792f8 8a0292f9     ...z...}..G.....
   23ea0:	8ae692fa 8e4492fb 901392fc 90b89340     ......D.....@...
   23eb0:	912d9341 91d89342 9f0e9343 6ce59344     A.-.B...C...D..l
   23ec0:	64589345 64e29346 65759347 6ef49348     E.XdF..dG.ueH..n
   23ed0:	76849349 7b1b934a 9069934b 93d1934c     I..vJ..{K.i.L...
   23ee0:	6eba934d 54f2934e 5fb9934f 64a49350     M..nN..TO.._P..d
   23ef0:	8f4d9351 8fed9352 92449353 51789354     Q.M.R...S.D.T.xQ
   23f00:	586b9355 59299356 5c559357 5e979358     U.kXV.)YW.U\X..^
   23f10:	6dfb9359 7e8f935a 751c935b 8cbc935c     Y..mZ..~[..u\...
   23f20:	8ee2935d 985b935e 70b9935f 4f1d9360     ]...^.[._..p`..O
   23f30:	6bbf9361 6fb19362 75309363 96fb9364     a..kb..oc.0ud...
   23f40:	514e9365 54109366 58359367 58579368     e.NQf..Tg.5Xh.WX
   23f50:	59ac9369 5c60936a 5f92936b 6597936c     i..Yj.`\k.._l..e
   23f60:	675c936d 6e21936e 767b936f 83df9370     m.\gn.!no.{vp...
   23f70:	8ced9371 90149372 90fd9373 934d9374     q...r...s...t.M.
   23f80:	78259375 783a9376 52aa9377 5ea69378     u.%xv.:xw..Rx..^
   23f90:	571f9379 5974937a 6012937b 5012937c     y..Wz.tY{..`|..P
   23fa0:	515a937d 51ac937e 51cd9380 52009381     }.ZQ~..Q...Q...R
   23fb0:	55109382 58549383 58589384 59579385     ...U..TX..XX..WY
   23fc0:	5b959386 5cf69387 5d8b9388 60bc9389     ...[...\...]...`
   23fd0:	6295938a 642d938b 6771938c 6843938d     ...b..-d..qg..Ch
   23fe0:	68bc938e 68df938f 76d79390 6dd89391     ...h...h...v...m
   23ff0:	6e6f9392 6d9b9393 706f9394 71c89395     ..on...m..op...q
   24000:	5f539396 75d89397 79779398 7b499399     ..S_...u..wy..I{
   24010:	7b54939a 7b52939b 7cd6939c 7d71939d     ..T{..R{...|..q}
   24020:	5230939e 8463939f 856993a0 85e493a1     ..0R..c...i.....
   24030:	8a0e93a2 8b0493a3 8c4693a4 8e0f93a5     ..........F.....
   24040:	900393a6 900f93a7 941993a8 967693a9     ..............v.
   24050:	982d93aa 9a3093ab 95d893ac 50cd93ad     ..-...0........P
   24060:	52d593ae 540c93af 580293b0 5c0e93b1     ...R...T...X...\
   24070:	61a793b2 649e93b3 6d1e93b4 77b393b5     ...a...d...m...w
   24080:	7ae593b6 80f493b7 840493b8 905393b9     ...z..........S.
   24090:	928593ba 5ce093bb 9d0793bc 533f93bd     .......\......?S
   240a0:	5f9793be 5fb393bf 6d9c93c0 727993c1     ..._..._...m..yr
   240b0:	776393c2 79bf93c3 7be493c4 6bd293c5     ..cw...y...{...k
   240c0:	72ec93c6 8aad93c7 680393c8 6a6193c9     ...r.......h..aj
   240d0:	51f893ca 7a8193cb 693493cc 5c4a93cd     ...Q...z..4i..J\
   240e0:	9cf693ce 82eb93cf 5bc593d0 914993d1     ...........[..I.
   240f0:	701e93d2 567893d3 5c6f93d4 60c793d5     ...p..xV..o\...`
   24100:	656693d6 6c8c93d7 8c5a93d8 904193d9     ..fe...l..Z...A.
   24110:	981393da 545193db 66c793dc 920d93dd     ......QT...f....
   24120:	594893de 90a393df 518593e0 4e4d93e1     ..HY.......Q..MN
   24130:	51ea93e2 859993e3 8b0e93e4 705893e5     ...Q..........Xp
   24140:	637a93e6 934b93e7 696293e8 99b493e9     ..zc..K...bi....
   24150:	7e0493ea 757793eb 535793ec 696093ed     ...~..wu..WS..`i
   24160:	8edf93ee 96e393ef 6c5d93f0 4e8c93f1     ..........]l...N
   24170:	5c3c93f2 5f1093f3 8fe993f4 530293f5     ..<\..._.......S
   24180:	8cd193f6 808993f7 867993f8 5eff93f9     ..........y....^
   24190:	65e593fa 4e7393fb 516593fc 59829440     ...e..sN..eQ@..Y
   241a0:	5c3f9441 97ee9442 4efb9443 598a9444     A.?\B...C..ND..Y
   241b0:	5fcd9445 8a8d9446 6fe19447 79b09448     E.._F...G..oH..y
   241c0:	79629449 5be7944a 8471944b 732b944c     I.byJ..[K.q.L.+s
   241d0:	71b1944d 5e74944e 5ff5944f 637b9450     M..qN.t^O.._P.{c
   241e0:	649a9451 71c39452 7c989453 4e439454     Q..dR..qS..|T.CN
   241f0:	5efc9455 4e4b9456 57dc9457 56a29458     U..^V.KNW..WX..V
   24200:	60a99459 6fc3945a 7d0d945b 80fd945c     Y..`Z..o[..}\...
   24210:	8133945d 81bf945e 8fb2945f 89979460     ].3.^..._...`...
   24220:	86a49461 5df49462 628a9463 64ad9464     a...b..]c..bd..d
   24230:	89879465 67779466 6ce29467 6d3e9468     e...f.wgg..lh.>m
   24240:	74369469 7834946a 5a46946b 7f75946c     i.6tj.4xk.FZl.u.
   24250:	82ad946d 99ac946e 4ff3946f 5ec39470     m...n...o..Op..^
   24260:	62dd9471 63929472 65579473 676f9474     q..br..cs.Wet.og
   24270:	76c39475 724c9476 80cc9477 80ba9478     u..vv.Lrw...x...
   24280:	8f299479 914d947a 500d947b 57f9947c     y.).z.M.{..P|..W
   24290:	5a92947d 6885947e 69739480 71649481     }..Z~..h..si..dq
   242a0:	72fd9482 8cb79483 58f29484 8ce09485     ...r.......X....
   242b0:	966a9486 90199487 877f9488 79e49489     ..j............y
   242c0:	77e7948a 8429948b 4f2f948c 5265948d     ...w..).../O..eR
   242d0:	535a948e 62cd948f 67cf9490 6cca9491     ..ZS...b...g...l
   242e0:	767d9492 7b949493 7c959494 82369495     ..}v...{...|..6.
   242f0:	85849496 8feb9497 66dd9498 6f209499     ...........f.. o
   24300:	7206949a 7e1b949b 83ab949c 99c1949d     ...r...~........
   24310:	9ea6949e 51fd949f 7bb194a0 787294a1     .......Q...{..rx
   24320:	7bb894a2 808794a3 7b4894a4 6ae894a5     ...{......H{...j
   24330:	5e6194a6 808c94a7 755194a8 756094a9     ..a^......Qu..`u
   24340:	516b94aa 926294ab 6e8c94ac 767a94ad     ..kQ..b....n..zv
   24350:	919794ae 9aea94af 4f1094b0 7f7094b1     ...........O..p.
   24360:	629c94b2 7b4f94b3 95a594b4 9ce994b5     ...b..O{........
   24370:	567a94b6 585994b7 86e494b8 96bc94b9     ..zV..YX........
   24380:	4f3494ba 522494bb 534a94bc 53cd94bd     ..4O..$R..JS...S
   24390:	53db94be 5e0694bf 642c94c0 659194c1     ...S...^..,d...e
   243a0:	677f94c2 6c3e94c3 6c4e94c4 724894c5     ...g..>l..Nl..Hr
   243b0:	72af94c6 73ed94c7 755494c8 7e4194c9     ...r...s..Tu..A~
   243c0:	822c94ca 85e994cb 8ca994cc 7bc494cd     ..,............{
   243d0:	91c694ce 716994cf 981294d0 98ef94d1     ......iq........
   243e0:	633d94d2 666994d3 756a94d4 76e494d5     ..=c..if..ju...v
   243f0:	78d094d6 854394d7 86ee94d8 532a94d9     ...x..C.......*S
   24400:	535194da 542694db 598394dc 5e8794dd     ..QS..&T...Y...^
   24410:	5f7c94de 60b294df 624994e0 627994e1     ..|_...`..Ib..yb
   24420:	62ab94e2 659094e3 6bd494e4 6ccc94e5     ...b...e...k...l
   24430:	75b294e6 76ae94e7 789194e8 79d894e9     ...u...v...x...y
   24440:	7dcb94ea 7f7794eb 80a594ec 88ab94ed     ...}..w.........
   24450:	8ab994ee 8cbb94ef 907f94f0 975e94f1     ..............^.
   24460:	98db94f2 6a0b94f3 7c3894f4 509994f5     .......j..8|...P
   24470:	5c3e94f6 5fae94f7 678794f8 6bd894f9     ..>\..._...g...k
   24480:	743594fa 770994fb 7f8e94fc 9f3b9540     ..5t...w....@.;.
   24490:	67ca9541 7a179542 53399543 758b9544     A..gB..zC.9SD..u
   244a0:	9aed9545 5f669546 819d9547 83f19548     E...F.f_G...H...
   244b0:	80989549 5f3c954a 5fc5954b 7562954c     I...J.<_K.._L.bu
   244c0:	7b46954d 903c954e 6867954f 59eb9550     M.F{N.<.O.ghP..Y
   244d0:	5a9b9551 7d109552 767e9553 8b2c9554     Q..ZR..}S.~vT.,.
   244e0:	4ff59555 5f6a9556 6a199557 6c379558     U..OV.j_W..jX.7l
   244f0:	6f029559 74e2955a 7968955b 8868955c     Y..oZ..t[.hy\.h.
   24500:	8a55955d 8c79955e 5edf955f 63cf9560     ].U.^.y._..^`..c
   24510:	75c59561 79d29562 82d79563 93289564     a..ub..yc...d.(.
   24520:	92f29565 849c9566 86ed9567 9c2d9568     e...f...g...h.-.
   24530:	54c19569 5f6c956a 658c956b 6d5c956c     i..Tj.l_k..el.\m
   24540:	7015956d 8ca7956e 8cd3956f 983b9570     m..pn...o...p.;.
   24550:	654f9571 74f69572 4e0d9573 4ed89574     q.Oer..ts..Nt..N
   24560:	57e09575 592b9576 5a669577 5bcc9578     u..Wv.+Yw.fZx..[
   24570:	51a89579 5e03957a 5e9c957b 6016957c     y..Qz..^{..^|..`
   24580:	6276957d 6577957e 65a79580 666e9581     }.vb~.we...e..nf
   24590:	6d6e9582 72369583 7b269584 81509585     ..nm..6r..&{..P.
   245a0:	819a9586 82999587 8b5c9588 8ca09589     ..........\.....
   245b0:	8ce6958a 8d74958b 961c958c 9644958d     ......t.......D.
   245c0:	4fae958e 64ab958f 6b669590 821e9591     ...O...d..fk....
   245d0:	84619592 856a9593 90e89594 5c019595     ..a...j........\
   245e0:	69539596 98a89597 847a9598 85579599     ..Si......z...W.
   245f0:	4f0f959a 526f959b 5fa9959c 5e45959d     ...O..oR..._..E^
   24600:	670d959e 798f959f 817995a0 890795a1     ...g...y..y.....
   24610:	898695a2 6df595a3 5f1795a4 625595a5     .......m..._..Ub
   24620:	6cb895a6 4ecf95a7 726995a8 9b9295a9     ...l...N..ir....
   24630:	520695aa 543b95ab 567495ac 58b395ad     ...R..;T..tV...X
   24640:	61a495ae 626e95af 711a95b0 596e95b1     ...a..nb...q..nY
   24650:	7c8995b2 7cde95b3 7d1b95b4 96f095b5     ...|...|...}....
   24660:	658795b6 805e95b7 4e1995b8 4f7595b9     ...e..^....N..uO
   24670:	517595ba 584095bb 5e6395bc 5e7395bd     ..uQ..@X..c^..s^
   24680:	5f0a95be 67c495bf 4e2695c0 853d95c1     ..._...g..&N..=.
   24690:	958995c2 965b95c3 7c7395c4 980195c5     ......[...s|....
   246a0:	50fb95c6 58c195c7 765695c8 78a795c9     ...P...X..Vv...x
   246b0:	522595ca 77a595cb 851195cc 7b8695cd     ..%R...w.......{
   246c0:	504f95ce 590995cf 724795d0 7bc795d1     ..OP...Y..Gr...{
   246d0:	7de895d2 8fba95d3 8fd495d4 904d95d5     ...}..........M.
   246e0:	4fbf95d6 52c995d7 5a2995d8 5f0195d9     ...O...R..)Z..._
   246f0:	97ad95da 4fdd95db 821795dc 92ea95dd     .......O........
   24700:	570395de 635595df 6b6995e0 752b95e1     ...W..Uc..ik..+u
   24710:	88dc95e2 8f1495e3 7a4295e4 52df95e5     ..........Bz...R
   24720:	589395e6 615595e7 620a95e8 66ae95e9     ...X..Ua...b...f
   24730:	6bcd95ea 7c3f95eb 83e995ec 502395ed     ...k..?|......#P
   24740:	4ff895ee 530595ef 544695f0 583195f1     ...O...S..FT..1X
   24750:	594995f2 5b9d95f3 5cf095f4 5cef95f5     ..IY...[...\...\
   24760:	5d2995f6 5e9695f7 62b195f8 636795f9     ..)]...^...b..gc
   24770:	653e95fa 65b995fb 670b95fc 6cd59640     ..>e...e...g@..l
   24780:	6ce19641 70f99642 78329643 7e2b9644     A..lB..pC.2xD.+~
   24790:	80de9645 82b39646 840c9647 84ec9648     E...F...G...H...
   247a0:	87029649 8912964a 8a2a964b 8c4a964c     I...J...K.*.L.J.
   247b0:	90a6964d 92d2964e 98fd964f 9cf39650     M...N...O...P...
   247c0:	9d6c9651 4e4f9652 4ea19653 508d9654     Q.l.R.ONS..NT..P
   247d0:	52569655 574a9656 59a89657 5e3d9658     U.VRV.JWW..YX.=^
   247e0:	5fd89659 5fd9965a 623f965b 66b4965c     Y.._Z.._[.?b\..f
   247f0:	671b965d 67d0965e 68d2965f 51929660     ]..g^..g_..h`..Q
   24800:	7d219661 80aa9662 81a89663 8b009664     a.!}b...c...d...
   24810:	8c8c9665 8cbf9666 927e9667 96329668     e...f...g.~.h.2.
   24820:	54209669 982c966a 5317966b 50d5966c     i. Tj.,.k..Sl..P
   24830:	535c966d 58a8966e 64b2966f 67349670     m.\Sn..Xo..dp.4g
   24840:	72679671 77669672 7a469673 91e69674     q.grr.fws.Fzt...
   24850:	52c39675 6ca19676 6b869677 58009678     u..Rv..lw..kx..X
   24860:	5e4c9679 5954967a 672c967b 7ffb967c     y.L^z.TY{.,g|...
   24870:	51e1967d 76c6967e 64699680 78e89681     }..Q~..v..id...x
   24880:	9b549682 9ebb9683 57cb9684 59b99685     ..T........W...Y
   24890:	66279686 679a9687 6bce9688 54e99689     ..'f...g...k...T
   248a0:	69d9968a 5e55968b 819c968c 6795968d     ...i..U^.......g
   248b0:	9baa968e 67fe968f 9c529690 685d9691     .......g..R...]h
   248c0:	4ea69692 4fe39693 53c89694 62b99695     ...N...O...S...b
   248d0:	672b9696 6cab9697 8fc49698 4fad9699     ..+g...l.......O
   248e0:	7e6d969a 9ebf969b 4e07969c 6162969d     ..m~.......N..ba
   248f0:	6e80969e 6f2b969f 851396a0 547396a1     ...n..+o......sT
   24900:	672a96a2 9b4596a3 5df396a4 7b9596a5     ..*g..E....]...{
   24910:	5cac96a6 5bc696a7 871c96a8 6e4a96a9     ...\...[......Jn
   24920:	84d196aa 7a1496ab 810896ac 599996ad     .......z.......Y
   24930:	7c8d96ae 6c1196af 772096b0 52d996b1     ...|...l.. w...R
   24940:	592296b2 712196b3 725f96b4 77db96b5     .."Y..!q.._r...w
   24950:	972796b6 9d6196b7 690b96b8 5a7f96b9     ..'...a....i...Z
   24960:	5a1896ba 51a596bb 540d96bc 547d96bd     ...Z...Q...T..}T
   24970:	660e96be 76df96bf 8ff796c0 929896c1     ...f...v........
   24980:	9cf496c2 59ea96c3 725d96c4 6ec596c5     .......Y..]r...n
   24990:	514d96c6 68c996c7 7dbf96c8 7dec96c9     ..MQ...h...}...}
   249a0:	976296ca 9eba96cb 647896cc 6a2196cd     ..b.......xd..!j
   249b0:	830296ce 598496cf 5b5f96d0 6bdb96d1     .......Y.._[...k
   249c0:	731b96d2 76f296d3 7db296d4 801796d5     ...s...v...}....
   249d0:	849996d6 513296d7 672896d8 9ed996d9     ......2Q..(g....
   249e0:	76ee96da 676296db 52ff96dc 990596dd     ...v..bg...R....
   249f0:	5c2496de 623b96df 7c7e96e0 8cb096e1     ..$\..;b..~|....
   24a00:	554f96e2 60b696e3 7d0b96e4 958096e5     ..OU...`...}....
   24a10:	530196e6 4e5f96e7 51b696e8 591c96e9     ...S.._N...Q...Y
   24a20:	723a96ea 803696eb 91ce96ec 5f2596ed     ..:r..6.......%_
   24a30:	77e296ee 538496ef 5f7996f0 7d0496f1     ...w...S..y_...}
   24a40:	85ac96f2 8a3396f3 8e8d96f4 975696f5     ......3.......V.
   24a50:	67f396f6 85ae96f7 945396f8 610996f9     ...g......S....a
   24a60:	610896fa 6cb996fb 765296fc 8aed9740     ...a...l..Rv@...
   24a70:	8f389741 552f9742 4f519743 512a9744     A.8.B./UC.QOD.*Q
   24a80:	52c79745 53cb9746 5ba59747 5e7d9748     E..RF..SG..[H.}^
   24a90:	60a09749 6182974a 63d6974b 6709974c     I..`J..aK..cL..g
   24aa0:	67da974d 6e67974e 6d8c974f 73369750     M..gN.gnO..mP.6s
   24ab0:	73379751 75319752 79509753 88d59754     Q.7sR.1uS.PyT...
   24ac0:	8a989755 904a9756 90919757 90f59758     U...V.J.W...X...
   24ad0:	96c49759 878d975a 5915975b 4e88975c     Y...Z...[..Y\..N
   24ae0:	4f59975d 4e0e975e 8a89975f 8f3f9760     ].YO^..N_...`.?.
   24af0:	98109761 50ad9762 5e7c9763 59969764     a...b..Pc.|^d..Y
   24b00:	5bb99765 5eb89766 63da9767 63fa9768     e..[f..^g..ch..c
   24b10:	64c19769 66dc976a 694a976b 69d8976c     i..dj..fk.Jil..i
   24b20:	6d0b976d 6eb6976e 7194976f 75289770     m..mn..no..qp.(u
   24b30:	7aaf9771 7f8a9772 80009773 84499774     q..zr...s...t.I.
   24b40:	84c99775 89819776 8b219777 8e0a9778     u...v...w.!.x...
   24b50:	90659779 967d977a 990a977b 617e977c     y.e.z.}.{...|.~a
   24b60:	6291977d 6b32977e 6c839780 6d749781     }..b~.2k...l..tm
   24b70:	7fcc9782 7ffc9783 6dc09784 7f859785     ...........m....
   24b80:	87ba9786 88f89787 67659788 83b19789     ..........eg....
   24b90:	983c978a 96f7978b 6d1b978c 7d61978d     ..<........m..a}
   24ba0:	843d978e 916a978f 4e719790 53759791     ..=...j...qN..uS
   24bb0:	5d509792 6b049793 6feb9794 85cd9795     ..P]...k...o....
   24bc0:	862d9796 89a79797 52299798 540f9799     ..-.......)R...T
   24bd0:	5c65979a 674e979b 68a8979c 7406979d     ..e\..Ng...h...t
   24be0:	7483979e 75e2979f 88cf97a0 88e197a1     ...t...u........
   24bf0:	91cc97a2 96e297a3 967897a4 5f8b97a5     ..........x...._
   24c00:	738797a6 7acb97a7 844e97a8 63a097a9     ...s...z..N....c
   24c10:	756597aa 528997ab 6d4197ac 6e9c97ad     ..eu...R..Am...n
   24c20:	740997ae 755997af 786b97b0 7c9297b1     ...t..Yu..kx...|
   24c30:	968697b2 7adc97b3 9f8d97b4 4fb697b5     .......z.......O
   24c40:	616e97b6 65c597b7 865c97b8 4e8697b9     ..na...e..\....N
   24c50:	4eae97ba 50da97bb 4e2197bc 51cc97bd     ...N...P..!N...Q
   24c60:	5bee97be 659997bf 688197c0 6dbc97c1     ...[...e...h...m
   24c70:	731f97c2 764297c3 77ad97c4 7a1c97c5     ...s..Bv...w...z
   24c80:	7ce797c6 826f97c7 8ad297c8 907c97c9     ...|..o.......|.
   24c90:	91cf97ca 967597cb 981897cc 529b97cd     ......u........R
   24ca0:	7dd197ce 502b97cf 539897d0 679797d1     ...}..+P...S...g
   24cb0:	6dcb97d2 71d097d3 743397d4 81e897d5     ...m...q..3t....
   24cc0:	8f2a97d6 96a397d7 9c5797d8 9e9f97d9     ..*.......W.....
   24cd0:	746097da 584197db 6d9997dc 7d2f97dd     ..`t..AX...m../}
   24ce0:	985e97de 4ee497df 4f3697e0 4f8b97e1     ..^....N..6O...O
   24cf0:	51b797e2 52b197e3 5dba97e4 601c97e5     ...Q...R...]...`
   24d00:	73b297e6 793c97e7 82d397e8 923497e9     ...s..<y......4.
   24d10:	96b797ea 96f697eb 970a97ec 9e9797ed     ................
   24d20:	9f6297ee 66a697ef 6b7497f0 521797f1     ..b....f..tk...R
   24d30:	52a397f2 70c897f3 88c297f4 5ec997f5     ...R...p.......^
   24d40:	604b97f6 619097f7 6f2397f8 714997f9     ..K`...a..#o..Iq
   24d50:	7c3e97fa 7df497fb 806f97fc 84ee9840     ..>|...}..o.@...
   24d60:	90239841 932c9842 54429843 9b6f9844     A.#.B.,.C.BTD.o.
   24d70:	6ad39845 70899846 8cc29847 8def9848     E..jF..pG...H...
   24d80:	97329849 52b4984a 5a41984b 5eca984c     I.2.J..RK.AZL..^
   24d90:	5f04984d 6717984e 697c984f 69949850     M.._N..gO.|iP..i
   24da0:	6d6a9851 6f0f9852 72629853 72fc9854     Q.jmR..oS.brT..r
   24db0:	7bed9855 80019856 807e9857 874b9858     U..{V...W.~.X.K.
   24dc0:	90ce9859 516d985a 9e93985b 7984985c     Y...Z.mQ[...\..y
   24dd0:	808b985d 9332985e 8ad6985f 502d9860     ]...^.2._...`.-P
   24de0:	548c9861 8a719862 6b6a9863 8cc49864     a..Tb.q.c.jkd...
   24df0:	81079865 60d19866 67a09867 9df29868     e...f..`g..gh...
   24e00:	4e999869 4e98986a 9c10986b 8a6b986c     i..Nj..Nk...l.k.
   24e10:	85c1986d 8568986e 6900986f 6e7e9870     m...n.h.o..ip.~n
   24e20:	78979871 81559872 5f0c989f 4e1098a0     q..xr.U...._...N
   24e30:	4e1598a1 4e2a98a2 4e3198a3 4e3698a4     ...N..*N..1N..6N
   24e40:	4e3c98a5 4e3f98a6 4e4298a7 4e5698a8     ..<N..?N..BN..VN
   24e50:	4e5898a9 4e8298aa 4e8598ab 8c6b98ac     ..XN...N...N..k.
   24e60:	4e8a98ad 821298ae 5f0d98af 4e8e98b0     ...N......._...N
   24e70:	4e9e98b1 4e9f98b2 4ea098b3 4ea298b4     ...N...N...N...N
   24e80:	4eb098b5 4eb398b6 4eb698b7 4ece98b8     ...N...N...N...N
   24e90:	4ecd98b9 4ec498ba 4ec698bb 4ec298bc     ...N...N...N...N
   24ea0:	4ed798bd 4ede98be 4eed98bf 4edf98c0     ...N...N...N...N
   24eb0:	4ef798c1 4f0998c2 4f5a98c3 4f3098c4     ...N...O..ZO..0O
   24ec0:	4f5b98c5 4f5d98c6 4f5798c7 4f4798c8     ..[O..]O..WO..GO
   24ed0:	4f7698c9 4f8898ca 4f8f98cb 4f9898cc     ..vO...O...O...O
   24ee0:	4f7b98cd 4f6998ce 4f7098cf 4f9198d0     ..{O..iO..pO...O
   24ef0:	4f6f98d1 4f8698d2 4f9698d3 511898d4     ..oO...O...O...Q
   24f00:	4fd498d5 4fdf98d6 4fce98d7 4fd898d8     ...O...O...O...O
   24f10:	4fdb98d9 4fd198da 4fda98db 4fd098dc     ...O...O...O...O
   24f20:	4fe498dd 4fe598de 501a98df 502898e0     ...O...O...P..(P
   24f30:	501498e1 502a98e2 502598e3 500598e4     ...P..*P..%P...P
   24f40:	4f1c98e5 4ff698e6 502198e7 502998e8     ...O...O..!P..)P
   24f50:	502c98e9 4ffe98ea 4fef98eb 501198ec     ..,P...O...O...P
   24f60:	500698ed 504398ee 504798ef 670398f0     ...P..CP..GP...g
   24f70:	505598f1 505098f2 504898f3 505a98f4     ..UP..PP..HP..ZP
   24f80:	505698f5 506c98f6 507898f7 508098f8     ..VP..lP..xP...P
   24f90:	509a98f9 508598fa 50b498fb 50b298fc     ...P...P...P...P
   24fa0:	50c99940 50ca9941 50b39942 50c29943     @..PA..PB..PC..P
   24fb0:	50d69944 50de9945 50e59946 50ed9947     D..PE..PF..PG..P
   24fc0:	50e39948 50ee9949 50f9994a 50f5994b     H..PI..PJ..PK..P
   24fd0:	5109994c 5101994d 5102994e 5116994f     L..QM..QN..QO..Q
   24fe0:	51159950 51149951 511a9952 51219953     P..QQ..QR..QS.!Q
   24ff0:	513a9954 51379955 513c9956 513b9957     T.:QU.7QV.<QW.;Q
   25000:	513f9958 51409959 5152995a 514c995b     X.?QY.@QZ.RQ[.LQ
   25010:	5154995c 5162995d 7af8995e 5169995f     \.TQ].bQ^..z_.iQ
   25020:	516a9960 516e9961 51809962 51829963     `.jQa.nQb..Qc..Q
   25030:	56d89964 518c9965 51899966 518f9967     d..Ve..Qf..Qg..Q
   25040:	51919968 51939969 5195996a 5196996b     h..Qi..Qj..Qk..Q
   25050:	51a4996c 51a6996d 51a2996e 51a9996f     l..Qm..Qn..Qo..Q
   25060:	51aa9970 51ab9971 51b39972 51b19973     p..Qq..Qr..Qs..Q
   25070:	51b29974 51b09975 51b59976 51bd9977     t..Qu..Qv..Qw..Q
   25080:	51c59978 51c99979 51db997a 51e0997b     x..Qy..Qz..Q{..Q
   25090:	8655997c 51e9997d 51ed997e 51f09980     |.U.}..Q~..Q...Q
   250a0:	51f59981 51fe9982 52049983 520b9984     ...Q...Q...R...R
   250b0:	52149985 520e9986 52279987 522a9988     ...R...R..'R..*R
   250c0:	522e9989 5233998a 5239998b 524f998c     ...R..3R..9R..OR
   250d0:	5244998d 524b998e 524c998f 525e9990     ..DR..KR..LR..^R
   250e0:	52549991 526a9992 52749993 52699994     ..TR..jR..tR..iR
   250f0:	52739995 527f9996 527d9997 528d9998     ..sR...R..}R...R
   25100:	52949999 5292999a 5271999b 5288999c     ...R...R..qR...R
   25110:	5291999d 8fa8999e 8fa7999f 52ac99a0     ...R...........R
   25120:	52ad99a1 52bc99a2 52b599a3 52c199a4     ...R...R...R...R
   25130:	52cd99a5 52d799a6 52de99a7 52e399a8     ...R...R...R...R
   25140:	52e699a9 98ed99aa 52e099ab 52f399ac     ...R.......R...R
   25150:	52f599ad 52f899ae 52f999af 530699b0     ...R...R...R...S
   25160:	530899b1 753899b2 530d99b3 531099b4     ...S..8u...S...S
   25170:	530f99b5 531599b6 531a99b7 532399b8     ...S...S...S..#S
   25180:	532f99b9 533199ba 533399bb 533899bc     ../S..1S..3S..8S
   25190:	534099bd 534699be 534599bf 4e1799c0     ..@S..FS..ES...N
   251a0:	534999c1 534d99c2 51d699c3 535e99c4     ..IS..MS...Q..^S
   251b0:	536999c5 536e99c6 591899c7 537b99c8     ..iS..nS...Y..{S
   251c0:	537799c9 538299ca 539699cb 53a099cc     ..wS...S...S...S
   251d0:	53a699cd 53a599ce 53ae99cf 53b099d0     ...S...S...S...S
   251e0:	53b699d1 53c399d2 7c1299d3 96d999d4     ...S...S...|....
   251f0:	53df99d5 66fc99d6 71ee99d7 53ee99d8     ...S...f...q...S
   25200:	53e899d9 53ed99da 53fa99db 540199dc     ...S...S...S...T
   25210:	543d99dd 544099de 542c99df 542d99e0     ..=T..@T..,T..-T
   25220:	543c99e1 542e99e2 543699e3 542999e4     ..<T...T..6T..)T
   25230:	541d99e5 544e99e6 548f99e7 547599e8     ...T..NT...T..uT
   25240:	548e99e9 545f99ea 547199eb 547799ec     ...T.._T..qT..wT
   25250:	547099ed 549299ee 547b99ef 548099f0     ..pT...T..{T...T
   25260:	547699f1 548499f2 549099f3 548699f4     ..vT...T...T...T
   25270:	54c799f5 54a299f6 54b899f7 54a599f8     ...T...T...T...T
   25280:	54ac99f9 54c499fa 54c899fb 54a899fc     ...T...T...T...T
   25290:	54ab9a40 54c29a41 54a49a42 54be9a43     @..TA..TB..TC..T
   252a0:	54bc9a44 54d89a45 54e59a46 54e69a47     D..TE..TF..TG..T
   252b0:	550f9a48 55149a49 54fd9a4a 54ee9a4b     H..UI..UJ..TK..T
   252c0:	54ed9a4c 54fa9a4d 54e29a4e 55399a4f     L..TM..TN..TO.9U
   252d0:	55409a50 55639a51 554c9a52 552e9a53     P.@UQ.cUR.LUS..U
   252e0:	555c9a54 55459a55 55569a56 55579a57     T.\UU.EUV.VUW.WU
   252f0:	55389a58 55339a59 555d9a5a 55999a5b     X.8UY.3UZ.]U[..U
   25300:	55809a5c 54af9a5d 558a9a5e 559f9a5f     \..U]..T^..U_..U
   25310:	557b9a60 557e9a61 55989a62 559e9a63     `.{Ua.~Ub..Uc..U
   25320:	55ae9a64 557c9a65 55839a66 55a99a67     d..Ue.|Uf..Ug..U
   25330:	55879a68 55a89a69 55da9a6a 55c59a6b     h..Ui..Uj..Uk..U
   25340:	55df9a6c 55c49a6d 55dc9a6e 55e49a6f     l..Um..Un..Uo..U
   25350:	55d49a70 56149a71 55f79a72 56169a73     p..Uq..Vr..Us..V
   25360:	55fe9a74 55fd9a75 561b9a76 55f99a77     t..Uu..Uv..Vw..U
   25370:	564e9a78 56509a79 71df9a7a 56349a7b     x.NVy.PVz..q{.4V
   25380:	56369a7c 56329a7d 56389a7e 566b9a80     |.6V}.2V~.8V..kV
   25390:	56649a81 562f9a82 566c9a83 566a9a84     ..dV../V..lV..jV
   253a0:	56869a85 56809a86 568a9a87 56a09a88     ...V...V...V...V
   253b0:	56949a89 568f9a8a 56a59a8b 56ae9a8c     ...V...V...V...V
   253c0:	56b69a8d 56b49a8e 56c29a8f 56bc9a90     ...V...V...V...V
   253d0:	56c19a91 56c39a92 56c09a93 56c89a94     ...V...V...V...V
   253e0:	56ce9a95 56d19a96 56d39a97 56d79a98     ...V...V...V...V
   253f0:	56ee9a99 56f99a9a 57009a9b 56ff9a9c     ...V...V...W...V
   25400:	57049a9d 57099a9e 57089a9f 570b9aa0     ...W...W...W...W
   25410:	570d9aa1 57139aa2 57189aa3 57169aa4     ...W...W...W...W
   25420:	55c79aa5 571c9aa6 57269aa7 57379aa8     ...U...W..&W..7W
   25430:	57389aa9 574e9aaa 573b9aab 57409aac     ..8W..NW..;W..@W
   25440:	574f9aad 57699aae 57c09aaf 57889ab0     ..OW..iW...W...W
   25450:	57619ab1 577f9ab2 57899ab3 57939ab4     ..aW...W...W...W
   25460:	57a09ab5 57b39ab6 57a49ab7 57aa9ab8     ...W...W...W...W
   25470:	57b09ab9 57c39aba 57c69abb 57d49abc     ...W...W...W...W
   25480:	57d29abd 57d39abe 580a9abf 57d69ac0     ...W...W...X...W
   25490:	57e39ac1 580b9ac2 58199ac3 581d9ac4     ...W...X...X...X
   254a0:	58729ac5 58219ac6 58629ac7 584b9ac8     ..rX..!X..bX..KX
   254b0:	58709ac9 6bc09aca 58529acb 583d9acc     ..pX...k..RX..=X
   254c0:	58799acd 58859ace 58b99acf 589f9ad0     ..yX...X...X...X
   254d0:	58ab9ad1 58ba9ad2 58de9ad3 58bb9ad4     ...X...X...X...X
   254e0:	58b89ad5 58ae9ad6 58c59ad7 58d39ad8     ...X...X...X...X
   254f0:	58d19ad9 58d79ada 58d99adb 58d89adc     ...X...X...X...X
   25500:	58e59add 58dc9ade 58e49adf 58df9ae0     ...X...X...X...X
   25510:	58ef9ae1 58fa9ae2 58f99ae3 58fb9ae4     ...X...X...X...X
   25520:	58fc9ae5 58fd9ae6 59029ae7 590a9ae8     ...X...X...Y...Y
   25530:	59109ae9 591b9aea 68a69aeb 59259aec     ...Y...Y...h..%Y
   25540:	592c9aed 592d9aee 59329aef 59389af0     ..,Y..-Y..2Y..8Y
   25550:	593e9af1 7ad29af2 59559af3 59509af4     ..>Y...z..UY..PY
   25560:	594e9af5 595a9af6 59589af7 59629af8     ..NY..ZY..XY..bY
   25570:	59609af9 59679afa 596c9afb 59699afc     ..`Y..gY..lY..iY
   25580:	59789b40 59819b41 599d9b42 4f5e9b43     @.xYA..YB..YC.^O
   25590:	4fab9b44 59a39b45 59b29b46 59c69b47     D..OE..YF..YG..Y
   255a0:	59e89b48 59dc9b49 598d9b4a 59d99b4b     H..YI..YJ..YK..Y
   255b0:	59da9b4c 5a259b4d 5a1f9b4e 5a119b4f     L..YM.%ZN..ZO..Z
   255c0:	5a1c9b50 5a099b51 5a1a9b52 5a409b53     P..ZQ..ZR..ZS.@Z
   255d0:	5a6c9b54 5a499b55 5a359b56 5a369b57     T.lZU.IZV.5ZW.6Z
   255e0:	5a629b58 5a6a9b59 5a9a9b5a 5abc9b5b     X.bZY.jZZ..Z[..Z
   255f0:	5abe9b5c 5acb9b5d 5ac29b5e 5abd9b5f     \..Z]..Z^..Z_..Z
   25600:	5ae39b60 5ad79b61 5ae69b62 5ae99b63     `..Za..Zb..Zc..Z
   25610:	5ad69b64 5afa9b65 5afb9b66 5b0c9b67     d..Ze..Zf..Zg..[
   25620:	5b0b9b68 5b169b69 5b329b6a 5ad09b6b     h..[i..[j.2[k..Z
   25630:	5b2a9b6c 5b369b6d 5b3e9b6e 5b439b6f     l.*[m.6[n.>[o.C[
   25640:	5b459b70 5b409b71 5b519b72 5b559b73     p.E[q.@[r.Q[s.U[
   25650:	5b5a9b74 5b5b9b75 5b659b76 5b699b77     t.Z[u.[[v.e[w.i[
   25660:	5b709b78 5b739b79 5b759b7a 5b789b7b     x.p[y.s[z.u[{.x[
   25670:	65889b7c 5b7a9b7d 5b809b7e 5b839b80     |..e}.z[~..[...[
   25680:	5ba69b81 5bb89b82 5bc39b83 5bc79b84     ...[...[...[...[
   25690:	5bc99b85 5bd49b86 5bd09b87 5be49b88     ...[...[...[...[
   256a0:	5be69b89 5be29b8a 5bde9b8b 5be59b8c     ...[...[...[...[
   256b0:	5beb9b8d 5bf09b8e 5bf69b8f 5bf39b90     ...[...[...[...[
   256c0:	5c059b91 5c079b92 5c089b93 5c0d9b94     ...\...\...\...\
   256d0:	5c139b95 5c209b96 5c229b97 5c289b98     ...\.. \.."\..(\
   256e0:	5c389b99 5c399b9a 5c419b9b 5c469b9c     ..8\..9\..A\..F\
   256f0:	5c4e9b9d 5c539b9e 5c509b9f 5c4f9ba0     ..N\..S\..P\..O\
   25700:	5b719ba1 5c6c9ba2 5c6e9ba3 4e629ba4     ..q[..l\..n\..bN
   25710:	5c769ba5 5c799ba6 5c8c9ba7 5c919ba8     ..v\..y\...\...\
   25720:	5c949ba9 599b9baa 5cab9bab 5cbb9bac     ...\...Y...\...\
   25730:	5cb69bad 5cbc9bae 5cb79baf 5cc59bb0     ...\...\...\...\
   25740:	5cbe9bb1 5cc79bb2 5cd99bb3 5ce99bb4     ...\...\...\...\
   25750:	5cfd9bb5 5cfa9bb6 5ced9bb7 5d8c9bb8     ...\...\...\...]
   25760:	5cea9bb9 5d0b9bba 5d159bbb 5d179bbc     ...\...]...]...]
   25770:	5d5c9bbd 5d1f9bbe 5d1b9bbf 5d119bc0     ..\]...]...]...]
   25780:	5d149bc1 5d229bc2 5d1a9bc3 5d199bc4     ...].."]...]...]
   25790:	5d189bc5 5d4c9bc6 5d529bc7 5d4e9bc8     ...]..L]..R]..N]
   257a0:	5d4b9bc9 5d6c9bca 5d739bcb 5d769bcc     ..K]..l]..s]..v]
   257b0:	5d879bcd 5d849bce 5d829bcf 5da29bd0     ...]...]...]...]
   257c0:	5d9d9bd1 5dac9bd2 5dae9bd3 5dbd9bd4     ...]...]...]...]
   257d0:	5d909bd5 5db79bd6 5dbc9bd7 5dc99bd8     ...]...]...]...]
   257e0:	5dcd9bd9 5dd39bda 5dd29bdb 5dd69bdc     ...]...]...]...]
   257f0:	5ddb9bdd 5deb9bde 5df29bdf 5df59be0     ...]...]...]...]
   25800:	5e0b9be1 5e1a9be2 5e199be3 5e119be4     ...^...^...^...^
   25810:	5e1b9be5 5e369be6 5e379be7 5e449be8     ...^..6^..7^..D^
   25820:	5e439be9 5e409bea 5e4e9beb 5e579bec     ..C^..@^..N^..W^
   25830:	5e549bed 5e5f9bee 5e629bef 5e649bf0     ..T^.._^..b^..d^
   25840:	5e479bf1 5e759bf2 5e769bf3 5e7a9bf4     ..G^..u^..v^..z^
   25850:	9ebc9bf5 5e7f9bf6 5ea09bf7 5ec19bf8     .......^...^...^
   25860:	5ec29bf9 5ec89bfa 5ed09bfb 5ecf9bfc     ...^...^...^...^
   25870:	5ed69c40 5ee39c41 5edd9c42 5eda9c43     @..^A..^B..^C..^
   25880:	5edb9c44 5ee29c45 5ee19c46 5ee89c47     D..^E..^F..^G..^
   25890:	5ee99c48 5eec9c49 5ef19c4a 5ef39c4b     H..^I..^J..^K..^
   258a0:	5ef09c4c 5ef49c4d 5ef89c4e 5efe9c4f     L..^M..^N..^O..^
   258b0:	5f039c50 5f099c51 5f5d9c52 5f5c9c53     P.._Q.._R.]_S.\_
   258c0:	5f0b9c54 5f119c55 5f169c56 5f299c57     T.._U.._V.._W.)_
   258d0:	5f2d9c58 5f389c59 5f419c5a 5f489c5b     X.-_Y.8_Z.A_[.H_
   258e0:	5f4c9c5c 5f4e9c5d 5f2f9c5e 5f519c5f     \.L_].N_^./__.Q_
   258f0:	5f569c60 5f579c61 5f599c62 5f619c63     `.V_a.W_b.Y_c.a_
   25900:	5f6d9c64 5f739c65 5f779c66 5f839c67     d.m_e.s_f.w_g.._
   25910:	5f829c68 5f7f9c69 5f8a9c6a 5f889c6b     h.._i.._j.._k.._
   25920:	5f919c6c 5f879c6d 5f9e9c6e 5f999c6f     l.._m.._n.._o.._
   25930:	5f989c70 5fa09c71 5fa89c72 5fad9c73     p.._q.._r.._s.._
   25940:	5fbc9c74 5fd69c75 5ffb9c76 5fe49c77     t.._u.._v.._w.._
   25950:	5ff89c78 5ff19c79 5fdd9c7a 60b39c7b     x.._y.._z.._{..`
   25960:	5fff9c7c 60219c7d 60609c7e 60199c80     |.._}.!`~.``...`
   25970:	60109c81 60299c82 600e9c83 60319c84     ...`..)`...`..1`
   25980:	601b9c85 60159c86 602b9c87 60269c88     ...`...`..+`..&`
   25990:	600f9c89 603a9c8a 605a9c8b 60419c8c     ...`..:`..Z`..A`
   259a0:	606a9c8d 60779c8e 605f9c8f 604a9c90     ..j`..w`.._`..J`
   259b0:	60469c91 604d9c92 60639c93 60439c94     ..F`..M`..c`..C`
   259c0:	60649c95 60429c96 606c9c97 606b9c98     ..d`..B`..l`..k`
   259d0:	60599c99 60819c9a 608d9c9b 60e79c9c     ..Y`...`...`...`
   259e0:	60839c9d 609a9c9e 60849c9f 609b9ca0     ...`...`...`...`
   259f0:	60969ca1 60979ca2 60929ca3 60a79ca4     ...`...`...`...`
   25a00:	608b9ca5 60e19ca6 60b89ca7 60e09ca8     ...`...`...`...`
   25a10:	60d39ca9 60b49caa 5ff09cab 60bd9cac     ...`...`..._...`
   25a20:	60c69cad 60b59cae 60d89caf 614d9cb0     ...`...`...`..Ma
   25a30:	61159cb1 61069cb2 60f69cb3 60f79cb4     ...a...a...`...`
   25a40:	61009cb5 60f49cb6 60fa9cb7 61039cb8     ...a...`...`...a
   25a50:	61219cb9 60fb9cba 60f19cbb 610d9cbc     ..!a...`...`...a
   25a60:	610e9cbd 61479cbe 613e9cbf 61289cc0     ...a..Ga..>a..(a
   25a70:	61279cc1 614a9cc2 613f9cc3 613c9cc4     ..'a..Ja..?a..<a
   25a80:	612c9cc5 61349cc6 613d9cc7 61429cc8     ..,a..4a..=a..Ba
   25a90:	61449cc9 61739cca 61779ccb 61589ccc     ..Da..sa..wa..Xa
   25aa0:	61599ccd 615a9cce 616b9ccf 61749cd0     ..Ya..Za..ka..ta
   25ab0:	616f9cd1 61659cd2 61719cd3 615f9cd4     ..oa..ea..qa.._a
   25ac0:	615d9cd5 61539cd6 61759cd7 61999cd8     ..]a..Sa..ua...a
   25ad0:	61969cd9 61879cda 61ac9cdb 61949cdc     ...a...a...a...a
   25ae0:	619a9cdd 618a9cde 61919cdf 61ab9ce0     ...a...a...a...a
   25af0:	61ae9ce1 61cc9ce2 61ca9ce3 61c99ce4     ...a...a...a...a
   25b00:	61f79ce5 61c89ce6 61c39ce7 61c69ce8     ...a...a...a...a
   25b10:	61ba9ce9 61cb9cea 7f799ceb 61cd9cec     ...a...a..y....a
   25b20:	61e69ced 61e39cee 61f69cef 61fa9cf0     ...a...a...a...a
   25b30:	61f49cf1 61ff9cf2 61fd9cf3 61fc9cf4     ...a...a...a...a
   25b40:	61fe9cf5 62009cf6 62089cf7 62099cf8     ...a...b...b...b
   25b50:	620d9cf9 620c9cfa 62149cfb 621b9cfc     ...b...b...b...b
   25b60:	621e9d40 62219d41 622a9d42 622e9d43     @..bA.!bB.*bC..b
   25b70:	62309d44 62329d45 62339d46 62419d47     D.0bE.2bF.3bG.Ab
   25b80:	624e9d48 625e9d49 62639d4a 625b9d4b     H.NbI.^bJ.cbK.[b
   25b90:	62609d4c 62689d4d 627c9d4e 62829d4f     L.`bM.hbN.|bO..b
   25ba0:	62899d50 627e9d51 62929d52 62939d53     P..bQ.~bR..bS..b
   25bb0:	62969d54 62d49d55 62839d56 62949d57     T..bU..bV..bW..b
   25bc0:	62d79d58 62d19d59 62bb9d5a 62cf9d5b     X..bY..bZ..b[..b
   25bd0:	62ff9d5c 62c69d5d 64d49d5e 62c89d5f     \..b]..b^..d_..b
   25be0:	62dc9d60 62cc9d61 62ca9d62 62c29d63     `..ba..bb..bc..b
   25bf0:	62c79d64 629b9d65 62c99d66 630c9d67     d..be..bf..bg..c
   25c00:	62ee9d68 62f19d69 63279d6a 63029d6b     h..bi..bj.'ck..c
   25c10:	63089d6c 62ef9d6d 62f59d6e 63509d6f     l..cm..bn..bo.Pc
   25c20:	633e9d70 634d9d71 641c9d72 634f9d73     p.>cq.Mcr..ds.Oc
   25c30:	63969d74 638e9d75 63809d76 63ab9d77     t..cu..cv..cw..c
   25c40:	63769d78 63a39d79 638f9d7a 63899d7b     x.vcy..cz..c{..c
   25c50:	639f9d7c 63b59d7d 636b9d7e 63699d80     |..c}..c~.kc..ic
   25c60:	63be9d81 63e99d82 63c09d83 63c69d84     ...c...c...c...c
   25c70:	63e39d85 63c99d86 63d29d87 63f69d88     ...c...c...c...c
   25c80:	63c49d89 64169d8a 64349d8b 64069d8c     ...c...d..4d...d
   25c90:	64139d8d 64269d8e 64369d8f 651d9d90     ...d..&d..6d...e
   25ca0:	64179d91 64289d92 640f9d93 64679d94     ...d..(d...d..gd
   25cb0:	646f9d95 64769d96 644e9d97 652a9d98     ..od..vd..Nd..*e
   25cc0:	64959d99 64939d9a 64a59d9b 64a99d9c     ...d...d...d...d
   25cd0:	64889d9d 64bc9d9e 64da9d9f 64d29da0     ...d...d...d...d
   25ce0:	64c59da1 64c79da2 64bb9da3 64d89da4     ...d...d...d...d
   25cf0:	64c29da5 64f19da6 64e79da7 82099da8     ...d...d...d....
   25d00:	64e09da9 64e19daa 62ac9dab 64e39dac     ...d...d...b...d
   25d10:	64ef9dad 652c9dae 64f69daf 64f49db0     ...d..,e...d...d
   25d20:	64f29db1 64fa9db2 65009db3 64fd9db4     ...d...d...e...d
   25d30:	65189db5 651c9db6 65059db7 65249db8     ...e...e...e..$e
   25d40:	65239db9 652b9dba 65349dbb 65359dbc     ..#e..+e..4e..5e
   25d50:	65379dbd 65369dbe 65389dbf 754b9dc0     ..7e..6e..8e..Ku
   25d60:	65489dc1 65569dc2 65559dc3 654d9dc4     ..He..Ve..Ue..Me
   25d70:	65589dc5 655e9dc6 655d9dc7 65729dc8     ..Xe..^e..]e..re
   25d80:	65789dc9 65829dca 65839dcb 8b8a9dcc     ..xe...e...e....
   25d90:	659b9dcd 659f9dce 65ab9dcf 65b79dd0     ...e...e...e...e
   25da0:	65c39dd1 65c69dd2 65c19dd3 65c49dd4     ...e...e...e...e
   25db0:	65cc9dd5 65d29dd6 65db9dd7 65d99dd8     ...e...e...e...e
   25dc0:	65e09dd9 65e19dda 65f19ddb 67729ddc     ...e...e...e..rg
   25dd0:	660a9ddd 66039dde 65fb9ddf 67739de0     ...f...f...e..sg
   25de0:	66359de1 66369de2 66349de3 661c9de4     ..5f..6f..4f...f
   25df0:	664f9de5 66449de6 66499de7 66419de8     ..Of..Df..If..Af
   25e00:	665e9de9 665d9dea 66649deb 66679dec     ..^f..]f..df..gf
   25e10:	66689ded 665f9dee 66629def 66709df0     ..hf.._f..bf..pf
   25e20:	66839df1 66889df2 668e9df3 66899df4     ...f...f...f...f
   25e30:	66849df5 66989df6 669d9df7 66c19df8     ...f...f...f...f
   25e40:	66b99df9 66c99dfa 66be9dfb 66bc9dfc     ...f...f...f...f
   25e50:	66c49e40 66b89e41 66d69e42 66da9e43     @..fA..fB..fC..f
   25e60:	66e09e44 663f9e45 66e69e46 66e99e47     D..fE.?fF..fG..f
   25e70:	66f09e48 66f59e49 66f79e4a 670f9e4b     H..fI..fJ..fK..g
   25e80:	67169e4c 671e9e4d 67269e4e 67279e4f     L..gM..gN.&gO.'g
   25e90:	97389e50 672e9e51 673f9e52 67369e53     P.8.Q..gR.?gS.6g
   25ea0:	67419e54 67389e55 67379e56 67469e57     T.AgU.8gV.7gW.Fg
   25eb0:	675e9e58 67609e59 67599e5a 67639e5b     X.^gY.`gZ.Yg[.cg
   25ec0:	67649e5c 67899e5d 67709e5e 67a99e5f     \.dg]..g^.pg_..g
   25ed0:	677c9e60 676a9e61 678c9e62 678b9e63     `.|ga.jgb..gc..g
   25ee0:	67a69e64 67a19e65 67859e66 67b79e67     d..ge..gf..gg..g
   25ef0:	67ef9e68 67b49e69 67ec9e6a 67b39e6b     h..gi..gj..gk..g
   25f00:	67e99e6c 67b89e6d 67e49e6e 67de9e6f     l..gm..gn..go..g
   25f10:	67dd9e70 67e29e71 67ee9e72 67b99e73     p..gq..gr..gs..g
   25f20:	67ce9e74 67c69e75 67e79e76 6a9c9e77     t..gu..gv..gw..j
   25f30:	681e9e78 68469e79 68299e7a 68409e7b     x..hy.Fhz.)h{.@h
   25f40:	684d9e7c 68329e7d 684e9e7e 68b39e80     |.Mh}.2h~.Nh...h
   25f50:	682b9e81 68599e82 68639e83 68779e84     ..+h..Yh..ch..wh
   25f60:	687f9e85 689f9e86 688f9e87 68ad9e88     ...h...h...h...h
   25f70:	68949e89 689d9e8a 689b9e8b 68839e8c     ...h...h...h...h
   25f80:	6aae9e8d 68b99e8e 68749e8f 68b59e90     ...j...h..th...h
   25f90:	68a09e91 68ba9e92 690f9e93 688d9e94     ...h...h...i...h
   25fa0:	687e9e95 69019e96 68ca9e97 69089e98     ..~h...i...h...i
   25fb0:	68d89e99 69229e9a 69269e9b 68e19e9c     ...h.."i..&i...h
   25fc0:	690c9e9d 68cd9e9e 68d49e9f 68e79ea0     ...i...h...h...h
   25fd0:	68d59ea1 69369ea2 69129ea3 69049ea4     ...h..6i...i...i
   25fe0:	68d79ea5 68e39ea6 69259ea7 68f99ea8     ...h...h..%i...h
   25ff0:	68e09ea9 68ef9eaa 69289eab 692a9eac     ...h...h..(i..*i
   26000:	691a9ead 69239eae 69219eaf 68c69eb0     ...i..#i..!i...h
   26010:	69799eb1 69779eb2 695c9eb3 69789eb4     ..yi..wi..\i..xi
   26020:	696b9eb5 69549eb6 697e9eb7 696e9eb8     ..ki..Ti..~i..ni
   26030:	69399eb9 69749eba 693d9ebb 69599ebc     ..9i..ti..=i..Yi
   26040:	69309ebd 69619ebe 695e9ebf 695d9ec0     ..0i..ai..^i..]i
   26050:	69819ec1 696a9ec2 69b29ec3 69ae9ec4     ...i..ji...i...i
   26060:	69d09ec5 69bf9ec6 69c19ec7 69d39ec8     ...i...i...i...i
   26070:	69be9ec9 69ce9eca 5be89ecb 69ca9ecc     ...i...i...[...i
   26080:	69dd9ecd 69bb9ece 69c39ecf 69a79ed0     ...i...i...i...i
   26090:	6a2e9ed1 69919ed2 69a09ed3 699c9ed4     ...j...i...i...i
   260a0:	69959ed5 69b49ed6 69de9ed7 69e89ed8     ...i...i...i...i
   260b0:	6a029ed9 6a1b9eda 69ff9edb 6b0a9edc     ...j...j...i...k
   260c0:	69f99edd 69f29ede 69e79edf 6a059ee0     ...i...i...i...j
   260d0:	69b19ee1 6a1e9ee2 69ed9ee3 6a149ee4     ...i...j...i...j
   260e0:	69eb9ee5 6a0a9ee6 6a129ee7 6ac19ee8     ...i...j...j...j
   260f0:	6a239ee9 6a139eea 6a449eeb 6a0c9eec     ..#j...j..Dj...j
   26100:	6a729eed 6a369eee 6a789eef 6a479ef0     ..rj..6j..xj..Gj
   26110:	6a629ef1 6a599ef2 6a669ef3 6a489ef4     ..bj..Yj..fj..Hj
   26120:	6a389ef5 6a229ef6 6a909ef7 6a8d9ef8     ..8j.."j...j...j
   26130:	6aa09ef9 6a849efa 6aa29efb 6aa39efc     ...j...j...j...j
   26140:	6a979f40 86179f41 6abb9f42 6ac39f43     @..jA...B..jC..j
   26150:	6ac29f44 6ab89f45 6ab39f46 6aac9f47     D..jE..jF..jG..j
   26160:	6ade9f48 6ad19f49 6adf9f4a 6aaa9f4b     H..jI..jJ..jK..j
   26170:	6ada9f4c 6aea9f4d 6afb9f4e 6b059f4f     L..jM..jN..jO..k
   26180:	86169f50 6afa9f51 6b129f52 6b169f53     P...Q..jR..kS..k
   26190:	9b319f54 6b1f9f55 6b389f56 6b379f57     T.1.U..kV.8kW.7k
   261a0:	76dc9f58 6b399f59 98ee9f5a 6b479f5b     X..vY.9kZ...[.Gk
   261b0:	6b439f5c 6b499f5d 6b509f5e 6b599f5f     \.Ck].Ik^.Pk_.Yk
   261c0:	6b549f60 6b5b9f61 6b5f9f62 6b619f63     `.Tka.[kb._kc.ak
   261d0:	6b789f64 6b799f65 6b7f9f66 6b809f67     d.xke.ykf..kg..k
   261e0:	6b849f68 6b839f69 6b8d9f6a 6b989f6b     h..ki..kj..kk..k
   261f0:	6b959f6c 6b9e9f6d 6ba49f6e 6baa9f6f     l..km..kn..ko..k
   26200:	6bab9f70 6baf9f71 6bb29f72 6bb19f73     p..kq..kr..ks..k
   26210:	6bb39f74 6bb79f75 6bbc9f76 6bc69f77     t..ku..kv..kw..k
   26220:	6bcb9f78 6bd39f79 6bdf9f7a 6bec9f7b     x..ky..kz..k{..k
   26230:	6beb9f7c 6bf39f7d 6bef9f7e 9ebe9f80     |..k}..k~..k....
   26240:	6c089f81 6c139f82 6c149f83 6c1b9f84     ...l...l...l...l
   26250:	6c249f85 6c239f86 6c5e9f87 6c559f88     ..$l..#l..^l..Ul
   26260:	6c629f89 6c6a9f8a 6c829f8b 6c8d9f8c     ..bl..jl...l...l
   26270:	6c9a9f8d 6c819f8e 6c9b9f8f 6c7e9f90     ...l...l...l..~l
   26280:	6c689f91 6c739f92 6c929f93 6c909f94     ..hl..sl...l...l
   26290:	6cc49f95 6cf19f96 6cd39f97 6cbd9f98     ...l...l...l...l
   262a0:	6cd79f99 6cc59f9a 6cdd9f9b 6cae9f9c     ...l...l...l...l
   262b0:	6cb19f9d 6cbe9f9e 6cba9f9f 6cdb9fa0     ...l...l...l...l
   262c0:	6cef9fa1 6cd99fa2 6cea9fa3 6d1f9fa4     ...l...l...l...m
   262d0:	884d9fa5 6d369fa6 6d2b9fa7 6d3d9fa8     ..M...6m..+m..=m
   262e0:	6d389fa9 6d199faa 6d359fab 6d339fac     ..8m...m..5m..3m
   262f0:	6d129fad 6d0c9fae 6d639faf 6d939fb0     ...m...m..cm...m
   26300:	6d649fb1 6d5a9fb2 6d799fb3 6d599fb4     ..dm..Zm..ym..Ym
   26310:	6d8e9fb5 6d959fb6 6fe49fb7 6d859fb8     ...m...m...o...m
   26320:	6df99fb9 6e159fba 6e0a9fbb 6db59fbc     ...m...n...n...m
   26330:	6dc79fbd 6de69fbe 6db89fbf 6dc69fc0     ...m...m...m...m
   26340:	6dec9fc1 6dde9fc2 6dcc9fc3 6de89fc4     ...m...m...m...m
   26350:	6dd29fc5 6dc59fc6 6dfa9fc7 6dd99fc8     ...m...m...m...m
   26360:	6de49fc9 6dd59fca 6dea9fcb 6dee9fcc     ...m...m...m...m
   26370:	6e2d9fcd 6e6e9fce 6e2e9fcf 6e199fd0     ..-n..nn...n...n
   26380:	6e729fd1 6e5f9fd2 6e3e9fd3 6e239fd4     ..rn.._n..>n..#n
   26390:	6e6b9fd5 6e2b9fd6 6e769fd7 6e4d9fd8     ..kn..+n..vn..Mn
   263a0:	6e1f9fd9 6e439fda 6e3a9fdb 6e4e9fdc     ...n..Cn..:n..Nn
   263b0:	6e249fdd 6eff9fde 6e1d9fdf 6e389fe0     ..$n...n...n..8n
   263c0:	6e829fe1 6eaa9fe2 6e989fe3 6ec99fe4     ...n...n...n...n
   263d0:	6eb79fe5 6ed39fe6 6ebd9fe7 6eaf9fe8     ...n...n...n...n
   263e0:	6ec49fe9 6eb29fea 6ed49feb 6ed59fec     ...n...n...n...n
   263f0:	6e8f9fed 6ea59fee 6ec29fef 6e9f9ff0     ...n...n...n...n
   26400:	6f419ff1 6f119ff2 704c9ff3 6eec9ff4     ..Ao...o..Lp...n
   26410:	6ef89ff5 6efe9ff6 6f3f9ff7 6ef29ff8     ...n...n..?o...n
   26420:	6f319ff9 6eef9ffa 6f329ffb 6ecc9ffc     ..1o...n..2o...n
   26430:	6f3ee040 6f13e041 6ef7e042 6f86e043     @.>oA..oB..nC..o
   26440:	6f7ae044 6f78e045 6f81e046 6f80e047     D.zoE.xoF..oG..o
   26450:	6f6fe048 6f5be049 6ff3e04a 6f6de04b     H.ooI.[oJ..oK.mo
   26460:	6f82e04c 6f7ce04d 6f58e04e 6f8ee04f     L..oM.|oN.XoO..o
   26470:	6f91e050 6fc2e051 6f66e052 6fb3e053     P..oQ..oR.foS..o
   26480:	6fa3e054 6fa1e055 6fa4e056 6fb9e057     T..oU..oV..oW..o
   26490:	6fc6e058 6faae059 6fdfe05a 6fd5e05b     X..oY..oZ..o[..o
   264a0:	6fece05c 6fd4e05d 6fd8e05e 6ff1e05f     \..o]..o^..o_..o
   264b0:	6feee060 6fdbe061 7009e062 700be063     `..oa..ob..pc..p
   264c0:	6ffae064 7011e065 7001e066 700fe067     d..oe..pf..pg..p
   264d0:	6ffee068 701be069 701ae06a 6f74e06b     h..oi..pj..pk.to
   264e0:	701de06c 7018e06d 701fe06e 7030e06f     l..pm..pn..po.0p
   264f0:	703ee070 7032e071 7051e072 7063e073     p.>pq.2pr.Qps.cp
   26500:	7099e074 7092e075 70afe076 70f1e077     t..pu..pv..pw..p
   26510:	70ace078 70b8e079 70b3e07a 70aee07b     x..py..pz..p{..p
   26520:	70dfe07c 70cbe07d 70dde07e 70d9e080     |..p}..p~..p...p
   26530:	7109e081 70fde082 711ce083 7119e084     ...q...p...q...q
   26540:	7165e085 7155e086 7188e087 7166e088     ..eq..Uq...q..fq
   26550:	7162e089 714ce08a 7156e08b 716ce08c     ..bq..Lq..Vq..lq
   26560:	718fe08d 71fbe08e 7184e08f 7195e090     ...q...q...q...q
   26570:	71a8e091 71ace092 71d7e093 71b9e094     ...q...q...q...q
   26580:	71bee095 71d2e096 71c9e097 71d4e098     ...q...q...q...q
   26590:	71cee099 71e0e09a 71ece09b 71e7e09c     ...q...q...q...q
   265a0:	71f5e09d 71fce09e 71f9e09f 71ffe0a0     ...q...q...q...q
   265b0:	720de0a1 7210e0a2 721be0a3 7228e0a4     ...r...r...r..(r
   265c0:	722de0a5 722ce0a6 7230e0a7 7232e0a8     ..-r..,r..0r..2r
   265d0:	723be0a9 723ce0aa 723fe0ab 7240e0ac     ..;r..<r..?r..@r
   265e0:	7246e0ad 724be0ae 7258e0af 7274e0b0     ..Fr..Kr..Xr..tr
   265f0:	727ee0b1 7282e0b2 7281e0b3 7287e0b4     ..~r...r...r...r
   26600:	7292e0b5 7296e0b6 72a2e0b7 72a7e0b8     ...r...r...r...r
   26610:	72b9e0b9 72b2e0ba 72c3e0bb 72c6e0bc     ...r...r...r...r
   26620:	72c4e0bd 72cee0be 72d2e0bf 72e2e0c0     ...r...r...r...r
   26630:	72e0e0c1 72e1e0c2 72f9e0c3 72f7e0c4     ...r...r...r...r
   26640:	500fe0c5 7317e0c6 730ae0c7 731ce0c8     ...P...s...s...s
   26650:	7316e0c9 731de0ca 7334e0cb 732fe0cc     ...s...s..4s../s
   26660:	7329e0cd 7325e0ce 733ee0cf 734ee0d0     ..)s..%s..>s..Ns
   26670:	734fe0d1 9ed8e0d2 7357e0d3 736ae0d4     ..Os......Ws..js
   26680:	7368e0d5 7370e0d6 7378e0d7 7375e0d8     ..hs..ps..xs..us
   26690:	737be0d9 737ae0da 73c8e0db 73b3e0dc     ..{s..zs...s...s
   266a0:	73cee0dd 73bbe0de 73c0e0df 73e5e0e0     ...s...s...s...s
   266b0:	73eee0e1 73dee0e2 74a2e0e3 7405e0e4     ...s...s...t...t
   266c0:	746fe0e5 7425e0e6 73f8e0e7 7432e0e8     ..ot..%t...s..2t
   266d0:	743ae0e9 7455e0ea 743fe0eb 745fe0ec     ..:t..Ut..?t.._t
   266e0:	7459e0ed 7441e0ee 745ce0ef 7469e0f0     ..Yt..At..\t..it
   266f0:	7470e0f1 7463e0f2 746ae0f3 7476e0f4     ..pt..ct..jt..vt
   26700:	747ee0f5 748be0f6 749ee0f7 74a7e0f8     ..~t...t...t...t
   26710:	74cae0f9 74cfe0fa 74d4e0fb 73f1e0fc     ...t...t...t...s
   26720:	74e0e140 74e3e141 74e7e142 74e9e143     @..tA..tB..tC..t
   26730:	74eee144 74f2e145 74f0e146 74f1e147     D..tE..tF..tG..t
   26740:	74f8e148 74f7e149 7504e14a 7503e14b     H..tI..tJ..uK..u
   26750:	7505e14c 750ce14d 750ee14e 750de14f     L..uM..uN..uO..u
   26760:	7515e150 7513e151 751ee152 7526e153     P..uQ..uR..uS.&u
   26770:	752ce154 753ce155 7544e156 754de157     T.,uU.<uV.DuW.Mu
   26780:	754ae158 7549e159 755be15a 7546e15b     X.JuY.IuZ.[u[.Fu
   26790:	755ae15c 7569e15d 7564e15e 7567e15f     \.Zu].iu^.du_.gu
   267a0:	756be160 756de161 7578e162 7576e163     `.kua.mub.xuc.vu
   267b0:	7586e164 7587e165 7574e166 758ae167     d..ue..uf.tug..u
   267c0:	7589e168 7582e169 7594e16a 759ae16b     h..ui..uj..uk..u
   267d0:	759de16c 75a5e16d 75a3e16e 75c2e16f     l..um..un..uo..u
   267e0:	75b3e170 75c3e171 75b5e172 75bde173     p..uq..ur..us..u
   267f0:	75b8e174 75bce175 75b1e176 75cde177     t..uu..uv..uw..u
   26800:	75cae178 75d2e179 75d9e17a 75e3e17b     x..uy..uz..u{..u
   26810:	75dee17c 75fee17d 75ffe17e 75fce180     |..u}..u~..u...u
   26820:	7601e181 75f0e182 75fae183 75f2e184     ...v...u...u...u
   26830:	75f3e185 760be186 760de187 7609e188     ...u...v...v...v
   26840:	761fe189 7627e18a 7620e18b 7621e18c     ...v..'v.. v..!v
   26850:	7622e18d 7624e18e 7634e18f 7630e190     .."v..$v..4v..0v
   26860:	763be191 7647e192 7648e193 7646e194     ..;v..Gv..Hv..Fv
   26870:	765ce195 7658e196 7661e197 7662e198     ..\v..Xv..av..bv
   26880:	7668e199 7669e19a 766ae19b 7667e19c     ..hv..iv..jv..gv
   26890:	766ce19d 7670e19e 7672e19f 7676e1a0     ..lv..pv..rv..vv
   268a0:	7678e1a1 767ce1a2 7680e1a3 7683e1a4     ..xv..|v...v...v
   268b0:	7688e1a5 768be1a6 768ee1a7 7696e1a8     ...v...v...v...v
   268c0:	7693e1a9 7699e1aa 769ae1ab 76b0e1ac     ...v...v...v...v
   268d0:	76b4e1ad 76b8e1ae 76b9e1af 76bae1b0     ...v...v...v...v
   268e0:	76c2e1b1 76cde1b2 76d6e1b3 76d2e1b4     ...v...v...v...v
   268f0:	76dee1b5 76e1e1b6 76e5e1b7 76e7e1b8     ...v...v...v...v
   26900:	76eae1b9 862fe1ba 76fbe1bb 7708e1bc     ...v../....v...w
   26910:	7707e1bd 7704e1be 7729e1bf 7724e1c0     ...w...w..)w..$w
   26920:	771ee1c1 7725e1c2 7726e1c3 771be1c4     ...w..%w..&w...w
   26930:	7737e1c5 7738e1c6 7747e1c7 775ae1c8     ..7w..8w..Gw..Zw
   26940:	7768e1c9 776be1ca 775be1cb 7765e1cc     ..hw..kw..[w..ew
   26950:	777fe1cd 777ee1ce 7779e1cf 778ee1d0     ...w..~w..yw...w
   26960:	778be1d1 7791e1d2 77a0e1d3 779ee1d4     ...w...w...w...w
   26970:	77b0e1d5 77b6e1d6 77b9e1d7 77bfe1d8     ...w...w...w...w
   26980:	77bce1d9 77bde1da 77bbe1db 77c7e1dc     ...w...w...w...w
   26990:	77cde1dd 77d7e1de 77dae1df 77dce1e0     ...w...w...w...w
   269a0:	77e3e1e1 77eee1e2 77fce1e3 780ce1e4     ...w...w...w...x
   269b0:	7812e1e5 7926e1e6 7820e1e7 792ae1e8     ...x..&y.. x..*y
   269c0:	7845e1e9 788ee1ea 7874e1eb 7886e1ec     ..Ex...x..tx...x
   269d0:	787ce1ed 789ae1ee 788ce1ef 78a3e1f0     ..|x...x...x...x
   269e0:	78b5e1f1 78aae1f2 78afe1f3 78d1e1f4     ...x...x...x...x
   269f0:	78c6e1f5 78cbe1f6 78d4e1f7 78bee1f8     ...x...x...x...x
   26a00:	78bce1f9 78c5e1fa 78cae1fb 78ece1fc     ...x...x...x...x
   26a10:	78e7e240 78dae241 78fde242 78f4e243     @..xA..xB..xC..x
   26a20:	7907e244 7912e245 7911e246 7919e247     D..yE..yF..yG..y
   26a30:	792ce248 792be249 7940e24a 7960e24b     H.,yI.+yJ.@yK.`y
   26a40:	7957e24c 795fe24d 795ae24e 7955e24f     L.WyM._yN.ZyO.Uy
   26a50:	7953e250 797ae251 797fe252 798ae253     P.SyQ.zyR..yS..y
   26a60:	799de254 79a7e255 9f4be256 79aae257     T..yU..yV.K.W..y
   26a70:	79aee258 79b3e259 79b9e25a 79bae25b     X..yY..yZ..y[..y
   26a80:	79c9e25c 79d5e25d 79e7e25e 79ece25f     \..y]..y^..y_..y
   26a90:	79e1e260 79e3e261 7a08e262 7a0de263     `..ya..yb..zc..z
   26aa0:	7a18e264 7a19e265 7a20e266 7a1fe267     d..ze..zf. zg..z
   26ab0:	7980e268 7a31e269 7a3be26a 7a3ee26b     h..yi.1zj.;zk.>z
   26ac0:	7a37e26c 7a43e26d 7a57e26e 7a49e26f     l.7zm.Czn.Wzo.Iz
   26ad0:	7a61e270 7a62e271 7a69e272 9f9de273     p.azq.bzr.izs...
   26ae0:	7a70e274 7a79e275 7a7de276 7a88e277     t.pzu.yzv.}zw..z
   26af0:	7a97e278 7a95e279 7a98e27a 7a96e27b     x..zy..zz..z{..z
   26b00:	7aa9e27c 7ac8e27d 7ab0e27e 7ab6e280     |..z}..z~..z...z
   26b10:	7ac5e281 7ac4e282 7abfe283 9083e284     ...z...z...z....
   26b20:	7ac7e285 7acae286 7acde287 7acfe288     ...z...z...z...z
   26b30:	7ad5e289 7ad3e28a 7ad9e28b 7adae28c     ...z...z...z...z
   26b40:	7adde28d 7ae1e28e 7ae2e28f 7ae6e290     ...z...z...z...z
   26b50:	7aede291 7af0e292 7b02e293 7b0fe294     ...z...z...{...{
   26b60:	7b0ae295 7b06e296 7b33e297 7b18e298     ...{...{..3{...{
   26b70:	7b19e299 7b1ee29a 7b35e29b 7b28e29c     ...{...{..5{..({
   26b80:	7b36e29d 7b50e29e 7b7ae29f 7b04e2a0     ..6{..P{..z{...{
   26b90:	7b4de2a1 7b0be2a2 7b4ce2a3 7b45e2a4     ..M{...{..L{..E{
   26ba0:	7b75e2a5 7b65e2a6 7b74e2a7 7b67e2a8     ..u{..e{..t{..g{
   26bb0:	7b70e2a9 7b71e2aa 7b6ce2ab 7b6ee2ac     ..p{..q{..l{..n{
   26bc0:	7b9de2ad 7b98e2ae 7b9fe2af 7b8de2b0     ...{...{...{...{
   26bd0:	7b9ce2b1 7b9ae2b2 7b8be2b3 7b92e2b4     ...{...{...{...{
   26be0:	7b8fe2b5 7b5de2b6 7b99e2b7 7bcbe2b8     ...{..]{...{...{
   26bf0:	7bc1e2b9 7bcce2ba 7bcfe2bb 7bb4e2bc     ...{...{...{...{
   26c00:	7bc6e2bd 7bdde2be 7be9e2bf 7c11e2c0     ...{...{...{...|
   26c10:	7c14e2c1 7be6e2c2 7be5e2c3 7c60e2c4     ...|...{...{..`|
   26c20:	7c00e2c5 7c07e2c6 7c13e2c7 7bf3e2c8     ...|...|...|...{
   26c30:	7bf7e2c9 7c17e2ca 7c0de2cb 7bf6e2cc     ...{...|...|...{
   26c40:	7c23e2cd 7c27e2ce 7c2ae2cf 7c1fe2d0     ..#|..'|..*|...|
   26c50:	7c37e2d1 7c2be2d2 7c3de2d3 7c4ce2d4     ..7|..+|..=|..L|
   26c60:	7c43e2d5 7c54e2d6 7c4fe2d7 7c40e2d8     ..C|..T|..O|..@|
   26c70:	7c50e2d9 7c58e2da 7c5fe2db 7c64e2dc     ..P|..X|.._|..d|
   26c80:	7c56e2dd 7c65e2de 7c6ce2df 7c75e2e0     ..V|..e|..l|..u|
   26c90:	7c83e2e1 7c90e2e2 7ca4e2e3 7cade2e4     ...|...|...|...|
   26ca0:	7ca2e2e5 7cabe2e6 7ca1e2e7 7ca8e2e8     ...|...|...|...|
   26cb0:	7cb3e2e9 7cb2e2ea 7cb1e2eb 7caee2ec     ...|...|...|...|
   26cc0:	7cb9e2ed 7cbde2ee 7cc0e2ef 7cc5e2f0     ...|...|...|...|
   26cd0:	7cc2e2f1 7cd8e2f2 7cd2e2f3 7cdce2f4     ...|...|...|...|
   26ce0:	7ce2e2f5 9b3be2f6 7cefe2f7 7cf2e2f8     ...|..;....|...|
   26cf0:	7cf4e2f9 7cf6e2fa 7cfae2fb 7d06e2fc     ...|...|...|...}
   26d00:	7d02e340 7d1ce341 7d15e342 7d0ae343     @..}A..}B..}C..}
   26d10:	7d45e344 7d4be345 7d2ee346 7d32e347     D.E}E.K}F..}G.2}
   26d20:	7d3fe348 7d35e349 7d46e34a 7d73e34b     H.?}I.5}J.F}K.s}
   26d30:	7d56e34c 7d4ee34d 7d72e34e 7d68e34f     L.V}M.N}N.r}O.h}
   26d40:	7d6ee350 7d4fe351 7d63e352 7d93e353     P.n}Q.O}R.c}S..}
   26d50:	7d89e354 7d5be355 7d8fe356 7d7de357     T..}U.[}V..}W.}}
   26d60:	7d9be358 7dbae359 7daee35a 7da3e35b     X..}Y..}Z..}[..}
   26d70:	7db5e35c 7dc7e35d 7dbde35e 7dabe35f     \..}]..}^..}_..}
   26d80:	7e3de360 7da2e361 7dafe362 7ddce363     `.=~a..}b..}c..}
   26d90:	7db8e364 7d9fe365 7db0e366 7dd8e367     d..}e..}f..}g..}
   26da0:	7ddde368 7de4e369 7ddee36a 7dfbe36b     h..}i..}j..}k..}
   26db0:	7df2e36c 7de1e36d 7e05e36e 7e0ae36f     l..}m..}n..~o..~
   26dc0:	7e23e370 7e21e371 7e12e372 7e31e373     p.#~q.!~r..~s.1~
   26dd0:	7e1fe374 7e09e375 7e0be376 7e22e377     t..~u..~v..~w."~
   26de0:	7e46e378 7e66e379 7e3be37a 7e35e37b     x.F~y.f~z.;~{.5~
   26df0:	7e39e37c 7e43e37d 7e37e37e 7e32e380     |.9~}.C~~.7~..2~
   26e00:	7e3ae381 7e67e382 7e5de383 7e56e384     ..:~..g~..]~..V~
   26e10:	7e5ee385 7e59e386 7e5ae387 7e79e388     ..^~..Y~..Z~..y~
   26e20:	7e6ae389 7e69e38a 7e7ce38b 7e7be38c     ..j~..i~..|~..{~
   26e30:	7e83e38d 7dd5e38e 7e7de38f 8faee390     ...~...}..}~....
   26e40:	7e7fe391 7e88e392 7e89e393 7e8ce394     ...~...~...~...~
   26e50:	7e92e395 7e90e396 7e93e397 7e94e398     ...~...~...~...~
   26e60:	7e96e399 7e8ee39a 7e9be39b 7e9ce39c     ...~...~...~...~
   26e70:	7f38e39d 7f3ae39e 7f45e39f 7f4ce3a0     ..8...:...E...L.
   26e80:	7f4de3a1 7f4ee3a2 7f50e3a3 7f51e3a4     ..M...N...P...Q.
   26e90:	7f55e3a5 7f54e3a6 7f58e3a7 7f5fe3a8     ..U...T...X..._.
   26ea0:	7f60e3a9 7f68e3aa 7f69e3ab 7f67e3ac     ..`...h...i...g.
   26eb0:	7f78e3ad 7f82e3ae 7f86e3af 7f83e3b0     ..x.............
   26ec0:	7f88e3b1 7f87e3b2 7f8ce3b3 7f94e3b4     ................
   26ed0:	7f9ee3b5 7f9de3b6 7f9ae3b7 7fa3e3b8     ................
   26ee0:	7fafe3b9 7fb2e3ba 7fb9e3bb 7faee3bc     ................
   26ef0:	7fb6e3bd 7fb8e3be 8b71e3bf 7fc5e3c0     ..........q.....
   26f00:	7fc6e3c1 7fcae3c2 7fd5e3c3 7fd4e3c4     ................
   26f10:	7fe1e3c5 7fe6e3c6 7fe9e3c7 7ff3e3c8     ................
   26f20:	7ff9e3c9 98dce3ca 8006e3cb 8004e3cc     ................
   26f30:	800be3cd 8012e3ce 8018e3cf 8019e3d0     ................
   26f40:	801ce3d1 8021e3d2 8028e3d3 803fe3d4     ......!...(...?.
   26f50:	803be3d5 804ae3d6 8046e3d7 8052e3d8     ..;...J...F...R.
   26f60:	8058e3d9 805ae3da 805fe3db 8062e3dc     ..X...Z..._...b.
   26f70:	8068e3dd 8073e3de 8072e3df 8070e3e0     ..h...s...r...p.
   26f80:	8076e3e1 8079e3e2 807de3e3 807fe3e4     ..v...y...}.....
   26f90:	8084e3e5 8086e3e6 8085e3e7 809be3e8     ................
   26fa0:	8093e3e9 809ae3ea 80ade3eb 5190e3ec     ...............Q
   26fb0:	80ace3ed 80dbe3ee 80e5e3ef 80d9e3f0     ................
   26fc0:	80dde3f1 80c4e3f2 80dae3f3 80d6e3f4     ................
   26fd0:	8109e3f5 80efe3f6 80f1e3f7 811be3f8     ................
   26fe0:	8129e3f9 8123e3fa 812fe3fb 814be3fc     ..)...#.../...K.
   26ff0:	968be440 8146e441 813ee442 8153e443     @...A.F.B.>.C.S.
   27000:	8151e444 80fce445 8171e446 816ee447     D.Q.E...F.q.G.n.
   27010:	8165e448 8166e449 8174e44a 8183e44b     H.e.I.f.J.t.K...
   27020:	8188e44c 818ae44d 8180e44e 8182e44f     L...M...N...O...
   27030:	81a0e450 8195e451 81a4e452 81a3e453     P...Q...R...S...
   27040:	815fe454 8193e455 81a9e456 81b0e457     T._.U...V...W...
   27050:	81b5e458 81bee459 81b8e45a 81bde45b     X...Y...Z...[...
   27060:	81c0e45c 81c2e45d 81bae45e 81c9e45f     \...]...^..._...
   27070:	81cde460 81d1e461 81d9e462 81d8e463     `...a...b...c...
   27080:	81c8e464 81dae465 81dfe466 81e0e467     d...e...f...g...
   27090:	81e7e468 81fae469 81fbe46a 81fee46b     h...i...j...k...
   270a0:	8201e46c 8202e46d 8205e46e 8207e46f     l...m...n...o...
   270b0:	820ae470 820de471 8210e472 8216e473     p...q...r...s...
   270c0:	8229e474 822be475 8238e476 8233e477     t.).u.+.v.8.w.3.
   270d0:	8240e478 8259e479 8258e47a 825de47b     x.@.y.Y.z.X.{.].
   270e0:	825ae47c 825fe47d 8264e47e 8262e480     |.Z.}._.~.d...b.
   270f0:	8268e481 826ae482 826be483 822ee484     ..h...j...k.....
   27100:	8271e485 8277e486 8278e487 827ee488     ..q...w...x...~.
   27110:	828de489 8292e48a 82abe48b 829fe48c     ................
   27120:	82bbe48d 82ace48e 82e1e48f 82e3e490     ................
   27130:	82dfe491 82d2e492 82f4e493 82f3e494     ................
   27140:	82fae495 8393e496 8303e497 82fbe498     ................
   27150:	82f9e499 82dee49a 8306e49b 82dce49c     ................
   27160:	8309e49d 82d9e49e 8335e49f 8334e4a0     ..........5...4.
   27170:	8316e4a1 8332e4a2 8331e4a3 8340e4a4     ......2...1...@.
   27180:	8339e4a5 8350e4a6 8345e4a7 832fe4a8     ..9...P...E.../.
   27190:	832be4a9 8317e4aa 8318e4ab 8385e4ac     ..+.............
   271a0:	839ae4ad 83aae4ae 839fe4af 83a2e4b0     ................
   271b0:	8396e4b1 8323e4b2 838ee4b3 8387e4b4     ......#.........
   271c0:	838ae4b5 837ce4b6 83b5e4b7 8373e4b8     ......|.......s.
   271d0:	8375e4b9 83a0e4ba 8389e4bb 83a8e4bc     ..u.............
   271e0:	83f4e4bd 8413e4be 83ebe4bf 83cee4c0     ................
   271f0:	83fde4c1 8403e4c2 83d8e4c3 840be4c4     ................
   27200:	83c1e4c5 83f7e4c6 8407e4c7 83e0e4c8     ................
   27210:	83f2e4c9 840de4ca 8422e4cb 8420e4cc     .........."... .
   27220:	83bde4cd 8438e4ce 8506e4cf 83fbe4d0     ......8.........
   27230:	846de4d1 842ae4d2 843ce4d3 855ae4d4     ..m...*...<...Z.
   27240:	8484e4d5 8477e4d6 846be4d7 84ade4d8     ......w...k.....
   27250:	846ee4d9 8482e4da 8469e4db 8446e4dc     ..n.......i...F.
   27260:	842ce4dd 846fe4de 8479e4df 8435e4e0     ..,...o...y...5.
   27270:	84cae4e1 8462e4e2 84b9e4e3 84bfe4e4     ......b.........
   27280:	849fe4e5 84d9e4e6 84cde4e7 84bbe4e8     ................
   27290:	84dae4e9 84d0e4ea 84c1e4eb 84c6e4ec     ................
   272a0:	84d6e4ed 84a1e4ee 8521e4ef 84ffe4f0     ..........!.....
   272b0:	84f4e4f1 8517e4f2 8518e4f3 852ce4f4     ..............,.
   272c0:	851fe4f5 8515e4f6 8514e4f7 84fce4f8     ................
   272d0:	8540e4f9 8563e4fa 8558e4fb 8548e4fc     ..@...c...X...H.
   272e0:	8541e540 8602e541 854be542 8555e543     @.A.A...B.K.C.U.
   272f0:	8580e544 85a4e545 8588e546 8591e547     D...E...F...G...
   27300:	858ae548 85a8e549 856de54a 8594e54b     H...I...J.m.K...
   27310:	859be54c 85eae54d 8587e54e 859ce54f     L...M...N...O...
   27320:	8577e550 857ee551 8590e552 85c9e553     P.w.Q.~.R...S...
   27330:	85bae554 85cfe555 85b9e556 85d0e557     T...U...V...W...
   27340:	85d5e558 85dde559 85e5e55a 85dce55b     X...Y...Z...[...
   27350:	85f9e55c 860ae55d 8613e55e 860be55f     \...]...^..._...
   27360:	85fee560 85fae561 8606e562 8622e563     `...a...b...c.".
   27370:	861ae564 8630e565 863fe566 864de567     d...e.0.f.?.g.M.
   27380:	4e55e568 8654e569 865fe56a 8667e56b     h.UNi.T.j._.k.g.
   27390:	8671e56c 8693e56d 86a3e56e 86a9e56f     l.q.m...n...o...
   273a0:	86aae570 868be571 868ce572 86b6e573     p...q...r...s...
   273b0:	86afe574 86c4e575 86c6e576 86b0e577     t...u...v...w...
   273c0:	86c9e578 8823e579 86abe57a 86d4e57b     x...y.#.z...{...
   273d0:	86dee57c 86e9e57d 86ece57e 86dfe580     |...}...~.......
   273e0:	86dbe581 86efe582 8712e583 8706e584     ................
   273f0:	8708e585 8700e586 8703e587 86fbe588     ................
   27400:	8711e589 8709e58a 870de58b 86f9e58c     ................
   27410:	870ae58d 8734e58e 873fe58f 8737e590     ......4...?...7.
   27420:	873be591 8725e592 8729e593 871ae594     ..;...%...).....
   27430:	8760e595 875fe596 8778e597 874ce598     ..`..._...x...L.
   27440:	874ee599 8774e59a 8757e59b 8768e59c     ..N...t...W...h.
   27450:	876ee59d 8759e59e 8753e59f 8763e5a0     ..n...Y...S...c.
   27460:	876ae5a1 8805e5a2 87a2e5a3 879fe5a4     ..j.............
   27470:	8782e5a5 87afe5a6 87cbe5a7 87bde5a8     ................
   27480:	87c0e5a9 87d0e5aa 96d6e5ab 87abe5ac     ................
   27490:	87c4e5ad 87b3e5ae 87c7e5af 87c6e5b0     ................
   274a0:	87bbe5b1 87efe5b2 87f2e5b3 87e0e5b4     ................
   274b0:	880fe5b5 880de5b6 87fee5b7 87f6e5b8     ................
   274c0:	87f7e5b9 880ee5ba 87d2e5bb 8811e5bc     ................
   274d0:	8816e5bd 8815e5be 8822e5bf 8821e5c0     .........."...!.
   274e0:	8831e5c1 8836e5c2 8839e5c3 8827e5c4     ..1...6...9...'.
   274f0:	883be5c5 8844e5c6 8842e5c7 8852e5c8     ..;...D...B...R.
   27500:	8859e5c9 885ee5ca 8862e5cb 886be5cc     ..Y...^...b...k.
   27510:	8881e5cd 887ee5ce 889ee5cf 8875e5d0     ......~.......u.
   27520:	887de5d1 88b5e5d2 8872e5d3 8882e5d4     ..}.......r.....
   27530:	8897e5d5 8892e5d6 88aee5d7 8899e5d8     ................
   27540:	88a2e5d9 888de5da 88a4e5db 88b0e5dc     ................
   27550:	88bfe5dd 88b1e5de 88c3e5df 88c4e5e0     ................
   27560:	88d4e5e1 88d8e5e2 88d9e5e3 88dde5e4     ................
   27570:	88f9e5e5 8902e5e6 88fce5e7 88f4e5e8     ................
   27580:	88e8e5e9 88f2e5ea 8904e5eb 890ce5ec     ................
   27590:	890ae5ed 8913e5ee 8943e5ef 891ee5f0     ..........C.....
   275a0:	8925e5f1 892ae5f2 892be5f3 8941e5f4     ..%...*...+...A.
   275b0:	8944e5f5 893be5f6 8936e5f7 8938e5f8     ..D...;...6...8.
   275c0:	894ce5f9 891de5fa 8960e5fb 895ee5fc     ..L.......`...^.
   275d0:	8966e640 8964e641 896de642 896ae643     @.f.A.d.B.m.C.j.
   275e0:	896fe644 8974e645 8977e646 897ee647     D.o.E.t.F.w.G.~.
   275f0:	8983e648 8988e649 898ae64a 8993e64b     H...I...J...K...
   27600:	8998e64c 89a1e64d 89a9e64e 89a6e64f     L...M...N...O...
   27610:	89ace650 89afe651 89b2e652 89bae653     P...Q...R...S...
   27620:	89bde654 89bfe655 89c0e656 89dae657     T...U...V...W...
   27630:	89dce658 89dde659 89e7e65a 89f4e65b     X...Y...Z...[...
   27640:	89f8e65c 8a03e65d 8a16e65e 8a10e65f     \...]...^..._...
   27650:	8a0ce660 8a1be661 8a1de662 8a25e663     `...a...b...c.%.
   27660:	8a36e664 8a41e665 8a5be666 8a52e667     d.6.e.A.f.[.g.R.
   27670:	8a46e668 8a48e669 8a7ce66a 8a6de66b     h.F.i.H.j.|.k.m.
   27680:	8a6ce66c 8a62e66d 8a85e66e 8a82e66f     l.l.m.b.n...o...
   27690:	8a84e670 8aa8e671 8aa1e672 8a91e673     p...q...r...s...
   276a0:	8aa5e674 8aa6e675 8a9ae676 8aa3e677     t...u...v...w...
   276b0:	8ac4e678 8acde679 8ac2e67a 8adae67b     x...y...z...{...
   276c0:	8aebe67c 8af3e67d 8ae7e67e 8ae4e680     |...}...~.......
   276d0:	8af1e681 8b14e682 8ae0e683 8ae2e684     ................
   276e0:	8af7e685 8adee686 8adbe687 8b0ce688     ................
   276f0:	8b07e689 8b1ae68a 8ae1e68b 8b16e68c     ................
   27700:	8b10e68d 8b17e68e 8b20e68f 8b33e690     .......... ...3.
   27710:	97abe691 8b26e692 8b2be693 8b3ee694     ......&...+...>.
   27720:	8b28e695 8b41e696 8b4ce697 8b4fe698     ..(...A...L...O.
   27730:	8b4ee699 8b49e69a 8b56e69b 8b5be69c     ..N...I...V...[.
   27740:	8b5ae69d 8b6be69e 8b5fe69f 8b6ce6a0     ..Z...k..._...l.
   27750:	8b6fe6a1 8b74e6a2 8b7de6a3 8b80e6a4     ..o...t...}.....
   27760:	8b8ce6a5 8b8ee6a6 8b92e6a7 8b93e6a8     ................
   27770:	8b96e6a9 8b99e6aa 8b9ae6ab 8c3ae6ac     ..............:.
   27780:	8c41e6ad 8c3fe6ae 8c48e6af 8c4ce6b0     ..A...?...H...L.
   27790:	8c4ee6b1 8c50e6b2 8c55e6b3 8c62e6b4     ..N...P...U...b.
   277a0:	8c6ce6b5 8c78e6b6 8c7ae6b7 8c82e6b8     ..l...x...z.....
   277b0:	8c89e6b9 8c85e6ba 8c8ae6bb 8c8de6bc     ................
   277c0:	8c8ee6bd 8c94e6be 8c7ce6bf 8c98e6c0     ..........|.....
   277d0:	621de6c1 8cade6c2 8caae6c3 8cbde6c4     ...b............
   277e0:	8cb2e6c5 8cb3e6c6 8caee6c7 8cb6e6c8     ................
   277f0:	8cc8e6c9 8cc1e6ca 8ce4e6cb 8ce3e6cc     ................
   27800:	8cdae6cd 8cfde6ce 8cfae6cf 8cfbe6d0     ................
   27810:	8d04e6d1 8d05e6d2 8d0ae6d3 8d07e6d4     ................
   27820:	8d0fe6d5 8d0de6d6 8d10e6d7 9f4ee6d8     ..............N.
   27830:	8d13e6d9 8ccde6da 8d14e6db 8d16e6dc     ................
   27840:	8d67e6dd 8d6de6de 8d71e6df 8d73e6e0     ..g...m...q...s.
   27850:	8d81e6e1 8d99e6e2 8dc2e6e3 8dbee6e4     ................
   27860:	8dbae6e5 8dcfe6e6 8ddae6e7 8dd6e6e8     ................
   27870:	8dcce6e9 8ddbe6ea 8dcbe6eb 8deae6ec     ................
   27880:	8debe6ed 8ddfe6ee 8de3e6ef 8dfce6f0     ................
   27890:	8e08e6f1 8e09e6f2 8dffe6f3 8e1de6f4     ................
   278a0:	8e1ee6f5 8e10e6f6 8e1fe6f7 8e42e6f8     ..............B.
   278b0:	8e35e6f9 8e30e6fa 8e34e6fb 8e4ae6fc     ..5...0...4...J.
   278c0:	8e47e740 8e49e741 8e4ce742 8e50e743     @.G.A.I.B.L.C.P.
   278d0:	8e48e744 8e59e745 8e64e746 8e60e747     D.H.E.Y.F.d.G.`.
   278e0:	8e2ae748 8e63e749 8e55e74a 8e76e74b     H.*.I.c.J.U.K.v.
   278f0:	8e72e74c 8e7ce74d 8e81e74e 8e87e74f     L.r.M.|.N...O...
   27900:	8e85e750 8e84e751 8e8be752 8e8ae753     P...Q...R...S...
   27910:	8e93e754 8e91e755 8e94e756 8e99e757     T...U...V...W...
   27920:	8eaae758 8ea1e759 8eace75a 8eb0e75b     X...Y...Z...[...
   27930:	8ec6e75c 8eb1e75d 8ebee75e 8ec5e75f     \...]...^..._...
   27940:	8ec8e760 8ecbe761 8edbe762 8ee3e763     `...a...b...c...
   27950:	8efce764 8efbe765 8eebe766 8efee767     d...e...f...g...
   27960:	8f0ae768 8f05e769 8f15e76a 8f12e76b     h...i...j...k...
   27970:	8f19e76c 8f13e76d 8f1ce76e 8f1fe76f     l...m...n...o...
   27980:	8f1be770 8f0ce771 8f26e772 8f33e773     p...q...r.&.s.3.
   27990:	8f3be774 8f39e775 8f45e776 8f42e777     t.;.u.9.v.E.w.B.
   279a0:	8f3ee778 8f4ce779 8f49e77a 8f46e77b     x.>.y.L.z.I.{.F.
   279b0:	8f4ee77c 8f57e77d 8f5ce77e 8f62e780     |.N.}.W.~.\...b.
   279c0:	8f63e781 8f64e782 8f9ce783 8f9fe784     ..c...d.........
   279d0:	8fa3e785 8fade786 8fafe787 8fb7e788     ................
   279e0:	8fdae789 8fe5e78a 8fe2e78b 8feae78c     ................
   279f0:	8fefe78d 9087e78e 8ff4e78f 9005e790     ................
   27a00:	8ff9e791 8ffae792 9011e793 9015e794     ................
   27a10:	9021e795 900de796 901ee797 9016e798     ..!.............
   27a20:	900be799 9027e79a 9036e79b 9035e79c     ......'...6...5.
   27a30:	9039e79d 8ff8e79e 904fe79f 9050e7a0     ..9.......O...P.
   27a40:	9051e7a1 9052e7a2 900ee7a3 9049e7a4     ..Q...R.......I.
   27a50:	903ee7a5 9056e7a6 9058e7a7 905ee7a8     ..>...V...X...^.
   27a60:	9068e7a9 906fe7aa 9076e7ab 96a8e7ac     ..h...o...v.....
   27a70:	9072e7ad 9082e7ae 907de7af 9081e7b0     ..r.......}.....
   27a80:	9080e7b1 908ae7b2 9089e7b3 908fe7b4     ................
   27a90:	90a8e7b5 90afe7b6 90b1e7b7 90b5e7b8     ................
   27aa0:	90e2e7b9 90e4e7ba 6248e7bb 90dbe7bc     ..........Hb....
   27ab0:	9102e7bd 9112e7be 9119e7bf 9132e7c0     ..............2.
   27ac0:	9130e7c1 914ae7c2 9156e7c3 9158e7c4     ..0...J...V...X.
   27ad0:	9163e7c5 9165e7c6 9169e7c7 9173e7c8     ..c...e...i...s.
   27ae0:	9172e7c9 918be7ca 9189e7cb 9182e7cc     ..r.............
   27af0:	91a2e7cd 91abe7ce 91afe7cf 91aae7d0     ................
   27b00:	91b5e7d1 91b4e7d2 91bae7d3 91c0e7d4     ................
   27b10:	91c1e7d5 91c9e7d6 91cbe7d7 91d0e7d8     ................
   27b20:	91d6e7d9 91dfe7da 91e1e7db 91dbe7dc     ................
   27b30:	91fce7dd 91f5e7de 91f6e7df 921ee7e0     ................
   27b40:	91ffe7e1 9214e7e2 922ce7e3 9215e7e4     ..........,.....
   27b50:	9211e7e5 925ee7e6 9257e7e7 9245e7e8     ......^...W...E.
   27b60:	9249e7e9 9264e7ea 9248e7eb 9295e7ec     ..I...d...H.....
   27b70:	923fe7ed 924be7ee 9250e7ef 929ce7f0     ..?...K...P.....
   27b80:	9296e7f1 9293e7f2 929be7f3 925ae7f4     ..............Z.
   27b90:	92cfe7f5 92b9e7f6 92b7e7f7 92e9e7f8     ................
   27ba0:	930fe7f9 92fae7fa 9344e7fb 932ee7fc     ..........D.....
   27bb0:	9319e840 9322e841 931ae842 9323e843     @...A.".B...C.#.
   27bc0:	933ae844 9335e845 933be846 935ce847     D.:.E.5.F.;.G.\.
   27bd0:	9360e848 937ce849 936ee84a 9356e84b     H.`.I.|.J.n.K.V.
   27be0:	93b0e84c 93ace84d 93ade84e 9394e84f     L...M...N...O...
   27bf0:	93b9e850 93d6e851 93d7e852 93e8e853     P...Q...R...S...
   27c00:	93e5e854 93d8e855 93c3e856 93dde857     T...U...V...W...
   27c10:	93d0e858 93c8e859 93e4e85a 941ae85b     X...Y...Z...[...
   27c20:	9414e85c 9413e85d 9403e85e 9407e85f     \...]...^..._...
   27c30:	9410e860 9436e861 942be862 9435e863     `...a.6.b.+.c.5.
   27c40:	9421e864 943ae865 9441e866 9452e867     d.!.e.:.f.A.g.R.
   27c50:	9444e868 945be869 9460e86a 9462e86b     h.D.i.[.j.`.k.b.
   27c60:	945ee86c 946ae86d 9229e86e 9470e86f     l.^.m.j.n.).o.p.
   27c70:	9475e870 9477e871 947de872 945ae873     p.u.q.w.r.}.s.Z.
   27c80:	947ce874 947ee875 9481e876 947fe877     t.|.u.~.v...w...
   27c90:	9582e878 9587e879 958ae87a 9594e87b     x...y...z...{...
   27ca0:	9596e87c 9598e87d 9599e87e 95a0e880     |...}...~.......
   27cb0:	95a8e881 95a7e882 95ade883 95bce884     ................
   27cc0:	95bbe885 95b9e886 95bee887 95cae888     ................
   27cd0:	6ff6e889 95c3e88a 95cde88b 95cce88c     ...o............
   27ce0:	95d5e88d 95d4e88e 95d6e88f 95dce890     ................
   27cf0:	95e1e891 95e5e892 95e2e893 9621e894     ..............!.
   27d00:	9628e895 962ee896 962fe897 9642e898     ..(......./...B.
   27d10:	964ce899 964fe89a 964be89b 9677e89c     ..L...O...K...w.
   27d20:	965ce89d 965ee89e 965de89f 965fe8a0     ..\...^...]..._.
   27d30:	9666e8a1 9672e8a2 966ce8a3 968de8a4     ..f...r...l.....
   27d40:	9698e8a5 9695e8a6 9697e8a7 96aae8a8     ................
   27d50:	96a7e8a9 96b1e8aa 96b2e8ab 96b0e8ac     ................
   27d60:	96b4e8ad 96b6e8ae 96b8e8af 96b9e8b0     ................
   27d70:	96cee8b1 96cbe8b2 96c9e8b3 96cde8b4     ................
   27d80:	894de8b5 96dce8b6 970de8b7 96d5e8b8     ..M.............
   27d90:	96f9e8b9 9704e8ba 9706e8bb 9708e8bc     ................
   27da0:	9713e8bd 970ee8be 9711e8bf 970fe8c0     ................
   27db0:	9716e8c1 9719e8c2 9724e8c3 972ae8c4     ..........$...*.
   27dc0:	9730e8c5 9739e8c6 973de8c7 973ee8c8     ..0...9...=...>.
   27dd0:	9744e8c9 9746e8ca 9748e8cb 9742e8cc     ..D...F...H...B.
   27de0:	9749e8cd 975ce8ce 9760e8cf 9764e8d0     ..I...\...`...d.
   27df0:	9766e8d1 9768e8d2 52d2e8d3 976be8d4     ..f...h....R..k.
   27e00:	9771e8d5 9779e8d6 9785e8d7 977ce8d8     ..q...y.......|.
   27e10:	9781e8d9 977ae8da 9786e8db 978be8dc     ......z.........
   27e20:	978fe8dd 9790e8de 979ce8df 97a8e8e0     ................
   27e30:	97a6e8e1 97a3e8e2 97b3e8e3 97b4e8e4     ................
   27e40:	97c3e8e5 97c6e8e6 97c8e8e7 97cbe8e8     ................
   27e50:	97dce8e9 97ede8ea 9f4fe8eb 97f2e8ec     ..........O.....
   27e60:	7adfe8ed 97f6e8ee 97f5e8ef 980fe8f0     ...z............
   27e70:	980ce8f1 9838e8f2 9824e8f3 9821e8f4     ......8...$...!.
   27e80:	9837e8f5 983de8f6 9846e8f7 984fe8f8     ..7...=...F...O.
   27e90:	984be8f9 986be8fa 986fe8fb 9870e8fc     ..K...k...o...p.
   27ea0:	9871e940 9874e941 9873e942 98aae943     @.q.A.t.B.s.C...
   27eb0:	98afe944 98b1e945 98b6e946 98c4e947     D...E...F...G...
   27ec0:	98c3e948 98c6e949 98e9e94a 98ebe94b     H...I...J...K...
   27ed0:	9903e94c 9909e94d 9912e94e 9914e94f     L...M...N...O...
   27ee0:	9918e950 9921e951 991de952 991ee953     P...Q.!.R...S...
   27ef0:	9924e954 9920e955 992ce956 992ee957     T.$.U. .V.,.W...
   27f00:	993de958 993ee959 9942e95a 9949e95b     X.=.Y.>.Z.B.[.I.
   27f10:	9945e95c 9950e95d 994be95e 9951e95f     \.E.].P.^.K._.Q.
   27f20:	9952e960 994ce961 9955e962 9997e963     `.R.a.L.b.U.c...
   27f30:	9998e964 99a5e965 99ade966 99aee967     d...e...f...g...
   27f40:	99bce968 99dfe969 99dbe96a 99dde96b     h...i...j...k...
   27f50:	99d8e96c 99d1e96d 99ede96e 99eee96f     l...m...n...o...
   27f60:	99f1e970 99f2e971 99fbe972 99f8e973     p...q...r...s...
   27f70:	9a01e974 9a0fe975 9a05e976 99e2e977     t...u...v...w...
   27f80:	9a19e978 9a2be979 9a37e97a 9a45e97b     x...y.+.z.7.{.E.
   27f90:	9a42e97c 9a40e97d 9a43e97e 9a3ee980     |.B.}.@.~.C...>.
   27fa0:	9a55e981 9a4de982 9a5be983 9a57e984     ..U...M...[...W.
   27fb0:	9a5fe985 9a62e986 9a65e987 9a64e988     .._...b...e...d.
   27fc0:	9a69e989 9a6be98a 9a6ae98b 9aade98c     ..i...k...j.....
   27fd0:	9ab0e98d 9abce98e 9ac0e98f 9acfe990     ................
   27fe0:	9ad1e991 9ad3e992 9ad4e993 9adee994     ................
   27ff0:	9adfe995 9ae2e996 9ae3e997 9ae6e998     ................
   28000:	9aefe999 9aebe99a 9aeee99b 9af4e99c     ................
   28010:	9af1e99d 9af7e99e 9afbe99f 9b06e9a0     ................
   28020:	9b18e9a1 9b1ae9a2 9b1fe9a3 9b22e9a4     ..............".
   28030:	9b23e9a5 9b25e9a6 9b27e9a7 9b28e9a8     ..#...%...'...(.
   28040:	9b29e9a9 9b2ae9aa 9b2ee9ab 9b2fe9ac     ..)...*......./.
   28050:	9b32e9ad 9b44e9ae 9b43e9af 9b4fe9b0     ..2...D...C...O.
   28060:	9b4de9b1 9b4ee9b2 9b51e9b3 9b58e9b4     ..M...N...Q...X.
   28070:	9b74e9b5 9b93e9b6 9b83e9b7 9b91e9b8     ..t.............
   28080:	9b96e9b9 9b97e9ba 9b9fe9bb 9ba0e9bc     ................
   28090:	9ba8e9bd 9bb4e9be 9bc0e9bf 9bcae9c0     ................
   280a0:	9bb9e9c1 9bc6e9c2 9bcfe9c3 9bd1e9c4     ................
   280b0:	9bd2e9c5 9be3e9c6 9be2e9c7 9be4e9c8     ................
   280c0:	9bd4e9c9 9be1e9ca 9c3ae9cb 9bf2e9cc     ..........:.....
   280d0:	9bf1e9cd 9bf0e9ce 9c15e9cf 9c14e9d0     ................
   280e0:	9c09e9d1 9c13e9d2 9c0ce9d3 9c06e9d4     ................
   280f0:	9c08e9d5 9c12e9d6 9c0ae9d7 9c04e9d8     ................
   28100:	9c2ee9d9 9c1be9da 9c25e9db 9c24e9dc     ..........%...$.
   28110:	9c21e9dd 9c30e9de 9c47e9df 9c32e9e0     ..!...0...G...2.
   28120:	9c46e9e1 9c3ee9e2 9c5ae9e3 9c60e9e4     ..F...>...Z...`.
   28130:	9c67e9e5 9c76e9e6 9c78e9e7 9ce7e9e8     ..g...v...x.....
   28140:	9cece9e9 9cf0e9ea 9d09e9eb 9d08e9ec     ................
   28150:	9cebe9ed 9d03e9ee 9d06e9ef 9d2ae9f0     ..............*.
   28160:	9d26e9f1 9dafe9f2 9d23e9f3 9d1fe9f4     ..&.......#.....
   28170:	9d44e9f5 9d15e9f6 9d12e9f7 9d41e9f8     ..D...........A.
   28180:	9d3fe9f9 9d3ee9fa 9d46e9fb 9d48e9fc     ..?...>...F...H.
   28190:	9d5dea40 9d5eea41 9d64ea42 9d51ea43     @.].A.^.B.d.C.Q.
   281a0:	9d50ea44 9d59ea45 9d72ea46 9d89ea47     D.P.E.Y.F.r.G...
   281b0:	9d87ea48 9dabea49 9d6fea4a 9d7aea4b     H...I...J.o.K.z.
   281c0:	9d9aea4c 9da4ea4d 9da9ea4e 9db2ea4f     L...M...N...O...
   281d0:	9dc4ea50 9dc1ea51 9dbbea52 9db8ea53     P...Q...R...S...
   281e0:	9dbaea54 9dc6ea55 9dcfea56 9dc2ea57     T...U...V...W...
   281f0:	9dd9ea58 9dd3ea59 9df8ea5a 9de6ea5b     X...Y...Z...[...
   28200:	9dedea5c 9defea5d 9dfdea5e 9e1aea5f     \...]...^..._...
   28210:	9e1bea60 9e1eea61 9e75ea62 9e79ea63     `...a...b.u.c.y.
   28220:	9e7dea64 9e81ea65 9e88ea66 9e8bea67     d.}.e...f...g...
   28230:	9e8cea68 9e92ea69 9e95ea6a 9e91ea6b     h...i...j...k...
   28240:	9e9dea6c 9ea5ea6d 9ea9ea6e 9eb8ea6f     l...m...n...o...
   28250:	9eaaea70 9eadea71 9761ea72 9eccea73     p...q...r.a.s...
   28260:	9eceea74 9ecfea75 9ed0ea76 9ed4ea77     t...u...v...w...
   28270:	9edcea78 9edeea79 9eddea7a 9ee0ea7b     x...y...z...{...
   28280:	9ee5ea7c 9ee8ea7d 9eefea7e 9ef4ea80     |...}...~.......
   28290:	9ef6ea81 9ef7ea82 9ef9ea83 9efbea84     ................
   282a0:	9efcea85 9efdea86 9f07ea87 9f08ea88     ................
   282b0:	76b7ea89 9f15ea8a 9f21ea8b 9f2cea8c     ...v......!...,.
   282c0:	9f3eea8d 9f4aea8e 9f52ea8f 9f54ea90     ..>...J...R...T.
   282d0:	9f63ea91 9f5fea92 9f60ea93 9f61ea94     ..c..._...`...a.
   282e0:	9f66ea95 9f67ea96 9f6cea97 9f6aea98     ..f...g...l...j.
   282f0:	9f77ea99 9f72ea9a 9f76ea9b 9f95ea9c     ..w...r...v.....
   28300:	9f9cea9d 9fa0ea9e 582fea9f 69c7eaa0     ........../X...i
   28310:	9059eaa1 7464eaa2 51dceaa3 7199eaa4     ..Y...dt...Q...q
   28320:	2170fa40 2171fa41 2172fa42 2173fa43     @.p!A.q!B.r!C.s!
   28330:	2174fa44 2175fa45 2176fa46 2177fa47     D.t!E.u!F.v!G.w!
   28340:	2178fa48 2179fa49 ffe4fa55 ff07fa56     H.x!I.y!U...V...
   28350:	ff02fa57 7e8afa5c 891cfa5d 9348fa5e     W...\..~]...^.H.
   28360:	9288fa5f 84dcfa60 4fc9fa61 70bbfa62     _...`...a..Ob..p
   28370:	6631fa63 68c8fa64 92f9fa65 66fbfa66     c.1fd..he...f..f
   28380:	5f45fa67 4e28fa68 4ee1fa69 4efcfa6a     g.E_h.(Ni..Nj..N
   28390:	4f00fa6b 4f03fa6c 4f39fa6d 4f56fa6e     k..Ol..Om.9On.VO
   283a0:	4f92fa6f 4f8afa70 4f9afa71 4f94fa72     o..Op..Oq..Or..O
   283b0:	4fcdfa73 5040fa74 5022fa75 4ffffa76     s..Ot.@Pu."Pv..O
   283c0:	501efa77 5046fa78 5070fa79 5042fa7a     w..Px.FPy.pPz.BP
   283d0:	5094fa7b 50f4fa7c 50d8fa7d 514afa7e     {..P|..P}..P~.JQ
   283e0:	5164fa80 519dfa81 51befa82 51ecfa83     ..dQ...Q...Q...Q
   283f0:	5215fa84 529cfa85 52a6fa86 52c0fa87     ...R...R...R...R
   28400:	52dbfa88 5300fa89 5307fa8a 5324fa8b     ...R...S...S..$S
   28410:	5372fa8c 5393fa8d 53b2fa8e 53ddfa8f     ..rS...S...S...S
   28420:	fa0efa90 549cfa91 548afa92 54a9fa93     .......T...T...T
   28430:	54fffa94 5586fa95 5759fa96 5765fa97     ...T...U..YW..eW
   28440:	57acfa98 57c8fa99 57c7fa9a fa0ffa9b     ...W...W...W....
   28450:	fa10fa9c 589efa9d 58b2fa9e 590bfa9f     .......X...X...Y
   28460:	5953faa0 595bfaa1 595dfaa2 5963faa3     ..SY..[Y..]Y..cY
   28470:	59a4faa4 59bafaa5 5b56faa6 5bc0faa7     ...Y...Y..V[...[
   28480:	752ffaa8 5bd8faa9 5becfaaa 5c1efaab     ../u...[...[...\
   28490:	5ca6faac 5cbafaad 5cf5faae 5d27faaf     ...\...\...\..']
   284a0:	5d53fab0 fa11fab1 5d42fab2 5d6dfab3     ..S]......B]..m]
   284b0:	5db8fab4 5db9fab5 5dd0fab6 5f21fab7     ...]...]...]..!_
   284c0:	5f34fab8 5f67fab9 5fb7faba 5fdefabb     ..4_..g_..._..._
   284d0:	605dfabc 6085fabd 608afabe 60defabf     ..]`...`...`...`
   284e0:	60d5fac0 6120fac1 60f2fac2 6111fac3     ...`.. a...`...a
   284f0:	6137fac4 6130fac5 6198fac6 6213fac7     ..7a..0a...a...b
   28500:	62a6fac8 63f5fac9 6460faca 649dfacb     ...b...c..`d...d
   28510:	64cefacc 654efacd 6600face 6615facf     ...d..Ne...f...f
   28520:	663bfad0 6609fad1 662efad2 661efad3     ..;f...f...f...f
   28530:	6624fad4 6665fad5 6657fad6 6659fad7     ..$f..ef..Wf..Yf
   28540:	fa12fad8 6673fad9 6699fada 66a0fadb     ......sf...f...f
   28550:	66b2fadc 66bffadd 66fafade 670efadf     ...f...f...f...g
   28560:	f929fae0 6766fae1 67bbfae2 6852fae3     ..)...fg...g..Rh
   28570:	67c0fae4 6801fae5 6844fae6 68cffae7     ...g...h..Dh...h
   28580:	fa13fae8 6968fae9 fa14faea 6998faeb     ......hi.......i
   28590:	69e2faec 6a30faed 6a6bfaee 6a46faef     ...i..0j..kj..Fj
   285a0:	6a73faf0 6a7efaf1 6ae2faf2 6ae4faf3     ..sj..~j...j...j
   285b0:	6bd6faf4 6c3ffaf5 6c5cfaf6 6c86faf7     ...k..?l..\l...l
   285c0:	6c6ffaf8 6cdafaf9 6d04fafa 6d87fafb     ..ol...l...m...m
   285d0:	6d6ffafc 6d96fb40 6dacfb41 6dcffb42     ..om@..mA..mB..m
   285e0:	6df8fb43 6df2fb44 6dfcfb45 6e39fb46     C..mD..mE..mF.9n
   285f0:	6e5cfb47 6e27fb48 6e3cfb49 6ebffb4a     G.\nH.'nI.<nJ..n
   28600:	6f88fb4b 6fb5fb4c 6ff5fb4d 7005fb4e     K..oL..oM..oN..p
   28610:	7007fb4f 7028fb50 7085fb51 70abfb52     O..pP.(pQ..pR..p
   28620:	710ffb53 7104fb54 715cfb55 7146fb56     S..qT..qU.\qV.Fq
   28630:	7147fb57 fa15fb58 71c1fb59 71fefb5a     W.GqX...Y..qZ..q
   28640:	72b1fb5b 72befb5c 7324fb5d fa16fb5e     [..r\..r].$s^...
   28650:	7377fb5f 73bdfb60 73c9fb61 73d6fb62     _.ws`..sa..sb..s
   28660:	73e3fb63 73d2fb64 7407fb65 73f5fb66     c..sd..se..tf..s
   28670:	7426fb67 742afb68 7429fb69 742efb6a     g.&th.*ti.)tj..t
   28680:	7462fb6b 7489fb6c 749ffb6d 7501fb6e     k.btl..tm..tn..u
   28690:	756ffb6f 7682fb70 769cfb71 769efb72     o.oup..vq..vr..v
   286a0:	769bfb73 76a6fb74 fa17fb75 7746fb76     s..vt..vu...v.Fw
   286b0:	52affb77 7821fb78 784efb79 7864fb7a     w..Rx.!xy.Nxz.dx
   286c0:	787afb7b 7930fb7c fa18fb7d fa19fb7e     {.zx|.0y}...~...
   286d0:	fa1afb80 7994fb81 fa1bfb82 799bfb83     .......y.......y
   286e0:	7ad1fb84 7ae7fb85 fa1cfb86 7aebfb87     ...z...z.......z
   286f0:	7b9efb88 fa1dfb89 7d48fb8a 7d5cfb8b     ...{......H}..\}
   28700:	7db7fb8c 7da0fb8d 7dd6fb8e 7e52fb8f     ...}...}...}..R~
   28710:	7f47fb90 7fa1fb91 fa1efb92 8301fb93     ..G.............
   28720:	8362fb94 837ffb95 83c7fb96 83f6fb97     ..b.............
   28730:	8448fb98 84b4fb99 8553fb9a 8559fb9b     ..H.......S...Y.
   28740:	856bfb9c fa1ffb9d 85b0fb9e fa20fb9f     ..k........... .
   28750:	fa21fba0 8807fba1 88f5fba2 8a12fba3     ..!.............
   28760:	8a37fba4 8a79fba5 8aa7fba6 8abefba7     ..7...y.........
   28770:	8adffba8 fa22fba9 8af6fbaa 8b53fbab     ......".......S.
   28780:	8b7ffbac 8cf0fbad 8cf4fbae 8d12fbaf     ................
   28790:	8d76fbb0 fa23fbb1 8ecffbb2 fa24fbb3     ..v...#.......$.
   287a0:	fa25fbb4 9067fbb5 90defbb6 fa26fbb7     ..%...g.......&.
   287b0:	9115fbb8 9127fbb9 91dafbba 91d7fbbb     ......'.........
   287c0:	91defbbc 91edfbbd 91eefbbe 91e4fbbf     ................
   287d0:	91e5fbc0 9206fbc1 9210fbc2 920afbc3     ................
   287e0:	923afbc4 9240fbc5 923cfbc6 924efbc7     ..:...@...<...N.
   287f0:	9259fbc8 9251fbc9 9239fbca 9267fbcb     ..Y...Q...9...g.
   28800:	92a7fbcc 9277fbcd 9278fbce 92e7fbcf     ......w...x.....
   28810:	92d7fbd0 92d9fbd1 92d0fbd2 fa27fbd3     ..............'.
   28820:	92d5fbd4 92e0fbd5 92d3fbd6 9325fbd7     ..............%.
   28830:	9321fbd8 92fbfbd9 fa28fbda 931efbdb     ..!.......(.....
   28840:	92fffbdc 931dfbdd 9302fbde 9370fbdf     ..............p.
   28850:	9357fbe0 93a4fbe1 93c6fbe2 93defbe3     ..W.............
   28860:	93f8fbe4 9431fbe5 9445fbe6 9448fbe7     ......1...E...H.
   28870:	9592fbe8 f9dcfbe9 fa29fbea 969dfbeb     ..........).....
   28880:	96affbec 9733fbed 973bfbee 9743fbef     ......3...;...C.
   28890:	974dfbf0 974ffbf1 9751fbf2 9755fbf3     ..M...O...Q...U.
   288a0:	9857fbf4 9865fbf5 fa2afbf6 fa2bfbf7     ..W...e...*...+.
   288b0:	9927fbf8 fa2cfbf9 999efbfa 9a4efbfb     ..'...,.......N.
   288c0:	9ad9fbfc 9adcfc40 9b75fc41 9b72fc42     ....@...A.u.B.r.
   288d0:	9b8ffc43 9bb1fc44 9bbbfc45 9c00fc46     C...D...E...F...
   288e0:	9d70fc47 9d6bfc48 fa2dfc49 9e19fc4a     G.p.H.k.I.-.J...
   288f0:	9ed1fc4b 00000000                       K.......

000288f8 <cvt1.5636>:
   288f8:	031a0061 031700e0 030700f8 000100ff     a...............
   28908:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
   28918:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
   28928:	01840182 01860184 01870187 018a0189     ................
   28938:	018b018b 018e018d 0190018f 01910191     ................
   28948:	01940193 019601f6 01980197 023d0198     ..............=.
   28958:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
   28968:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
   28978:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
   28988:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
   28998:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
   289a8:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
   289b8:	01ca01cb 011001cd 000101dd 01de018e     ................
   289c8:	01f30112 01f10003 01f401f4 012801f8     ..............(.
   289d8:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
   289e8:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
   289f8:	01810040 02550186 018a0189 018f0258     @.....U.....X...
   28a08:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
   28a18:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
   28a28:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
   28a38:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
   28a48:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
   28a58:	01a90282 02850284 02870286 024401ae     ..............D.
   28a68:	01b201b1 028d0245 028f028e 02910290     ....E...........
   28a78:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
   28a88:	03880386 038a0389 031103b1 000203c2     ................
   28a98:	03a303a3 030803c4 000303cc 038e038c     ................
   28aa8:	03d8038f 03f20118 03f9000a 03f403f3     ................
   28ab8:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
   28ac8:	04500320 04600710 048a0122 04c10136      .P...`."...6...
   28ad8:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
   28ae8:	00000000                                ....

00028aec <cvt2.5637>:
   28aec:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
   28afc:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
   28b0c:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
   28b1c:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
   28b2c:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
   28b3c:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
   28b4c:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
   28b5c:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
   28b6c:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
   28b7c:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
   28b8c:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
   28b9c:	2d000164 ff410826 0000031a              d..-&.A.....

00028ba8 <g_sBspUartConfig>:
   28ba8:	0001c200 00000060 00000000 00000000     ....`...........
   28bb8:	00000000 00000012 00000000 00000000     ................
	...

00028bd0 <g_AM_BSP_GPIO_COM_UART_RX>:
   28bd0:	00000000                                ....

00028bd4 <g_AM_BSP_GPIO_COM_UART_TX>:
   28bd4:	00000000                                ....

00028bd8 <g_AM_BSP_GPIO_IOM0_CS>:
   28bd8:	00000701                                ....

00028bdc <g_AM_BSP_GPIO_IOM0_MISO>:
   28bdc:	00000001                                ....

00028be0 <g_AM_BSP_GPIO_IOM0_MOSI>:
   28be0:	00000301                                ....

00028be4 <g_AM_BSP_GPIO_IOM0_SCK>:
   28be4:	00000301                                ....

00028be8 <g_AM_BSP_GPIO_IOM0_SCL>:
   28be8:	00000b40                                @...

00028bec <g_AM_BSP_GPIO_IOM0_SDA>:
   28bec:	00000b40                                @...

00028bf0 <g_AM_BSP_GPIO_IOM1_CS>:
   28bf0:	00110701                                ....

00028bf4 <g_AM_BSP_GPIO_IOM1_MISO>:
   28bf4:	00010001                                ....

00028bf8 <g_AM_BSP_GPIO_IOM1_MOSI>:
   28bf8:	00010301                                ....

00028bfc <g_AM_BSP_GPIO_IOM1_SCK>:
   28bfc:	00010301                                ....

00028c00 <g_AM_BSP_GPIO_IOM1_SCL>:
   28c00:	00010b40                                @...

00028c04 <g_AM_BSP_GPIO_IOM1_SDA>:
   28c04:	00010b40                                @...

00028c08 <g_AM_BSP_GPIO_IOM2_CS>:
   28c08:	001a0701                                ....

00028c0c <g_AM_BSP_GPIO_IOM2_MISO>:
   28c0c:	00020005                                ....

00028c10 <g_AM_BSP_GPIO_IOM2_MOSI>:
   28c10:	00020305                                ....

00028c14 <g_AM_BSP_GPIO_IOM2_SCK>:
   28c14:	00020305                                ....

00028c18 <g_AM_BSP_GPIO_IOM2_SCL>:
   28c18:	00020b44                                D...

00028c1c <g_AM_BSP_GPIO_IOM2_SDA>:
   28c1c:	00020b44                                D...

00028c20 <g_AM_BSP_GPIO_IOM3_CS>:
   28c20:	00030701                                ....

00028c24 <g_AM_BSP_GPIO_IOM3_MISO>:
   28c24:	00030005                                ....

00028c28 <g_AM_BSP_GPIO_IOM3_MOSI>:
   28c28:	00030305                                ....

00028c2c <g_AM_BSP_GPIO_IOM3_SCK>:
   28c2c:	00030305                                ....

00028c30 <g_AM_BSP_GPIO_IOM3_SCL>:
   28c30:	00030b44                                D...

00028c34 <g_AM_BSP_GPIO_IOM3_SDA>:
   28c34:	00030b44                                D...

00028c38 <g_AM_BSP_GPIO_IOM4_CS>:
   28c38:	000c0701                                ....

00028c3c <g_AM_BSP_GPIO_IOM4_MISO>:
   28c3c:	00040005                                ....

00028c40 <g_AM_BSP_GPIO_IOM4_MOSI>:
   28c40:	00040305                                ....

00028c44 <g_AM_BSP_GPIO_IOM4_SCK>:
   28c44:	00040305                                ....

00028c48 <g_AM_BSP_GPIO_IOM4_SCL>:
   28c48:	00040b44                                D...

00028c4c <g_AM_BSP_GPIO_IOM4_SDA>:
   28c4c:	00040b44                                D...

00028c50 <g_AM_BSP_GPIO_IOM5_CS>:
   28c50:	00050701                                ....

00028c54 <g_AM_BSP_GPIO_IOM5_MISO>:
   28c54:	00050005                                ....

00028c58 <g_AM_BSP_GPIO_IOM5_MOSI>:
   28c58:	00050305                                ....

00028c5c <g_AM_BSP_GPIO_IOM5_SCK>:
   28c5c:	00050305                                ....

00028c60 <g_AM_BSP_GPIO_IOM5_SCL>:
   28c60:	00050b44                                D...

00028c64 <g_AM_BSP_GPIO_IOM5_SDA>:
   28c64:	00050b44                                D...

00028c68 <g_AM_HAL_GPIO_DISABLE>:
   28c68:	00000003                                ....

00028c6c <g_ui8Bit76Capabilities>:
   28c6c:	02800101 80010180 80800101 80808080     ................
   28c7c:	80808080 80808008 01800180 80808080     ................
   28c8c:	80808080 01800402 01010401 80808080     ................
   28c9c:	00000101                                ....

00028ca0 <g_ui8Inpen>:
   28ca0:	62272323 108703a1 e1005303 55418151     ##'b.....S..Q.AU
   28cb0:	4080c405 4140b101 31a03114 1180f100     ...@..@A.1.1....
   28cc0:	11c12191 304511e5 31300037 40007100     .!....E07.01.q.@
   28cd0:	00003130                                01..

00028cd4 <g_ui8NCEtable>:
   28cd4:	13524232 60221202 21534333 20504030     2BR..."`3CS!0@P 
   28ce4:	11514131 ffffffff ffffffff 60514131     1AQ.........1AQ`
   28cf4:	00504030 23534333 60524232 30201000     0@P.3CS#2BR`.. 0
   28d04:	61504030 01514131 42221202 60231303     0@Pa1AQ..."B..#`
   28d14:	50201000 41211101 32221202 60331303     .. P..!A.."2..3`
   28d24:	21514131 22524232 03534333 40201000     1AQ!2BR"3CS... @
   28d34:	51211101 02524232 13534333 10504030     ..!Q2BR.3CS.0@P.
   28d44:	60514131 12524232 03534333 40201000     1AQ`2BR.3CS... @
   28d54:	61211101 52221202 33231303 30201000     ..!a.."R..#3.. 0
   28d64:	61514131 02524232 53331303 ffffffff     1AQa2BR...3S....
   28d74:	ffffffff 61211101 50201000 61211101     ......!a.. P..!a
   28d84:	52221202 13534333 61504030 31211101     .."R3CS.0@Pa..!1
   28d94:	32221202 43231303                       .."2..#C

00028d9c <g_ui8nCEpins>:
   28d9c:	02070707 00080802 01020202 01010101     ................
   28dac:	01010101 01010101 01010101 01010101     ................
   28dbc:	01010101 08010101 01010008 01010101     ................
   28dcc:	00000101                                ....

00028dd0 <g_am_hal_mcuctrl_flash_size>:
   28dd0:	00004000 00008000 00010000 00020000     .@..............
   28de0:	00040000 00080000 00100000 00200000     .............. .
   28df0:	00180000 00000000 00000000 00000000     ................
	...

00028e10 <g_am_hal_mcuctrl_sram_size>:
   28e10:	00004000 00008000 00010000 00020000     .@..............
   28e20:	00040000 00080000 00100000 00060000     ................
   28e30:	000c0000 00000000 00000000 00000000     ................
	...

00028e50 <am_hal_pwrctrl_peripheral_control>:
	...
   28e5c:	00000001 00000004 00000004 00000002     ................
   28e6c:	00000008 00000008 00000004 00000008     ................
   28e7c:	00000008 00000008 00000008 00000008     ................
   28e8c:	00000010 00000010 00000010 00000020     ............ ...
   28e9c:	00000010 00000010 00000040 00000010     ........@.......
   28eac:	00000010 00000080 00000004 00000004     ................
   28ebc:	00000100 00000004 00000004 00000200     ................
   28ecc:	00000020 00000020 00000400 00000004      ... ...........
   28edc:	00000004 00000800 00000040 00000040     ........@...@...
   28eec:	00001000 00000080 00000080 00002000     ............. ..
   28efc:	00000100 00000100                       ........

00028f04 <CSWTCH.20>:
   28f04:	016e3600 00b71b00 005b8d80 002dc6c0     .6n.......[...-.

00028f14 <gAmHalCmdQReg>:
   28f14:	50004294 50004298 500042ac 500042b0     .B.P.B.P.B.P.B.P
   28f24:	500042a8 00008000 5000429c 00000001     .B.P.....B.P....
   28f34:	00000004 00000002 50005294 50005298     .........R.P.R.P
   28f44:	500052ac 500052b0 500052a8 00008000     .R.P.R.P.R.P....
   28f54:	5000529c 00000001 00000004 00000002     .R.P............
   28f64:	50006294 50006298 500062ac 500062b0     .b.P.b.P.b.P.b.P
   28f74:	500062a8 00008000 5000629c 00000001     .b.P.....b.P....
   28f84:	00000004 00000002 50007294 50007298     .........r.P.r.P
   28f94:	500072ac 500072b0 500072a8 00008000     .r.P.r.P.r.P....
   28fa4:	5000729c 00000001 00000004 00000002     .r.P............
   28fb4:	50008294 50008298 500082ac 500082b0     ...P...P...P...P
   28fc4:	500082a8 00008000 5000829c 00000001     ...P.......P....
   28fd4:	00000004 00000002 50009294 50009298     ...........P...P
   28fe4:	500092ac 500092b0 500092a8 00008000     ...P...P...P....
   28ff4:	5000929c 00000001 00000004 00000002     ...P............
   29004:	500142a0 500142a8 500142c0 500142c4     .B.P.B.P.B.P.B.P
   29014:	500142b8 00004000 500142ac 00000001     .B.P.@...B.P....
   29024:	00000004 00000008 5000c248 5000c24c     ........H..PL..P
   29034:	5000c260 5000c264 5000c25c 00008000     `..Pd..P\..P....
   29044:	5000c250 00000001 00000004 00000002     P..P............
